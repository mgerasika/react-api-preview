{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar icons = require('@ant-design/icons');\nvar icon_component = require('../icon/icon.component.js');\nvar antd = require('antd');\nvar React = require('react');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nconst DropDown = _ref => {\n  let {\n    popup,\n    children,\n    showArrowIcon = true,\n    placement,\n    className\n  } = _ref;\n  const rootRef = React.useRef(undefined);\n  const popupRef = React.useRef(undefined);\n  const [visible, setIsVisible] = React.useState(false);\n  React.useEffect(() => {\n    if (visible) {\n      window.addEventListener('click', handleDropdownClose);\n    }\n    return () => window.removeEventListener('click', handleDropdownClose);\n  }, [visible]);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const handleDropdownClose = e => {\n    const path = e.path || e.composedPath();\n    for (const item of path) {\n      if (rootRef.current === item) {\n        return;\n      }\n      if (popupRef.current === item) {\n        return;\n      }\n    }\n    setIsVisible(false);\n  };\n  return /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n    ref: rootRef,\n    className: className\n  }, /*#__PURE__*/React__default[\"default\"].createElement(antd.Dropdown, {\n    visible: visible,\n    overlay: /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n      tw: \"text-base\",\n      ref: popupRef\n    }, popup),\n    trigger: ['click'],\n    placement: placement\n  }, /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n    tw: \"cursor-pointer\",\n    onClick: () => setIsVisible(!visible)\n  }, children, \" \", showArrowIcon && /*#__PURE__*/React__default[\"default\"].createElement(icon_component.Icon, {\n    icon: icons.DownOutlined\n  }))));\n};\nexports.DropDown = DropDown;","map":{"version":3,"sources":["../../../../src/general-ui/drop-down/drop-down.component.tsx"],"names":["DropDown","popup","children","showArrowIcon","placement","className","rootRef","useRef","undefined","popupRef","visible","setIsVisible","useState","useEffect","window","addEventListener","handleDropdownClose","removeEventListener","e","path","composedPath","item","current","React","AntdDropdown","Icon","DownOutlined"],"mappings":";;;;;;;;;;;;;;;AAaO,MAAMA,QAAQ,GAAG,QAA0F;EAAA,IAAzF;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,aAAa,GAAG,IAAI;IAAEC,SAAS;IAAEC;EAAkB,CAAC;EAC5F,MAAMC,OAAO,GAAGC,KAAAA,CAAAA,MAAM,CAA6BC,SAAS,CAAC;EAC7D,MAAMC,QAAQ,GAAGF,KAAAA,CAAAA,MAAM,CAA6BC,SAAS,CAAC;EAC9D,MAAM,CAACE,OAAO,EAAEC,YAAY,CAAC,GAAGC,KAAAA,CAAAA,QAAQ,CAAC,KAAK,CAAC;EAE/CC,KAAAA,CAAAA,SAAS,CAAC,MAAM;IACZ,IAAIH,OAAO,EAAE;MACTI,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEC,mBAAmB,CAAC;IACzD;IACA,OAAO,MAAYF,MAAM,CAACG,mBAAmB,CAAC,OAAO,EAAED,mBAAmB,CAAC;EAC/E,CAAC,EAAE,CAACN,OAAO,CAAC,CAAC;;EAEb;EACA,MAAMM,mBAAmB,GAAIE,CAAM,IAAW;IAC1C,MAAMC,IAAI,GAAGD,CAAC,CAACC,IAAI,IAAID,CAAC,CAACE,YAAY,EAAE;IACvC,KAAK,MAAMC,IAAI,IAAIF,IAAI,EAAE;MACrB,IAAIb,OAAO,CAACgB,OAAO,KAAKD,IAAI,EAAE;QAC1B;MACJ;MACA,IAAIZ,QAAQ,CAACa,OAAO,KAAKD,IAAI,EAAE;QAC3B;MACJ;IACJ;IAEAV,YAAY,CAAC,KAAK,CAAC;GACtB;EACD,OAAA,aACIY,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAAAA,KAAAA,EAAAA;IAAK,GAAG,EAAEjB,OAAgD;IAAC,SAAS,EAAED;EAAU,CAAA,EAAA,aAC5EkB,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAACC,IAAAA,CAAAA,QAAY,EAAA;IACT,OAAO,EAAEd,OAAQ;IACjB,OAAO,EAAA,aACHa,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAAAA,KAAAA,EAAAA;MAAK,EAAE,EAAC,WAAW;MAAC,GAAG,EAAEd;IAAiD,CAAA,EACrER,KAAK,CAEb;IACD,OAAO,EAAE,CAAC,OAAO,CAAE;IACnB,SAAS,EAAEG;GAEX,EAAA,aAAA,cAAA,CAAA,SAAA,CAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,EAAE,EAAC,gBAAgB;IAAC,OAAO,EAAE,MAAYO,YAAY,CAAC,CAACD,OAAO;EAAE,CAAA,EAChER,QAAQ,EAAA,GAAA,EAAGC,aAAa,IAAA,aAAIoB,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAACE,cAAAA,CAAAA,IAAI,EAAA;IAAC,IAAI,EAAEC,KAAAA,CAAAA;GAAgB,CAAA,CACvD,CACK,CACb;AAEd,CAAA","sourcesContent":["import { DownOutlined } from '@ant-design/icons';\nimport { Icon } from '@common/general-ui/icon/icon.component';\nimport { Dropdown as AntdDropdown, DropDownProps } from 'antd';\nimport React, { LegacyRef, ReactNode, useEffect, useRef, useState } from 'react';\n\ninterface IProps {\n    popup: JSX.Element;\n    children: ReactNode;\n    showArrowIcon?: boolean;\n    placement?: DropDownProps['placement'];\n    className?: string;\n}\n\nexport const DropDown = ({ popup, children, showArrowIcon = true, placement, className }: IProps): JSX.Element => {\n    const rootRef = useRef<HTMLDivElement | undefined>(undefined);\n    const popupRef = useRef<HTMLDivElement | undefined>(undefined);\n    const [visible, setIsVisible] = useState(false);\n\n    useEffect(() => {\n        if (visible) {\n            window.addEventListener('click', handleDropdownClose);\n        }\n        return (): void => window.removeEventListener('click', handleDropdownClose);\n    }, [visible]);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleDropdownClose = (e: any): void => {\n        const path = e.path || e.composedPath();\n        for (const item of path) {\n            if (rootRef.current === item) {\n                return;\n            }\n            if (popupRef.current === item) {\n                return;\n            }\n        }\n\n        setIsVisible(false);\n    };\n    return (\n        <div ref={rootRef as unknown as LegacyRef<HTMLDivElement>} className={className}>\n            <AntdDropdown\n                visible={visible}\n                overlay={\n                    <div tw=\"text-base\" ref={popupRef as unknown as LegacyRef<HTMLDivElement>}>\n                        {popup}\n                    </div>\n                }\n                trigger={['click']}\n                placement={placement}\n            >\n                <div tw=\"cursor-pointer\" onClick={(): void => setIsVisible(!visible)}>\n                    {children} {showArrowIcon && <Icon icon={DownOutlined} />}\n                </div>\n            </AntdDropdown>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"script"}