{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n  return ar;\n};\nvar lists = [];\nvar MethodEmbed = /** @class */function () {\n  function MethodEmbed(context, methodName) {\n    this.context = context;\n    this.methodName = methodName;\n    this._originalMethod = context[methodName].bind(context);\n  }\n  MethodEmbed.add = function (context, methodName, methodOverride) {\n    getInstance(context, methodName).set(methodOverride);\n  };\n  MethodEmbed.remove = function (context, methodName) {\n    getInstance(context, methodName).remove();\n  };\n  MethodEmbed.prototype.set = function (methodOverride) {\n    var _this = this;\n    this.context[this.methodName] = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return methodOverride(_this._originalMethod.apply(_this, __spread(args)));\n    };\n  };\n  MethodEmbed.prototype.remove = function () {\n    this.context[this.methodName] = this._originalMethod;\n  };\n  return MethodEmbed;\n}();\nexport { MethodEmbed };\nfunction getInstance(context, methodName) {\n  var instance = lists.filter(function (h) {\n    return h.context === context && h.methodName === methodName;\n  })[0];\n  if (!instance) {\n    instance = new MethodEmbed(context, methodName);\n    lists.push(instance);\n  }\n  return instance;\n}\n/**\n * @deprecated use named import\n */\nexport default MethodEmbed;","map":{"version":3,"sources":["../../src/utils/MethodEmbed.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAWG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,IAAM,KAAK,GAAkB,EAAE;AAE/B,IAAA,WAAA,GAAA,aAAA,YAAA;EAcC,SAAA,WAAA,CAAY,OAAO,EAAE,UAAU,EAAA;IAC9B,IAAI,CAAC,OAAO,GAAG,OAAO;IACtB,IAAI,CAAC,UAAU,GAAG,UAAU;IAE5B,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;EACzD;EAbO,WAAA,CAAA,GAAG,GAAV,UAAW,OAAO,EAAE,UAAU,EAAE,cAAc,EAAA;IAC7C,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC;EACrD,CAAC;EAEM,WAAA,CAAA,MAAM,GAAb,UAAc,OAAO,EAAE,UAAU,EAAA;IAChC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,MAAM,EAAE;EAC1C,CAAC;EASM,WAAA,CAAA,SAAA,CAAA,GAAG,GAAV,UAAW,cAAc,EAAA;IAAzB,IAAA,KAAA,GAAA,IAAA;IACC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,YAAA;MAAC,IAAA,IAAA,GAAA,EAAA;WAAA,IAAA,EAAA,GAAA,CAAO,EAAP,EAAA,GAAA,SAAA,CAAA,MAAO,EAAP,EAAA,EAAO,EAAA;QAAP,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;MAChC,OAAO,cAAc,CAAC,KAAI,CAAC,eAAe,CAAA,KAAA,CAApB,KAAI,EAAA,QAAA,CAAoB,IAAI,CAAA,CAAA,CAAE;IACrD,CAAC;EACF,CAAC;EAEM,WAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,eAAe;EACrD,CAAC;EACF,OAAA,WAAC;AAAD,CAAC,EAAA;;AAED,SAAS,WAAW,CAAC,OAAO,EAAE,UAAU,EAAA;EACvC,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAC1B,UAAA,CAAC,EAAA;IAAI,OAAA,CAAC,CAAC,OAAO,KAAK,OAAO,IAAI,CAAC,CAAC,UAAU,KAAK,UAAU;EAApD,CAAoD,CACzD,CAAC,CAAC,CAAC;EAEJ,IAAI,CAAC,QAAQ,EAAE;IACd,QAAQ,GAAG,IAAI,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC;IAC/C,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;EACpB;EAED,OAAO,QAAQ;AAChB;AAEA;;AAEG;AACH,eAAe,WAAW","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar lists = [];\nvar MethodEmbed = /** @class */ (function () {\n    function MethodEmbed(context, methodName) {\n        this.context = context;\n        this.methodName = methodName;\n        this._originalMethod = context[methodName].bind(context);\n    }\n    MethodEmbed.add = function (context, methodName, methodOverride) {\n        getInstance(context, methodName).set(methodOverride);\n    };\n    MethodEmbed.remove = function (context, methodName) {\n        getInstance(context, methodName).remove();\n    };\n    MethodEmbed.prototype.set = function (methodOverride) {\n        var _this = this;\n        this.context[this.methodName] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return methodOverride(_this._originalMethod.apply(_this, __spread(args)));\n        };\n    };\n    MethodEmbed.prototype.remove = function () {\n        this.context[this.methodName] = this._originalMethod;\n    };\n    return MethodEmbed;\n}());\nexport { MethodEmbed };\nfunction getInstance(context, methodName) {\n    var instance = lists.filter(function (h) { return h.context === context && h.methodName === methodName; })[0];\n    if (!instance) {\n        instance = new MethodEmbed(context, methodName);\n        lists.push(instance);\n    }\n    return instance;\n}\n/**\n * @deprecated use named import\n */\nexport default MethodEmbed;\n//# sourceMappingURL=MethodEmbed.js.map"]},"metadata":{},"sourceType":"module"}