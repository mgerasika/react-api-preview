{"ast":null,"code":"import { StatusTag } from '@common/general-ui/tag/status-tag.component';\nimport { t } from '@common/hooks/use-t.hook';\nimport { consoleService } from '@common/services/console.service';\nimport { useStripe, PaymentRequestButtonElement } from '@stripe/react-stripe-js';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { jsx } from '@emotion/react';\nconst PaymentButton = _ref => {\n  let {\n    onTokenInit,\n    clientSecret\n  } = _ref;\n  const stripe = useStripe();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const [paymentRequest, setPaymentRequest] = useState(null);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    if (stripe) {\n      const pr = stripe.paymentRequest({\n        country: 'GB',\n        currency: 'gbp',\n        total: {\n          label: 'Subscribe',\n          amount: 0\n        },\n        requestPayerName: true,\n        requestPayerEmail: true,\n        requestPayerPhone: true,\n        requestShipping: false\n      });\n\n      // Full example https://github.com/stripe-samples/accept-a-payment/blob/main/custom-payment-flow/client/react-cra/src/GooglePay.js\n      // Check the availability of the Payment Request API.\n      pr.canMakePayment().then(result => {\n        if (result) {\n          setPaymentRequest(pr);\n        } else {\n          setMessage(t('Apple/Google Pay not detected, please check your device settings or choose Credit/Debit card'));\n        }\n      }).catch(e => consoleService.log('error =', e));\n    }\n  }, [onTokenInit, stripe]);\n  useEffect(() => {\n    if (paymentRequest && stripe) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      paymentRequest?.on('paymentmethod', async ev => {\n        stripe?.confirmCardSetup(clientSecret, {\n          payment_method: ev.paymentMethod.id\n        }).then(setupIndent => {\n          if (!setupIndent.error) {\n            onTokenInit && onTokenInit(setupIndent);\n            setMessage(t('Card successfully initialized'));\n            consoleService.log('confirmCardSetup success', setupIndent);\n            ev.complete('success');\n          } else {\n            consoleService.log('confirmCardSetup error', setupIndent);\n            ev.complete('fail');\n          }\n        }).catch(e => {\n          consoleService.log('confirmCardSetup error', e);\n          ev.complete('fail');\n        });\n      });\n    }\n  }, [clientSecret, onTokenInit, paymentRequest, stripe]);\n  const handleReady = e => {\n    consoleService.log('handleReady', e);\n  };\n  const options = useMemo(() => ({\n    paymentRequest,\n    style: {\n      paymentRequestButton: {\n        // theme: 'dark',\n        height: '42px',\n        type: 'default'\n      }\n    }\n  }), [paymentRequest]);\n  if (options && paymentRequest) {\n    return jsx(React.Fragment, null, jsx(PaymentRequestButtonElement, {\n      options: options,\n      onReady: handleReady\n    }), message && jsx(StatusTag, {\n      tw: \"mt-1\",\n      status: \"success\"\n    }, message));\n  } else {\n    if (message) {\n      return jsx(StatusTag, {\n        status: \"info\"\n      }, message);\n    }\n  }\n  return jsx(React.Fragment, null);\n};\nexport { PaymentButton };","map":{"version":3,"sources":["../../../../src/general-ui/stripe/payment-button.component.tsx"],"names":["PaymentButton","onTokenInit","clientSecret","stripe","useStripe","paymentRequest","setPaymentRequest","useState","message","setMessage","useEffect","pr","country","currency","total","label","amount","requestPayerName","requestPayerEmail","requestPayerPhone","requestShipping","canMakePayment","then","result","t","catch","e","consoleService","log","on","ev","confirmCardSetup","payment_method","paymentMethod","id","setupIndent","error","complete","handleReady","options","useMemo","style","paymentRequestButton","height","type","___EmotionJSX"],"mappings":"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","sourcesContent":["import { StatusTag } from '@common/general-ui/tag/status-tag.component';\nimport { t } from '@common/hooks/use-t.hook';\nimport { consoleService } from '@common/services/console.service';\nimport { PaymentRequestButtonElement, useStripe } from '@stripe/react-stripe-js';\nimport { SetupIntentResult, StripePaymentRequestButtonElementOptions } from '@stripe/stripe-js';\nimport React, { useEffect, useMemo, useState } from 'react';\n\ninterface IProps {\n    onTokenInit?: (token: SetupIntentResult) => void;\n    clientSecret: string;\n}\nexport const PaymentButton = ({ onTokenInit, clientSecret }: IProps): JSX.Element => {\n    const stripe = useStripe();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const [paymentRequest, setPaymentRequest] = useState<any>(null);\n    const [message, setMessage] = useState('');\n\n    useEffect(() => {\n        if (stripe) {\n            const pr = stripe.paymentRequest({\n                country: 'GB',\n                currency: 'gbp',\n                total: {\n                    label: 'Subscribe',\n                    amount: 0,\n                },\n                requestPayerName: true,\n                requestPayerEmail: true,\n                requestPayerPhone: true,\n                requestShipping: false,\n            });\n\n            // Full example https://github.com/stripe-samples/accept-a-payment/blob/main/custom-payment-flow/client/react-cra/src/GooglePay.js\n            // Check the availability of the Payment Request API.\n            pr.canMakePayment()\n                .then((result) => {\n                    if (result) {\n                        setPaymentRequest(pr);\n                    } else {\n                        setMessage(\n                            t(\n                                'Apple/Google Pay not detected, please check your device settings or choose Credit/Debit card',\n                            ),\n                        );\n                    }\n                })\n                .catch((e) => consoleService.log('error =', e));\n        }\n    }, [onTokenInit, stripe]);\n\n    useEffect(() => {\n        if (paymentRequest && stripe) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            paymentRequest?.on('paymentmethod', async (ev: any) => {\n                stripe\n                    ?.confirmCardSetup(clientSecret, {\n                        payment_method: ev.paymentMethod.id,\n                    })\n                    .then((setupIndent) => {\n                        if (!setupIndent.error) {\n                            onTokenInit && onTokenInit(setupIndent);\n                            setMessage(t('Card successfully initialized'));\n                            consoleService.log('confirmCardSetup success', setupIndent);\n                            ev.complete('success');\n                        } else {\n                            consoleService.log('confirmCardSetup error', setupIndent);\n                            ev.complete('fail');\n                        }\n                    })\n                    .catch((e) => {\n                        consoleService.log('confirmCardSetup error', e);\n                        ev.complete('fail');\n                    });\n            });\n        }\n    }, [clientSecret, onTokenInit, paymentRequest, stripe]);\n\n    const handleReady = (e: unknown): void => {\n        consoleService.log('handleReady', e);\n    };\n    const options = useMemo(\n        () =>\n            ({\n                paymentRequest,\n                style: {\n                    paymentRequestButton: {\n                        // theme: 'dark',\n                        height: '42px',\n                        type: 'default',\n                    },\n                },\n            } as unknown as StripePaymentRequestButtonElementOptions),\n        [paymentRequest],\n    );\n\n    if (options && paymentRequest) {\n        return (\n            <>\n                <PaymentRequestButtonElement options={options} onReady={handleReady} />\n\n                {message && (\n                    <StatusTag tw=\"mt-1\" status=\"success\">\n                        {message}\n                    </StatusTag>\n                )}\n            </>\n        );\n    } else {\n        if (message) {\n            return <StatusTag status=\"info\">{message}</StatusTag>;\n        }\n    }\n\n    return <></>;\n};\n"]},"metadata":{},"sourceType":"module"}