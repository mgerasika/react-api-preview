{"ast":null,"code":"import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { Buffer } from \"buffer\";\nexport var fromArrayBuffer = function fromArrayBuffer(input, offset, length) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  if (length === void 0) {\n    length = input.byteLength - offset;\n  }\n  if (!isArrayBuffer(input)) {\n    throw new TypeError(\"The \\\"input\\\" argument must be ArrayBuffer. Received type \" + typeof input + \" (\" + input + \")\");\n  }\n  return Buffer.from(input, offset, length);\n};\nexport var fromString = function fromString(input, encoding) {\n  if (typeof input !== \"string\") {\n    throw new TypeError(\"The \\\"input\\\" argument must be of type string. Received type \" + typeof input + \" (\" + input + \")\");\n  }\n  return encoding ? Buffer.from(input, encoding) : Buffer.from(input);\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,SAAS,aAAa,QAAQ,0BAA0B;AACxD,SAAS,MAAM,QAAQ,QAAQ;AAE/B,OAAO,IAAM,eAAe,GAAG,SAAlB,eAAe,CAAI,KAAkB,EAAE,MAAU,EAAE,MAA0C,EAAA;EAAtD,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;IAAA,MAAA,GAAA,CAAU;EAAA;EAAE,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;IAAA,MAAA,GAAiB,KAAK,CAAC,UAAU,GAAG,MAAM;EAAA;EACxG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;IACzB,MAAM,IAAI,SAAS,CAAC,4DAAA,GAA2D,OAAO,KAAK,GAAA,IAAA,GAAK,KAAK,GAAA,GAAG,CAAC;EAC1G;EAED,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;AAC3C,CAAC;AAID,OAAO,IAAM,UAAU,GAAG,SAAb,UAAU,CAAI,KAAa,EAAE,QAAyB,EAAA;EACjE,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAM,IAAI,SAAS,CAAC,+DAAA,GAA8D,OAAO,KAAK,GAAA,IAAA,GAAK,KAAK,GAAA,GAAG,CAAC;EAC7G;EAED,OAAO,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;AACrE,CAAC","sourcesContent":["import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { Buffer } from \"buffer\";\n\nexport const fromArrayBuffer = (input: ArrayBuffer, offset = 0, length: number = input.byteLength - offset): Buffer => {\n  if (!isArrayBuffer(input)) {\n    throw new TypeError(`The \"input\" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);\n  }\n\n  return Buffer.from(input, offset, length);\n};\n\nexport type StringEncoding = \"ascii\" | \"utf8\" | \"utf16le\" | \"ucs2\" | \"base64\" | \"latin1\" | \"binary\" | \"hex\";\n\nexport const fromString = (input: string, encoding?: StringEncoding): Buffer => {\n  if (typeof input !== \"string\") {\n    throw new TypeError(`The \"input\" argument must be of type string. Received type ${typeof input} (${input})`);\n  }\n\n  return encoding ? Buffer.from(input, encoding) : Buffer.from(input);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}