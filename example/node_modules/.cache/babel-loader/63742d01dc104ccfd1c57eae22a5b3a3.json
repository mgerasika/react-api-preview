{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartDocumentTextDetectionRequest, StartDocumentTextDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartDocumentTextDetectionCommand, serializeAws_json1_1StartDocumentTextDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of\n *          text and the words that make up a line of text.</p>\n *          <p>\n *             <code>StartDocumentTextDetection</code> can analyze text in documents that are in JPEG, PNG, and PDF format. The\n *         documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and file name\n *         of the document.\n *      </p>\n *          <p>\n *             <code>StartTextDetection</code> returns a job identifier\n *             (<code>JobId</code>) that you use to get the results of the operation. When text\n *          detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)\n *          topic that you specify in <code>NotificationChannel</code>. To get the results of the text\n *          detection operation, first check that the status value published to the Amazon SNS topic is\n *             <code>SUCCEEDED</code>. If so, call <a>GetDocumentTextDetection</a>, and\n *          pass the job identifier (<code>JobId</code>) from the initial call to\n *             <code>StartDocumentTextDetection</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\">Document Text Detection</a>.</p>\n */\nvar StartDocumentTextDetectionCommand = /** @class */function (_super) {\n  __extends(StartDocumentTextDetectionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function StartDocumentTextDetectionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  StartDocumentTextDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"TextractClient\";\n    var commandName = \"StartDocumentTextDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartDocumentTextDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartDocumentTextDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  StartDocumentTextDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartDocumentTextDetectionCommand(input, context);\n  };\n  StartDocumentTextDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartDocumentTextDetectionCommand(output, context);\n  };\n  return StartDocumentTextDetectionCommand;\n}($Command);\nexport { StartDocumentTextDetectionCommand };","map":{"version":3,"sources":["../../../commands/StartDocumentTextDetectionCommand.ts"],"names":[],"mappings":";AACA,SAAS,iCAAiC,EAAE,kCAAkC,QAAQ,oBAAoB;AAC1G,SACE,uDAAuD,EACvD,qDAAqD,QAChD,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;AAkBG;AACH,IAAA,iCAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAuD,SAAA,CAAA,iCAAA,EAAA,MAAA,CAAA;EAKrD;EACA;EAEA,SAAA,iCAAA,CAAqB,KAA6C,EAAA;IAAlE,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,iCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA2C,EAC3C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,gBAAgB;IACnC,IAAM,WAAW,GAAG,mCAAmC;IACvD,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,iCAAiC,CAAC,kBAAkB;MAC7E,wBAAwB,EAAE,kCAAkC,CAAC;KAC9D;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,iCAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAA6C,EAAE,OAAuB,EAAA;IACtF,OAAO,qDAAqD,CAAC,KAAK,EAAE,OAAO,CAAC;EAC9E,CAAC;EAEO,iCAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UACE,MAAsB,EACtB,OAAuB,EAAA;IAEvB,OAAO,uDAAuD,CAAC,MAAM,EAAE,OAAO,CAAC;EACjF,CAAC;EAIH,OAAA,iCAAC;AAAD,CAAC,CAzDsD,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { StartDocumentTextDetectionRequest, StartDocumentTextDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartDocumentTextDetectionCommand, serializeAws_json1_1StartDocumentTextDetectionCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of\n *          text and the words that make up a line of text.</p>\n *          <p>\n *             <code>StartDocumentTextDetection</code> can analyze text in documents that are in JPEG, PNG, and PDF format. The\n *         documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and file name\n *         of the document.\n *      </p>\n *          <p>\n *             <code>StartTextDetection</code> returns a job identifier\n *             (<code>JobId</code>) that you use to get the results of the operation. When text\n *          detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)\n *          topic that you specify in <code>NotificationChannel</code>. To get the results of the text\n *          detection operation, first check that the status value published to the Amazon SNS topic is\n *             <code>SUCCEEDED</code>. If so, call <a>GetDocumentTextDetection</a>, and\n *          pass the job identifier (<code>JobId</code>) from the initial call to\n *             <code>StartDocumentTextDetection</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\">Document Text Detection</a>.</p>\n */\nvar StartDocumentTextDetectionCommand = /** @class */ (function (_super) {\n    __extends(StartDocumentTextDetectionCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function StartDocumentTextDetectionCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    StartDocumentTextDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"TextractClient\";\n        var commandName = \"StartDocumentTextDetectionCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: StartDocumentTextDetectionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: StartDocumentTextDetectionResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    StartDocumentTextDetectionCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1StartDocumentTextDetectionCommand(input, context);\n    };\n    StartDocumentTextDetectionCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1StartDocumentTextDetectionCommand(output, context);\n    };\n    return StartDocumentTextDetectionCommand;\n}($Command));\nexport { StartDocumentTextDetectionCommand };\n//# sourceMappingURL=StartDocumentTextDetectionCommand.js.map"]},"metadata":{},"sourceType":"module"}