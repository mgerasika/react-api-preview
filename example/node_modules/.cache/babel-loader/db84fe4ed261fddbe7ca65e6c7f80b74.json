{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');\nvar useField_hook = require('../../hooks/use-field.hook.js');\nvar React = require('react');\nvar select_component = require('./select.component.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nfunction FormSelect(props) {\n  const {\n    name,\n    onBlur,\n    onChange,\n    getCustomErrorMessage\n  } = props;\n  const {\n    setFieldValue,\n    setFieldTouched,\n    value,\n    errorMessage\n  } = useField_hook.useField({\n    ...props,\n    getCustomErrorMessage\n  });\n  const handleChange = React.useCallback(e => {\n    setFieldValue(e.value);\n    onChange && onChange(e);\n    setFieldTouched();\n  }, [onChange, setFieldValue, setFieldTouched]);\n  const handleBlur = React.useCallback(e => {\n    const newEv = {\n      ...e,\n      target: {\n        ...e.target,\n        name,\n        value\n      }\n    };\n    setFieldValue(value);\n    onBlur && onBlur(newEv);\n    setFieldTouched();\n  }, [name, value, onBlur, setFieldValue, setFieldTouched]);\n  return /*#__PURE__*/React__default[\"default\"].createElement(select_component.Select, _rollupPluginBabelHelpers[\"extends\"]({\n    errorMessage: errorMessage\n  }, props, {\n    onChange: handleChange,\n    onBlur: handleBlur,\n    name: name,\n    value: value,\n    readOnly: props.readOnly\n  }));\n}\nexports.FormSelect = FormSelect;","map":{"version":3,"sources":["../../../../src/general-ui/select/form-select.component.tsx"],"names":["FormSelect","props","name","onBlur","onChange","getCustomErrorMessage","setFieldValue","setFieldTouched","value","errorMessage","useField","handleChange","useCallback","e","handleBlur","newEv","target","React","Select","readOnly"],"mappings":";;;;;;;;;;;;;;;AAMO,SAASA,UAAU,CAAcC,KAAoC,EAAe;EACvF,MAAM;IAAEC,IAAI;IAAEC,MAAM;IAAEC,QAAQ;IAAEC;EAAsB,CAAC,GAAGJ,KAAK;EAC/D,MAAM;IAAEK,aAAa;IAAEC,eAAe;IAAEC,KAAK;IAAEC;GAAc,GAAGC,aAAAA,CAAAA,QAAQ,CAAS;IAC7E,GAAGT,KAAK;IACRI;EACJ,CAAC,CAAC;EAEF,MAAMM,YAAY,GAAGC,KAAAA,CAAAA,WAAW,CAC3BC,CAAC,IAAK;IACHP,aAAa,CAACO,CAAC,CAACL,KAAK,CAAC;IACtBJ,QAAQ,IAAIA,QAAQ,CAACS,CAAC,CAAC;IACvBN,eAAe,EAAE;GACpB,EACD,CAACH,QAAQ,EAAEE,aAAa,EAAEC,eAAe,CAAC,CAC7C;EAED,MAAMO,UAAU,GAAGF,KAAAA,CAAAA,WAAW,CACzBC,CAAqC,IAAK;IACvC,MAAME,KAAK,GAAG;MAAE,GAAGF,CAAC;MAAEG,MAAM,EAAE;QAAE,GAAGH,CAAC,CAACG,MAAM;QAAEd,IAAI;QAAEM;MAAM;KAAG;IAC5DF,aAAa,CAACE,KAAK,CAAC;IACpBL,MAAM,IAAIA,MAAM,CAACY,KAAK,CAAkD;IACxER,eAAe,EAAE;EACrB,CAAC,EACD,CAACL,IAAI,EAAEM,KAAK,EAAEL,MAAM,EAAEG,aAAa,EAAEC,eAAe,CAAC,CACxD;EAED,OAAA,aACIU,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAACC,gBAAAA,CAAAA,MAAM,EAAA,yBAAA,CAAA,SAAA,CAAA,CAAA;IACH,YAAY,EAAET;EAAa,CAAA,EACvBR,KAAK,EAAA;IACT,QAAQ,EAAEU,YAAa;IACvB,MAAM,EAAEG,UAAW;IACnB,IAAI,EAAEZ,IAAe;IACrB,KAAK,EAAEM,KAAM;IACb,QAAQ,EAAEP,KAAK,CAACkB;GAClB,CAAA,CAAA;AAEV","sourcesContent":["import { useField } from '@common/hooks/use-field.hook';\nimport React, { useCallback } from 'react';\nimport { ISelectChangeHandler, ISelectProps, Select } from './select.component';\n\ntype IFormSelectProps<TFormValues> = Omit<ISelectProps<keyof TFormValues>, 'value' | 'defaultValue'>;\n\nexport function FormSelect<TFormValues>(props: IFormSelectProps<TFormValues>): JSX.Element {\n    const { name, onBlur, onChange, getCustomErrorMessage } = props;\n    const { setFieldValue, setFieldTouched, value, errorMessage } = useField<string>({\n        ...props,\n        getCustomErrorMessage,\n    });\n\n    const handleChange = useCallback<ISelectChangeHandler>(\n        (e) => {\n            setFieldValue(e.value);\n            onChange && onChange(e);\n            setFieldTouched();\n        },\n        [onChange, setFieldValue, setFieldTouched],\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            const newEv = { ...e, target: { ...e.target, name, value } };\n            setFieldValue(value);\n            onBlur && onBlur(newEv as unknown as React.FocusEvent<HTMLInputElement>);\n            setFieldTouched();\n        },\n        [name, value, onBlur, setFieldValue, setFieldTouched],\n    );\n\n    return (\n        <Select\n            errorMessage={errorMessage}\n            {...props}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            name={name as string}\n            value={value}\n            readOnly={props.readOnly}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"script"}