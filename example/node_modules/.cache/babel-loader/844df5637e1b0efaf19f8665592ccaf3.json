{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n  return ar;\n};\nimport API, { GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, Hub, BackgroundProcessManager } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ProcessName } from '../../types';\nimport { buildSubscriptionGraphQLOperation, getAuthorizationRules, getModelAuthModes, getUserGroupsFromToken, TransformerMutationType, getTokenForCustomAuth } from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate, USER_AGENT_SUFFIX_DATASTORE } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\nvar logger = new Logger('DataStore');\nexport var CONTROL_MSG;\n(function (CONTROL_MSG) {\n  CONTROL_MSG[\"CONNECTED\"] = \"CONNECTED\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\nexport var USER_CREDENTIALS;\n(function (USER_CREDENTIALS) {\n  USER_CREDENTIALS[USER_CREDENTIALS[\"none\"] = 0] = \"none\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"unauth\"] = 1] = \"unauth\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"auth\"] = 2] = \"auth\";\n})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));\nvar SubscriptionProcessor = /** @class */function () {\n  function SubscriptionProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n    if (amplifyContext === void 0) {\n      amplifyContext = {\n        Auth: Auth,\n        API: API,\n        Cache: Cache\n      };\n    }\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.buffer = [];\n    this.runningProcesses = new BackgroundProcessManager();\n  }\n  SubscriptionProcessor.prototype.buildSubscription = function (namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    var aws_appsync_authenticationType = this.amplifyConfig.aws_appsync_authenticationType;\n    var _a = this.getAuthorizationInfo(model, userCredentials, aws_appsync_authenticationType, cognitoTokenPayload, oidcTokenPayload, authMode) || {},\n      isOwner = _a.isOwner,\n      ownerField = _a.ownerField,\n      ownerValue = _a.ownerValue;\n    var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField), 3),\n      opType = _b[0],\n      opName = _b[1],\n      query = _b[2];\n    return {\n      authMode: authMode,\n      opType: opType,\n      opName: opName,\n      query: query,\n      isOwner: isOwner,\n      ownerField: ownerField,\n      ownerValue: ownerValue\n    };\n  };\n  SubscriptionProcessor.prototype.getAuthorizationInfo = function (model, userCredentials, defaultAuthType, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    if (cognitoTokenPayload === void 0) {\n      cognitoTokenPayload = {};\n    }\n    if (oidcTokenPayload === void 0) {\n      oidcTokenPayload = {};\n    }\n    var rules = getAuthorizationRules(model);\n    // Return null if user doesn't have proper credentials for private API with IAM auth\n    var iamPrivateAuth = authMode === GRAPHQL_AUTH_MODE.AWS_IAM && rules.find(function (rule) {\n      return rule.authStrategy === 'private' && rule.provider === 'iam';\n    });\n    if (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n      return null;\n    }\n    // Group auth should take precedence over owner auth, so we are checking\n    // if rule(s) have group authorization as well as if either the Cognito or\n    // OIDC token has a groupClaim. If so, we are returning auth info before\n    // any further owner-based auth checks.\n    var groupAuthRules = rules.filter(function (rule) {\n      return rule.authStrategy === 'groups' && ['userPools', 'oidc'].includes(rule.provider);\n    });\n    var validGroup = (authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS || authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) && groupAuthRules.find(function (groupAuthRule) {\n      // validate token against groupClaim\n      var cognitoUserGroups = getUserGroupsFromToken(cognitoTokenPayload, groupAuthRule);\n      var oidcUserGroups = getUserGroupsFromToken(oidcTokenPayload, groupAuthRule);\n      return __spread(cognitoUserGroups, oidcUserGroups).find(function (userGroup) {\n        return groupAuthRule.groups.find(function (group) {\n          return group === userGroup;\n        });\n      });\n    });\n    if (validGroup) {\n      return {\n        authMode: authMode,\n        isOwner: false\n      };\n    }\n    // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the Cognito token via the\n    // identityClaim from the auth rule.\n    var cognitoOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'userPools';\n    }) : [];\n    var ownerAuthInfo;\n    cognitoOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    }\n    // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the OIDC token via the\n    // identityClaim from the auth rule.\n    var oidcOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'oidc';\n    }) : [];\n    oidcOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    }\n    // Fallback: return authMode or default auth type\n    return {\n      authMode: authMode || defaultAuthType,\n      isOwner: false\n    };\n  };\n  SubscriptionProcessor.prototype.hubQueryCompletionListener = function (completed, capsule) {\n    var event = capsule.payload.event;\n    if (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n      completed();\n    }\n  };\n  SubscriptionProcessor.prototype.start = function () {\n    var _this = this;\n    var ctlObservable = new Observable(function (observer) {\n      var promises = [];\n      // Creating subs for each model/operation combo so they can be unsubscribed\n      // independently, since the auth retry behavior is asynchronous.\n      var subscriptions = {};\n      var cognitoTokenPayload, oidcTokenPayload;\n      var userCredentials = USER_CREDENTIALS.none;\n      _this.runningProcesses.add(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var credentials, err_1, session, err_2, _a, aws_cognito_region, AuthConfig, token, federatedInfo, currentUser, payload, err_3;\n          var _this = this;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _b.trys.push([0, 2,, 3]);\n                return [4 /*yield*/, this.amplifyContext.Auth.currentCredentials()];\n              case 1:\n                credentials = _b.sent();\n                userCredentials = credentials.authenticated ? USER_CREDENTIALS.auth : USER_CREDENTIALS.unauth;\n                return [3 /*break*/, 3];\n              case 2:\n                err_1 = _b.sent();\n                return [3 /*break*/, 3];\n              case 3:\n                _b.trys.push([3, 5,, 6]);\n                return [4 /*yield*/, this.amplifyContext.Auth.currentSession()];\n              case 4:\n                session = _b.sent();\n                cognitoTokenPayload = session.getIdToken().decodePayload();\n                return [3 /*break*/, 6];\n              case 5:\n                err_2 = _b.sent();\n                return [3 /*break*/, 6];\n              case 6:\n                _b.trys.push([6, 11,, 12]);\n                _a = this.amplifyConfig, aws_cognito_region = _a.aws_cognito_region, AuthConfig = _a.Auth;\n                if (!aws_cognito_region || AuthConfig && !AuthConfig.region) {\n                  throw 'Auth is not configured';\n                }\n                token = void 0;\n                return [4 /*yield*/, this.amplifyContext.Cache.getItem('federatedInfo')];\n              case 7:\n                federatedInfo = _b.sent();\n                if (!federatedInfo) return [3 /*break*/, 8];\n                token = federatedInfo.token;\n                return [3 /*break*/, 10];\n              case 8:\n                return [4 /*yield*/, this.amplifyContext.Auth.currentAuthenticatedUser()];\n              case 9:\n                currentUser = _b.sent();\n                if (currentUser) {\n                  token = currentUser.token;\n                }\n                _b.label = 10;\n              case 10:\n                if (token) {\n                  payload = token.split('.')[1];\n                  oidcTokenPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n                }\n                return [3 /*break*/, 12];\n              case 11:\n                err_3 = _b.sent();\n                logger.debug('error getting OIDC JWT', err_3);\n                return [3 /*break*/, 12];\n              case 12:\n                Object.values(this.schema.namespaces).forEach(function (namespace) {\n                  Object.values(namespace.models).filter(function (_a) {\n                    var syncable = _a.syncable;\n                    return syncable;\n                  }).forEach(function (modelDefinition) {\n                    return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var modelAuthModes, readAuthModes, operations, operationAuthModeAttempts, _authModeRetry;\n                        var _a, _b, _c;\n                        var _this = this;\n                        return __generator(this, function (_d) {\n                          switch (_d.label) {\n                            case 0:\n                              return [4 /*yield*/, getModelAuthModes({\n                                authModeStrategy: this.authModeStrategy,\n                                defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n                                modelName: modelDefinition.name,\n                                schema: this.schema\n                              })];\n                            case 1:\n                              modelAuthModes = _d.sent();\n                              readAuthModes = modelAuthModes.READ;\n                              subscriptions = __assign(__assign({}, subscriptions), (_a = {}, _a[modelDefinition.name] = (_b = {}, _b[TransformerMutationType.CREATE] = [], _b[TransformerMutationType.UPDATE] = [], _b[TransformerMutationType.DELETE] = [], _b), _a));\n                              operations = [TransformerMutationType.CREATE, TransformerMutationType.UPDATE, TransformerMutationType.DELETE];\n                              operationAuthModeAttempts = (_c = {}, _c[TransformerMutationType.CREATE] = 0, _c[TransformerMutationType.UPDATE] = 0, _c[TransformerMutationType.DELETE] = 0, _c);\n                              _authModeRetry = function authModeRetry(operation) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  var _a, transformerMutationType, opName, query, isOwner, ownerField, ownerValue, authMode, authToken, variables, userAgentSuffix, queryObservable, subscriptionReadyCallback;\n                                  var _this = this;\n                                  return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                      case 0:\n                                        _a = this.buildSubscription(namespace, modelDefinition, operation, userCredentials, cognitoTokenPayload, oidcTokenPayload, readAuthModes[operationAuthModeAttempts[operation]]), transformerMutationType = _a.opType, opName = _a.opName, query = _a.query, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue, authMode = _a.authMode;\n                                        return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                                      case 1:\n                                        authToken = _b.sent();\n                                        variables = {};\n                                        if (isOwner) {\n                                          if (!ownerValue) {\n                                            observer.error('Owner field required, sign in is needed in order to perform this operation');\n                                            return [2 /*return*/];\n                                          }\n\n                                          variables[ownerField] = ownerValue;\n                                        }\n                                        logger.debug(\"Attempting \" + operation + \" subscription with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                        userAgentSuffix = USER_AGENT_SUFFIX_DATASTORE;\n                                        queryObservable = this.amplifyContext.API.graphql(__assign(__assign({\n                                          query: query,\n                                          variables: variables\n                                        }, {\n                                          authMode: authMode\n                                        }), {\n                                          authToken: authToken,\n                                          userAgentSuffix: userAgentSuffix\n                                        }));\n                                        // TODO: consider onTerminate.then(() => API.cancel(...))\n                                        subscriptions[modelDefinition.name][transformerMutationType].push(queryObservable.map(function (_a) {\n                                          var value = _a.value;\n                                          return value;\n                                        }).subscribe({\n                                          next: function next(_a) {\n                                            var data = _a.data,\n                                              errors = _a.errors;\n                                            if (Array.isArray(errors) && errors.length > 0) {\n                                              var messages = errors.map(function (_a) {\n                                                var message = _a.message;\n                                                return message;\n                                              });\n                                              logger.warn(\"Skipping incoming subscription. Messages: \" + messages.join('\\n'));\n                                              _this.drainBuffer();\n                                              return;\n                                            }\n                                            var predicatesGroup = ModelPredicateCreator.getPredicates(_this.syncPredicates.get(modelDefinition), false);\n                                            var _b = data,\n                                              _c = opName,\n                                              record = _b[_c];\n                                            // checking incoming subscription against syncPredicate.\n                                            // once AppSync implements filters on subscriptions, we'll be\n                                            // able to set these when establishing the subscription instead.\n                                            // Until then, we'll need to filter inbound\n                                            if (_this.passesPredicateValidation(record, predicatesGroup)) {\n                                              _this.pushToBuffer(transformerMutationType, modelDefinition, record);\n                                            }\n                                            _this.drainBuffer();\n                                          },\n                                          error: function error(subscriptionError) {\n                                            return __awaiter(_this, void 0, void 0, function () {\n                                              var _a, _b, _c, _d, message, e_1;\n                                              return __generator(this, function (_e) {\n                                                switch (_e.label) {\n                                                  case 0:\n                                                    _a = subscriptionError.error, _b = __read((_a === void 0 ? {\n                                                      errors: []\n                                                    } : _a).errors, 1), _c = _b[0], _d = (_c === void 0 ? {} : _c).message, message = _d === void 0 ? '' : _d;\n                                                    if (message.includes(PUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR) || message.includes(PUBSUB_CONTROL_MSG.CONNECTION_FAILED)) {\n                                                      // Unsubscribe and clear subscription array for model/operation\n                                                      subscriptions[modelDefinition.name][transformerMutationType].forEach(function (subscription) {\n                                                        return subscription.unsubscribe();\n                                                      });\n                                                      subscriptions[modelDefinition.name][transformerMutationType] = [];\n                                                      operationAuthModeAttempts[operation]++;\n                                                      if (operationAuthModeAttempts[operation] >= readAuthModes.length) {\n                                                        // last auth mode retry. Continue with error\n                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1]);\n                                                      } else {\n                                                        // retry with different auth mode. Do not trigger\n                                                        // observer error or error handler\n                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1] + \". Retrying with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                                        _authModeRetry(operation);\n                                                        return [2 /*return*/];\n                                                      }\n                                                    }\n\n                                                    logger.warn('subscriptionError', message);\n                                                    _e.label = 1;\n                                                  case 1:\n                                                    _e.trys.push([1, 3,, 4]);\n                                                    return [4 /*yield*/, this.errorHandler({\n                                                      recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                      localModel: null,\n                                                      message: message,\n                                                      model: modelDefinition.name,\n                                                      operation: operation,\n                                                      errorType: getSubscriptionErrorType(subscriptionError),\n                                                      process: ProcessName.subscribe,\n                                                      remoteModel: null,\n                                                      cause: subscriptionError\n                                                    })];\n                                                  case 2:\n                                                    _e.sent();\n                                                    return [3 /*break*/, 4];\n                                                  case 3:\n                                                    e_1 = _e.sent();\n                                                    logger.error('Subscription error handler failed with:', e_1);\n                                                    return [3 /*break*/, 4];\n                                                  case 4:\n                                                    if (typeof subscriptionReadyCallback === 'function') {\n                                                      subscriptionReadyCallback();\n                                                    }\n                                                    if (message.includes('\"errorType\":\"Unauthorized\"') || message.includes('\"errorType\":\"OperationDisabled\"')) {\n                                                      return [2 /*return*/];\n                                                    }\n\n                                                    observer.error(message);\n                                                    return [2 /*return*/];\n                                                }\n                                              });\n                                            });\n                                          }\n                                        }));\n\n                                        promises.push(function () {\n                                          return __awaiter(_this, void 0, void 0, function () {\n                                            var boundFunction;\n                                            var _this = this;\n                                            return __generator(this, function (_a) {\n                                              switch (_a.label) {\n                                                case 0:\n                                                  return [4 /*yield*/, new Promise(function (res) {\n                                                    subscriptionReadyCallback = res;\n                                                    boundFunction = _this.hubQueryCompletionListener.bind(_this, res);\n                                                    Hub.listen('api', boundFunction);\n                                                  })];\n                                                case 1:\n                                                  _a.sent();\n                                                  Hub.remove('api', boundFunction);\n                                                  return [2 /*return*/];\n                                              }\n                                            });\n                                          });\n                                        }());\n\n                                        return [2 /*return*/];\n                                    }\n                                  });\n                                });\n                              };\n\n                              operations.forEach(function (op) {\n                                return _authModeRetry(op);\n                              });\n                              return [2 /*return*/];\n                          }\n                        });\n                      });\n                    });\n                  });\n                });\n\n                this.runningProcesses.isOpen && this.runningProcesses.add(function () {\n                  return Promise.all(promises).then(function () {\n                    observer.next(CONTROL_MSG.CONNECTED);\n                  });\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, 'subscription processor new subscriber');\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            Object.keys(subscriptions).forEach(function (modelName) {\n              subscriptions[modelName][TransformerMutationType.CREATE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n              subscriptions[modelName][TransformerMutationType.UPDATE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n              subscriptions[modelName][TransformerMutationType.DELETE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n            });\n            return [2 /*return*/];\n          });\n        });\n      });\n    });\n\n    var dataObservable = new Observable(function (observer) {\n      _this.dataObserver = observer;\n      _this.drainBuffer();\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            this.dataObserver = null;\n            return [2 /*return*/];\n          });\n        });\n      });\n    });\n\n    return [ctlObservable, dataObservable];\n  };\n  SubscriptionProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  SubscriptionProcessor.prototype.passesPredicateValidation = function (record, predicatesGroup) {\n    if (!predicatesGroup) {\n      return true;\n    }\n    var predicates = predicatesGroup.predicates,\n      type = predicatesGroup.type;\n    return validatePredicate(record, type, predicates);\n  };\n  SubscriptionProcessor.prototype.pushToBuffer = function (transformerMutationType, modelDefinition, data) {\n    this.buffer.push([transformerMutationType, modelDefinition, data]);\n  };\n  SubscriptionProcessor.prototype.drainBuffer = function () {\n    var _this = this;\n    if (this.dataObserver) {\n      this.buffer.forEach(function (data) {\n        return _this.dataObserver.next(data);\n      });\n      this.buffer = [];\n    }\n  };\n  return SubscriptionProcessor;\n}();\nexport { SubscriptionProcessor };","map":{"version":3,"sources":["../../../src/sync/processors/subscription.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport API, { GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, Hub, BackgroundProcessManager, } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ProcessName, } from '../../types';\nimport { buildSubscriptionGraphQLOperation, getAuthorizationRules, getModelAuthModes, getUserGroupsFromToken, TransformerMutationType, getTokenForCustomAuth, } from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate, USER_AGENT_SUFFIX_DATASTORE } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\nvar logger = new Logger('DataStore');\nexport var CONTROL_MSG;\n(function (CONTROL_MSG) {\n    CONTROL_MSG[\"CONNECTED\"] = \"CONNECTED\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\nexport var USER_CREDENTIALS;\n(function (USER_CREDENTIALS) {\n    USER_CREDENTIALS[USER_CREDENTIALS[\"none\"] = 0] = \"none\";\n    USER_CREDENTIALS[USER_CREDENTIALS[\"unauth\"] = 1] = \"unauth\";\n    USER_CREDENTIALS[USER_CREDENTIALS[\"auth\"] = 2] = \"auth\";\n})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));\nvar SubscriptionProcessor = /** @class */ (function () {\n    function SubscriptionProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {\n        if (amplifyConfig === void 0) { amplifyConfig = {}; }\n        if (amplifyContext === void 0) { amplifyContext = { Auth: Auth, API: API, Cache: Cache }; }\n        this.schema = schema;\n        this.syncPredicates = syncPredicates;\n        this.amplifyConfig = amplifyConfig;\n        this.authModeStrategy = authModeStrategy;\n        this.errorHandler = errorHandler;\n        this.amplifyContext = amplifyContext;\n        this.typeQuery = new WeakMap();\n        this.buffer = [];\n        this.runningProcesses = new BackgroundProcessManager();\n    }\n    SubscriptionProcessor.prototype.buildSubscription = function (namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload, authMode) {\n        var aws_appsync_authenticationType = this.amplifyConfig.aws_appsync_authenticationType;\n        var _a = this.getAuthorizationInfo(model, userCredentials, aws_appsync_authenticationType, cognitoTokenPayload, oidcTokenPayload, authMode) || {}, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue;\n        var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField), 3), opType = _b[0], opName = _b[1], query = _b[2];\n        return { authMode: authMode, opType: opType, opName: opName, query: query, isOwner: isOwner, ownerField: ownerField, ownerValue: ownerValue };\n    };\n    SubscriptionProcessor.prototype.getAuthorizationInfo = function (model, userCredentials, defaultAuthType, cognitoTokenPayload, oidcTokenPayload, authMode) {\n        if (cognitoTokenPayload === void 0) { cognitoTokenPayload = {}; }\n        if (oidcTokenPayload === void 0) { oidcTokenPayload = {}; }\n        var rules = getAuthorizationRules(model);\n        // Return null if user doesn't have proper credentials for private API with IAM auth\n        var iamPrivateAuth = authMode === GRAPHQL_AUTH_MODE.AWS_IAM &&\n            rules.find(function (rule) { return rule.authStrategy === 'private' && rule.provider === 'iam'; });\n        if (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n            return null;\n        }\n        // Group auth should take precedence over owner auth, so we are checking\n        // if rule(s) have group authorization as well as if either the Cognito or\n        // OIDC token has a groupClaim. If so, we are returning auth info before\n        // any further owner-based auth checks.\n        var groupAuthRules = rules.filter(function (rule) {\n            return rule.authStrategy === 'groups' &&\n                ['userPools', 'oidc'].includes(rule.provider);\n        });\n        var validGroup = (authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ||\n            authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) &&\n            groupAuthRules.find(function (groupAuthRule) {\n                // validate token against groupClaim\n                var cognitoUserGroups = getUserGroupsFromToken(cognitoTokenPayload, groupAuthRule);\n                var oidcUserGroups = getUserGroupsFromToken(oidcTokenPayload, groupAuthRule);\n                return __spread(cognitoUserGroups, oidcUserGroups).find(function (userGroup) {\n                    return groupAuthRule.groups.find(function (group) { return group === userGroup; });\n                });\n            });\n        if (validGroup) {\n            return {\n                authMode: authMode,\n                isOwner: false,\n            };\n        }\n        // Owner auth needs additional values to be returned in order to create the subscription with\n        // the correct parameters so we are getting the owner value from the Cognito token via the\n        // identityClaim from the auth rule.\n        var cognitoOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS\n            ? rules.filter(function (rule) {\n                return rule.authStrategy === 'owner' && rule.provider === 'userPools';\n            })\n            : [];\n        var ownerAuthInfo;\n        cognitoOwnerAuthRules.forEach(function (ownerAuthRule) {\n            var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n            if (ownerValue) {\n                ownerAuthInfo = {\n                    authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n                    isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n                    ownerField: ownerAuthRule.ownerField,\n                    ownerValue: ownerValue,\n                };\n            }\n        });\n        if (ownerAuthInfo) {\n            return ownerAuthInfo;\n        }\n        // Owner auth needs additional values to be returned in order to create the subscription with\n        // the correct parameters so we are getting the owner value from the OIDC token via the\n        // identityClaim from the auth rule.\n        var oidcOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT\n            ? rules.filter(function (rule) { return rule.authStrategy === 'owner' && rule.provider === 'oidc'; })\n            : [];\n        oidcOwnerAuthRules.forEach(function (ownerAuthRule) {\n            var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n            if (ownerValue) {\n                ownerAuthInfo = {\n                    authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n                    isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n                    ownerField: ownerAuthRule.ownerField,\n                    ownerValue: ownerValue,\n                };\n            }\n        });\n        if (ownerAuthInfo) {\n            return ownerAuthInfo;\n        }\n        // Fallback: return authMode or default auth type\n        return {\n            authMode: authMode || defaultAuthType,\n            isOwner: false,\n        };\n    };\n    SubscriptionProcessor.prototype.hubQueryCompletionListener = function (completed, capsule) {\n        var event = capsule.payload.event;\n        if (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n            completed();\n        }\n    };\n    SubscriptionProcessor.prototype.start = function () {\n        var _this = this;\n        var ctlObservable = new Observable(function (observer) {\n            var promises = [];\n            // Creating subs for each model/operation combo so they can be unsubscribed\n            // independently, since the auth retry behavior is asynchronous.\n            var subscriptions = {};\n            var cognitoTokenPayload, oidcTokenPayload;\n            var userCredentials = USER_CREDENTIALS.none;\n            _this.runningProcesses.add(function () { return __awaiter(_this, void 0, void 0, function () {\n                var credentials, err_1, session, err_2, _a, aws_cognito_region, AuthConfig, token, federatedInfo, currentUser, payload, err_3;\n                var _this = this;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _b.trys.push([0, 2, , 3]);\n                            return [4 /*yield*/, this.amplifyContext.Auth.currentCredentials()];\n                        case 1:\n                            credentials = _b.sent();\n                            userCredentials = credentials.authenticated\n                                ? USER_CREDENTIALS.auth\n                                : USER_CREDENTIALS.unauth;\n                            return [3 /*break*/, 3];\n                        case 2:\n                            err_1 = _b.sent();\n                            return [3 /*break*/, 3];\n                        case 3:\n                            _b.trys.push([3, 5, , 6]);\n                            return [4 /*yield*/, this.amplifyContext.Auth.currentSession()];\n                        case 4:\n                            session = _b.sent();\n                            cognitoTokenPayload = session.getIdToken().decodePayload();\n                            return [3 /*break*/, 6];\n                        case 5:\n                            err_2 = _b.sent();\n                            return [3 /*break*/, 6];\n                        case 6:\n                            _b.trys.push([6, 11, , 12]);\n                            _a = this.amplifyConfig, aws_cognito_region = _a.aws_cognito_region, AuthConfig = _a.Auth;\n                            if (!aws_cognito_region || (AuthConfig && !AuthConfig.region)) {\n                                throw 'Auth is not configured';\n                            }\n                            token = void 0;\n                            return [4 /*yield*/, this.amplifyContext.Cache.getItem('federatedInfo')];\n                        case 7:\n                            federatedInfo = _b.sent();\n                            if (!federatedInfo) return [3 /*break*/, 8];\n                            token = federatedInfo.token;\n                            return [3 /*break*/, 10];\n                        case 8: return [4 /*yield*/, this.amplifyContext.Auth.currentAuthenticatedUser()];\n                        case 9:\n                            currentUser = _b.sent();\n                            if (currentUser) {\n                                token = currentUser.token;\n                            }\n                            _b.label = 10;\n                        case 10:\n                            if (token) {\n                                payload = token.split('.')[1];\n                                oidcTokenPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n                            }\n                            return [3 /*break*/, 12];\n                        case 11:\n                            err_3 = _b.sent();\n                            logger.debug('error getting OIDC JWT', err_3);\n                            return [3 /*break*/, 12];\n                        case 12:\n                            Object.values(this.schema.namespaces).forEach(function (namespace) {\n                                Object.values(namespace.models)\n                                    .filter(function (_a) {\n                                    var syncable = _a.syncable;\n                                    return syncable;\n                                })\n                                    .forEach(function (modelDefinition) {\n                                    return _this.runningProcesses.isOpen &&\n                                        _this.runningProcesses.add(function () { return __awaiter(_this, void 0, void 0, function () {\n                                            var modelAuthModes, readAuthModes, operations, operationAuthModeAttempts, authModeRetry;\n                                            var _a, _b, _c;\n                                            var _this = this;\n                                            return __generator(this, function (_d) {\n                                                switch (_d.label) {\n                                                    case 0: return [4 /*yield*/, getModelAuthModes({\n                                                            authModeStrategy: this.authModeStrategy,\n                                                            defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n                                                            modelName: modelDefinition.name,\n                                                            schema: this.schema,\n                                                        })];\n                                                    case 1:\n                                                        modelAuthModes = _d.sent();\n                                                        readAuthModes = modelAuthModes.READ;\n                                                        subscriptions = __assign(__assign({}, subscriptions), (_a = {}, _a[modelDefinition.name] = (_b = {},\n                                                            _b[TransformerMutationType.CREATE] = [],\n                                                            _b[TransformerMutationType.UPDATE] = [],\n                                                            _b[TransformerMutationType.DELETE] = [],\n                                                            _b), _a));\n                                                        operations = [\n                                                            TransformerMutationType.CREATE,\n                                                            TransformerMutationType.UPDATE,\n                                                            TransformerMutationType.DELETE,\n                                                        ];\n                                                        operationAuthModeAttempts = (_c = {},\n                                                            _c[TransformerMutationType.CREATE] = 0,\n                                                            _c[TransformerMutationType.UPDATE] = 0,\n                                                            _c[TransformerMutationType.DELETE] = 0,\n                                                            _c);\n                                                        authModeRetry = function (operation) { return __awaiter(_this, void 0, void 0, function () {\n                                                            var _a, transformerMutationType, opName, query, isOwner, ownerField, ownerValue, authMode, authToken, variables, userAgentSuffix, queryObservable, subscriptionReadyCallback;\n                                                            var _this = this;\n                                                            return __generator(this, function (_b) {\n                                                                switch (_b.label) {\n                                                                    case 0:\n                                                                        _a = this.buildSubscription(namespace, modelDefinition, operation, userCredentials, cognitoTokenPayload, oidcTokenPayload, readAuthModes[operationAuthModeAttempts[operation]]), transformerMutationType = _a.opType, opName = _a.opName, query = _a.query, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue, authMode = _a.authMode;\n                                                                        return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                                                                    case 1:\n                                                                        authToken = _b.sent();\n                                                                        variables = {};\n                                                                        if (isOwner) {\n                                                                            if (!ownerValue) {\n                                                                                observer.error('Owner field required, sign in is needed in order to perform this operation');\n                                                                                return [2 /*return*/];\n                                                                            }\n                                                                            variables[ownerField] = ownerValue;\n                                                                        }\n                                                                        logger.debug(\"Attempting \" + operation + \" subscription with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                                                        userAgentSuffix = USER_AGENT_SUFFIX_DATASTORE;\n                                                                        queryObservable = this.amplifyContext.API.graphql(__assign(__assign({ query: query,\n                                                                            variables: variables }, { authMode: authMode }), { authToken: authToken,\n                                                                            userAgentSuffix: userAgentSuffix }));\n                                                                        // TODO: consider onTerminate.then(() => API.cancel(...))\n                                                                        subscriptions[modelDefinition.name][transformerMutationType].push(queryObservable\n                                                                            .map(function (_a) {\n                                                                            var value = _a.value;\n                                                                            return value;\n                                                                        })\n                                                                            .subscribe({\n                                                                            next: function (_a) {\n                                                                                var data = _a.data, errors = _a.errors;\n                                                                                if (Array.isArray(errors) && errors.length > 0) {\n                                                                                    var messages = errors.map(function (_a) {\n                                                                                        var message = _a.message;\n                                                                                        return message;\n                                                                                    });\n                                                                                    logger.warn(\"Skipping incoming subscription. Messages: \" + messages.join('\\n'));\n                                                                                    _this.drainBuffer();\n                                                                                    return;\n                                                                                }\n                                                                                var predicatesGroup = ModelPredicateCreator.getPredicates(_this.syncPredicates.get(modelDefinition), false);\n                                                                                var _b = data, _c = opName, record = _b[_c];\n                                                                                // checking incoming subscription against syncPredicate.\n                                                                                // once AppSync implements filters on subscriptions, we'll be\n                                                                                // able to set these when establishing the subscription instead.\n                                                                                // Until then, we'll need to filter inbound\n                                                                                if (_this.passesPredicateValidation(record, predicatesGroup)) {\n                                                                                    _this.pushToBuffer(transformerMutationType, modelDefinition, record);\n                                                                                }\n                                                                                _this.drainBuffer();\n                                                                            },\n                                                                            error: function (subscriptionError) { return __awaiter(_this, void 0, void 0, function () {\n                                                                                var _a, _b, _c, _d, message, e_1;\n                                                                                return __generator(this, function (_e) {\n                                                                                    switch (_e.label) {\n                                                                                        case 0:\n                                                                                            _a = subscriptionError.error, _b = __read((_a === void 0 ? {\n                                                                                                errors: [],\n                                                                                            } : _a).errors, 1), _c = _b[0], _d = (_c === void 0 ? {} : _c).message, message = _d === void 0 ? '' : _d;\n                                                                                            if (message.includes(PUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR) ||\n                                                                                                message.includes(PUBSUB_CONTROL_MSG.CONNECTION_FAILED)) {\n                                                                                                // Unsubscribe and clear subscription array for model/operation\n                                                                                                subscriptions[modelDefinition.name][transformerMutationType].forEach(function (subscription) {\n                                                                                                    return subscription.unsubscribe();\n                                                                                                });\n                                                                                                subscriptions[modelDefinition.name][transformerMutationType] = [];\n                                                                                                operationAuthModeAttempts[operation]++;\n                                                                                                if (operationAuthModeAttempts[operation] >=\n                                                                                                    readAuthModes.length) {\n                                                                                                    // last auth mode retry. Continue with error\n                                                                                                    logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1]);\n                                                                                                }\n                                                                                                else {\n                                                                                                    // retry with different auth mode. Do not trigger\n                                                                                                    // observer error or error handler\n                                                                                                    logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1] + \". Retrying with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                                                                                    authModeRetry(operation);\n                                                                                                    return [2 /*return*/];\n                                                                                                }\n                                                                                            }\n                                                                                            logger.warn('subscriptionError', message);\n                                                                                            _e.label = 1;\n                                                                                        case 1:\n                                                                                            _e.trys.push([1, 3, , 4]);\n                                                                                            return [4 /*yield*/, this.errorHandler({\n                                                                                                    recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                                                                    localModel: null,\n                                                                                                    message: message,\n                                                                                                    model: modelDefinition.name,\n                                                                                                    operation: operation,\n                                                                                                    errorType: getSubscriptionErrorType(subscriptionError),\n                                                                                                    process: ProcessName.subscribe,\n                                                                                                    remoteModel: null,\n                                                                                                    cause: subscriptionError,\n                                                                                                })];\n                                                                                        case 2:\n                                                                                            _e.sent();\n                                                                                            return [3 /*break*/, 4];\n                                                                                        case 3:\n                                                                                            e_1 = _e.sent();\n                                                                                            logger.error('Subscription error handler failed with:', e_1);\n                                                                                            return [3 /*break*/, 4];\n                                                                                        case 4:\n                                                                                            if (typeof subscriptionReadyCallback === 'function') {\n                                                                                                subscriptionReadyCallback();\n                                                                                            }\n                                                                                            if (message.includes('\"errorType\":\"Unauthorized\"') ||\n                                                                                                message.includes('\"errorType\":\"OperationDisabled\"')) {\n                                                                                                return [2 /*return*/];\n                                                                                            }\n                                                                                            observer.error(message);\n                                                                                            return [2 /*return*/];\n                                                                                    }\n                                                                                });\n                                                                            }); },\n                                                                        }));\n                                                                        promises.push((function () { return __awaiter(_this, void 0, void 0, function () {\n                                                                            var boundFunction;\n                                                                            var _this = this;\n                                                                            return __generator(this, function (_a) {\n                                                                                switch (_a.label) {\n                                                                                    case 0: return [4 /*yield*/, new Promise(function (res) {\n                                                                                            subscriptionReadyCallback = res;\n                                                                                            boundFunction = _this.hubQueryCompletionListener.bind(_this, res);\n                                                                                            Hub.listen('api', boundFunction);\n                                                                                        })];\n                                                                                    case 1:\n                                                                                        _a.sent();\n                                                                                        Hub.remove('api', boundFunction);\n                                                                                        return [2 /*return*/];\n                                                                                }\n                                                                            });\n                                                                        }); })());\n                                                                        return [2 /*return*/];\n                                                                }\n                                                            });\n                                                        }); };\n                                                        operations.forEach(function (op) { return authModeRetry(op); });\n                                                        return [2 /*return*/];\n                                                }\n                                            });\n                                        }); });\n                                });\n                            });\n                            this.runningProcesses.isOpen &&\n                                this.runningProcesses.add(function () {\n                                    return Promise.all(promises).then(function () {\n                                        observer.next(CONTROL_MSG.CONNECTED);\n                                    });\n                                });\n                            return [2 /*return*/];\n                    }\n                });\n            }); }, 'subscription processor new subscriber');\n            return _this.runningProcesses.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    Object.keys(subscriptions).forEach(function (modelName) {\n                        subscriptions[modelName][TransformerMutationType.CREATE].forEach(function (subscription) { return subscription.unsubscribe(); });\n                        subscriptions[modelName][TransformerMutationType.UPDATE].forEach(function (subscription) { return subscription.unsubscribe(); });\n                        subscriptions[modelName][TransformerMutationType.DELETE].forEach(function (subscription) { return subscription.unsubscribe(); });\n                    });\n                    return [2 /*return*/];\n                });\n            }); });\n        });\n        var dataObservable = new Observable(function (observer) {\n            _this.dataObserver = observer;\n            _this.drainBuffer();\n            return _this.runningProcesses.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    this.dataObserver = null;\n                    return [2 /*return*/];\n                });\n            }); });\n        });\n        return [ctlObservable, dataObservable];\n    };\n    SubscriptionProcessor.prototype.stop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.runningProcesses.close()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.runningProcesses.open()];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SubscriptionProcessor.prototype.passesPredicateValidation = function (record, predicatesGroup) {\n        if (!predicatesGroup) {\n            return true;\n        }\n        var predicates = predicatesGroup.predicates, type = predicatesGroup.type;\n        return validatePredicate(record, type, predicates);\n    };\n    SubscriptionProcessor.prototype.pushToBuffer = function (transformerMutationType, modelDefinition, data) {\n        this.buffer.push([transformerMutationType, modelDefinition, data]);\n    };\n    SubscriptionProcessor.prototype.drainBuffer = function () {\n        var _this = this;\n        if (this.dataObserver) {\n            this.buffer.forEach(function (data) { return _this.dataObserver.next(data); });\n            this.buffer = [];\n        }\n    };\n    return SubscriptionProcessor;\n}());\nexport { SubscriptionProcessor };\n//# sourceMappingURL=subscription.js.map"]},"metadata":{},"sourceType":"module"}