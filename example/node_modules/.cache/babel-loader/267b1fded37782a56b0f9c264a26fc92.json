{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nvar logger = new Logger('AWSLexProvider');\nvar AWSLexProvider = /** @class */function (_super) {\n  __extends(AWSLexProvider, _super);\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n  AWSLexProvider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var propertiesToTest = ['name', 'alias', 'region'];\n    Object.keys(config).forEach(function (botKey) {\n      var botConfig = config[botKey];\n      // is bot config correct\n      if (!propertiesToTest.every(function (x) {\n        return x in botConfig;\n      })) {\n        throw new Error('invalid bot configuration');\n      }\n    });\n    return _super.prototype.configure.call(this, config);\n  };\n  /**\n   * @private\n   * @deprecated\n   * This is used internally by 'sendMessage' to call onComplete callback\n   * for a bot if configured\n   */\n  AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n    var _this = this;\n    // Check if state is fulfilled to resolve onFullfilment promise\n    logger.debug('postContent state', data.dialogState);\n    if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](null, data);\n        }, 0);\n      }\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, data);\n        }, 0);\n      }\n    }\n    if (data.dialogState === 'Failed') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname]('Bot conversation failed');\n        }, 0);\n      }\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete('Bot conversation failed');\n        }, 0);\n      }\n    }\n  };\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, error_1, params, postTextCommand, data, err_1, content, messageType, inputStream, _a, postContentCommand, data, audioArray, _b, response, err_2;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            // check if bot exists\n            if (!this._config[botname]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, Credentials.get()];\n          case 2:\n            credentials = _c.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_1 = _c.sent();\n            return [2 /*return*/, Promise.reject('No credentials')];\n          case 4:\n            this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            if (!(typeof message === 'string')) return [3 /*break*/, 9];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              inputText: message,\n              userId: credentials.identityId\n            };\n            logger.debug('postText to lex', message);\n            _c.label = 5;\n          case 5:\n            _c.trys.push([5, 7,, 8]);\n            postTextCommand = new PostTextCommand(params);\n            return [4 /*yield*/, this.lexRuntimeServiceClient.send(postTextCommand)];\n          case 6:\n            data = _c.sent();\n            this.reportBotStatus(data, botname);\n            return [2 /*return*/, data];\n          case 7:\n            err_1 = _c.sent();\n            return [2 /*return*/, Promise.reject(err_1)];\n          case 8:\n            return [3 /*break*/, 21];\n          case 9:\n            content = message.content, messageType = message.options.messageType;\n            if (!(messageType === 'voice')) return [3 /*break*/, 13];\n            if (typeof content !== 'object') {\n              return [2 /*return*/, Promise.reject('invalid content type')];\n            }\n            if (!(content instanceof Uint8Array)) return [3 /*break*/, 10];\n            _a = content;\n            return [3 /*break*/, 12];\n          case 10:\n            return [4 /*yield*/, convert(content)];\n          case 11:\n            _a = _c.sent();\n            _c.label = 12;\n          case 12:\n            inputStream = _a;\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n              userId: credentials.identityId,\n              accept: 'audio/mpeg',\n              inputStream: inputStream\n            };\n            return [3 /*break*/, 14];\n          case 13:\n            if (typeof content !== 'string') return [2 /*return*/, Promise.reject('invalid content type')];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'text/plain; charset=utf-8',\n              inputStream: content,\n              userId: credentials.identityId,\n              accept: 'audio/mpeg'\n            };\n            _c.label = 14;\n          case 14:\n            logger.debug('postContent to lex', message);\n            _c.label = 15;\n          case 15:\n            _c.trys.push([15, 20,, 21]);\n            postContentCommand = new PostContentCommand(params);\n            return [4 /*yield*/, this.lexRuntimeServiceClient.send(postContentCommand)];\n          case 16:\n            data = _c.sent();\n            if (!data.audioStream) return [3 /*break*/, 18];\n            return [4 /*yield*/, convert(data.audioStream)];\n          case 17:\n            _b = _c.sent();\n            return [3 /*break*/, 19];\n          case 18:\n            _b = undefined;\n            _c.label = 19;\n          case 19:\n            audioArray = _b;\n            response = __assign(__assign({}, data), {\n              audioStream: audioArray\n            });\n            this.reportBotStatus(response, botname);\n            return [2 /*return*/, response];\n          case 20:\n            err_2 = _c.sent();\n            return [2 /*return*/, Promise.reject(err_2)];\n          case 21:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    // does bot exist\n    if (!this._config[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n    this._botsCompleteCallback[botname] = callback;\n  };\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\nexport { AWSLexProvider };","map":{"version":3,"sources":["../../src/Providers/AWSLexProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand, } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent, } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nvar logger = new Logger('AWSLexProvider');\nvar AWSLexProvider = /** @class */ (function (_super) {\n    __extends(AWSLexProvider, _super);\n    function AWSLexProvider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this._botsCompleteCallback = {};\n        return _this;\n    }\n    AWSLexProvider.prototype.getProviderName = function () {\n        return 'AWSLexProvider';\n    };\n    AWSLexProvider.prototype.configure = function (config) {\n        if (config === void 0) { config = {}; }\n        var propertiesToTest = ['name', 'alias', 'region'];\n        Object.keys(config).forEach(function (botKey) {\n            var botConfig = config[botKey];\n            // is bot config correct\n            if (!propertiesToTest.every(function (x) { return x in botConfig; })) {\n                throw new Error('invalid bot configuration');\n            }\n        });\n        return _super.prototype.configure.call(this, config);\n    };\n    /**\n     * @private\n     * @deprecated\n     * This is used internally by 'sendMessage' to call onComplete callback\n     * for a bot if configured\n     */\n    AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n        var _this = this;\n        // Check if state is fulfilled to resolve onFullfilment promise\n        logger.debug('postContent state', data.dialogState);\n        if (data.dialogState === 'ReadyForFulfillment' ||\n            data.dialogState === 'Fulfilled') {\n            if (typeof this._botsCompleteCallback[botname] === 'function') {\n                setTimeout(function () { return _this._botsCompleteCallback[botname](null, data); }, 0);\n            }\n            if (this._config &&\n                typeof this._config[botname].onComplete === 'function') {\n                setTimeout(function () { return _this._config[botname].onComplete(null, data); }, 0);\n            }\n        }\n        if (data.dialogState === 'Failed') {\n            if (typeof this._botsCompleteCallback[botname] === 'function') {\n                setTimeout(function () { return _this._botsCompleteCallback[botname]('Bot conversation failed'); }, 0);\n            }\n            if (this._config &&\n                typeof this._config[botname].onComplete === 'function') {\n                setTimeout(function () { return _this._config[botname].onComplete('Bot conversation failed'); }, 0);\n            }\n        }\n    };\n    AWSLexProvider.prototype.sendMessage = function (botname, message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, error_1, params, postTextCommand, data, err_1, content, messageType, inputStream, _a, postContentCommand, data, audioArray, _b, response, err_2;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        // check if bot exists\n                        if (!this._config[botname]) {\n                            return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n                        }\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 2:\n                        credentials = _c.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_1 = _c.sent();\n                        return [2 /*return*/, Promise.reject('No credentials')];\n                    case 4:\n                        this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n                            region: this._config[botname].region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        if (!(typeof message === 'string')) return [3 /*break*/, 9];\n                        params = {\n                            botAlias: this._config[botname].alias,\n                            botName: botname,\n                            inputText: message,\n                            userId: credentials.identityId,\n                        };\n                        logger.debug('postText to lex', message);\n                        _c.label = 5;\n                    case 5:\n                        _c.trys.push([5, 7, , 8]);\n                        postTextCommand = new PostTextCommand(params);\n                        return [4 /*yield*/, this.lexRuntimeServiceClient.send(postTextCommand)];\n                    case 6:\n                        data = _c.sent();\n                        this.reportBotStatus(data, botname);\n                        return [2 /*return*/, data];\n                    case 7:\n                        err_1 = _c.sent();\n                        return [2 /*return*/, Promise.reject(err_1)];\n                    case 8: return [3 /*break*/, 21];\n                    case 9:\n                        content = message.content, messageType = message.options.messageType;\n                        if (!(messageType === 'voice')) return [3 /*break*/, 13];\n                        if (typeof content !== 'object') {\n                            return [2 /*return*/, Promise.reject('invalid content type')];\n                        }\n                        if (!(content instanceof Uint8Array)) return [3 /*break*/, 10];\n                        _a = content;\n                        return [3 /*break*/, 12];\n                    case 10: return [4 /*yield*/, convert(content)];\n                    case 11:\n                        _a = _c.sent();\n                        _c.label = 12;\n                    case 12:\n                        inputStream = _a;\n                        params = {\n                            botAlias: this._config[botname].alias,\n                            botName: botname,\n                            contentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n                            userId: credentials.identityId,\n                            accept: 'audio/mpeg',\n                            inputStream: inputStream,\n                        };\n                        return [3 /*break*/, 14];\n                    case 13:\n                        if (typeof content !== 'string')\n                            return [2 /*return*/, Promise.reject('invalid content type')];\n                        params = {\n                            botAlias: this._config[botname].alias,\n                            botName: botname,\n                            contentType: 'text/plain; charset=utf-8',\n                            inputStream: content,\n                            userId: credentials.identityId,\n                            accept: 'audio/mpeg',\n                        };\n                        _c.label = 14;\n                    case 14:\n                        logger.debug('postContent to lex', message);\n                        _c.label = 15;\n                    case 15:\n                        _c.trys.push([15, 20, , 21]);\n                        postContentCommand = new PostContentCommand(params);\n                        return [4 /*yield*/, this.lexRuntimeServiceClient.send(postContentCommand)];\n                    case 16:\n                        data = _c.sent();\n                        if (!data.audioStream) return [3 /*break*/, 18];\n                        return [4 /*yield*/, convert(data.audioStream)];\n                    case 17:\n                        _b = _c.sent();\n                        return [3 /*break*/, 19];\n                    case 18:\n                        _b = undefined;\n                        _c.label = 19;\n                    case 19:\n                        audioArray = _b;\n                        response = __assign(__assign({}, data), { audioStream: audioArray });\n                        this.reportBotStatus(response, botname);\n                        return [2 /*return*/, response];\n                    case 20:\n                        err_2 = _c.sent();\n                        return [2 /*return*/, Promise.reject(err_2)];\n                    case 21: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSLexProvider.prototype.onComplete = function (botname, callback) {\n        // does bot exist\n        if (!this._config[botname]) {\n            throw new Error('Bot ' + botname + ' does not exist');\n        }\n        this._botsCompleteCallback[botname] = callback;\n    };\n    return AWSLexProvider;\n}(AbstractInteractionsProvider));\nexport { AWSLexProvider };\n//# sourceMappingURL=AWSLexProvider.js.map"]},"metadata":{},"sourceType":"module"}