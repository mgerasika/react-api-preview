{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\nimport { bucketHostname } from \"./bucketHostname\";\nimport { getPseudoRegion } from \"./bucketHostnameUtils\";\nexport var bucketEndpointMiddleware = function (options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var bucketName, replaceBucketInPath, request, bucketArn, clientRegion, _a, _b, partition, _c, signingRegion, useArnRegion, _d, hostname, bucketEndpoint, modifiedSigningRegion, signingService, clientRegion, _e, _f, hostname, bucketEndpoint;\n        return __generator(this, function (_g) {\n          switch (_g.label) {\n            case 0:\n              bucketName = args.input.Bucket;\n              replaceBucketInPath = options.bucketEndpoint;\n              request = args.request;\n              if (!HttpRequest.isInstance(request)) return [3 /*break*/, 8];\n              if (!options.bucketEndpoint) return [3 /*break*/, 1];\n              request.hostname = bucketName;\n              return [3 /*break*/, 7];\n            case 1:\n              if (!validateArn(bucketName)) return [3 /*break*/, 5];\n              bucketArn = parseArn(bucketName);\n              _a = getPseudoRegion;\n              return [4 /*yield*/, options.region()];\n            case 2:\n              clientRegion = _a.apply(void 0, [_g.sent()]);\n              return [4 /*yield*/, options.regionInfoProvider(clientRegion)];\n            case 3:\n              _b = _g.sent() || {}, partition = _b.partition, _c = _b.signingRegion, signingRegion = _c === void 0 ? clientRegion : _c;\n              return [4 /*yield*/, options.useArnRegion()];\n            case 4:\n              useArnRegion = _g.sent();\n              _d = bucketHostname({\n                bucketName: bucketArn,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                useArnRegion: useArnRegion,\n                clientPartition: partition,\n                clientSigningRegion: signingRegion,\n                clientRegion: clientRegion,\n                isCustomEndpoint: options.isCustomEndpoint\n              }), hostname = _d.hostname, bucketEndpoint = _d.bucketEndpoint, modifiedSigningRegion = _d.signingRegion, signingService = _d.signingService;\n              // If the request needs to use a region or service name inferred from ARN that different from client region, we\n              // need to set them in the handler context so the signer will use them\n              if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n                context[\"signing_region\"] = modifiedSigningRegion;\n              }\n              if (signingService && signingService !== \"s3\") {\n                context[\"signing_service\"] = signingService;\n              }\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              return [3 /*break*/, 7];\n            case 5:\n              _e = getPseudoRegion;\n              return [4 /*yield*/, options.region()];\n            case 6:\n              clientRegion = _e.apply(void 0, [_g.sent()]);\n              _f = bucketHostname({\n                bucketName: bucketName,\n                clientRegion: clientRegion,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                isCustomEndpoint: options.isCustomEndpoint\n              }), hostname = _f.hostname, bucketEndpoint = _f.bucketEndpoint;\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              _g.label = 7;\n            case 7:\n              if (replaceBucketInPath) {\n                request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n                if (request.path === \"\") {\n                  request.path = \"/\";\n                }\n              }\n              _g.label = 8;\n            case 8:\n              return [2 /*return*/, next(__assign(__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n};\nexport var bucketEndpointMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n  override: true\n};\nexport var getBucketEndpointPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/bucketEndpointMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  HandlerExecutionContext,\n  MetadataBearer,\n  Pluggable,\n  RelativeMiddlewareOptions,\n} from \"@aws-sdk/types\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n\nimport { bucketHostname } from \"./bucketHostname\";\nimport { getPseudoRegion } from \"./bucketHostnameUtils\";\nimport { BucketEndpointResolvedConfig } from \"./configurations\";\n\nexport const bucketEndpointMiddleware = (options: BucketEndpointResolvedConfig): BuildMiddleware<any, any> => <\n  Output extends MetadataBearer\n>(\n  next: BuildHandler<any, Output>,\n  context: HandlerExecutionContext\n): BuildHandler<any, Output> => async (args: BuildHandlerArguments<any>): Promise<BuildHandlerOutput<Output>> => {\n  const { Bucket: bucketName } = args.input as { Bucket: string };\n  let replaceBucketInPath = options.bucketEndpoint;\n  const request = args.request;\n  if (HttpRequest.isInstance(request)) {\n    if (options.bucketEndpoint) {\n      request.hostname = bucketName;\n    } else if (validateArn(bucketName)) {\n      const bucketArn = parseArn(bucketName);\n      const clientRegion = getPseudoRegion(await options.region());\n      const { partition, signingRegion = clientRegion } = (await options.regionInfoProvider(clientRegion)) || {};\n      const useArnRegion = await options.useArnRegion();\n      const { hostname, bucketEndpoint, signingRegion: modifiedSigningRegion, signingService } = bucketHostname({\n        bucketName: bucketArn,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        useArnRegion,\n        clientPartition: partition,\n        clientSigningRegion: signingRegion,\n        clientRegion: clientRegion,\n        isCustomEndpoint: options.isCustomEndpoint,\n      });\n\n      // If the request needs to use a region or service name inferred from ARN that different from client region, we\n      // need to set them in the handler context so the signer will use them\n      if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n        context[\"signing_region\"] = modifiedSigningRegion;\n      }\n      if (signingService && signingService !== \"s3\") {\n        context[\"signing_service\"] = signingService;\n      }\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    } else {\n      const clientRegion = getPseudoRegion(await options.region());\n      const { hostname, bucketEndpoint } = bucketHostname({\n        bucketName,\n        clientRegion,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        isCustomEndpoint: options.isCustomEndpoint,\n      });\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    }\n\n    if (replaceBucketInPath) {\n      request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n      if (request.path === \"\") {\n        request.path = \"/\";\n      }\n    }\n  }\n\n  return next({ ...args, request });\n};\n\nexport const bucketEndpointMiddlewareOptions: RelativeMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n  override: true,\n};\n\nexport const getBucketEndpointPlugin = (options: BucketEndpointResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}