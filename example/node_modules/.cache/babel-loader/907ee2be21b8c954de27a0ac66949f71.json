{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport * as Paho from 'paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../utils/ConnectionStateMonitor';\nimport { AMPLIFY_SYMBOL, CONNECTION_STATE_CHANGE } from './constants';\nvar logger = new Logger('MqttOverWSProvider');\nexport function mqttTopicMatch(filter, topic) {\n  var filterArray = filter.split('/');\n  var length = filterArray.length;\n  var topicArray = topic.split('/');\n  for (var i = 0; i < length; ++i) {\n    var left = filterArray[i];\n    var right = topicArray[i];\n    if (left === '#') return topicArray.length >= length;\n    if (left !== '+' && left !== right) return false;\n  }\n  return length === topicArray.length;\n}\nvar ClientsQueue = /** @class */function () {\n  function ClientsQueue() {\n    this.promises = new Map();\n  }\n  ClientsQueue.prototype.get = function (clientId, clientFactory) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedPromise, newPromise;\n      return __generator(this, function (_a) {\n        cachedPromise = this.promises.get(clientId);\n        if (cachedPromise) {\n          return [2 /*return*/, cachedPromise];\n        }\n        if (clientFactory) {\n          newPromise = clientFactory(clientId);\n          this.promises.set(clientId, newPromise);\n          return [2 /*return*/, newPromise];\n        }\n        return [2 /*return*/, undefined];\n      });\n    });\n  };\n  Object.defineProperty(ClientsQueue.prototype, \"allClients\", {\n    get: function () {\n      return Array.from(this.promises.keys());\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ClientsQueue.prototype.remove = function (clientId) {\n    this.promises.delete(clientId);\n  };\n  return ClientsQueue;\n}();\nvar dispatchPubSubEvent = function (event, data, message) {\n  Hub.dispatch('pubsub', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\nvar MqttOverWSProvider = /** @class */function (_super) {\n  __extends(MqttOverWSProvider, _super);\n  function MqttOverWSProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, __assign(__assign({}, options), {\n      clientId: options.clientId || uuid()\n    })) || this;\n    _this._clientsQueue = new ClientsQueue();\n    _this.connectionStateMonitor = new ConnectionStateMonitor();\n    _this._topicObservers = new Map();\n    _this._clientIdObservers = new Map();\n    // Monitor the connection health state and pass changes along to Hub\n    _this.connectionStateMonitor.connectionStateObservable.subscribe(function (connectionStateChange) {\n      dispatchPubSubEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: connectionStateChange\n      }, \"Connection state is \" + connectionStateChange);\n    });\n    return _this;\n  }\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientId\", {\n    get: function () {\n      return this.options.clientId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"endpoint\", {\n    get: function () {\n      return this.options.aws_pubsub_endpoint;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientsQueue\", {\n    get: function () {\n      return this._clientsQueue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  MqttOverWSProvider.prototype.getTopicForValue = function (value) {\n    return typeof value === 'object' && value[topicSymbol];\n  };\n  MqttOverWSProvider.prototype.getProviderName = function () {\n    return 'MqttOverWSProvider';\n  };\n  MqttOverWSProvider.prototype.onDisconnect = function (_a) {\n    var _this = this;\n    var clientId = _a.clientId,\n      errorCode = _a.errorCode,\n      args = __rest(_a, [\"clientId\", \"errorCode\"]);\n    if (errorCode !== 0) {\n      logger.warn(clientId, JSON.stringify(__assign({\n        errorCode: errorCode\n      }, args), null, 2));\n      var topicsToDelete_1 = [];\n      if (!clientId) {\n        return;\n      }\n      var clientIdObservers = this._clientIdObservers.get(clientId);\n      if (!clientIdObservers) {\n        return;\n      }\n      clientIdObservers.forEach(function (observer) {\n        observer.error('Disconnected, error code: ' + errorCode);\n        // removing observers for disconnected clientId\n        _this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n          observerForTopic.delete(observer);\n          if (observerForTopic.size === 0) {\n            topicsToDelete_1.push(observerTopic);\n          }\n        });\n      });\n      // forgiving any trace of clientId\n      this._clientIdObservers.delete(clientId);\n      // Removing topics that are not listen by an observer\n      topicsToDelete_1.forEach(function (topic) {\n        _this._topicObservers.delete(topic);\n      });\n    }\n  };\n  MqttOverWSProvider.prototype.newClient = function (_a) {\n    var url = _a.url,\n      clientId = _a.clientId;\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('Creating new MQTT client', clientId);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            client = new Paho.Client(url, clientId);\n            // client.trace = (args) => logger.debug(clientId, JSON.stringify(args, null, 2));\n            client.onMessageArrived = function (_a) {\n              var topic = _a.destinationName,\n                msg = _a.payloadString;\n              _this._onMessage(topic, msg);\n            };\n            client.onConnectionLost = function (_a) {\n              var errorCode = _a.errorCode,\n                args = __rest(_a, [\"errorCode\"]);\n              _this.onDisconnect(__assign({\n                clientId: clientId,\n                errorCode: errorCode\n              }, args));\n              _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            };\n            return [4 /*yield*/, new Promise(function (resolve, reject) {\n              client.connect({\n                useSSL: _this.isSSLEnabled,\n                mqttVersion: 3,\n                onSuccess: function () {\n                  return resolve(client);\n                },\n                onFailure: function () {\n                  reject();\n                  _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                }\n              });\n            })];\n          case 1:\n            _b.sent();\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n            return [2 /*return*/, client];\n        }\n      });\n    });\n  };\n  MqttOverWSProvider.prototype.connect = function (clientId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.clientsQueue.get(clientId, function (clientId) {\n              return _this.newClient(__assign(__assign({}, options), {\n                clientId: clientId\n              }));\n            })];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  MqttOverWSProvider.prototype.disconnect = function (clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.clientsQueue.get(clientId)];\n          case 1:\n            client = _a.sent();\n            if (client && client.isConnected()) {\n              client.disconnect();\n              this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            }\n            this.clientsQueue.remove(clientId);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.publish = function (topics, msg) {\n    return __awaiter(this, void 0, void 0, function () {\n      var targetTopics, message, url, client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            targetTopics = [].concat(topics);\n            message = JSON.stringify(msg);\n            return [4 /*yield*/, this.endpoint];\n          case 1:\n            url = _a.sent();\n            return [4 /*yield*/, this.connect(this.clientId, {\n              url: url\n            })];\n          case 2:\n            client = _a.sent();\n            logger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n            targetTopics.forEach(function (topic) {\n              return client.send(topic, message);\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype._onMessage = function (topic, msg) {\n    try {\n      var matchedTopicObservers_1 = [];\n      this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n        if (mqttTopicMatch(observerTopic, topic)) {\n          matchedTopicObservers_1.push(observerForTopic);\n        }\n      });\n      var parsedMessage_1 = JSON.parse(msg);\n      if (typeof parsedMessage_1 === 'object') {\n        parsedMessage_1[topicSymbol] = topic;\n      }\n      matchedTopicObservers_1.forEach(function (observersForTopic) {\n        observersForTopic.forEach(function (observer) {\n          return observer.next(parsedMessage_1);\n        });\n      });\n    } catch (error) {\n      logger.warn('Error handling message', error, msg);\n    }\n  };\n  MqttOverWSProvider.prototype.subscribe = function (topics, options) {\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    var targetTopics = [].concat(topics);\n    logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n    return new Observable(function (observer) {\n      targetTopics.forEach(function (topic) {\n        // this._topicObservers is used to notify the observers according to the topic received on the message\n        var observersForTopic = _this._topicObservers.get(topic);\n        if (!observersForTopic) {\n          observersForTopic = new Set();\n          _this._topicObservers.set(topic, observersForTopic);\n        }\n        observersForTopic.add(observer);\n      });\n      // @ts-ignore\n      var client;\n      var _a = options.clientId,\n        clientId = _a === void 0 ? _this.clientId : _a;\n      // this._clientIdObservers is used to close observers when client gets disconnected\n      var observersForClientId = _this._clientIdObservers.get(clientId);\n      if (!observersForClientId) {\n        observersForClientId = new Set();\n      }\n      observersForClientId.add(observer);\n      _this._clientIdObservers.set(clientId, observersForClientId);\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, url, _b, e_1;\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                _a = options.url;\n                if (!(_a === void 0)) return [3 /*break*/, 2];\n                return [4 /*yield*/, this.endpoint];\n              case 1:\n                _b = _c.sent();\n                return [3 /*break*/, 3];\n              case 2:\n                _b = _a;\n                _c.label = 3;\n              case 3:\n                url = _b;\n                _c.label = 4;\n              case 4:\n                _c.trys.push([4, 6,, 7]);\n                return [4 /*yield*/, this.connect(clientId, {\n                  url: url\n                })];\n              case 5:\n                client = _c.sent();\n                targetTopics.forEach(function (topic) {\n                  client.subscribe(topic);\n                });\n                return [3 /*break*/, 7];\n              case 6:\n                e_1 = _c.sent();\n                observer.error(e_1);\n                return [3 /*break*/, 7];\n              case 7:\n                return [2 /*return*/];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        var _a, _b;\n        logger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n        if (client) {\n          (_a = _this._clientIdObservers.get(clientId)) === null || _a === void 0 ? void 0 : _a.delete(observer);\n          // No more observers per client => client not needed anymore\n          if (((_b = _this._clientIdObservers.get(clientId)) === null || _b === void 0 ? void 0 : _b.size) === 0) {\n            _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n            _this.disconnect(clientId);\n            _this._clientIdObservers.delete(clientId);\n          }\n          targetTopics.forEach(function (topic) {\n            var observersForTopic = _this._topicObservers.get(topic) || new Set();\n            observersForTopic.delete(observer);\n            // if no observers exists for the topic, topic should be removed\n            if (observersForTopic.size === 0) {\n              _this._topicObservers.delete(topic);\n              if (client.isConnected()) {\n                client.unsubscribe(topic);\n              }\n            }\n          });\n        }\n        return null;\n      };\n    });\n  };\n  return MqttOverWSProvider;\n}(AbstractPubSubProvider);\nexport { MqttOverWSProvider };","map":{"version":3,"sources":["../../src/Providers/MqttOverWSProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport * as Paho from 'paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE, } from '../utils/ConnectionStateMonitor';\nimport { AMPLIFY_SYMBOL, CONNECTION_STATE_CHANGE } from './constants';\nvar logger = new Logger('MqttOverWSProvider');\nexport function mqttTopicMatch(filter, topic) {\n    var filterArray = filter.split('/');\n    var length = filterArray.length;\n    var topicArray = topic.split('/');\n    for (var i = 0; i < length; ++i) {\n        var left = filterArray[i];\n        var right = topicArray[i];\n        if (left === '#')\n            return topicArray.length >= length;\n        if (left !== '+' && left !== right)\n            return false;\n    }\n    return length === topicArray.length;\n}\nvar ClientsQueue = /** @class */ (function () {\n    function ClientsQueue() {\n        this.promises = new Map();\n    }\n    ClientsQueue.prototype.get = function (clientId, clientFactory) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cachedPromise, newPromise;\n            return __generator(this, function (_a) {\n                cachedPromise = this.promises.get(clientId);\n                if (cachedPromise) {\n                    return [2 /*return*/, cachedPromise];\n                }\n                if (clientFactory) {\n                    newPromise = clientFactory(clientId);\n                    this.promises.set(clientId, newPromise);\n                    return [2 /*return*/, newPromise];\n                }\n                return [2 /*return*/, undefined];\n            });\n        });\n    };\n    Object.defineProperty(ClientsQueue.prototype, \"allClients\", {\n        get: function () {\n            return Array.from(this.promises.keys());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClientsQueue.prototype.remove = function (clientId) {\n        this.promises.delete(clientId);\n    };\n    return ClientsQueue;\n}());\nvar dispatchPubSubEvent = function (event, data, message) {\n    Hub.dispatch('pubsub', { event: event, data: data, message: message }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\nvar MqttOverWSProvider = /** @class */ (function (_super) {\n    __extends(MqttOverWSProvider, _super);\n    function MqttOverWSProvider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, __assign(__assign({}, options), { clientId: options.clientId || uuid() })) || this;\n        _this._clientsQueue = new ClientsQueue();\n        _this.connectionStateMonitor = new ConnectionStateMonitor();\n        _this._topicObservers = new Map();\n        _this._clientIdObservers = new Map();\n        // Monitor the connection health state and pass changes along to Hub\n        _this.connectionStateMonitor.connectionStateObservable.subscribe(function (connectionStateChange) {\n            dispatchPubSubEvent(CONNECTION_STATE_CHANGE, {\n                provider: _this,\n                connectionState: connectionStateChange,\n            }, \"Connection state is \" + connectionStateChange);\n        });\n        return _this;\n    }\n    Object.defineProperty(MqttOverWSProvider.prototype, \"clientId\", {\n        get: function () {\n            return this.options.clientId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MqttOverWSProvider.prototype, \"endpoint\", {\n        get: function () {\n            return this.options.aws_pubsub_endpoint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MqttOverWSProvider.prototype, \"clientsQueue\", {\n        get: function () {\n            return this._clientsQueue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MqttOverWSProvider.prototype, \"isSSLEnabled\", {\n        get: function () {\n            return !this.options\n                .aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MqttOverWSProvider.prototype.getTopicForValue = function (value) {\n        return typeof value === 'object' && value[topicSymbol];\n    };\n    MqttOverWSProvider.prototype.getProviderName = function () {\n        return 'MqttOverWSProvider';\n    };\n    MqttOverWSProvider.prototype.onDisconnect = function (_a) {\n        var _this = this;\n        var clientId = _a.clientId, errorCode = _a.errorCode, args = __rest(_a, [\"clientId\", \"errorCode\"]);\n        if (errorCode !== 0) {\n            logger.warn(clientId, JSON.stringify(__assign({ errorCode: errorCode }, args), null, 2));\n            var topicsToDelete_1 = [];\n            if (!clientId) {\n                return;\n            }\n            var clientIdObservers = this._clientIdObservers.get(clientId);\n            if (!clientIdObservers) {\n                return;\n            }\n            clientIdObservers.forEach(function (observer) {\n                observer.error('Disconnected, error code: ' + errorCode);\n                // removing observers for disconnected clientId\n                _this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n                    observerForTopic.delete(observer);\n                    if (observerForTopic.size === 0) {\n                        topicsToDelete_1.push(observerTopic);\n                    }\n                });\n            });\n            // forgiving any trace of clientId\n            this._clientIdObservers.delete(clientId);\n            // Removing topics that are not listen by an observer\n            topicsToDelete_1.forEach(function (topic) {\n                _this._topicObservers.delete(topic);\n            });\n        }\n    };\n    MqttOverWSProvider.prototype.newClient = function (_a) {\n        var url = _a.url, clientId = _a.clientId;\n        return __awaiter(this, void 0, void 0, function () {\n            var client;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        logger.debug('Creating new MQTT client', clientId);\n                        this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n                        client = new Paho.Client(url, clientId);\n                        // client.trace = (args) => logger.debug(clientId, JSON.stringify(args, null, 2));\n                        client.onMessageArrived = function (_a) {\n                            var topic = _a.destinationName, msg = _a.payloadString;\n                            _this._onMessage(topic, msg);\n                        };\n                        client.onConnectionLost = function (_a) {\n                            var errorCode = _a.errorCode, args = __rest(_a, [\"errorCode\"]);\n                            _this.onDisconnect(__assign({ clientId: clientId, errorCode: errorCode }, args));\n                            _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n                        };\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                client.connect({\n                                    useSSL: _this.isSSLEnabled,\n                                    mqttVersion: 3,\n                                    onSuccess: function () { return resolve(client); },\n                                    onFailure: function () {\n                                        reject();\n                                        _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                                    },\n                                });\n                            })];\n                    case 1:\n                        _b.sent();\n                        this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n                        return [2 /*return*/, client];\n                }\n            });\n        });\n    };\n    MqttOverWSProvider.prototype.connect = function (clientId, options) {\n        if (options === void 0) { options = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.clientsQueue.get(clientId, function (clientId) {\n                            return _this.newClient(__assign(__assign({}, options), { clientId: clientId }));\n                        })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    MqttOverWSProvider.prototype.disconnect = function (clientId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var client;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.clientsQueue.get(clientId)];\n                    case 1:\n                        client = _a.sent();\n                        if (client && client.isConnected()) {\n                            client.disconnect();\n                            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n                        }\n                        this.clientsQueue.remove(clientId);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MqttOverWSProvider.prototype.publish = function (topics, msg) {\n        return __awaiter(this, void 0, void 0, function () {\n            var targetTopics, message, url, client;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        targetTopics = [].concat(topics);\n                        message = JSON.stringify(msg);\n                        return [4 /*yield*/, this.endpoint];\n                    case 1:\n                        url = _a.sent();\n                        return [4 /*yield*/, this.connect(this.clientId, { url: url })];\n                    case 2:\n                        client = _a.sent();\n                        logger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n                        targetTopics.forEach(function (topic) { return client.send(topic, message); });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MqttOverWSProvider.prototype._onMessage = function (topic, msg) {\n        try {\n            var matchedTopicObservers_1 = [];\n            this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n                if (mqttTopicMatch(observerTopic, topic)) {\n                    matchedTopicObservers_1.push(observerForTopic);\n                }\n            });\n            var parsedMessage_1 = JSON.parse(msg);\n            if (typeof parsedMessage_1 === 'object') {\n                parsedMessage_1[topicSymbol] = topic;\n            }\n            matchedTopicObservers_1.forEach(function (observersForTopic) {\n                observersForTopic.forEach(function (observer) { return observer.next(parsedMessage_1); });\n            });\n        }\n        catch (error) {\n            logger.warn('Error handling message', error, msg);\n        }\n    };\n    MqttOverWSProvider.prototype.subscribe = function (topics, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var targetTopics = [].concat(topics);\n        logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n        return new Observable(function (observer) {\n            targetTopics.forEach(function (topic) {\n                // this._topicObservers is used to notify the observers according to the topic received on the message\n                var observersForTopic = _this._topicObservers.get(topic);\n                if (!observersForTopic) {\n                    observersForTopic = new Set();\n                    _this._topicObservers.set(topic, observersForTopic);\n                }\n                observersForTopic.add(observer);\n            });\n            // @ts-ignore\n            var client;\n            var _a = options.clientId, clientId = _a === void 0 ? _this.clientId : _a;\n            // this._clientIdObservers is used to close observers when client gets disconnected\n            var observersForClientId = _this._clientIdObservers.get(clientId);\n            if (!observersForClientId) {\n                observersForClientId = new Set();\n            }\n            observersForClientId.add(observer);\n            _this._clientIdObservers.set(clientId, observersForClientId);\n            (function () { return __awaiter(_this, void 0, void 0, function () {\n                var _a, url, _b, e_1;\n                return __generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            _a = options.url;\n                            if (!(_a === void 0)) return [3 /*break*/, 2];\n                            return [4 /*yield*/, this.endpoint];\n                        case 1:\n                            _b = _c.sent();\n                            return [3 /*break*/, 3];\n                        case 2:\n                            _b = _a;\n                            _c.label = 3;\n                        case 3:\n                            url = _b;\n                            _c.label = 4;\n                        case 4:\n                            _c.trys.push([4, 6, , 7]);\n                            return [4 /*yield*/, this.connect(clientId, { url: url })];\n                        case 5:\n                            client = _c.sent();\n                            targetTopics.forEach(function (topic) {\n                                client.subscribe(topic);\n                            });\n                            return [3 /*break*/, 7];\n                        case 6:\n                            e_1 = _c.sent();\n                            observer.error(e_1);\n                            return [3 /*break*/, 7];\n                        case 7: return [2 /*return*/];\n                    }\n                });\n            }); })();\n            return function () {\n                var _a, _b;\n                logger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n                if (client) {\n                    (_a = _this._clientIdObservers.get(clientId)) === null || _a === void 0 ? void 0 : _a.delete(observer);\n                    // No more observers per client => client not needed anymore\n                    if (((_b = _this._clientIdObservers.get(clientId)) === null || _b === void 0 ? void 0 : _b.size) === 0) {\n                        _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n                        _this.disconnect(clientId);\n                        _this._clientIdObservers.delete(clientId);\n                    }\n                    targetTopics.forEach(function (topic) {\n                        var observersForTopic = _this._topicObservers.get(topic) ||\n                            new Set();\n                        observersForTopic.delete(observer);\n                        // if no observers exists for the topic, topic should be removed\n                        if (observersForTopic.size === 0) {\n                            _this._topicObservers.delete(topic);\n                            if (client.isConnected()) {\n                                client.unsubscribe(topic);\n                            }\n                        }\n                    });\n                }\n                return null;\n            };\n        });\n    };\n    return MqttOverWSProvider;\n}(AbstractPubSubProvider));\nexport { MqttOverWSProvider };\n//# sourceMappingURL=MqttOverWSProvider.js.map"]},"metadata":{},"sourceType":"module"}