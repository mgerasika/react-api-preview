{"ast":null,"code":"let parser = require('postcss-selector-parser');\nfunction parse(str, rule) {\n  let nodes;\n  let saver = parser(parsed => {\n    nodes = parsed;\n  });\n  try {\n    saver.processSync(str);\n  } catch (e) {\n    if (str.includes(':')) {\n      throw rule ? rule.error('Missed semicolon') : e;\n    } else {\n      throw rule ? rule.error(e.message) : e;\n    }\n  }\n  return nodes.at(0);\n}\nfunction replace(nodes, parent) {\n  let replaced = false;\n  nodes.each(i => {\n    if (i.type === 'nesting') {\n      let clonedParent = parent.clone();\n      if (i.value !== '&') {\n        i.replaceWith(parse(i.value.replace('&', clonedParent.toString())));\n      } else {\n        i.replaceWith(clonedParent);\n      }\n      replaced = true;\n    } else if (i.nodes) {\n      if (replace(i, parent)) {\n        replaced = true;\n      }\n    }\n  });\n  return replaced;\n}\nfunction selectors(parent, child) {\n  let result = [];\n  parent.selectors.forEach(i => {\n    let parentNode = parse(i, parent);\n    child.selectors.forEach(j => {\n      if (j.length) {\n        let node = parse(j, child);\n        let replaced = replace(node, parentNode);\n        if (!replaced) {\n          node.prepend(parser.combinator({\n            value: ' '\n          }));\n          node.prepend(parentNode.clone());\n        }\n        result.push(node.toString());\n      }\n    });\n  });\n  return result;\n}\nfunction pickComment(comment, after) {\n  if (comment && comment.type === 'comment') {\n    after.after(comment);\n    return comment;\n  } else {\n    return after;\n  }\n}\nfunction createFnAtruleChilds(bubble) {\n  return function atruleChilds(rule, atrule, bubbling) {\n    let children = [];\n    atrule.each(child => {\n      if (child.type === 'comment') {\n        children.push(child);\n      } else if (child.type === 'decl') {\n        children.push(child);\n      } else if (child.type === 'rule' && bubbling) {\n        child.selectors = selectors(rule, child);\n      } else if (child.type === 'atrule') {\n        if (child.nodes && bubble[child.name]) {\n          atruleChilds(rule, child, true);\n        } else {\n          children.push(child);\n        }\n      }\n    });\n    if (bubbling) {\n      if (children.length) {\n        let clone = rule.clone({\n          nodes: []\n        });\n        for (let child of children) {\n          clone.append(child);\n        }\n        atrule.prepend(clone);\n      }\n    }\n  };\n}\nfunction pickDeclarations(selector, declarations, after, Rule) {\n  let parent = new Rule({\n    selector,\n    nodes: []\n  });\n  for (let declaration of declarations) {\n    parent.append(declaration);\n  }\n  after.after(parent);\n  return parent;\n}\nfunction atruleNames(defaults, custom) {\n  let list = {};\n  for (let i of defaults) {\n    list[i] = true;\n  }\n  if (custom) {\n    for (let i of custom) {\n      let name = i.replace(/^@/, '');\n      list[name] = true;\n    }\n  }\n  return list;\n}\nmodule.exports = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let bubble = atruleNames(['media', 'supports'], opts.bubble);\n  let atruleChilds = createFnAtruleChilds(bubble);\n  let unwrap = atruleNames(['document', 'font-face', 'keyframes', '-webkit-keyframes', '-moz-keyframes'], opts.unwrap);\n  let preserveEmpty = opts.preserveEmpty;\n  return {\n    postcssPlugin: 'postcss-nested',\n    Rule(rule, _ref) {\n      let {\n        Rule\n      } = _ref;\n      let unwrapped = false;\n      let after = rule;\n      let copyDeclarations = false;\n      let declarations = [];\n      rule.each(child => {\n        if (child.type === 'rule') {\n          if (declarations.length) {\n            after = pickDeclarations(rule.selector, declarations, after, Rule);\n            declarations = [];\n          }\n          copyDeclarations = true;\n          unwrapped = true;\n          child.selectors = selectors(rule, child);\n          after = pickComment(child.prev(), after);\n          after.after(child);\n          after = child;\n        } else if (child.type === 'atrule') {\n          if (declarations.length) {\n            after = pickDeclarations(rule.selector, declarations, after, Rule);\n            declarations = [];\n          }\n          if (child.name === 'at-root') {\n            unwrapped = true;\n            atruleChilds(rule, child, false);\n            let nodes = child.nodes;\n            if (child.params) {\n              nodes = new Rule({\n                selector: child.params,\n                nodes\n              });\n            }\n            after.after(nodes);\n            after = nodes;\n            child.remove();\n          } else if (bubble[child.name]) {\n            copyDeclarations = true;\n            unwrapped = true;\n            atruleChilds(rule, child, true);\n            after = pickComment(child.prev(), after);\n            after.after(child);\n            after = child;\n          } else if (unwrap[child.name]) {\n            copyDeclarations = true;\n            unwrapped = true;\n            atruleChilds(rule, child, false);\n            after = pickComment(child.prev(), after);\n            after.after(child);\n            after = child;\n          } else if (copyDeclarations) {\n            declarations.push(child);\n          }\n        } else if (child.type === 'decl' && copyDeclarations) {\n          declarations.push(child);\n        }\n      });\n      if (declarations.length) {\n        after = pickDeclarations(rule.selector, declarations, after, Rule);\n      }\n      if (unwrapped && preserveEmpty !== true) {\n        rule.raws.semicolon = true;\n        if (rule.nodes.length === 0) rule.remove();\n      }\n    }\n  };\n};\nmodule.exports.postcss = true;","map":{"version":3,"names":["parser","require","parse","str","rule","nodes","saver","parsed","processSync","e","includes","error","message","at","replace","parent","replaced","each","i","type","clonedParent","clone","value","replaceWith","toString","selectors","child","result","forEach","parentNode","j","length","node","prepend","combinator","push","pickComment","comment","after","createFnAtruleChilds","bubble","atruleChilds","atrule","bubbling","children","name","append","pickDeclarations","selector","declarations","Rule","declaration","atruleNames","defaults","custom","list","module","exports","opts","unwrap","preserveEmpty","postcssPlugin","unwrapped","copyDeclarations","prev","params","remove","raws","semicolon","postcss"],"sources":["/home/mgerasika/Documents/git/oddbox/oddbox-frontend-npm-usage-example/node_modules/postcss-nested/index.js"],"sourcesContent":["let parser = require('postcss-selector-parser')\n\nfunction parse (str, rule) {\n  let nodes\n  let saver = parser(parsed => {\n    nodes = parsed\n  })\n  try {\n    saver.processSync(str)\n  } catch (e) {\n    if (str.includes(':')) {\n      throw rule ? rule.error('Missed semicolon') : e\n    } else {\n      throw rule ? rule.error(e.message) : e\n    }\n  }\n  return nodes.at(0)\n}\n\nfunction replace (nodes, parent) {\n  let replaced = false\n  nodes.each(i => {\n    if (i.type === 'nesting') {\n      let clonedParent = parent.clone()\n      if (i.value !== '&') {\n        i.replaceWith(parse(i.value.replace('&', clonedParent.toString())))\n      } else {\n        i.replaceWith(clonedParent)\n      }\n      replaced = true\n    } else if (i.nodes) {\n      if (replace(i, parent)) {\n        replaced = true\n      }\n    }\n  })\n  return replaced\n}\n\nfunction selectors (parent, child) {\n  let result = []\n  parent.selectors.forEach(i => {\n    let parentNode = parse(i, parent)\n\n    child.selectors.forEach(j => {\n      if (j.length) {\n        let node = parse(j, child)\n        let replaced = replace(node, parentNode)\n        if (!replaced) {\n          node.prepend(parser.combinator({ value: ' ' }))\n          node.prepend(parentNode.clone())\n        }\n        result.push(node.toString())\n      }\n    })\n  })\n  return result\n}\n\nfunction pickComment (comment, after) {\n  if (comment && comment.type === 'comment') {\n    after.after(comment)\n    return comment\n  } else {\n    return after\n  }\n}\n\nfunction createFnAtruleChilds (bubble) {\n  return function atruleChilds (rule, atrule, bubbling) {\n    let children = []\n    atrule.each(child => {\n      if (child.type === 'comment') {\n        children.push(child)\n      } else if (child.type === 'decl') {\n        children.push(child)\n      } else if (child.type === 'rule' && bubbling) {\n        child.selectors = selectors(rule, child)\n      } else if (child.type === 'atrule') {\n        if (child.nodes && bubble[child.name]) {\n          atruleChilds(rule, child, true)\n        } else {\n          children.push(child)\n        }\n      }\n    })\n    if (bubbling) {\n      if (children.length) {\n        let clone = rule.clone({ nodes: [] })\n        for (let child of children) {\n          clone.append(child)\n        }\n        atrule.prepend(clone)\n      }\n    }\n  }\n}\n\nfunction pickDeclarations (selector, declarations, after, Rule) {\n  let parent = new Rule({\n    selector,\n    nodes: []\n  })\n\n  for (let declaration of declarations) {\n    parent.append(declaration)\n  }\n\n  after.after(parent)\n  return parent\n}\n\nfunction atruleNames (defaults, custom) {\n  let list = {}\n  for (let i of defaults) {\n    list[i] = true\n  }\n  if (custom) {\n    for (let i of custom) {\n      let name = i.replace(/^@/, '')\n      list[name] = true\n    }\n  }\n  return list\n}\n\nmodule.exports = (opts = {}) => {\n  let bubble = atruleNames(['media', 'supports'], opts.bubble)\n  let atruleChilds = createFnAtruleChilds(bubble)\n  let unwrap = atruleNames(\n    [\n      'document',\n      'font-face',\n      'keyframes',\n      '-webkit-keyframes',\n      '-moz-keyframes'\n    ],\n    opts.unwrap\n  )\n  let preserveEmpty = opts.preserveEmpty\n\n  return {\n    postcssPlugin: 'postcss-nested',\n    Rule (rule, { Rule }) {\n      let unwrapped = false\n      let after = rule\n      let copyDeclarations = false\n      let declarations = []\n\n      rule.each(child => {\n        if (child.type === 'rule') {\n          if (declarations.length) {\n            after = pickDeclarations(rule.selector, declarations, after, Rule)\n            declarations = []\n          }\n\n          copyDeclarations = true\n          unwrapped = true\n          child.selectors = selectors(rule, child)\n          after = pickComment(child.prev(), after)\n          after.after(child)\n          after = child\n        } else if (child.type === 'atrule') {\n          if (declarations.length) {\n            after = pickDeclarations(rule.selector, declarations, after, Rule)\n            declarations = []\n          }\n\n          if (child.name === 'at-root') {\n            unwrapped = true\n            atruleChilds(rule, child, false)\n\n            let nodes = child.nodes\n            if (child.params) {\n              nodes = new Rule({ selector: child.params, nodes })\n            }\n\n            after.after(nodes)\n            after = nodes\n            child.remove()\n          } else if (bubble[child.name]) {\n            copyDeclarations = true\n            unwrapped = true\n            atruleChilds(rule, child, true)\n            after = pickComment(child.prev(), after)\n            after.after(child)\n            after = child\n          } else if (unwrap[child.name]) {\n            copyDeclarations = true\n            unwrapped = true\n            atruleChilds(rule, child, false)\n            after = pickComment(child.prev(), after)\n            after.after(child)\n            after = child\n          } else if (copyDeclarations) {\n            declarations.push(child)\n          }\n        } else if (child.type === 'decl' && copyDeclarations) {\n          declarations.push(child)\n        }\n      })\n\n      if (declarations.length) {\n        after = pickDeclarations(rule.selector, declarations, after, Rule)\n      }\n\n      if (unwrapped && preserveEmpty !== true) {\n        rule.raws.semicolon = true\n        if (rule.nodes.length === 0) rule.remove()\n      }\n    }\n  }\n}\nmodule.exports.postcss = true\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAE/C,SAASC,KAAK,CAAEC,GAAG,EAAEC,IAAI,EAAE;EACzB,IAAIC,KAAK;EACT,IAAIC,KAAK,GAAGN,MAAM,CAACO,MAAM,IAAI;IAC3BF,KAAK,GAAGE,MAAM;EAChB,CAAC,CAAC;EACF,IAAI;IACFD,KAAK,CAACE,WAAW,CAACL,GAAG,CAAC;EACxB,CAAC,CAAC,OAAOM,CAAC,EAAE;IACV,IAAIN,GAAG,CAACO,QAAQ,CAAC,GAAG,CAAC,EAAE;MACrB,MAAMN,IAAI,GAAGA,IAAI,CAACO,KAAK,CAAC,kBAAkB,CAAC,GAAGF,CAAC;IACjD,CAAC,MAAM;MACL,MAAML,IAAI,GAAGA,IAAI,CAACO,KAAK,CAACF,CAAC,CAACG,OAAO,CAAC,GAAGH,CAAC;IACxC;EACF;EACA,OAAOJ,KAAK,CAACQ,EAAE,CAAC,CAAC,CAAC;AACpB;AAEA,SAASC,OAAO,CAAET,KAAK,EAAEU,MAAM,EAAE;EAC/B,IAAIC,QAAQ,GAAG,KAAK;EACpBX,KAAK,CAACY,IAAI,CAACC,CAAC,IAAI;IACd,IAAIA,CAAC,CAACC,IAAI,KAAK,SAAS,EAAE;MACxB,IAAIC,YAAY,GAAGL,MAAM,CAACM,KAAK,EAAE;MACjC,IAAIH,CAAC,CAACI,KAAK,KAAK,GAAG,EAAE;QACnBJ,CAAC,CAACK,WAAW,CAACrB,KAAK,CAACgB,CAAC,CAACI,KAAK,CAACR,OAAO,CAAC,GAAG,EAAEM,YAAY,CAACI,QAAQ,EAAE,CAAC,CAAC,CAAC;MACrE,CAAC,MAAM;QACLN,CAAC,CAACK,WAAW,CAACH,YAAY,CAAC;MAC7B;MACAJ,QAAQ,GAAG,IAAI;IACjB,CAAC,MAAM,IAAIE,CAAC,CAACb,KAAK,EAAE;MAClB,IAAIS,OAAO,CAACI,CAAC,EAAEH,MAAM,CAAC,EAAE;QACtBC,QAAQ,GAAG,IAAI;MACjB;IACF;EACF,CAAC,CAAC;EACF,OAAOA,QAAQ;AACjB;AAEA,SAASS,SAAS,CAAEV,MAAM,EAAEW,KAAK,EAAE;EACjC,IAAIC,MAAM,GAAG,EAAE;EACfZ,MAAM,CAACU,SAAS,CAACG,OAAO,CAACV,CAAC,IAAI;IAC5B,IAAIW,UAAU,GAAG3B,KAAK,CAACgB,CAAC,EAAEH,MAAM,CAAC;IAEjCW,KAAK,CAACD,SAAS,CAACG,OAAO,CAACE,CAAC,IAAI;MAC3B,IAAIA,CAAC,CAACC,MAAM,EAAE;QACZ,IAAIC,IAAI,GAAG9B,KAAK,CAAC4B,CAAC,EAAEJ,KAAK,CAAC;QAC1B,IAAIV,QAAQ,GAAGF,OAAO,CAACkB,IAAI,EAAEH,UAAU,CAAC;QACxC,IAAI,CAACb,QAAQ,EAAE;UACbgB,IAAI,CAACC,OAAO,CAACjC,MAAM,CAACkC,UAAU,CAAC;YAAEZ,KAAK,EAAE;UAAI,CAAC,CAAC,CAAC;UAC/CU,IAAI,CAACC,OAAO,CAACJ,UAAU,CAACR,KAAK,EAAE,CAAC;QAClC;QACAM,MAAM,CAACQ,IAAI,CAACH,IAAI,CAACR,QAAQ,EAAE,CAAC;MAC9B;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAOG,MAAM;AACf;AAEA,SAASS,WAAW,CAAEC,OAAO,EAAEC,KAAK,EAAE;EACpC,IAAID,OAAO,IAAIA,OAAO,CAAClB,IAAI,KAAK,SAAS,EAAE;IACzCmB,KAAK,CAACA,KAAK,CAACD,OAAO,CAAC;IACpB,OAAOA,OAAO;EAChB,CAAC,MAAM;IACL,OAAOC,KAAK;EACd;AACF;AAEA,SAASC,oBAAoB,CAAEC,MAAM,EAAE;EACrC,OAAO,SAASC,YAAY,CAAErC,IAAI,EAAEsC,MAAM,EAAEC,QAAQ,EAAE;IACpD,IAAIC,QAAQ,GAAG,EAAE;IACjBF,MAAM,CAACzB,IAAI,CAACS,KAAK,IAAI;MACnB,IAAIA,KAAK,CAACP,IAAI,KAAK,SAAS,EAAE;QAC5ByB,QAAQ,CAACT,IAAI,CAACT,KAAK,CAAC;MACtB,CAAC,MAAM,IAAIA,KAAK,CAACP,IAAI,KAAK,MAAM,EAAE;QAChCyB,QAAQ,CAACT,IAAI,CAACT,KAAK,CAAC;MACtB,CAAC,MAAM,IAAIA,KAAK,CAACP,IAAI,KAAK,MAAM,IAAIwB,QAAQ,EAAE;QAC5CjB,KAAK,CAACD,SAAS,GAAGA,SAAS,CAACrB,IAAI,EAAEsB,KAAK,CAAC;MAC1C,CAAC,MAAM,IAAIA,KAAK,CAACP,IAAI,KAAK,QAAQ,EAAE;QAClC,IAAIO,KAAK,CAACrB,KAAK,IAAImC,MAAM,CAACd,KAAK,CAACmB,IAAI,CAAC,EAAE;UACrCJ,YAAY,CAACrC,IAAI,EAAEsB,KAAK,EAAE,IAAI,CAAC;QACjC,CAAC,MAAM;UACLkB,QAAQ,CAACT,IAAI,CAACT,KAAK,CAAC;QACtB;MACF;IACF,CAAC,CAAC;IACF,IAAIiB,QAAQ,EAAE;MACZ,IAAIC,QAAQ,CAACb,MAAM,EAAE;QACnB,IAAIV,KAAK,GAAGjB,IAAI,CAACiB,KAAK,CAAC;UAAEhB,KAAK,EAAE;QAAG,CAAC,CAAC;QACrC,KAAK,IAAIqB,KAAK,IAAIkB,QAAQ,EAAE;UAC1BvB,KAAK,CAACyB,MAAM,CAACpB,KAAK,CAAC;QACrB;QACAgB,MAAM,CAACT,OAAO,CAACZ,KAAK,CAAC;MACvB;IACF;EACF,CAAC;AACH;AAEA,SAAS0B,gBAAgB,CAAEC,QAAQ,EAAEC,YAAY,EAAEX,KAAK,EAAEY,IAAI,EAAE;EAC9D,IAAInC,MAAM,GAAG,IAAImC,IAAI,CAAC;IACpBF,QAAQ;IACR3C,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,KAAK,IAAI8C,WAAW,IAAIF,YAAY,EAAE;IACpClC,MAAM,CAAC+B,MAAM,CAACK,WAAW,CAAC;EAC5B;EAEAb,KAAK,CAACA,KAAK,CAACvB,MAAM,CAAC;EACnB,OAAOA,MAAM;AACf;AAEA,SAASqC,WAAW,CAAEC,QAAQ,EAAEC,MAAM,EAAE;EACtC,IAAIC,IAAI,GAAG,CAAC,CAAC;EACb,KAAK,IAAIrC,CAAC,IAAImC,QAAQ,EAAE;IACtBE,IAAI,CAACrC,CAAC,CAAC,GAAG,IAAI;EAChB;EACA,IAAIoC,MAAM,EAAE;IACV,KAAK,IAAIpC,CAAC,IAAIoC,MAAM,EAAE;MACpB,IAAIT,IAAI,GAAG3B,CAAC,CAACJ,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;MAC9ByC,IAAI,CAACV,IAAI,CAAC,GAAG,IAAI;IACnB;EACF;EACA,OAAOU,IAAI;AACb;AAEAC,MAAM,CAACC,OAAO,GAAG,YAAe;EAAA,IAAdC,IAAI,uEAAG,CAAC,CAAC;EACzB,IAAIlB,MAAM,GAAGY,WAAW,CAAC,CAAC,OAAO,EAAE,UAAU,CAAC,EAAEM,IAAI,CAAClB,MAAM,CAAC;EAC5D,IAAIC,YAAY,GAAGF,oBAAoB,CAACC,MAAM,CAAC;EAC/C,IAAImB,MAAM,GAAGP,WAAW,CACtB,CACE,UAAU,EACV,WAAW,EACX,WAAW,EACX,mBAAmB,EACnB,gBAAgB,CACjB,EACDM,IAAI,CAACC,MAAM,CACZ;EACD,IAAIC,aAAa,GAAGF,IAAI,CAACE,aAAa;EAEtC,OAAO;IACLC,aAAa,EAAE,gBAAgB;IAC/BX,IAAI,CAAE9C,IAAI,QAAY;MAAA,IAAV;QAAE8C;MAAK,CAAC;MAClB,IAAIY,SAAS,GAAG,KAAK;MACrB,IAAIxB,KAAK,GAAGlC,IAAI;MAChB,IAAI2D,gBAAgB,GAAG,KAAK;MAC5B,IAAId,YAAY,GAAG,EAAE;MAErB7C,IAAI,CAACa,IAAI,CAACS,KAAK,IAAI;QACjB,IAAIA,KAAK,CAACP,IAAI,KAAK,MAAM,EAAE;UACzB,IAAI8B,YAAY,CAAClB,MAAM,EAAE;YACvBO,KAAK,GAAGS,gBAAgB,CAAC3C,IAAI,CAAC4C,QAAQ,EAAEC,YAAY,EAAEX,KAAK,EAAEY,IAAI,CAAC;YAClED,YAAY,GAAG,EAAE;UACnB;UAEAc,gBAAgB,GAAG,IAAI;UACvBD,SAAS,GAAG,IAAI;UAChBpC,KAAK,CAACD,SAAS,GAAGA,SAAS,CAACrB,IAAI,EAAEsB,KAAK,CAAC;UACxCY,KAAK,GAAGF,WAAW,CAACV,KAAK,CAACsC,IAAI,EAAE,EAAE1B,KAAK,CAAC;UACxCA,KAAK,CAACA,KAAK,CAACZ,KAAK,CAAC;UAClBY,KAAK,GAAGZ,KAAK;QACf,CAAC,MAAM,IAAIA,KAAK,CAACP,IAAI,KAAK,QAAQ,EAAE;UAClC,IAAI8B,YAAY,CAAClB,MAAM,EAAE;YACvBO,KAAK,GAAGS,gBAAgB,CAAC3C,IAAI,CAAC4C,QAAQ,EAAEC,YAAY,EAAEX,KAAK,EAAEY,IAAI,CAAC;YAClED,YAAY,GAAG,EAAE;UACnB;UAEA,IAAIvB,KAAK,CAACmB,IAAI,KAAK,SAAS,EAAE;YAC5BiB,SAAS,GAAG,IAAI;YAChBrB,YAAY,CAACrC,IAAI,EAAEsB,KAAK,EAAE,KAAK,CAAC;YAEhC,IAAIrB,KAAK,GAAGqB,KAAK,CAACrB,KAAK;YACvB,IAAIqB,KAAK,CAACuC,MAAM,EAAE;cAChB5D,KAAK,GAAG,IAAI6C,IAAI,CAAC;gBAAEF,QAAQ,EAAEtB,KAAK,CAACuC,MAAM;gBAAE5D;cAAM,CAAC,CAAC;YACrD;YAEAiC,KAAK,CAACA,KAAK,CAACjC,KAAK,CAAC;YAClBiC,KAAK,GAAGjC,KAAK;YACbqB,KAAK,CAACwC,MAAM,EAAE;UAChB,CAAC,MAAM,IAAI1B,MAAM,CAACd,KAAK,CAACmB,IAAI,CAAC,EAAE;YAC7BkB,gBAAgB,GAAG,IAAI;YACvBD,SAAS,GAAG,IAAI;YAChBrB,YAAY,CAACrC,IAAI,EAAEsB,KAAK,EAAE,IAAI,CAAC;YAC/BY,KAAK,GAAGF,WAAW,CAACV,KAAK,CAACsC,IAAI,EAAE,EAAE1B,KAAK,CAAC;YACxCA,KAAK,CAACA,KAAK,CAACZ,KAAK,CAAC;YAClBY,KAAK,GAAGZ,KAAK;UACf,CAAC,MAAM,IAAIiC,MAAM,CAACjC,KAAK,CAACmB,IAAI,CAAC,EAAE;YAC7BkB,gBAAgB,GAAG,IAAI;YACvBD,SAAS,GAAG,IAAI;YAChBrB,YAAY,CAACrC,IAAI,EAAEsB,KAAK,EAAE,KAAK,CAAC;YAChCY,KAAK,GAAGF,WAAW,CAACV,KAAK,CAACsC,IAAI,EAAE,EAAE1B,KAAK,CAAC;YACxCA,KAAK,CAACA,KAAK,CAACZ,KAAK,CAAC;YAClBY,KAAK,GAAGZ,KAAK;UACf,CAAC,MAAM,IAAIqC,gBAAgB,EAAE;YAC3Bd,YAAY,CAACd,IAAI,CAACT,KAAK,CAAC;UAC1B;QACF,CAAC,MAAM,IAAIA,KAAK,CAACP,IAAI,KAAK,MAAM,IAAI4C,gBAAgB,EAAE;UACpDd,YAAY,CAACd,IAAI,CAACT,KAAK,CAAC;QAC1B;MACF,CAAC,CAAC;MAEF,IAAIuB,YAAY,CAAClB,MAAM,EAAE;QACvBO,KAAK,GAAGS,gBAAgB,CAAC3C,IAAI,CAAC4C,QAAQ,EAAEC,YAAY,EAAEX,KAAK,EAAEY,IAAI,CAAC;MACpE;MAEA,IAAIY,SAAS,IAAIF,aAAa,KAAK,IAAI,EAAE;QACvCxD,IAAI,CAAC+D,IAAI,CAACC,SAAS,GAAG,IAAI;QAC1B,IAAIhE,IAAI,CAACC,KAAK,CAAC0B,MAAM,KAAK,CAAC,EAAE3B,IAAI,CAAC8D,MAAM,EAAE;MAC5C;IACF;EACF,CAAC;AACH,CAAC;AACDV,MAAM,CAACC,OAAO,CAACY,OAAO,GAAG,IAAI"},"metadata":{},"sourceType":"script"}