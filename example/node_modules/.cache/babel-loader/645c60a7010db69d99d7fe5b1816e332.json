{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport { comparePath } from './compare-path.util.js';\nvar findLinksByPath = function findLinksByPath(pathName, links) {\n  var res = [];\n  links.forEach(function (link) {\n    var _link$href;\n    if (link.subLinks) {\n      var subRes = findLinksByPath(pathName, link.subLinks);\n      if (subRes && subRes.length) {\n        res.push(link);\n      }\n      res = [].concat(_toConsumableArray(res), _toConsumableArray(subRes));\n    }\n    if (link.href && comparePath((_link$href = link.href) === null || _link$href === void 0 ? void 0 : _link$href.toString(), pathName)) {\n      res.push(link);\n    }\n  });\n  return res;\n};\nexport { findLinksByPath };","map":{"version":3,"sources":["../../../src/utils/find-links-by-path.util.ts"],"names":["findLinksByPath","pathName","links","res","forEach","link","subLinks","subRes","length","push","href","comparePath","toString"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGaA,eAAe,GAAG,SAAlBA,eAAe,CAAIC,QAAgB,EAAEC,KAAc,EAAc;EAC1E,IAAIC,GAAY,GAAG,EAAE;EACrBD,KAAK,CAACE,OAAO,CAAEC,UAAAA,IAAI,EAAK;IAAA,IAAA,UAAA;IACpB,IAAIA,IAAI,CAACC,QAAQ,EAAE;MACf,IAAMC,MAAM,GAAGP,eAAe,CAACC,QAAQ,EAAEI,IAAI,CAACC,QAAQ,CAAC;MACvD,IAAIC,MAAM,IAAIA,MAAM,CAACC,MAAM,EAAE;QACzBL,GAAG,CAACM,IAAI,CAACJ,IAAI,CAAC;MAClB;MACAF,GAAG,GAAA,EAAA,CAAA,MAAA,CAAA,kBAAA,CAAOA,GAAG,CAAA,EAAA,kBAAA,CAAKI,MAAM,CAAA,CAAC;IAC7B;IACA,IAAIF,IAAI,CAACK,IAAI,IAAIC,WAAW,CAAA,CAAA,UAAA,GAACN,IAAI,CAACK,IAAI,MAAA,IAAA,IAAA,UAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAATL,UAAAA,CAAWO,QAAQ,EAAE,EAAEX,QAAQ,CAAC,EAAE;MAC3DE,GAAG,CAACM,IAAI,CAACJ,IAAI,CAAC;IAClB;EACJ,CAAC,CAAC;EACF,OAAOF,GAAG;AACd,CAAA","sourcesContent":["import { ILink } from '@common/interfaces/link.interface';\nimport { comparePath } from './compare-path.util';\n\nexport const findLinksByPath = (pathName: string, links: ILink[]): ILink[] => {\n    let res: ILink[] = [];\n    links.forEach((link) => {\n        if (link.subLinks) {\n            const subRes = findLinksByPath(pathName, link.subLinks);\n            if (subRes && subRes.length) {\n                res.push(link);\n            }\n            res = [...res, ...subRes];\n        }\n        if (link.href && comparePath(link.href?.toString(), pathName)) {\n            res.push(link);\n        }\n    });\n    return res;\n};\n"]},"metadata":{},"sourceType":"module"}