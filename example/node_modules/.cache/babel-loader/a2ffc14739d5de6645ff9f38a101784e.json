{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelPredicateCreator, ModelSortPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, isPrivateMode, traverseModel, validatePredicate, sortCompareFunction, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, isSafariCompatabilityMode } from '../../util';\nvar logger = new Logger('DataStore');\nvar DB_NAME = 'amplify-datastore';\nvar IndexedDBAdapter = /** @class */function () {\n  function IndexedDBAdapter() {\n    var _this = this;\n    this.dbName = DB_NAME;\n    this.safariCompatabilityMode = false;\n    /**\n     * Checks the given path against the browser's IndexedDB implementation for\n     * necessary compatibility transformations, applying those transforms if needed.\n     *\n     * @param `keyArr` strings to compatibilize for browser-indexeddb index operations\n     * @returns An array or string, depending on and given key,\n     * that is ensured to be compatible with the IndexedDB implementation's nuances.\n     */\n    this.canonicalKeyPath = function (keyArr) {\n      if (_this.safariCompatabilityMode) {\n        return keyArr.length > 1 ? keyArr : keyArr[0];\n      }\n      return keyArr;\n    };\n  }\n  IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return getStorename(namespace, modelName);\n  };\n  // Retrieves primary key values from a model\n  IndexedDBAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n    return extractPrimaryKeyValues(model, keys);\n  };\n  IndexedDBAdapter.prototype.checkPrivate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isPrivate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, isPrivateMode().then(function (isPrivate) {\n              return isPrivate;\n            })];\n          case 1:\n            isPrivate = _a.sent();\n            if (isPrivate) {\n              logger.error(\"IndexedDB not supported in this browser's private mode\");\n              return [2 /*return*/, Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n            } else {\n              return [2 /*return*/, Promise.resolve()];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Whether the browser's implementation of IndexedDB is coercing single-field\n   * indexes to a scalar key.\n   *\n   * If this returns `true`, we need to treat indexes containing a single field\n   * as scalars.\n   *\n   * See PR description for reference:\n   * https://github.com/aws-amplify/amplify-js/pull/10527\n   */\n  IndexedDBAdapter.prototype.setSafariCompatabilityMode = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4 /*yield*/, isSafariCompatabilityMode()];\n          case 1:\n            _a.safariCompatabilityMode = _b.sent();\n            if (this.safariCompatabilityMode === true) {\n              logger.debug('IndexedDB Adapter is running in Safari Compatability Mode');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getNamespaceAndModelFromStorename = function (storeName) {\n    var _a = __read(storeName.split('_')),\n      namespaceName = _a[0],\n      modelNameArr = _a.slice(1);\n    return {\n      namespaceName: namespaceName,\n      modelName: modelNameArr.join('_')\n    };\n  };\n  IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName, sessionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var VERSION, _a, error_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            return [4 /*yield*/, this.setSafariCompatabilityMode()];\n          case 2:\n            _b.sent();\n            if (!!this.initPromise) return [3 /*break*/, 3];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3 /*break*/, 5];\n          case 3:\n            return [4 /*yield*/, this.initPromise];\n          case 4:\n            _b.sent();\n            _b.label = 5;\n          case 5:\n            if (sessionId) {\n              this.dbName = DB_NAME + \"-\" + sessionId;\n            }\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _b.label = 6;\n          case 6:\n            _b.trys.push([6, 9,, 10]);\n            if (!!this.db) return [3 /*break*/, 8];\n            VERSION = 3;\n            _a = this;\n            return [4 /*yield*/, idb.openDB(this.dbName, VERSION, {\n              upgrade: function (db, oldVersion, newVersion, txn) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var _a, _b, storeName, origStore, tmpName, _c, namespaceName, modelName, newStore, cursor, count, e_1_1, error_2;\n                  var e_1, _d;\n                  var _this = this;\n                  return __generator(this, function (_e) {\n                    switch (_e.label) {\n                      case 0:\n                        if (oldVersion === 0) {\n                          Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                            var namespace = theSchema.namespaces[namespaceName];\n                            Object.keys(namespace.models).forEach(function (modelName) {\n                              var storeName = getStorename(namespaceName, modelName);\n                              _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                            });\n                          });\n                          return [2 /*return*/];\n                        }\n\n                        if (!((oldVersion === 1 || oldVersion === 2) && newVersion === 3)) return [3 /*break*/, 16];\n                        _e.label = 1;\n                      case 1:\n                        _e.trys.push([1, 14,, 15]);\n                        _e.label = 2;\n                      case 2:\n                        _e.trys.push([2, 11, 12, 13]);\n                        _a = __values(txn.objectStoreNames), _b = _a.next();\n                        _e.label = 3;\n                      case 3:\n                        if (!!_b.done) return [3 /*break*/, 10];\n                        storeName = _b.value;\n                        origStore = txn.objectStore(storeName);\n                        tmpName = \"tmp_\" + storeName;\n                        origStore.name = tmpName;\n                        _c = this.getNamespaceAndModelFromStorename(storeName), namespaceName = _c.namespaceName, modelName = _c.modelName;\n                        newStore = this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                        return [4 /*yield*/, origStore.openCursor()];\n                      case 4:\n                        cursor = _e.sent();\n                        count = 0;\n                        _e.label = 5;\n                      case 5:\n                        if (!(cursor && cursor.value)) return [3 /*break*/, 8];\n                        // we don't pass key, since they are all new entries in the new store\n                        return [4 /*yield*/, newStore.put(cursor.value)];\n                      case 6:\n                        // we don't pass key, since they are all new entries in the new store\n                        _e.sent();\n                        return [4 /*yield*/, cursor.continue()];\n                      case 7:\n                        cursor = _e.sent();\n                        count++;\n                        return [3 /*break*/, 5];\n                      case 8:\n                        // delete original\n                        db.deleteObjectStore(tmpName);\n                        logger.debug(count + \" \" + storeName + \" records migrated\");\n                        _e.label = 9;\n                      case 9:\n                        _b = _a.next();\n                        return [3 /*break*/, 3];\n                      case 10:\n                        return [3 /*break*/, 13];\n                      case 11:\n                        e_1_1 = _e.sent();\n                        e_1 = {\n                          error: e_1_1\n                        };\n                        return [3 /*break*/, 13];\n                      case 12:\n                        try {\n                          if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n                        } finally {\n                          if (e_1) throw e_1.error;\n                        }\n                        return [7 /*endfinally*/];\n                      case 13:\n                        // add new models created after IndexedDB, but before migration\n                        // this case may happen when a user has not opened an app for\n                        // some time and a new model is added during that time\n                        Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                          var namespace = theSchema.namespaces[namespaceName];\n                          var objectStoreNames = new Set(txn.objectStoreNames);\n                          Object.keys(namespace.models).map(function (modelName) {\n                            return [modelName, getStorename(namespaceName, modelName)];\n                          }).filter(function (_a) {\n                            var _b = __read(_a, 2),\n                              storeName = _b[1];\n                            return !objectStoreNames.has(storeName);\n                          }).forEach(function (_a) {\n                            var _b = __read(_a, 2),\n                              modelName = _b[0],\n                              storeName = _b[1];\n                            _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                          });\n                        });\n                        return [3 /*break*/, 15];\n                      case 14:\n                        error_2 = _e.sent();\n                        logger.error('Error migrating IndexedDB data', error_2);\n                        txn.abort();\n                        throw error_2;\n                      case 15:\n                        return [2 /*return*/];\n                      case 16:\n                        return [2 /*return*/];\n                    }\n                  });\n                });\n              }\n            })];\n\n          case 7:\n            _a.db = _b.sent();\n            this.resolve();\n            _b.label = 8;\n          case 8:\n            return [3 /*break*/, 10];\n          case 9:\n            error_1 = _b.sent();\n            this.reject(error_1);\n            return [3 /*break*/, 10];\n          case 10:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype._get = function (storeOrStoreName, keyArr) {\n    return __awaiter(this, void 0, void 0, function () {\n      var index, storeName, store, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof storeOrStoreName === 'string') {\n              storeName = storeOrStoreName;\n              index = this.db.transaction(storeName, 'readonly').store.index('byPk');\n            } else {\n              store = storeOrStoreName;\n              index = store.index('byPk');\n            }\n            return [4 /*yield*/, index.get(this.canonicalKeyPath(keyArr))];\n          case 1:\n            result = _a.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.save = function (model, condition) {\n    var e_2, _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, tx, store, keyValues, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, store_1, itemKeyValues, fromDB_1, opType, modelKeyValues, key, e_2_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                item = _a.item,\n                instance = _a.instance;\n              var storeName = getStorename(namespaceName, modelName);\n              set.add(storeName);\n              var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance,\n                keys: keys\n              };\n            });\n            tx = this.db.transaction(__spread([storeName], Array.from(set.values())), 'readwrite');\n            store = tx.objectStore(storeName);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this._get(store, keyValues)];\n          case 2:\n            fromDB = _b.sent();\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              predicateObjs = predicates.predicates, type = predicates.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n            result = [];\n            _b.label = 3;\n          case 3:\n            _b.trys.push([3, 11, 12, 17]);\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _b.label = 4;\n          case 4:\n            return [4 /*yield*/, connectionStoreNames_1.next()];\n          case 5:\n            if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 10];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n            store_1 = tx.objectStore(storeName_1);\n            itemKeyValues = keys.map(function (key) {\n              var value = item[key];\n              return value;\n            });\n            return [4 /*yield*/, this._get(store_1, itemKeyValues)];\n          case 6:\n            fromDB_1 = _b.sent();\n            opType = fromDB_1 === undefined ? OpType.INSERT : OpType.UPDATE;\n            modelKeyValues = this.getIndexKeyValuesFromModel(model);\n            if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT)) return [3 /*break*/, 9];\n            return [4 /*yield*/, store_1.index('byPk').getKey(this.canonicalKeyPath(itemKeyValues))];\n          case 7:\n            key = _b.sent();\n            return [4 /*yield*/, store_1.put(item, key)];\n          case 8:\n            _b.sent();\n            result.push([instance, opType]);\n            _b.label = 9;\n          case 9:\n            return [3 /*break*/, 4];\n          case 10:\n            return [3 /*break*/, 17];\n          case 11:\n            e_2_1 = _b.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3 /*break*/, 17];\n          case 12:\n            _b.trys.push([12,, 15, 16]);\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 14];\n            return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n          case 13:\n            _b.sent();\n            _b.label = 14;\n          case 14:\n            return [3 /*break*/, 16];\n          case 15:\n            if (e_2) throw e_2.error;\n            return [7 /*endfinally*/];\n          case 16:\n            return [7 /*endfinally*/];\n          case 17:\n            return [4 /*yield*/, tx.done];\n          case 18:\n            _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    var records_1, records_1_1, records_2, records_2_1;\n    var e_3, _a, e_4, _b, e_5, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor, tx, relations_1, relations_1_1, relation, fieldName, modelName, targetName, targetNames, storeName, store, modelConstructor_1, _d, recordItem, getByFields, allPresent, keys, connectionRecord, getByfield, key, connectionRecord, e_4_1, recordItem, allPresent, keys, connectionRecord, key, connectionRecord, e_5_1, e_3_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            namespace = this.schema.namespaces[namespaceName];\n            relations = namespace.relationships[srcModelName].relationTypes;\n            connectionStoreNames = relations.map(function (_a) {\n              var modelName = _a.modelName;\n              return getStorename(namespaceName, modelName);\n            });\n            modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n            if (connectionStoreNames.length === 0) {\n              return [2 /*return*/, records.map(function (record) {\n                return _this.modelInstanceCreator(modelConstructor, record);\n              })];\n            }\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readonly');\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 38, 39, 44]);\n            relations_1 = __asyncValues(relations);\n            _e.label = 2;\n          case 2:\n            return [4 /*yield*/, relations_1.next()];\n          case 3:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 37];\n            relation = relations_1_1.value;\n            fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName, targetNames = relation.targetNames;\n            storeName = getStorename(namespaceName, modelName);\n            store = tx.objectStore(storeName);\n            modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n            _d = relation.relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 4];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 19];\n              case 'HAS_MANY':\n                return [3 /*break*/, 34];\n            }\n            return [3 /*break*/, 35];\n          case 4:\n            _e.trys.push([4, 12, 13, 18]);\n            records_1 = __asyncValues(records);\n            _e.label = 5;\n          case 5:\n            return [4 /*yield*/, records_1.next()];\n          case 6:\n            if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3 /*break*/, 11];\n            recordItem = records_1_1.value;\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n            getByFields = [];\n            allPresent = void 0;\n            // iterate through all targetnames to make sure they are all present in the recordItem\n            allPresent = targetNames.every(function (targetName) {\n              return recordItem[targetName] != null;\n            });\n            if (!allPresent) {\n              return [3 /*break*/, 11];\n            }\n            getByFields = targetNames;\n            keys = getByFields.map(function (getByField) {\n              return recordItem[getByField];\n            });\n            return [4 /*yield*/, this._get(store, keys)];\n          case 7:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            return [3 /*break*/, 10];\n          case 8:\n            getByfield = recordItem[targetName] ? targetName : fieldName;\n            // We break here, because the recordItem does not have 'team', the `getByField`\n            // extract the keys on the related model.\n            if (!recordItem[getByfield]) return [3 /*break*/, 11];\n            key = [recordItem[getByfield]];\n            return [4 /*yield*/, this._get(store, key)];\n          case 9:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            _e.label = 10;\n          case 10:\n            return [3 /*break*/, 5];\n          case 11:\n            return [3 /*break*/, 18];\n          case 12:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3 /*break*/, 18];\n          case 13:\n            _e.trys.push([13,, 16, 17]);\n            if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3 /*break*/, 15];\n            return [4 /*yield*/, _b.call(records_1)];\n          case 14:\n            _e.sent();\n            _e.label = 15;\n          case 15:\n            return [3 /*break*/, 17];\n          case 16:\n            if (e_4) throw e_4.error;\n            return [7 /*endfinally*/];\n          case 17:\n            return [7 /*endfinally*/];\n          case 18:\n            return [3 /*break*/, 36];\n          case 19:\n            _e.trys.push([19, 27, 28, 33]);\n            records_2 = __asyncValues(records);\n            _e.label = 20;\n          case 20:\n            return [4 /*yield*/, records_2.next()];\n          case 21:\n            if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3 /*break*/, 26];\n            recordItem = records_2_1.value;\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 23];\n            allPresent = void 0;\n            // iterate through all targetnames to make sure they are all present in the recordItem\n            allPresent = targetNames.every(function (targetName) {\n              return recordItem[targetName] != null;\n            });\n            // If not present, there is not yet a connected record\n            if (!allPresent) {\n              return [3 /*break*/, 26];\n            }\n            keys = targetNames.map(function (targetName) {\n              return recordItem[targetName];\n            });\n            return [4 /*yield*/, this._get(store, keys)];\n          case 22:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            targetNames === null || targetNames === void 0 ? void 0 : targetNames.map(function (targetName) {\n              delete recordItem[targetName];\n            });\n            return [3 /*break*/, 25];\n          case 23:\n            if (!recordItem[targetName]) return [3 /*break*/, 25];\n            key = [recordItem[targetName]];\n            return [4 /*yield*/, this._get(store, key)];\n          case 24:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            delete recordItem[targetName];\n            _e.label = 25;\n          case 25:\n            return [3 /*break*/, 20];\n          case 26:\n            return [3 /*break*/, 33];\n          case 27:\n            e_5_1 = _e.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3 /*break*/, 33];\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n            if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3 /*break*/, 30];\n            return [4 /*yield*/, _c.call(records_2)];\n          case 29:\n            _e.sent();\n            _e.label = 30;\n          case 30:\n            return [3 /*break*/, 32];\n          case 31:\n            if (e_5) throw e_5.error;\n            return [7 /*endfinally*/];\n          case 32:\n            return [7 /*endfinally*/];\n          case 33:\n            return [3 /*break*/, 36];\n          case 34:\n            // TODO: Lazy loading\n            return [3 /*break*/, 36];\n          case 35:\n            exhaustiveCheck(relation.relationType);\n            return [3 /*break*/, 36];\n          case 36:\n            return [3 /*break*/, 2];\n          case 37:\n            return [3 /*break*/, 44];\n          case 38:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3 /*break*/, 44];\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 41];\n            return [4 /*yield*/, _a.call(relations_1)];\n          case 40:\n            _e.sent();\n            _e.label = 41;\n          case 41:\n            return [3 /*break*/, 43];\n          case 42:\n            if (e_3) throw e_3.error;\n            return [7 /*endfinally*/];\n          case 43:\n            return [7 /*endfinally*/];\n          case 44:\n            return [2 /*return*/, records.map(function (record) {\n              return _this.modelInstanceCreator(modelConstructor, record);\n            })];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, keyPath, queryByKey, hasSort, hasPagination, records;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            keyPath = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n            queryByKey = predicates && this.keyValueFromPredicate(predicates, keyPath);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4 /*yield*/, function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryByKey) return [3 /*break*/, 2];\n                      return [4 /*yield*/, this.getByKey(storeName, queryByKey)];\n                    case 1:\n                      record = _a.sent();\n                      return [2 /*return*/, record ? [record] : []];\n                    case 2:\n                      if (!predicates) return [3 /*break*/, 4];\n                      return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];\n                    case 3:\n                      filtered = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];\n                    case 4:\n                      if (!hasSort) return [3 /*break*/, 6];\n                      return [4 /*yield*/, this.getAll(storeName)];\n                    case 5:\n                      all = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(all, pagination)];\n                    case 6:\n                      if (hasPagination) {\n                        return [2 /*return*/, this.enginePagination(storeName, pagination)];\n                      }\n                      return [2 /*return*/, this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n          case 2:\n            records = _a.sent();\n            return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];\n          case 3:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.getByKey = function (storeName, keyValue) {\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._get(storeName, keyValue)];\n          case 1:\n            record = _a.sent();\n            return [2 /*return*/, record];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.keyValueFromPredicate = function (predicates, keyPath) {\n    var e_6, _a;\n    var predicateObjs = predicates.predicates;\n    if (predicateObjs.length !== keyPath.length) {\n      return;\n    }\n    var keyValues = [];\n    var _loop_1 = function (key) {\n      var predicateObj = predicateObjs.find(function (p) {\n        return isPredicateObj(p) && p.field === key && p.operator === 'eq';\n      });\n      predicateObj && keyValues.push(predicateObj.operand);\n    };\n    try {\n      for (var keyPath_1 = __values(keyPath), keyPath_1_1 = keyPath_1.next(); !keyPath_1_1.done; keyPath_1_1 = keyPath_1.next()) {\n        var key = keyPath_1_1.value;\n        _loop_1(key);\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (keyPath_1_1 && !keyPath_1_1.done && (_a = keyPath_1.return)) _a.call(keyPath_1);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n    return keyValues.length === keyPath.length ? keyValues : undefined;\n  };\n  IndexedDBAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, all, filtered;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4 /*yield*/, this.getAll(storeName)];\n          case 1:\n            all = _a.sent();\n            filtered = predicateObjs ? all.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : all;\n            return [2 /*return*/, filtered];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    if (pagination && records.length > 1) {\n      if (pagination.sort) {\n        var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n        if (sortPredicates.length) {\n          var compareFn = sortCompareFunction(sortPredicates);\n          records.sort(compareFn);\n        }\n      }\n      var _a = pagination.page,\n        page = _a === void 0 ? 0 : _a,\n        _b = pagination.limit,\n        limit = _b === void 0 ? 0 : _b;\n      var start = Math.max(0, page * limit) || 0;\n      var end = limit > 0 ? start + limit : records.length;\n      return records.slice(start, end);\n    }\n    return records;\n  };\n  IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!pagination) return [3 /*break*/, 7];\n            _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            initialRecord = Math.max(0, page * limit) || 0;\n            return [4 /*yield*/, this.db.transaction(storeName).objectStore(storeName).openCursor()];\n          case 1:\n            cursor = _c.sent();\n            if (!(cursor && initialRecord > 0)) return [3 /*break*/, 3];\n            return [4 /*yield*/, cursor.advance(initialRecord)];\n          case 2:\n            _c.sent();\n            _c.label = 3;\n          case 3:\n            pageResults = [];\n            hasLimit = typeof limit === 'number' && limit > 0;\n            _c.label = 4;\n          case 4:\n            if (!(cursor && cursor.value)) return [3 /*break*/, 6];\n            pageResults.push(cursor.value);\n            if (hasLimit && pageResults.length === limit) {\n              return [3 /*break*/, 6];\n            }\n            return [4 /*yield*/, cursor.continue()];\n          case 5:\n            cursor = _c.sent();\n            return [3 /*break*/, 4];\n          case 6:\n            result = pageResults;\n            return [3 /*break*/, 9];\n          case 7:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 8:\n            result = _c.sent();\n            _c.label = 9;\n          case 9:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, cursor, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.db.transaction([storeName], 'readonly').objectStore(storeName).openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n          case 2:\n            cursor = _a.sent();\n            result = cursor ? cursor.value : undefined;\n            return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, tx, store, keyValues, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 9];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.query(modelConstructor, condition)];\n          case 2:\n            models = _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 3:\n            _a.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 4:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 5:\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 6:\n            _a.sent();\n            // Delete all\n            return [4 /*yield*/, this.db.transaction([storeName], 'readwrite').objectStore(storeName).clear()];\n          case 7:\n            // Delete all\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 8:\n            return [3 /*break*/, 17];\n          case 9:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3 /*break*/, 13];\n            tx = this.db.transaction([storeName], 'readwrite');\n            store = tx.objectStore(storeName);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this._get(store, keyValues)];\n          case 10:\n            fromDB = _a.sent();\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2 /*return*/, [[model], []]];\n            }\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            predicateObjs = predicates.predicates, type = predicates.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n            return [4 /*yield*/, tx.done];\n          case 11:\n            _a.sent();\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n          case 12:\n            _a.sent();\n            return [3 /*break*/, 15];\n          case 13:\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n          case 14:\n            _a.sent();\n            _a.label = 15;\n          case 15:\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 16:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [[model], deletedModels]];\n          case 17:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n    var deleteQueue_1, deleteQueue_1_1;\n    var e_7, _a, e_8, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var connectionStoreNames, tx, deleteItem, storeName, items, store, items_1, items_1_1, item, key, keyValues, itemKey, e_8_1, e_7_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            connectionStoreNames = deleteQueue.map(function (_a) {\n              var storeName = _a.storeName;\n              return storeName;\n            });\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readwrite');\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 22, 23, 28]);\n            deleteQueue_1 = __asyncValues(deleteQueue);\n            _c.label = 2;\n          case 2:\n            return [4 /*yield*/, deleteQueue_1.next()];\n          case 3:\n            if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3 /*break*/, 21];\n            deleteItem = deleteQueue_1_1.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            store = tx.objectStore(storeName);\n            _c.label = 4;\n          case 4:\n            _c.trys.push([4, 14, 15, 20]);\n            items_1 = __asyncValues(items);\n            _c.label = 5;\n          case 5:\n            return [4 /*yield*/, items_1.next()];\n          case 6:\n            if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3 /*break*/, 13];\n            item = items_1_1.value;\n            if (!item) return [3 /*break*/, 12];\n            key = void 0;\n            if (!(typeof item === 'object')) return [3 /*break*/, 8];\n            keyValues = this.getIndexKeyValuesFromModel(item);\n            return [4 /*yield*/, store.index('byPk').getKey(this.canonicalKeyPath(keyValues))];\n          case 7:\n            key = _c.sent();\n            return [3 /*break*/, 10];\n          case 8:\n            itemKey = item.toString();\n            return [4 /*yield*/, store.index('byPk').getKey(itemKey)];\n          case 9:\n            key = _c.sent();\n            _c.label = 10;\n          case 10:\n            if (!(key !== undefined)) return [3 /*break*/, 12];\n            return [4 /*yield*/, store.delete(key)];\n          case 11:\n            _c.sent();\n            _c.label = 12;\n          case 12:\n            return [3 /*break*/, 5];\n          case 13:\n            return [3 /*break*/, 20];\n          case 14:\n            e_8_1 = _c.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3 /*break*/, 20];\n          case 15:\n            _c.trys.push([15,, 18, 19]);\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 17];\n            return [4 /*yield*/, _b.call(items_1)];\n          case 16:\n            _c.sent();\n            _c.label = 17;\n          case 17:\n            return [3 /*break*/, 19];\n          case 18:\n            if (e_8) throw e_8.error;\n            return [7 /*endfinally*/];\n          case 19:\n            return [7 /*endfinally*/];\n          case 20:\n            return [3 /*break*/, 2];\n          case 21:\n            return [3 /*break*/, 28];\n          case 22:\n            e_7_1 = _c.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3 /*break*/, 28];\n          case 23:\n            _c.trys.push([23,, 26, 27]);\n            if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3 /*break*/, 25];\n            return [4 /*yield*/, _a.call(deleteQueue_1)];\n          case 24:\n            _c.sent();\n            _c.label = 25;\n          case 25:\n            return [3 /*break*/, 27];\n          case 26:\n            if (e_7) throw e_7.error;\n            return [7 /*endfinally*/];\n          case 27:\n            return [7 /*endfinally*/];\n          case 28:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n    var e_9, _a, e_10, _b, e_11, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, _d, model, hasOneIndex, values, recordToDelete, index, values, value, recordToDelete, e_10_1, model, index, keyValues, childrenArray, e_11_1, e_9_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 38, 39, 44]);\n            relations_2 = __asyncValues(relations);\n            _e.label = 1;\n          case 1:\n            return [4 /*yield*/, relations_2.next()];\n          case 2:\n            if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3 /*break*/, 37];\n            rel = relations_2_1.value;\n            relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n            storeName = getStorename(nameSpace, modelName);\n            _d = relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 3];\n              case 'HAS_MANY':\n                return [3 /*break*/, 20];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 34];\n            }\n            return [3 /*break*/, 35];\n          case 3:\n            _e.trys.push([3, 13, 14, 19]);\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n          case 4:\n            return [4 /*yield*/, models_1.next()];\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 12];\n            model = models_1_1.value;\n            hasOneIndex = 'byPk';\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n            values = targetNames.map(function (targetName) {\n              return model[targetName];\n            });\n            if (values.length === 0) return [3 /*break*/, 12];\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(hasOneIndex).get(this.canonicalKeyPath(values))];\n          case 6:\n            recordToDelete = _e.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n          case 7:\n            _e.sent();\n            return [3 /*break*/, 12];\n          case 8:\n            index = void 0;\n            values = void 0;\n            if (targetName && targetName in model) {\n              index = hasOneIndex;\n              value = model[targetName];\n              values = [value];\n            } else {\n              // backwards compatability for older versions of codegen that did not emit targetName for HAS_ONE relations\n              // TODO: can we deprecate this? it's been ~2 years since codegen started including targetName for HAS_ONE\n              // If we deprecate, we'll need to re-gen the MIPR in __tests__/schema.ts > newSchema\n              // otherwise some unit tests will fail\n              index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel);\n              values = this.getIndexKeyValuesFromModel(model);\n            }\n            if (!values || !index) return [3 /*break*/, 12];\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).get(this.canonicalKeyPath(values))];\n          case 9:\n            recordToDelete = _e.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n          case 10:\n            _e.sent();\n            _e.label = 11;\n          case 11:\n            return [3 /*break*/, 4];\n          case 12:\n            return [3 /*break*/, 19];\n          case 13:\n            e_10_1 = _e.sent();\n            e_10 = {\n              error: e_10_1\n            };\n            return [3 /*break*/, 19];\n          case 14:\n            _e.trys.push([14,, 17, 18]);\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 16];\n            return [4 /*yield*/, _b.call(models_1)];\n          case 15:\n            _e.sent();\n            _e.label = 16;\n          case 16:\n            return [3 /*break*/, 18];\n          case 17:\n            if (e_10) throw e_10.error;\n            return [7 /*endfinally*/];\n          case 18:\n            return [7 /*endfinally*/];\n          case 19:\n            return [3 /*break*/, 36];\n          case 20:\n            _e.trys.push([20, 27, 28, 33]);\n            models_2 = __asyncValues(models);\n            _e.label = 21;\n          case 21:\n            return [4 /*yield*/, models_2.next()];\n          case 22:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 26];\n            model = models_2_1.value;\n            index =\n            // explicit bi-directional @hasMany and @manyToMany\n            getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) ||\n            // uni and/or implicit @hasMany\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, associatedWith);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).getAll(this.canonicalKeyPath(keyValues))];\n          case 23:\n            childrenArray = _e.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n          case 24:\n            _e.sent();\n            _e.label = 25;\n          case 25:\n            return [3 /*break*/, 21];\n          case 26:\n            return [3 /*break*/, 33];\n          case 27:\n            e_11_1 = _e.sent();\n            e_11 = {\n              error: e_11_1\n            };\n            return [3 /*break*/, 33];\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 30];\n            return [4 /*yield*/, _c.call(models_2)];\n          case 29:\n            _e.sent();\n            _e.label = 30;\n          case 30:\n            return [3 /*break*/, 32];\n          case 31:\n            if (e_11) throw e_11.error;\n            return [7 /*endfinally*/];\n          case 32:\n            return [7 /*endfinally*/];\n          case 33:\n            return [3 /*break*/, 36];\n          case 34:\n            // Intentionally blank\n            return [3 /*break*/, 36];\n          case 35:\n            exhaustiveCheck(relationType);\n            return [3 /*break*/, 36];\n          case 36:\n            return [3 /*break*/, 1];\n          case 37:\n            return [3 /*break*/, 44];\n          case 38:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3 /*break*/, 44];\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n            if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3 /*break*/, 41];\n            return [4 /*yield*/, _a.call(relations_2)];\n          case 40:\n            _e.sent();\n            _e.label = 41;\n          case 41:\n            return [3 /*break*/, 43];\n          case 42:\n            if (e_9) throw e_9.error;\n            return [7 /*endfinally*/];\n          case 43:\n            return [7 /*endfinally*/];\n          case 44:\n            deleteQueue.push({\n              storeName: getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.clear = function () {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            (_a = this.db) === null || _a === void 0 ? void 0 : _a.close();\n            return [4 /*yield*/, idb.deleteDB(this.dbName)];\n          case 2:\n            _b.sent();\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, storeName, txn, store, _loop_2, this_1, items_2, items_2_1, item, e_12_1;\n      var e_12, _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2 /*return*/, []];\n            }\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            result = [];\n            storeName = this.getStorenameForModel(modelConstructor);\n            txn = this.db.transaction(storeName, 'readwrite');\n            store = txn.store;\n            _loop_2 = function (item) {\n              var namespaceName, modelName, model, connectedModels, keyValues, _deleted, index, key, instance;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    namespaceName = this_1.namespaceResolver(modelConstructor);\n                    modelName = modelConstructor.name;\n                    model = this_1.modelInstanceCreator(modelConstructor, item);\n                    connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n                    keyValues = this_1.getIndexKeyValuesFromModel(model);\n                    _deleted = item._deleted;\n                    index = store.index('byPk');\n                    return [4 /*yield*/, index.getKey(this_1.canonicalKeyPath(keyValues))];\n                  case 1:\n                    key = _a.sent();\n                    if (!!_deleted) return [3 /*break*/, 3];\n                    instance = connectedModels.find(function (_a) {\n                      var instance = _a.instance;\n                      var instanceKeyValues = _this.getIndexKeyValuesFromModel(instance);\n                      return keysEqual(instanceKeyValues, keyValues);\n                    }).instance;\n                    result.push([instance, key ? OpType.UPDATE : OpType.INSERT]);\n                    return [4 /*yield*/, store.put(instance, key)];\n                  case 2:\n                    _a.sent();\n                    return [3 /*break*/, 5];\n                  case 3:\n                    result.push([item, OpType.DELETE]);\n                    if (!key) return [3 /*break*/, 5];\n                    return [4 /*yield*/, store.delete(key)];\n                  case 4:\n                    _a.sent();\n                    _a.label = 5;\n                  case 5:\n                    return [2 /*return*/];\n                }\n              });\n            };\n\n            this_1 = this;\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 7, 8, 9]);\n            items_2 = __values(items), items_2_1 = items_2.next();\n            _b.label = 3;\n          case 3:\n            if (!!items_2_1.done) return [3 /*break*/, 6];\n            item = items_2_1.value;\n            return [5 /*yield**/, _loop_2(item)];\n          case 4:\n            _b.sent();\n            _b.label = 5;\n          case 5:\n            items_2_1 = items_2.next();\n            return [3 /*break*/, 3];\n          case 6:\n            return [3 /*break*/, 9];\n          case 7:\n            e_12_1 = _b.sent();\n            e_12 = {\n              error: e_12_1\n            };\n            return [3 /*break*/, 9];\n          case 8:\n            try {\n              if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n            } finally {\n              if (e_12) throw e_12.error;\n            }\n            return [7 /*endfinally*/];\n          case 9:\n            return [4 /*yield*/, txn.done];\n          case 10:\n            _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.createObjectStoreForModel = function (db, namespaceName, storeName, modelName) {\n    var store = db.createObjectStore(storeName, {\n      autoIncrement: true\n    });\n    var indexes = this.schema.namespaces[namespaceName].relationships[modelName].indexes;\n    indexes.forEach(function (_a) {\n      var _b = __read(_a, 3),\n        idxName = _b[0],\n        keyPath = _b[1],\n        options = _b[2];\n      store.createIndex(idxName, keyPath, options);\n    });\n    return store;\n  };\n  return IndexedDBAdapter;\n}();\nexport default new IndexedDBAdapter();","map":{"version":3,"sources":["../../../src/storage/adapter/IndexedDBAdapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelPredicateCreator, ModelSortPredicateCreator, } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne, } from '../../types';\nimport { exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, isPrivateMode, traverseModel, validatePredicate, sortCompareFunction, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, isSafariCompatabilityMode, } from '../../util';\nvar logger = new Logger('DataStore');\nvar DB_NAME = 'amplify-datastore';\nvar IndexedDBAdapter = /** @class */ (function () {\n    function IndexedDBAdapter() {\n        var _this = this;\n        this.dbName = DB_NAME;\n        this.safariCompatabilityMode = false;\n        /**\n         * Checks the given path against the browser's IndexedDB implementation for\n         * necessary compatibility transformations, applying those transforms if needed.\n         *\n         * @param `keyArr` strings to compatibilize for browser-indexeddb index operations\n         * @returns An array or string, depending on and given key,\n         * that is ensured to be compatible with the IndexedDB implementation's nuances.\n         */\n        this.canonicalKeyPath = function (keyArr) {\n            if (_this.safariCompatabilityMode) {\n                return keyArr.length > 1 ? keyArr : keyArr[0];\n            }\n            return keyArr;\n        };\n    }\n    IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n        var namespace = this.namespaceResolver(modelConstructor);\n        var modelName = modelConstructor.name;\n        return getStorename(namespace, modelName);\n    };\n    // Retrieves primary key values from a model\n    IndexedDBAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n        var modelConstructor = Object.getPrototypeOf(model)\n            .constructor;\n        var namespaceName = this.namespaceResolver(modelConstructor);\n        var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n        return extractPrimaryKeyValues(model, keys);\n    };\n    IndexedDBAdapter.prototype.checkPrivate = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var isPrivate;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, isPrivateMode().then(function (isPrivate) {\n                            return isPrivate;\n                        })];\n                    case 1:\n                        isPrivate = _a.sent();\n                        if (isPrivate) {\n                            logger.error(\"IndexedDB not supported in this browser's private mode\");\n                            return [2 /*return*/, Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n                        }\n                        else {\n                            return [2 /*return*/, Promise.resolve()];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Whether the browser's implementation of IndexedDB is coercing single-field\n     * indexes to a scalar key.\n     *\n     * If this returns `true`, we need to treat indexes containing a single field\n     * as scalars.\n     *\n     * See PR description for reference:\n     * https://github.com/aws-amplify/amplify-js/pull/10527\n     */\n    IndexedDBAdapter.prototype.setSafariCompatabilityMode = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, isSafariCompatabilityMode()];\n                    case 1:\n                        _a.safariCompatabilityMode = _b.sent();\n                        if (this.safariCompatabilityMode === true) {\n                            logger.debug('IndexedDB Adapter is running in Safari Compatability Mode');\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.getNamespaceAndModelFromStorename = function (storeName) {\n        var _a = __read(storeName.split('_')), namespaceName = _a[0], modelNameArr = _a.slice(1);\n        return {\n            namespaceName: namespaceName,\n            modelName: modelNameArr.join('_'),\n        };\n    };\n    IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName, sessionId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var VERSION, _a, error_1;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _b.sent();\n                        return [4 /*yield*/, this.setSafariCompatabilityMode()];\n                    case 2:\n                        _b.sent();\n                        if (!!this.initPromise) return [3 /*break*/, 3];\n                        this.initPromise = new Promise(function (res, rej) {\n                            _this.resolve = res;\n                            _this.reject = rej;\n                        });\n                        return [3 /*break*/, 5];\n                    case 3: return [4 /*yield*/, this.initPromise];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        if (sessionId) {\n                            this.dbName = DB_NAME + \"-\" + sessionId;\n                        }\n                        this.schema = theSchema;\n                        this.namespaceResolver = namespaceResolver;\n                        this.modelInstanceCreator = modelInstanceCreator;\n                        this.getModelConstructorByModelName = getModelConstructorByModelName;\n                        _b.label = 6;\n                    case 6:\n                        _b.trys.push([6, 9, , 10]);\n                        if (!!this.db) return [3 /*break*/, 8];\n                        VERSION = 3;\n                        _a = this;\n                        return [4 /*yield*/, idb.openDB(this.dbName, VERSION, {\n                                upgrade: function (db, oldVersion, newVersion, txn) { return __awaiter(_this, void 0, void 0, function () {\n                                    var _a, _b, storeName, origStore, tmpName, _c, namespaceName, modelName, newStore, cursor, count, e_1_1, error_2;\n                                    var e_1, _d;\n                                    var _this = this;\n                                    return __generator(this, function (_e) {\n                                        switch (_e.label) {\n                                            case 0:\n                                                if (oldVersion === 0) {\n                                                    Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                                                        var namespace = theSchema.namespaces[namespaceName];\n                                                        Object.keys(namespace.models).forEach(function (modelName) {\n                                                            var storeName = getStorename(namespaceName, modelName);\n                                                            _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                                                        });\n                                                    });\n                                                    return [2 /*return*/];\n                                                }\n                                                if (!((oldVersion === 1 || oldVersion === 2) && newVersion === 3)) return [3 /*break*/, 16];\n                                                _e.label = 1;\n                                            case 1:\n                                                _e.trys.push([1, 14, , 15]);\n                                                _e.label = 2;\n                                            case 2:\n                                                _e.trys.push([2, 11, 12, 13]);\n                                                _a = __values(txn.objectStoreNames), _b = _a.next();\n                                                _e.label = 3;\n                                            case 3:\n                                                if (!!_b.done) return [3 /*break*/, 10];\n                                                storeName = _b.value;\n                                                origStore = txn.objectStore(storeName);\n                                                tmpName = \"tmp_\" + storeName;\n                                                origStore.name = tmpName;\n                                                _c = this.getNamespaceAndModelFromStorename(storeName), namespaceName = _c.namespaceName, modelName = _c.modelName;\n                                                newStore = this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                                                return [4 /*yield*/, origStore.openCursor()];\n                                            case 4:\n                                                cursor = _e.sent();\n                                                count = 0;\n                                                _e.label = 5;\n                                            case 5:\n                                                if (!(cursor && cursor.value)) return [3 /*break*/, 8];\n                                                // we don't pass key, since they are all new entries in the new store\n                                                return [4 /*yield*/, newStore.put(cursor.value)];\n                                            case 6:\n                                                // we don't pass key, since they are all new entries in the new store\n                                                _e.sent();\n                                                return [4 /*yield*/, cursor.continue()];\n                                            case 7:\n                                                cursor = _e.sent();\n                                                count++;\n                                                return [3 /*break*/, 5];\n                                            case 8:\n                                                // delete original\n                                                db.deleteObjectStore(tmpName);\n                                                logger.debug(count + \" \" + storeName + \" records migrated\");\n                                                _e.label = 9;\n                                            case 9:\n                                                _b = _a.next();\n                                                return [3 /*break*/, 3];\n                                            case 10: return [3 /*break*/, 13];\n                                            case 11:\n                                                e_1_1 = _e.sent();\n                                                e_1 = { error: e_1_1 };\n                                                return [3 /*break*/, 13];\n                                            case 12:\n                                                try {\n                                                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n                                                }\n                                                finally { if (e_1) throw e_1.error; }\n                                                return [7 /*endfinally*/];\n                                            case 13:\n                                                // add new models created after IndexedDB, but before migration\n                                                // this case may happen when a user has not opened an app for\n                                                // some time and a new model is added during that time\n                                                Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                                                    var namespace = theSchema.namespaces[namespaceName];\n                                                    var objectStoreNames = new Set(txn.objectStoreNames);\n                                                    Object.keys(namespace.models)\n                                                        .map(function (modelName) {\n                                                        return [\n                                                            modelName,\n                                                            getStorename(namespaceName, modelName),\n                                                        ];\n                                                    })\n                                                        .filter(function (_a) {\n                                                        var _b = __read(_a, 2), storeName = _b[1];\n                                                        return !objectStoreNames.has(storeName);\n                                                    })\n                                                        .forEach(function (_a) {\n                                                        var _b = __read(_a, 2), modelName = _b[0], storeName = _b[1];\n                                                        _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                                                    });\n                                                });\n                                                return [3 /*break*/, 15];\n                                            case 14:\n                                                error_2 = _e.sent();\n                                                logger.error('Error migrating IndexedDB data', error_2);\n                                                txn.abort();\n                                                throw error_2;\n                                            case 15: return [2 /*return*/];\n                                            case 16: return [2 /*return*/];\n                                        }\n                                    });\n                                }); },\n                            })];\n                    case 7:\n                        _a.db = _b.sent();\n                        this.resolve();\n                        _b.label = 8;\n                    case 8: return [3 /*break*/, 10];\n                    case 9:\n                        error_1 = _b.sent();\n                        this.reject(error_1);\n                        return [3 /*break*/, 10];\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype._get = function (storeOrStoreName, keyArr) {\n        return __awaiter(this, void 0, void 0, function () {\n            var index, storeName, store, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (typeof storeOrStoreName === 'string') {\n                            storeName = storeOrStoreName;\n                            index = this.db.transaction(storeName, 'readonly').store.index('byPk');\n                        }\n                        else {\n                            store = storeOrStoreName;\n                            index = store.index('byPk');\n                        }\n                        return [4 /*yield*/, index.get(this.canonicalKeyPath(keyArr))];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.save = function (model, condition) {\n        var e_2, _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, tx, store, keyValues, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, store_1, itemKeyValues, fromDB_1, opType, modelKeyValues, key, e_2_1;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _b.sent();\n                        modelConstructor = Object.getPrototypeOf(model)\n                            .constructor;\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n                        set = new Set();\n                        connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n                            var modelName = _a.modelName, item = _a.item, instance = _a.instance;\n                            var storeName = getStorename(namespaceName, modelName);\n                            set.add(storeName);\n                            var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n                            return { storeName: storeName, item: item, instance: instance, keys: keys };\n                        });\n                        tx = this.db.transaction(__spread([storeName], Array.from(set.values())), 'readwrite');\n                        store = tx.objectStore(storeName);\n                        keyValues = this.getIndexKeyValuesFromModel(model);\n                        return [4 /*yield*/, this._get(store, keyValues)];\n                    case 2:\n                        fromDB = _b.sent();\n                        if (condition && fromDB) {\n                            predicates = ModelPredicateCreator.getPredicates(condition);\n                            predicateObjs = predicates.predicates, type = predicates.type;\n                            isValid = validatePredicate(fromDB, type, predicateObjs);\n                            if (!isValid) {\n                                msg = 'Conditional update failed';\n                                logger.error(msg, { model: fromDB, condition: predicateObjs });\n                                throw new Error(msg);\n                            }\n                        }\n                        result = [];\n                        _b.label = 3;\n                    case 3:\n                        _b.trys.push([3, 11, 12, 17]);\n                        connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n                        _b.label = 4;\n                    case 4: return [4 /*yield*/, connectionStoreNames_1.next()];\n                    case 5:\n                        if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 10];\n                        resItem = connectionStoreNames_1_1.value;\n                        storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n                        store_1 = tx.objectStore(storeName_1);\n                        itemKeyValues = keys.map(function (key) {\n                            var value = item[key];\n                            return value;\n                        });\n                        return [4 /*yield*/, this._get(store_1, itemKeyValues)];\n                    case 6:\n                        fromDB_1 = _b.sent();\n                        opType = fromDB_1 === undefined ? OpType.INSERT : OpType.UPDATE;\n                        modelKeyValues = this.getIndexKeyValuesFromModel(model);\n                        if (!(keysEqual(itemKeyValues, modelKeyValues) ||\n                            opType === OpType.INSERT)) return [3 /*break*/, 9];\n                        return [4 /*yield*/, store_1\n                                .index('byPk')\n                                .getKey(this.canonicalKeyPath(itemKeyValues))];\n                    case 7:\n                        key = _b.sent();\n                        return [4 /*yield*/, store_1.put(item, key)];\n                    case 8:\n                        _b.sent();\n                        result.push([instance, opType]);\n                        _b.label = 9;\n                    case 9: return [3 /*break*/, 4];\n                    case 10: return [3 /*break*/, 17];\n                    case 11:\n                        e_2_1 = _b.sent();\n                        e_2 = { error: e_2_1 };\n                        return [3 /*break*/, 17];\n                    case 12:\n                        _b.trys.push([12, , 15, 16]);\n                        if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 14];\n                        return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n                    case 13:\n                        _b.sent();\n                        _b.label = 14;\n                    case 14: return [3 /*break*/, 16];\n                    case 15:\n                        if (e_2) throw e_2.error;\n                        return [7 /*endfinally*/];\n                    case 16: return [7 /*endfinally*/];\n                    case 17: return [4 /*yield*/, tx.done];\n                    case 18:\n                        _b.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n        var records_1, records_1_1, records_2, records_2_1;\n        var e_3, _a, e_4, _b, e_5, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var namespace, relations, connectionStoreNames, modelConstructor, tx, relations_1, relations_1_1, relation, fieldName, modelName, targetName, targetNames, storeName, store, modelConstructor_1, _d, recordItem, getByFields, allPresent, keys, connectionRecord, getByfield, key, connectionRecord, e_4_1, recordItem, allPresent, keys, connectionRecord, key, connectionRecord, e_5_1, e_3_1;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        namespace = this.schema.namespaces[namespaceName];\n                        relations = namespace.relationships[srcModelName].relationTypes;\n                        connectionStoreNames = relations.map(function (_a) {\n                            var modelName = _a.modelName;\n                            return getStorename(namespaceName, modelName);\n                        });\n                        modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n                        if (connectionStoreNames.length === 0) {\n                            return [2 /*return*/, records.map(function (record) {\n                                    return _this.modelInstanceCreator(modelConstructor, record);\n                                })];\n                        }\n                        tx = this.db.transaction(__spread(connectionStoreNames), 'readonly');\n                        _e.label = 1;\n                    case 1:\n                        _e.trys.push([1, 38, 39, 44]);\n                        relations_1 = __asyncValues(relations);\n                        _e.label = 2;\n                    case 2: return [4 /*yield*/, relations_1.next()];\n                    case 3:\n                        if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 37];\n                        relation = relations_1_1.value;\n                        fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName, targetNames = relation.targetNames;\n                        storeName = getStorename(namespaceName, modelName);\n                        store = tx.objectStore(storeName);\n                        modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n                        _d = relation.relationType;\n                        switch (_d) {\n                            case 'HAS_ONE': return [3 /*break*/, 4];\n                            case 'BELONGS_TO': return [3 /*break*/, 19];\n                            case 'HAS_MANY': return [3 /*break*/, 34];\n                        }\n                        return [3 /*break*/, 35];\n                    case 4:\n                        _e.trys.push([4, 12, 13, 18]);\n                        records_1 = __asyncValues(records);\n                        _e.label = 5;\n                    case 5: return [4 /*yield*/, records_1.next()];\n                    case 6:\n                        if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3 /*break*/, 11];\n                        recordItem = records_1_1.value;\n                        if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n                        getByFields = [];\n                        allPresent = void 0;\n                        // iterate through all targetnames to make sure they are all present in the recordItem\n                        allPresent = targetNames.every(function (targetName) {\n                            return recordItem[targetName] != null;\n                        });\n                        if (!allPresent) {\n                            return [3 /*break*/, 11];\n                        }\n                        getByFields = targetNames;\n                        keys = getByFields.map(function (getByField) { return recordItem[getByField]; });\n                        return [4 /*yield*/, this._get(store, keys)];\n                    case 7:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        return [3 /*break*/, 10];\n                    case 8:\n                        getByfield = recordItem[targetName]\n                            ? targetName\n                            : fieldName;\n                        // We break here, because the recordItem does not have 'team', the `getByField`\n                        // extract the keys on the related model.\n                        if (!recordItem[getByfield])\n                            return [3 /*break*/, 11];\n                        key = [recordItem[getByfield]];\n                        return [4 /*yield*/, this._get(store, key)];\n                    case 9:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        _e.label = 10;\n                    case 10: return [3 /*break*/, 5];\n                    case 11: return [3 /*break*/, 18];\n                    case 12:\n                        e_4_1 = _e.sent();\n                        e_4 = { error: e_4_1 };\n                        return [3 /*break*/, 18];\n                    case 13:\n                        _e.trys.push([13, , 16, 17]);\n                        if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3 /*break*/, 15];\n                        return [4 /*yield*/, _b.call(records_1)];\n                    case 14:\n                        _e.sent();\n                        _e.label = 15;\n                    case 15: return [3 /*break*/, 17];\n                    case 16:\n                        if (e_4) throw e_4.error;\n                        return [7 /*endfinally*/];\n                    case 17: return [7 /*endfinally*/];\n                    case 18: return [3 /*break*/, 36];\n                    case 19:\n                        _e.trys.push([19, 27, 28, 33]);\n                        records_2 = __asyncValues(records);\n                        _e.label = 20;\n                    case 20: return [4 /*yield*/, records_2.next()];\n                    case 21:\n                        if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3 /*break*/, 26];\n                        recordItem = records_2_1.value;\n                        if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 23];\n                        allPresent = void 0;\n                        // iterate through all targetnames to make sure they are all present in the recordItem\n                        allPresent = targetNames.every(function (targetName) {\n                            return recordItem[targetName] != null;\n                        });\n                        // If not present, there is not yet a connected record\n                        if (!allPresent) {\n                            return [3 /*break*/, 26];\n                        }\n                        keys = targetNames.map(function (targetName) { return recordItem[targetName]; });\n                        return [4 /*yield*/, this._get(store, keys)];\n                    case 22:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        targetNames === null || targetNames === void 0 ? void 0 : targetNames.map(function (targetName) {\n                            delete recordItem[targetName];\n                        });\n                        return [3 /*break*/, 25];\n                    case 23:\n                        if (!recordItem[targetName]) return [3 /*break*/, 25];\n                        key = [recordItem[targetName]];\n                        return [4 /*yield*/, this._get(store, key)];\n                    case 24:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        delete recordItem[targetName];\n                        _e.label = 25;\n                    case 25: return [3 /*break*/, 20];\n                    case 26: return [3 /*break*/, 33];\n                    case 27:\n                        e_5_1 = _e.sent();\n                        e_5 = { error: e_5_1 };\n                        return [3 /*break*/, 33];\n                    case 28:\n                        _e.trys.push([28, , 31, 32]);\n                        if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3 /*break*/, 30];\n                        return [4 /*yield*/, _c.call(records_2)];\n                    case 29:\n                        _e.sent();\n                        _e.label = 30;\n                    case 30: return [3 /*break*/, 32];\n                    case 31:\n                        if (e_5) throw e_5.error;\n                        return [7 /*endfinally*/];\n                    case 32: return [7 /*endfinally*/];\n                    case 33: return [3 /*break*/, 36];\n                    case 34: \n                    // TODO: Lazy loading\n                    return [3 /*break*/, 36];\n                    case 35:\n                        exhaustiveCheck(relation.relationType);\n                        return [3 /*break*/, 36];\n                    case 36: return [3 /*break*/, 2];\n                    case 37: return [3 /*break*/, 44];\n                    case 38:\n                        e_3_1 = _e.sent();\n                        e_3 = { error: e_3_1 };\n                        return [3 /*break*/, 44];\n                    case 39:\n                        _e.trys.push([39, , 42, 43]);\n                        if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 41];\n                        return [4 /*yield*/, _a.call(relations_1)];\n                    case 40:\n                        _e.sent();\n                        _e.label = 41;\n                    case 41: return [3 /*break*/, 43];\n                    case 42:\n                        if (e_3) throw e_3.error;\n                        return [7 /*endfinally*/];\n                    case 43: return [7 /*endfinally*/];\n                    case 44: return [2 /*return*/, records.map(function (record) {\n                            return _this.modelInstanceCreator(modelConstructor, record);\n                        })];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n        return __awaiter(this, void 0, void 0, function () {\n            var storeName, namespaceName, predicates, keyPath, queryByKey, hasSort, hasPagination, records;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _a.sent();\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n                        keyPath = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n                        queryByKey = predicates && this.keyValueFromPredicate(predicates, keyPath);\n                        hasSort = pagination && pagination.sort;\n                        hasPagination = pagination && pagination.limit;\n                        return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {\n                                var record, filtered, all;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            if (!queryByKey) return [3 /*break*/, 2];\n                                            return [4 /*yield*/, this.getByKey(storeName, queryByKey)];\n                                        case 1:\n                                            record = _a.sent();\n                                            return [2 /*return*/, record ? [record] : []];\n                                        case 2:\n                                            if (!predicates) return [3 /*break*/, 4];\n                                            return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];\n                                        case 3:\n                                            filtered = _a.sent();\n                                            return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];\n                                        case 4:\n                                            if (!hasSort) return [3 /*break*/, 6];\n                                            return [4 /*yield*/, this.getAll(storeName)];\n                                        case 5:\n                                            all = _a.sent();\n                                            return [2 /*return*/, this.inMemoryPagination(all, pagination)];\n                                        case 6:\n                                            if (hasPagination) {\n                                                return [2 /*return*/, this.enginePagination(storeName, pagination)];\n                                            }\n                                            return [2 /*return*/, this.getAll(storeName)];\n                                    }\n                                });\n                            }); })()];\n                    case 2:\n                        records = _a.sent();\n                        return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];\n                    case 3: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.getByKey = function (storeName, keyValue) {\n        return __awaiter(this, void 0, void 0, function () {\n            var record;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._get(storeName, keyValue)];\n                    case 1:\n                        record = _a.sent();\n                        return [2 /*return*/, record];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.getAll = function (storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.keyValueFromPredicate = function (predicates, keyPath) {\n        var e_6, _a;\n        var predicateObjs = predicates.predicates;\n        if (predicateObjs.length !== keyPath.length) {\n            return;\n        }\n        var keyValues = [];\n        var _loop_1 = function (key) {\n            var predicateObj = predicateObjs.find(function (p) { return isPredicateObj(p) && p.field === key && p.operator === 'eq'; });\n            predicateObj && keyValues.push(predicateObj.operand);\n        };\n        try {\n            for (var keyPath_1 = __values(keyPath), keyPath_1_1 = keyPath_1.next(); !keyPath_1_1.done; keyPath_1_1 = keyPath_1.next()) {\n                var key = keyPath_1_1.value;\n                _loop_1(key);\n            }\n        }\n        catch (e_6_1) { e_6 = { error: e_6_1 }; }\n        finally {\n            try {\n                if (keyPath_1_1 && !keyPath_1_1.done && (_a = keyPath_1.return)) _a.call(keyPath_1);\n            }\n            finally { if (e_6) throw e_6.error; }\n        }\n        return keyValues.length === keyPath.length ? keyValues : undefined;\n    };\n    IndexedDBAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n        return __awaiter(this, void 0, void 0, function () {\n            var predicateObjs, type, all, filtered;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        predicateObjs = predicates.predicates, type = predicates.type;\n                        return [4 /*yield*/, this.getAll(storeName)];\n                    case 1:\n                        all = _a.sent();\n                        filtered = predicateObjs\n                            ? all.filter(function (m) { return validatePredicate(m, type, predicateObjs); })\n                            : all;\n                        return [2 /*return*/, filtered];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n        if (pagination && records.length > 1) {\n            if (pagination.sort) {\n                var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n                if (sortPredicates.length) {\n                    var compareFn = sortCompareFunction(sortPredicates);\n                    records.sort(compareFn);\n                }\n            }\n            var _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            var start = Math.max(0, page * limit) || 0;\n            var end = limit > 0 ? start + limit : records.length;\n            return records.slice(start, end);\n        }\n        return records;\n    };\n    IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!pagination) return [3 /*break*/, 7];\n                        _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n                        initialRecord = Math.max(0, page * limit) || 0;\n                        return [4 /*yield*/, this.db\n                                .transaction(storeName)\n                                .objectStore(storeName)\n                                .openCursor()];\n                    case 1:\n                        cursor = _c.sent();\n                        if (!(cursor && initialRecord > 0)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, cursor.advance(initialRecord)];\n                    case 2:\n                        _c.sent();\n                        _c.label = 3;\n                    case 3:\n                        pageResults = [];\n                        hasLimit = typeof limit === 'number' && limit > 0;\n                        _c.label = 4;\n                    case 4:\n                        if (!(cursor && cursor.value)) return [3 /*break*/, 6];\n                        pageResults.push(cursor.value);\n                        if (hasLimit && pageResults.length === limit) {\n                            return [3 /*break*/, 6];\n                        }\n                        return [4 /*yield*/, cursor.continue()];\n                    case 5:\n                        cursor = _c.sent();\n                        return [3 /*break*/, 4];\n                    case 6:\n                        result = pageResults;\n                        return [3 /*break*/, 9];\n                    case 7: return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 8:\n                        result = (_c.sent());\n                        _c.label = 9;\n                    case 9: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n        if (firstOrLast === void 0) { firstOrLast = QueryOne.FIRST; }\n        return __awaiter(this, void 0, void 0, function () {\n            var storeName, cursor, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _a.sent();\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        return [4 /*yield*/, this.db\n                                .transaction([storeName], 'readonly')\n                                .objectStore(storeName)\n                                .openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n                    case 2:\n                        cursor = _a.sent();\n                        result = cursor ? cursor.value : undefined;\n                        return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n        return __awaiter(this, void 0, void 0, function () {\n            var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, tx, store, keyValues, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _a.sent();\n                        deleteQueue = [];\n                        if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 9];\n                        modelConstructor = modelOrModelConstructor;\n                        nameSpace = this.namespaceResolver(modelConstructor);\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        return [4 /*yield*/, this.query(modelConstructor, condition)];\n                    case 2:\n                        models = _a.sent();\n                        relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n                            .relationTypes;\n                        if (!(condition !== undefined)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, this.deleteItem(deleteQueue)];\n                    case 4:\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [models, deletedModels]];\n                    case 5: return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n                    case 6:\n                        _a.sent();\n                        // Delete all\n                        return [4 /*yield*/, this.db\n                                .transaction([storeName], 'readwrite')\n                                .objectStore(storeName)\n                                .clear()];\n                    case 7:\n                        // Delete all\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [models, deletedModels]];\n                    case 8: return [3 /*break*/, 17];\n                    case 9:\n                        model = modelOrModelConstructor;\n                        modelConstructor = Object.getPrototypeOf(model)\n                            .constructor;\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        if (!condition) return [3 /*break*/, 13];\n                        tx = this.db.transaction([storeName], 'readwrite');\n                        store = tx.objectStore(storeName);\n                        keyValues = this.getIndexKeyValuesFromModel(model);\n                        return [4 /*yield*/, this._get(store, keyValues)];\n                    case 10:\n                        fromDB = _a.sent();\n                        if (fromDB === undefined) {\n                            msg = 'Model instance not found in storage';\n                            logger.warn(msg, { model: model });\n                            return [2 /*return*/, [[model], []]];\n                        }\n                        predicates = ModelPredicateCreator.getPredicates(condition);\n                        predicateObjs = predicates.predicates, type = predicates.type;\n                        isValid = validatePredicate(fromDB, type, predicateObjs);\n                        if (!isValid) {\n                            msg = 'Conditional update failed';\n                            logger.error(msg, { model: fromDB, condition: predicateObjs });\n                            throw new Error(msg);\n                        }\n                        return [4 /*yield*/, tx.done];\n                    case 11:\n                        _a.sent();\n                        relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n                        return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n                    case 12:\n                        _a.sent();\n                        return [3 /*break*/, 15];\n                    case 13:\n                        relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n                        return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n                    case 14:\n                        _a.sent();\n                        _a.label = 15;\n                    case 15: return [4 /*yield*/, this.deleteItem(deleteQueue)];\n                    case 16:\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [[model], deletedModels]];\n                    case 17: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n        var deleteQueue_1, deleteQueue_1_1;\n        var e_7, _a, e_8, _b;\n        return __awaiter(this, void 0, void 0, function () {\n            var connectionStoreNames, tx, deleteItem, storeName, items, store, items_1, items_1_1, item, key, keyValues, itemKey, e_8_1, e_7_1;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        connectionStoreNames = deleteQueue.map(function (_a) {\n                            var storeName = _a.storeName;\n                            return storeName;\n                        });\n                        tx = this.db.transaction(__spread(connectionStoreNames), 'readwrite');\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 22, 23, 28]);\n                        deleteQueue_1 = __asyncValues(deleteQueue);\n                        _c.label = 2;\n                    case 2: return [4 /*yield*/, deleteQueue_1.next()];\n                    case 3:\n                        if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3 /*break*/, 21];\n                        deleteItem = deleteQueue_1_1.value;\n                        storeName = deleteItem.storeName, items = deleteItem.items;\n                        store = tx.objectStore(storeName);\n                        _c.label = 4;\n                    case 4:\n                        _c.trys.push([4, 14, 15, 20]);\n                        items_1 = __asyncValues(items);\n                        _c.label = 5;\n                    case 5: return [4 /*yield*/, items_1.next()];\n                    case 6:\n                        if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3 /*break*/, 13];\n                        item = items_1_1.value;\n                        if (!item) return [3 /*break*/, 12];\n                        key = void 0;\n                        if (!(typeof item === 'object')) return [3 /*break*/, 8];\n                        keyValues = this.getIndexKeyValuesFromModel(item);\n                        return [4 /*yield*/, store\n                                .index('byPk')\n                                .getKey(this.canonicalKeyPath(keyValues))];\n                    case 7:\n                        key = _c.sent();\n                        return [3 /*break*/, 10];\n                    case 8:\n                        itemKey = item.toString();\n                        return [4 /*yield*/, store.index('byPk').getKey(itemKey)];\n                    case 9:\n                        key = _c.sent();\n                        _c.label = 10;\n                    case 10:\n                        if (!(key !== undefined)) return [3 /*break*/, 12];\n                        return [4 /*yield*/, store.delete(key)];\n                    case 11:\n                        _c.sent();\n                        _c.label = 12;\n                    case 12: return [3 /*break*/, 5];\n                    case 13: return [3 /*break*/, 20];\n                    case 14:\n                        e_8_1 = _c.sent();\n                        e_8 = { error: e_8_1 };\n                        return [3 /*break*/, 20];\n                    case 15:\n                        _c.trys.push([15, , 18, 19]);\n                        if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 17];\n                        return [4 /*yield*/, _b.call(items_1)];\n                    case 16:\n                        _c.sent();\n                        _c.label = 17;\n                    case 17: return [3 /*break*/, 19];\n                    case 18:\n                        if (e_8) throw e_8.error;\n                        return [7 /*endfinally*/];\n                    case 19: return [7 /*endfinally*/];\n                    case 20: return [3 /*break*/, 2];\n                    case 21: return [3 /*break*/, 28];\n                    case 22:\n                        e_7_1 = _c.sent();\n                        e_7 = { error: e_7_1 };\n                        return [3 /*break*/, 28];\n                    case 23:\n                        _c.trys.push([23, , 26, 27]);\n                        if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3 /*break*/, 25];\n                        return [4 /*yield*/, _a.call(deleteQueue_1)];\n                    case 24:\n                        _c.sent();\n                        _c.label = 25;\n                    case 25: return [3 /*break*/, 27];\n                    case 26:\n                        if (e_7) throw e_7.error;\n                        return [7 /*endfinally*/];\n                    case 27: return [7 /*endfinally*/];\n                    case 28: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n        var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n        var e_9, _a, e_10, _b, e_11, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, _d, model, hasOneIndex, values, recordToDelete, index, values, value, recordToDelete, e_10_1, model, index, keyValues, childrenArray, e_11_1, e_9_1;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        _e.trys.push([0, 38, 39, 44]);\n                        relations_2 = __asyncValues(relations);\n                        _e.label = 1;\n                    case 1: return [4 /*yield*/, relations_2.next()];\n                    case 2:\n                        if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3 /*break*/, 37];\n                        rel = relations_2_1.value;\n                        relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n                        storeName = getStorename(nameSpace, modelName);\n                        _d = relationType;\n                        switch (_d) {\n                            case 'HAS_ONE': return [3 /*break*/, 3];\n                            case 'HAS_MANY': return [3 /*break*/, 20];\n                            case 'BELONGS_TO': return [3 /*break*/, 34];\n                        }\n                        return [3 /*break*/, 35];\n                    case 3:\n                        _e.trys.push([3, 13, 14, 19]);\n                        models_1 = __asyncValues(models);\n                        _e.label = 4;\n                    case 4: return [4 /*yield*/, models_1.next()];\n                    case 5:\n                        if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 12];\n                        model = models_1_1.value;\n                        hasOneIndex = 'byPk';\n                        if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n                        values = targetNames.map(function (targetName) { return model[targetName]; });\n                        if (values.length === 0)\n                            return [3 /*break*/, 12];\n                        return [4 /*yield*/, this.db\n                                .transaction(storeName, 'readwrite')\n                                .objectStore(storeName)\n                                .index(hasOneIndex)\n                                .get(this.canonicalKeyPath(values))];\n                    case 6:\n                        recordToDelete = (_e.sent());\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n                    case 7:\n                        _e.sent();\n                        return [3 /*break*/, 12];\n                    case 8:\n                        index = void 0;\n                        values = void 0;\n                        if (targetName && targetName in model) {\n                            index = hasOneIndex;\n                            value = model[targetName];\n                            values = [value];\n                        }\n                        else {\n                            // backwards compatability for older versions of codegen that did not emit targetName for HAS_ONE relations\n                            // TODO: can we deprecate this? it's been ~2 years since codegen started including targetName for HAS_ONE\n                            // If we deprecate, we'll need to re-gen the MIPR in __tests__/schema.ts > newSchema\n                            // otherwise some unit tests will fail\n                            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, srcModel);\n                            values = this.getIndexKeyValuesFromModel(model);\n                        }\n                        if (!values || !index)\n                            return [3 /*break*/, 12];\n                        return [4 /*yield*/, this.db\n                                .transaction(storeName, 'readwrite')\n                                .objectStore(storeName)\n                                .index(index)\n                                .get(this.canonicalKeyPath(values))];\n                    case 9:\n                        recordToDelete = (_e.sent());\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n                    case 10:\n                        _e.sent();\n                        _e.label = 11;\n                    case 11: return [3 /*break*/, 4];\n                    case 12: return [3 /*break*/, 19];\n                    case 13:\n                        e_10_1 = _e.sent();\n                        e_10 = { error: e_10_1 };\n                        return [3 /*break*/, 19];\n                    case 14:\n                        _e.trys.push([14, , 17, 18]);\n                        if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 16];\n                        return [4 /*yield*/, _b.call(models_1)];\n                    case 15:\n                        _e.sent();\n                        _e.label = 16;\n                    case 16: return [3 /*break*/, 18];\n                    case 17:\n                        if (e_10) throw e_10.error;\n                        return [7 /*endfinally*/];\n                    case 18: return [7 /*endfinally*/];\n                    case 19: return [3 /*break*/, 36];\n                    case 20:\n                        _e.trys.push([20, 27, 28, 33]);\n                        models_2 = __asyncValues(models);\n                        _e.label = 21;\n                    case 21: return [4 /*yield*/, models_2.next()];\n                    case 22:\n                        if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 26];\n                        model = models_2_1.value;\n                        index = \n                        // explicit bi-directional @hasMany and @manyToMany\n                        getIndex(this.schema.namespaces[nameSpace].relationships[modelName]\n                            .relationTypes, srcModel) ||\n                            // uni and/or implicit @hasMany\n                            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .indexes, associatedWith);\n                        keyValues = this.getIndexKeyValuesFromModel(model);\n                        return [4 /*yield*/, this.db\n                                .transaction(storeName, 'readwrite')\n                                .objectStore(storeName)\n                                .index(index)\n                                .getAll(this.canonicalKeyPath(keyValues))];\n                    case 23:\n                        childrenArray = _e.sent();\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n                    case 24:\n                        _e.sent();\n                        _e.label = 25;\n                    case 25: return [3 /*break*/, 21];\n                    case 26: return [3 /*break*/, 33];\n                    case 27:\n                        e_11_1 = _e.sent();\n                        e_11 = { error: e_11_1 };\n                        return [3 /*break*/, 33];\n                    case 28:\n                        _e.trys.push([28, , 31, 32]);\n                        if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 30];\n                        return [4 /*yield*/, _c.call(models_2)];\n                    case 29:\n                        _e.sent();\n                        _e.label = 30;\n                    case 30: return [3 /*break*/, 32];\n                    case 31:\n                        if (e_11) throw e_11.error;\n                        return [7 /*endfinally*/];\n                    case 32: return [7 /*endfinally*/];\n                    case 33: return [3 /*break*/, 36];\n                    case 34: \n                    // Intentionally blank\n                    return [3 /*break*/, 36];\n                    case 35:\n                        exhaustiveCheck(relationType);\n                        return [3 /*break*/, 36];\n                    case 36: return [3 /*break*/, 1];\n                    case 37: return [3 /*break*/, 44];\n                    case 38:\n                        e_9_1 = _e.sent();\n                        e_9 = { error: e_9_1 };\n                        return [3 /*break*/, 44];\n                    case 39:\n                        _e.trys.push([39, , 42, 43]);\n                        if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3 /*break*/, 41];\n                        return [4 /*yield*/, _a.call(relations_2)];\n                    case 40:\n                        _e.sent();\n                        _e.label = 41;\n                    case 41: return [3 /*break*/, 43];\n                    case 42:\n                        if (e_9) throw e_9.error;\n                        return [7 /*endfinally*/];\n                    case 43: return [7 /*endfinally*/];\n                    case 44:\n                        deleteQueue.push({\n                            storeName: getStorename(nameSpace, srcModel),\n                            items: models.map(function (record) {\n                                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n                            }),\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.clear = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _b.sent();\n                        (_a = this.db) === null || _a === void 0 ? void 0 : _a.close();\n                        return [4 /*yield*/, idb.deleteDB(this.dbName)];\n                    case 2:\n                        _b.sent();\n                        this.db = undefined;\n                        this.initPromise = undefined;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.batchSave = function (modelConstructor, items) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, storeName, txn, store, _loop_2, this_1, items_2, items_2_1, item, e_12_1;\n            var e_12, _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (items.length === 0) {\n                            return [2 /*return*/, []];\n                        }\n                        return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _b.sent();\n                        result = [];\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        txn = this.db.transaction(storeName, 'readwrite');\n                        store = txn.store;\n                        _loop_2 = function (item) {\n                            var namespaceName, modelName, model, connectedModels, keyValues, _deleted, index, key, instance;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        namespaceName = this_1.namespaceResolver(modelConstructor);\n                                        modelName = modelConstructor.name;\n                                        model = this_1.modelInstanceCreator(modelConstructor, item);\n                                        connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n                                        keyValues = this_1.getIndexKeyValuesFromModel(model);\n                                        _deleted = item._deleted;\n                                        index = store.index('byPk');\n                                        return [4 /*yield*/, index.getKey(this_1.canonicalKeyPath(keyValues))];\n                                    case 1:\n                                        key = _a.sent();\n                                        if (!!_deleted) return [3 /*break*/, 3];\n                                        instance = connectedModels.find(function (_a) {\n                                            var instance = _a.instance;\n                                            var instanceKeyValues = _this.getIndexKeyValuesFromModel(instance);\n                                            return keysEqual(instanceKeyValues, keyValues);\n                                        }).instance;\n                                        result.push([\n                                            instance,\n                                            key ? OpType.UPDATE : OpType.INSERT,\n                                        ]);\n                                        return [4 /*yield*/, store.put(instance, key)];\n                                    case 2:\n                                        _a.sent();\n                                        return [3 /*break*/, 5];\n                                    case 3:\n                                        result.push([item, OpType.DELETE]);\n                                        if (!key) return [3 /*break*/, 5];\n                                        return [4 /*yield*/, store.delete(key)];\n                                    case 4:\n                                        _a.sent();\n                                        _a.label = 5;\n                                    case 5: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, 7, 8, 9]);\n                        items_2 = __values(items), items_2_1 = items_2.next();\n                        _b.label = 3;\n                    case 3:\n                        if (!!items_2_1.done) return [3 /*break*/, 6];\n                        item = items_2_1.value;\n                        return [5 /*yield**/, _loop_2(item)];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        items_2_1 = items_2.next();\n                        return [3 /*break*/, 3];\n                    case 6: return [3 /*break*/, 9];\n                    case 7:\n                        e_12_1 = _b.sent();\n                        e_12 = { error: e_12_1 };\n                        return [3 /*break*/, 9];\n                    case 8:\n                        try {\n                            if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n                        }\n                        finally { if (e_12) throw e_12.error; }\n                        return [7 /*endfinally*/];\n                    case 9: return [4 /*yield*/, txn.done];\n                    case 10:\n                        _b.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.createObjectStoreForModel = function (db, namespaceName, storeName, modelName) {\n        var store = db.createObjectStore(storeName, {\n            autoIncrement: true,\n        });\n        var indexes = this.schema.namespaces[namespaceName].relationships[modelName].indexes;\n        indexes.forEach(function (_a) {\n            var _b = __read(_a, 3), idxName = _b[0], keyPath = _b[1], options = _b[2];\n            store.createIndex(idxName, keyPath, options);\n        });\n        return store;\n    };\n    return IndexedDBAdapter;\n}());\nexport default new IndexedDBAdapter();\n//# sourceMappingURL=IndexedDBAdapter.js.map"]},"metadata":{},"sourceType":"module"}