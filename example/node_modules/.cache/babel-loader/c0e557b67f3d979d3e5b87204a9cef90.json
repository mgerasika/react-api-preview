{"ast":null,"code":"/**\n * Changes object keys to camel case. If optional parameter `keys` is given, then we extract only the\n * keys specified in `keys`.\n */\nexport function makeCamelCase(obj, keys) {\n  if (!obj) return undefined;\n  var newObj = {};\n  var keysToRename = keys ? keys : Object.keys(obj);\n  keysToRename.forEach(function (key) {\n    var _a;\n    if (obj.hasOwnProperty(key)) {\n      // change the key to camelcase.\n      var camelCaseKey = key.charAt(0).toLowerCase() + key.substr(1);\n      Object.assign(newObj, (_a = {}, _a[camelCaseKey] = obj[key], _a));\n    }\n  });\n  return newObj;\n}\n/**\n * Given an array of object, call makeCamelCase(...) on each option.\n */\nexport function makeCamelCaseArray(objArr, keys) {\n  if (!objArr) return undefined;\n  return objArr.map(function (obj) {\n    return makeCamelCase(obj, keys);\n  });\n}\n/**\n * Converts blob to array buffer\n */\nexport function blobToArrayBuffer(blob) {\n  return new Promise(function (res, rej) {\n    var reader = new FileReader();\n    reader.onload = function (_event) {\n      res(reader.result);\n    };\n    reader.onerror = function (err) {\n      rej(err);\n    };\n    try {\n      reader.readAsArrayBuffer(blob);\n    } catch (err) {\n      rej(err); // in case user gives invalid type\n    }\n  });\n}","map":{"version":3,"sources":["../../src/Providers/Utils.ts"],"names":[],"mappings":"AAAA;;;AAGG;AACH,OAAM,SAAU,aAAa,CAAC,GAAW,EAAE,IAAe,EAAA;EACzD,IAAI,CAAC,GAAG,EAAE,OAAO,SAAS;EAC1B,IAAM,MAAM,GAAG,CAAA,CAAE;EACjB,IAAM,YAAY,GAAG,IAAI,GAAG,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;EACnD,YAAY,CAAC,OAAO,CAAC,UAAA,GAAG,EAAA;;IACvB,IAAI,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;MAC5B;MACA,IAAM,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;MAChE,MAAM,CAAC,MAAM,CAAC,MAAM,GAAA,EAAA,GAAA,CAAA,CAAA,EAAI,EAAA,CAAC,YAAY,CAAA,GAAG,GAAG,CAAC,GAAG,CAAC,EAAA,EAAA,EAAG;IACnD;EACF,CAAC,CAAC;EACF,OAAO,MAAM;AACd;AAEA;;AAEG;AACH,OAAM,SAAU,kBAAkB,CAAC,MAAgB,EAAE,IAAe,EAAA;EACnE,IAAI,CAAC,MAAM,EAAE,OAAO,SAAS;EAC7B,OAAO,MAAM,CAAC,GAAG,CAAC,UAAA,GAAG,EAAA;IAAI,OAAA,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC;EAAxB,CAAwB,CAAC;AACnD;AAEA;;AAEG;AACH,OAAM,SAAU,iBAAiB,CAAC,IAAU,EAAA;EAC3C,OAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG,EAAA;IAC3B,IAAM,MAAM,GAAG,IAAI,UAAU,EAAE;IAC/B,MAAM,CAAC,MAAM,GAAG,UAAA,MAAM,EAAA;MACrB,GAAG,CAAC,MAAM,CAAC,MAAoB,CAAC;IACjC,CAAC;IACD,MAAM,CAAC,OAAO,GAAG,UAAA,GAAG,EAAA;MACnB,GAAG,CAAC,GAAG,CAAC;IACT,CAAC;IACD,IAAI;MACH,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC;KAC9B,CAAC,OAAO,GAAG,EAAE;MACb,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACV;EACF,CAAC,CAAC;AACH","sourceRoot":"","sourcesContent":["/**\n * Changes object keys to camel case. If optional parameter `keys` is given, then we extract only the\n * keys specified in `keys`.\n */\nexport function makeCamelCase(obj, keys) {\n    if (!obj)\n        return undefined;\n    var newObj = {};\n    var keysToRename = keys ? keys : Object.keys(obj);\n    keysToRename.forEach(function (key) {\n        var _a;\n        if (obj.hasOwnProperty(key)) {\n            // change the key to camelcase.\n            var camelCaseKey = key.charAt(0).toLowerCase() + key.substr(1);\n            Object.assign(newObj, (_a = {}, _a[camelCaseKey] = obj[key], _a));\n        }\n    });\n    return newObj;\n}\n/**\n * Given an array of object, call makeCamelCase(...) on each option.\n */\nexport function makeCamelCaseArray(objArr, keys) {\n    if (!objArr)\n        return undefined;\n    return objArr.map(function (obj) { return makeCamelCase(obj, keys); });\n}\n/**\n * Converts blob to array buffer\n */\nexport function blobToArrayBuffer(blob) {\n    return new Promise(function (res, rej) {\n        var reader = new FileReader();\n        reader.onload = function (_event) {\n            res(reader.result);\n        };\n        reader.onerror = function (err) {\n            rej(err);\n        };\n        try {\n            reader.readAsArrayBuffer(blob);\n        }\n        catch (err) {\n            rej(err); // in case user gives invalid type\n        }\n    });\n}\n//# sourceMappingURL=Utils.js.map"]},"metadata":{},"sourceType":"module"}