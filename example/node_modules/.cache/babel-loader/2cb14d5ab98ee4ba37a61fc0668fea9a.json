{"ast":null,"code":"import { IS_DEBUG } from '../constants/is-debug.constant.js';\n\n/* eslint-disable no-console */\nvar consoleService = {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  assert: function assert(expr, msg) {\n    if (!expr && IS_DEBUG) {\n      console.error(\"Assert: \".concat(msg));\n    }\n  },\n  log: function log(message) {\n    if (IS_DEBUG) {\n      var _console;\n      for (var _len = arguments.length, optionalParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        optionalParams[_key - 1] = arguments[_key];\n      }\n      (_console = console).log.apply(_console, [message].concat(optionalParams));\n    }\n  },\n  error: function error(msg) {\n    if (IS_DEBUG) {\n      var _console2;\n      for (var _len2 = arguments.length, optionalParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        optionalParams[_key2 - 1] = arguments[_key2];\n      }\n      (_console2 = console).error.apply(_console2, [\"Handled Error: \".concat(msg)].concat(optionalParams));\n    }\n  },\n  warn: function warn(message) {\n    if (IS_DEBUG) {\n      var _console3;\n      for (var _len3 = arguments.length, optionalParams = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        optionalParams[_key3 - 1] = arguments[_key3];\n      }\n      (_console3 = console).warn.apply(_console3, [message].concat(optionalParams));\n    }\n  }\n};\nexport { consoleService };","map":{"version":3,"sources":["../../../src/services/console.service.ts"],"names":["consoleService","assert","expr","msg","IS_DEBUG","console","error","log","message","optionalParams","warn"],"mappings":";;AAAA;AAGO,IAAMA,cAAc,GAAG;EAC1B;EACAC,MAAM,EAAA,SAAA,MAAA,CAACC,IAAa,EAAEC,GAAW,EAAQ;IACrC,IAAI,CAACD,IAAI,IAAIE,QAAQ,EAAE;MACnBC,OAAO,CAACC,KAAK,CAAA,UAAA,CAAA,MAAA,CAAYH,GAAI,CAAA,CAAE;IACnC;EACH,CAAA;EACDI,GAAG,EAAE,SAAA,GAAA,CAACC,OAAiB,EAAyC;IAC5D,IAAIJ,QAAQ,EAAE;MAAA,IAAA,QAAA;MAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EADUK,cAAyB,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;QAAzBA,cAAyB,CAAA,IAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA;MAAA;MAE7CJ,CAAAA,QAAAA,GAAAA,OAAO,EAACE,GAAG,CAAA,KAAA,CAAA,QAAA,EAAA,CAACC,OAAO,CAAA,CAAA,MAAA,CAAKC,cAAc,CAAA,CAAC;IAC3C;EACH,CAAA;EACDH,KAAK,EAAE,SAAA,KAAA,CAACH,GAAa,EAAyC;IAC1D,IAAIC,QAAQ,EAAE;MAAA,IAAA,SAAA;MAAA,KAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EADQK,cAAyB,GAAA,IAAA,KAAA,CAAA,KAAA,GAAA,CAAA,GAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;QAAzBA,cAAyB,CAAA,KAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,KAAA,CAAA;MAAA;MAE3CJ,CAAAA,SAAAA,GAAAA,OAAO,EAACC,KAAK,CAAA,KAAA,CAAA,SAAA,EAAA,CAAA,iBAAA,CAAA,MAAA,CAAmBH,GAAI,CAAA,CAAA,CAAA,MAAA,CAAMM,cAAc,CAAA,CAAC;IAC7D;EACH,CAAA;EACDC,IAAI,EAAE,SAAA,IAAA,CAACF,OAAiB,EAAyC;IAC7D,IAAIJ,QAAQ,EAAE;MAAA,IAAA,SAAA;MAAA,KAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EADWK,cAAyB,GAAA,IAAA,KAAA,CAAA,KAAA,GAAA,CAAA,GAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;QAAzBA,cAAyB,CAAA,KAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,KAAA,CAAA;MAAA;MAE9CJ,CAAAA,SAAAA,GAAAA,OAAO,EAACK,IAAI,CAAA,KAAA,CAAA,SAAA,EAAA,CAACF,OAAO,CAAA,CAAA,MAAA,CAAKC,cAAc,CAAA,CAAC;IAC5C;EACJ;AACJ,CAAA","sourcesContent":["/* eslint-disable no-console */\nimport { IS_DEBUG } from '@common/constants/is-debug.constant';\n\nexport const consoleService = {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    assert(expr: unknown, msg: string): void {\n        if (!expr && IS_DEBUG) {\n            console.error(`Assert: ${msg}`);\n        }\n    },\n    log: (message?: unknown, ...optionalParams: unknown[]): void => {\n        if (IS_DEBUG) {\n            console.log(message, ...optionalParams);\n        }\n    },\n    error: (msg?: unknown, ...optionalParams: unknown[]): void => {\n        if (IS_DEBUG) {\n            console.error(`Handled Error: ${msg}`, ...optionalParams);\n        }\n    },\n    warn: (message?: unknown, ...optionalParams: unknown[]): void => {\n        if (IS_DEBUG) {\n            console.warn(message, ...optionalParams);\n        }\n    },\n};\n"]},"metadata":{},"sourceType":"module"}