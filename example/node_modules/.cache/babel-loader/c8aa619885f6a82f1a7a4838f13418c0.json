{"ast":null,"code":"import { slicedToArray as _slicedToArray, objectSpread2 as _objectSpread2, toConsumableArray as _toConsumableArray } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { createDefaultChooserColumns } from '../general-ui/table/table.component.js';\nimport { useState, useMemo, useCallback } from 'react';\nfunction useTable(_ref) {\n  var tableUISettings = _ref.tableUISettings,\n    allTableColumns = _ref.allTableColumns,\n    _onTableUISettingsChange = _ref.onTableUISettingsChange;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedRows = _useState2[0],\n    setSelectedRows = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isAllSelected = _useState4[0],\n    setIsAllSelected = _useState4[1];\n  var defaultChooserColumns = useMemo(function () {\n    return createDefaultChooserColumns(allTableColumns);\n  }, [allTableColumns]);\n  var chooserColumns = useMemo(function () {\n    var _tableUISettings$choo;\n    return tableUISettings !== null && tableUISettings !== void 0 && (_tableUISettings$choo = tableUISettings.chooserColumns) !== null && _tableUISettings$choo !== void 0 && _tableUISettings$choo.length ? filterDeprecatedChooserColumns(tableUISettings.chooserColumns, allTableColumns) : defaultChooserColumns;\n  }, [allTableColumns, defaultChooserColumns, tableUISettings === null || tableUISettings === void 0 ? void 0 : tableUISettings.chooserColumns]);\n  var tableColumns = useMemo(function () {\n    return filterTableColumns(allTableColumns, chooserColumns);\n  }, [allTableColumns, chooserColumns]);\n  var handleSelectedRowsChange = useCallback(function (rows, allSelected) {\n    setSelectedRows(rows);\n    setIsAllSelected(allSelected);\n  }, []);\n  var handleClearTableSelection = useCallback(function () {\n    setSelectedRows([]);\n    setIsAllSelected(false);\n  }, []);\n  return {\n    tableConfig: useMemo(function () {\n      return {\n        tableUISettings: tableUISettings,\n        onTableUISettingsChange: function onTableUISettingsChange(props) {\n          _onTableUISettingsChange && tableUISettings && _onTableUISettingsChange(_objectSpread2(_objectSpread2({}, tableUISettings), props));\n        },\n        chooser: {\n          chooserColumns: chooserColumns,\n          defaultChooserColumns: defaultChooserColumns\n        },\n        selection: {\n          isAllSelected: isAllSelected,\n          onSelectedRowsChange: handleSelectedRowsChange,\n          onClearTableSelection: handleClearTableSelection,\n          selectedRows: selectedRows,\n          updateSelectedRows: function updateSelectedRows(items) {\n            setSelectedRows(items);\n          }\n        },\n        table: {\n          tableColumns: tableColumns\n        }\n      };\n    }, [chooserColumns, defaultChooserColumns, handleClearTableSelection, handleSelectedRowsChange, isAllSelected, _onTableUISettingsChange, selectedRows, tableColumns, tableUISettings])\n  };\n}\nvar filterDeprecatedChooserColumns = function filterDeprecatedChooserColumns(chooserColumns, tableColumns) {\n  return chooserColumns.filter(function (f) {\n    return tableColumns.find(function (f2) {\n      return f2.id === f.id;\n    });\n  });\n};\nvar filterTableColumns = function filterTableColumns(tableColumns, chooserColumns) {\n  var visibleTableColumns = tableColumns.map(function (t) {\n    var column = chooserColumns.find(function (f) {\n      return f.id === t.id;\n    });\n    return _objectSpread2(_objectSpread2({}, t), {}, {\n      isVisible: column ? !column.isHidden : true\n    });\n  });\n  var res = [];\n  chooserColumns.forEach(function (column) {\n    var tableColumn = visibleTableColumns.find(function (f) {\n      return f.id === column.id;\n    });\n    if (tableColumn) {\n      visibleTableColumns = visibleTableColumns.filter(function (f) {\n        return f.id !== tableColumn.id;\n      });\n      res.push(tableColumn);\n    }\n  });\n  return [].concat(res, _toConsumableArray(visibleTableColumns));\n};\nexport { filterDeprecatedChooserColumns, filterTableColumns, useTable };","map":{"version":3,"sources":["../../../src/hooks/use-table.hook.ts"],"names":["useTable","tableUISettings","allTableColumns","onTableUISettingsChange","selectedRows","setSelectedRows","useState","_useState2","isAllSelected","setIsAllSelected","_useState4","defaultChooserColumns","useMemo","createDefaultChooserColumns","chooserColumns","length","filterDeprecatedChooserColumns","tableColumns","filterTableColumns","handleSelectedRowsChange","useCallback","rows","allSelected","handleClearTableSelection","tableConfig","props","chooser","selection","onSelectedRowsChange","onClearTableSelection","updateSelectedRows","items","table","filter","f","find","f2","id","visibleTableColumns","map","t","column","isVisible","isHidden","res","forEach","tableColumn","push"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { IColumnChooser } from '@common/general-ui/column-chooser/column-chooser.component';\nimport { createDefaultChooserColumns, ITableColumn } from '@common/general-ui/table/table.component';\nimport { IIdObject } from '@common/interfaces/id-object.interface';\nimport { ITableUISettings } from '@common/interfaces/ui-settings.interface';\nimport { useCallback, useMemo, useState } from 'react';\n\nexport interface ITableConfigProps<T extends IIdObject, TKey> {\n    tableUISettings: ITableUISettings | undefined;\n    onTableUISettingsChange: (settings: Partial<ITableUISettings>) => void | undefined;\n    chooser: { chooserColumns: IColumnChooser[]; defaultChooserColumns: IColumnChooser[] };\n    selection: {\n        isAllSelected: boolean;\n        updateSelectedRows: (items: T[]) => void;\n        selectedRows: T[];\n        onSelectedRowsChange: (data: T[], isAllSelected: boolean) => void;\n        onClearTableSelection: () => void;\n    };\n    table: {\n        tableColumns: ITableColumn<T, TKey>[];\n    };\n}\n\ninterface IReturn<T extends IIdObject, TKey> {\n    tableConfig: ITableConfigProps<T, TKey>;\n}\n\ninterface IProps<T extends IIdObject, T_UI extends ITableUISettings, TKey> {\n    tableUISettings: T_UI | undefined;\n    allTableColumns: ITableColumn<T, TKey>[];\n    onTableUISettingsChange: ((settings: T_UI) => void) | undefined;\n}\n\nexport function useTable<T extends IIdObject, T_UI extends ITableUISettings, TKey>({\n    tableUISettings,\n    allTableColumns,\n    onTableUISettingsChange,\n}: IProps<T, T_UI, TKey>): IReturn<T, TKey> {\n    const [selectedRows, setSelectedRows] = useState<T[]>([]);\n    const [isAllSelected, setIsAllSelected] = useState(false);\n\n    const defaultChooserColumns = useMemo(() => createDefaultChooserColumns(allTableColumns), [allTableColumns]);\n    const chooserColumns = useMemo<IColumnChooser[]>(() => {\n        return tableUISettings?.chooserColumns?.length\n            ? filterDeprecatedChooserColumns(tableUISettings.chooserColumns, allTableColumns)\n            : defaultChooserColumns;\n    }, [allTableColumns, defaultChooserColumns, tableUISettings?.chooserColumns]);\n\n    const tableColumns = useMemo(\n        () => filterTableColumns(allTableColumns, chooserColumns),\n        [allTableColumns, chooserColumns],\n    );\n\n    const handleSelectedRowsChange = useCallback((rows: T[], allSelected: boolean) => {\n        setSelectedRows(rows);\n        setIsAllSelected(allSelected);\n    }, []);\n\n    const handleClearTableSelection = useCallback(() => {\n        setSelectedRows([]);\n        setIsAllSelected(false);\n    }, []);\n    return {\n        tableConfig: useMemo(() => {\n            return {\n                tableUISettings,\n                onTableUISettingsChange: (props): void => {\n                    onTableUISettingsChange && tableUISettings && onTableUISettingsChange({ ...tableUISettings, ...props });\n                },\n                chooser: {\n                    chooserColumns,\n                    defaultChooserColumns,\n                },\n\n                selection: {\n                    isAllSelected,\n                    onSelectedRowsChange: handleSelectedRowsChange,\n                    onClearTableSelection: handleClearTableSelection,\n                    selectedRows,\n                    updateSelectedRows: (items: T[]): void => {\n                        setSelectedRows(items);\n                    },\n                },\n                table: {\n                    tableColumns,\n                },\n            };\n        }, [\n            chooserColumns,\n            defaultChooserColumns,\n            handleClearTableSelection,\n            handleSelectedRowsChange,\n            isAllSelected,\n            onTableUISettingsChange,\n            selectedRows,\n            tableColumns,\n            tableUISettings,\n        ]),\n    };\n}\n\nexport const filterDeprecatedChooserColumns = (\n    chooserColumns: IColumnChooser[],\n    tableColumns: ITableColumn<any, any>[],\n): IColumnChooser[] => {\n    return chooserColumns.filter((f) => tableColumns.find((f2) => f2.id === f.id));\n};\n\nexport const filterTableColumns = (\n    tableColumns: ITableColumn<any, any>[],\n    chooserColumns: IColumnChooser[],\n): ITableColumn<any, any>[] => {\n    let visibleTableColumns = tableColumns.map((t): ITableColumn<any, any> => {\n        const column = chooserColumns.find((f) => f.id === t.id);\n        return {\n            ...t,\n            isVisible: column ? !column.isHidden : true,\n        };\n    });\n    const res: ITableColumn<any, any>[] = [];\n    chooserColumns.forEach((column) => {\n        const tableColumn = visibleTableColumns.find((f) => f.id === column.id);\n        if (tableColumn) {\n            visibleTableColumns = visibleTableColumns.filter((f) => f.id !== tableColumn.id);\n            res.push(tableColumn);\n        }\n    });\n    return [...res, ...visibleTableColumns];\n};\n"]},"metadata":{},"sourceType":"module"}