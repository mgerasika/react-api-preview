{"ast":null,"code":"/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\nimport { closest } from './closest';\nimport { matches } from './matches';\n/**\n * Delegates the handling of events for an element matching a selector to an\n * ancestor of the matching element.\n * @param {!Node} ancestor The ancestor element to add the listener to.\n * @param {string} eventType The event type to listen to.\n * @param {string} selector A CSS selector to match against child elements.\n * @param {!Function} callback A function to run any time the event happens.\n * @param {Object=} opts A configuration options object. The available options:\n *     - useCapture<boolean>: If true, bind to the event capture phase.\n *     - deep<boolean>: If true, delegate into shadow trees.\n * @return {Object} The delegate object. It contains a destroy method.\n */\nexport function delegate(ancestor, eventType, selector, callback, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  // Defines the event listener.\n  var listener = function (event) {\n    var delegateTarget;\n    // If opts.composed is true and the event originated from inside a Shadow\n    // tree, check the composed path nodes.\n    if (opts['composed'] && typeof event['composedPath'] === 'function') {\n      var composedPath = event.composedPath();\n      for (var i = 0, node = void 0; node = composedPath[i]; i++) {\n        if (node.nodeType === 1 && matches(node, selector)) {\n          delegateTarget = node;\n        }\n      }\n    } else {\n      // Otherwise check the parents.\n      delegateTarget = closest(event.target, selector, true);\n    }\n    if (delegateTarget) {\n      callback.call(delegateTarget, event, delegateTarget);\n    }\n  };\n  ancestor.addEventListener(eventType, listener, opts['useCapture']);\n  return {\n    destroy: function () {\n      ancestor.removeEventListener(eventType, listener, opts['useCapture']);\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/vendor/dom-utils/delegate.ts"],"names":[],"mappings":"AAAA;;AAEG;AAEH,SAAS,OAAO,QAAQ,WAAW;AACnC,SAAS,OAAO,QAAQ,WAAW;AAEnC;;;;;;;;;;;AAWG;AACH,OAAM,SAAU,QAAQ,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAS,EAAA;EAAT,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;IAAA,IAAA,GAAA,CAAA,CAAS;EAAA;EAC1E;EACA,IAAM,QAAQ,GAAG,UAAS,KAAK,EAAA;IAC9B,IAAI,cAAc;IAElB;IACA;IACA,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,OAAO,KAAK,CAAC,cAAc,CAAC,KAAK,UAAU,EAAE;MACpE,IAAM,YAAY,GAAG,KAAK,CAAC,YAAY,EAAE;MACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAA,KAAA,CAAA,EAAG,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,EAAG,CAAC,EAAE,EAAE;QACpD,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,IAAI,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE;UACnD,cAAc,GAAG,IAAI;QACrB;MACD;KACD,MAAM;MACN;MACA,cAAc,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC;IACtD;IAED,IAAI,cAAc,EAAE;MACnB,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,EAAE,cAAc,CAAC;IACpD;EACF,CAAC;EAED,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;EAElE,OAAO;IACN,OAAO,EAAE,YAAA;MACR,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IACtE;GACA;AACF","sourceRoot":"","sourcesContent":["/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\nimport { closest } from './closest';\nimport { matches } from './matches';\n/**\n * Delegates the handling of events for an element matching a selector to an\n * ancestor of the matching element.\n * @param {!Node} ancestor The ancestor element to add the listener to.\n * @param {string} eventType The event type to listen to.\n * @param {string} selector A CSS selector to match against child elements.\n * @param {!Function} callback A function to run any time the event happens.\n * @param {Object=} opts A configuration options object. The available options:\n *     - useCapture<boolean>: If true, bind to the event capture phase.\n *     - deep<boolean>: If true, delegate into shadow trees.\n * @return {Object} The delegate object. It contains a destroy method.\n */\nexport function delegate(ancestor, eventType, selector, callback, opts) {\n    if (opts === void 0) { opts = {}; }\n    // Defines the event listener.\n    var listener = function (event) {\n        var delegateTarget;\n        // If opts.composed is true and the event originated from inside a Shadow\n        // tree, check the composed path nodes.\n        if (opts['composed'] && typeof event['composedPath'] === 'function') {\n            var composedPath = event.composedPath();\n            for (var i = 0, node = void 0; (node = composedPath[i]); i++) {\n                if (node.nodeType === 1 && matches(node, selector)) {\n                    delegateTarget = node;\n                }\n            }\n        }\n        else {\n            // Otherwise check the parents.\n            delegateTarget = closest(event.target, selector, true);\n        }\n        if (delegateTarget) {\n            callback.call(delegateTarget, event, delegateTarget);\n        }\n    };\n    ancestor.addEventListener(eventType, listener, opts['useCapture']);\n    return {\n        destroy: function () {\n            ancestor.removeEventListener(eventType, listener, opts['useCapture']);\n        },\n    };\n}\n//# sourceMappingURL=delegate.js.map"]},"metadata":{},"sourceType":"module"}