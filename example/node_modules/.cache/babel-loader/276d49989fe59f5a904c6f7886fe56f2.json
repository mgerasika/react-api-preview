{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { Field } from '../field/field.component.js';\nimport { useField } from '../../hooks/use-field.hook.js';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useMemo, useCallback, useEffect } from 'react';\nimport { StripeInternal } from './stripe-internal.component.js';\nimport { jsx } from '@emotion/react';\nvar FormStripe = function FormStripe(props) {\n  var name = props.name,\n    required = props.required,\n    paymentMethodOptions = props.paymentMethodOptions,\n    onStripeInit = props.onStripeInit,\n    cardError = props.cardError,\n    stripePublicKey = props.stripePublicKey,\n    clientSecret = props.clientSecret,\n    setupIntentId = props.setupIntentId,\n    onPaymentTabChange = props.onPaymentTabChange,\n    defaultOptionName = props.defaultOptionName;\n  var _useField = useField(_objectSpread(_objectSpread({}, props), {}, {\n      required: true,\n      getCustomErrorMessage: undefined\n    })),\n    setFieldTouched = _useField.setFieldTouched,\n    setFieldValue = _useField.setFieldValue,\n    triggerValidate = _useField.triggerValidate,\n    errorMessage = _useField.errorMessage,\n    value = _useField.value;\n  var stripePromise = useMemo(function () {\n    return stripePublicKey ? loadStripe(stripePublicKey) : undefined;\n  }, [stripePublicKey]);\n  var handleCardChange = useCallback(function (e) {\n    if (e.isValid) {\n      setFieldValue(_objectSpread(_objectSpread({}, value), {}, {\n        card: e.cardNumberElement\n      }));\n    } else {\n      setFieldValue(_objectSpread(_objectSpread({}, value), {}, {\n        card: undefined\n      }));\n    }\n    triggerValidate();\n  }, [setFieldValue, triggerValidate, value]);\n  var handleTokenInit = useCallback(function (e) {\n    var _e$setupIntent, _e$setupIntent2;\n    setFieldValue(_objectSpread(_objectSpread({}, value), {}, {\n      stripe_permanent_token_id: ((_e$setupIntent = e.setupIntent) === null || _e$setupIntent === void 0 ? void 0 : _e$setupIntent.payment_method) || '',\n      stripe_setup_indent_id: (e === null || e === void 0 ? void 0 : (_e$setupIntent2 = e.setupIntent) === null || _e$setupIntent2 === void 0 ? void 0 : _e$setupIntent2.id) || ''\n    }));\n    setFieldTouched();\n  }, [setFieldTouched, setFieldValue, value]);\n  useEffect(function () {\n    if (clientSecret !== value.client_secret) {\n      setFieldValue(_objectSpread(_objectSpread({}, value), {}, {\n        client_secret: clientSecret,\n        stripe_setup_indent_id: setupIntentId\n      }));\n    }\n  }, [clientSecret, setupIntentId, setFieldValue, value]);\n  var handleBlur = useCallback(function () {\n    setFieldTouched();\n  }, [setFieldTouched]);\n  var handleTabChange = useCallback(function (tab) {\n    setFieldValue(_objectSpread(_objectSpread({}, value), {}, {\n      paymentMethod: tab\n    }));\n    onPaymentTabChange && onPaymentTabChange();\n  }, [onPaymentTabChange, setFieldValue, value]);\n  return stripePromise ? jsx(Field, {\n    name: name,\n    required: required\n    // label={' ' || t('Payment method (Credit / Debit Card)')}\n    ,\n\n    errorMessage: cardError || errorMessage\n  }, jsx(Elements, {\n    stripe: stripePromise,\n    options: {\n      fonts: [{\n        cssSrc: \"\".concat(document.location.origin, \"/stripeStyles.css\")\n      }, {\n        cssSrc: 'https://fonts.googleapis.com/css2?family=Overpass:wght@600&display=swap'\n      }],\n      appearance: {\n        variables: {}\n      }\n    }\n  }, jsx(StripeInternal, {\n    defaultOptionName: defaultOptionName,\n    paymentMethodOptions: paymentMethodOptions,\n    onTabChange: handleTabChange,\n    paymentButtonClientSecret: props.clientSecret,\n    onPaymentButtonChange: handleTokenInit,\n    onStripeInit: onStripeInit,\n    onCardChange: handleCardChange,\n    onBlur: handleBlur\n  }))) : null;\n};\nexport { FormStripe };","map":{"version":3,"sources":["../../../../src/general-ui/stripe/form-stripe.component.tsx"],"names":["FormStripe","props","name","required","paymentMethodOptions","onStripeInit","cardError","stripePublicKey","clientSecret","setupIntentId","onPaymentTabChange","defaultOptionName","setFieldTouched","setFieldValue","triggerValidate","errorMessage","value","useField","getCustomErrorMessage","undefined","stripePromise","useMemo","loadStripe","handleCardChange","useCallback","e","isValid","card","cardNumberElement","handleTokenInit","stripe_permanent_token_id","setupIntent","payment_method","stripe_setup_indent_id","id","useEffect","client_secret","handleBlur","handleTabChange","tab","paymentMethod","___EmotionJSX","Field","Elements","stripe","options","fonts","cssSrc","document","location","origin","appearance","variables","StripeInternal","onTabChange","paymentButtonClientSecret","onPaymentButtonChange","onCardChange","onBlur"],"mappings":"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","sourcesContent":["import { EPaymentMethod } from '@common/enums/payment-method.enum';\nimport { Field } from '@common/general-ui/field/field.component';\nimport { IRadioOption } from '@common/general-ui/radio-group/radio.component';\nimport { useField } from '@common/hooks/use-field.hook';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe, PaymentMethodResult, SetupIntentResult, Stripe, StripeCardNumberElement } from '@stripe/stripe-js';\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { IStripeCard, StripeInternal } from './stripe-internal.component';\nexport type StripeEx = Stripe;\nexport type PaymentMethodResultEx = PaymentMethodResult;\n\nexport interface IStripeValue {\n    card: StripeCardNumberElement | null | undefined;\n    stripe_permanent_token_id: string | undefined;\n    stripe_setup_indent_id: string | undefined;\n    client_secret: string | undefined;\n    paymentMethod: EPaymentMethod;\n}\ninterface IProps {\n    required?: boolean;\n    name: string;\n    onStripeInit?: (stripe: Stripe) => void;\n    stripePublicKey: string;\n    clientSecret?: string;\n    setupIntentId?: string;\n    onPaymentTabChange?: () => void;\n    cardError?: string;\n    paymentMethodOptions: IRadioOption[];\n    defaultOptionName?: EPaymentMethod;\n}\n\nexport const FormStripe = (props: IProps): JSX.Element | null => {\n    const {\n        name,\n        required,\n        paymentMethodOptions,\n        onStripeInit,\n        cardError,\n        stripePublicKey,\n        clientSecret,\n        setupIntentId,\n        onPaymentTabChange,\n        defaultOptionName,\n    } = props;\n\n    const { setFieldTouched, setFieldValue, triggerValidate, errorMessage, value } = useField<IStripeValue>({\n        ...props,\n        required: true,\n        getCustomErrorMessage: undefined,\n    });\n    const stripePromise = useMemo(() => {\n        return stripePublicKey ? loadStripe(stripePublicKey) : undefined;\n    }, [stripePublicKey]);\n\n    const handleCardChange = useCallback(\n        (e: IStripeCard) => {\n            if (e.isValid) {\n                setFieldValue({ ...value, card: e.cardNumberElement });\n            } else {\n                setFieldValue({ ...value, card: undefined });\n            }\n\n            triggerValidate();\n        },\n        [setFieldValue, triggerValidate, value],\n    );\n\n    const handleTokenInit = useCallback(\n        (e: SetupIntentResult) => {\n            setFieldValue({\n                ...value,\n                stripe_permanent_token_id: (e.setupIntent?.payment_method as string) || '',\n                stripe_setup_indent_id: e?.setupIntent?.id || '',\n            });\n            setFieldTouched();\n        },\n        [setFieldTouched, setFieldValue, value],\n    );\n\n    useEffect(() => {\n        if (clientSecret !== value.client_secret) {\n            setFieldValue({ ...value, client_secret: clientSecret, stripe_setup_indent_id: setupIntentId });\n        }\n    }, [clientSecret, setupIntentId, setFieldValue, value]);\n\n    const handleBlur = useCallback(() => {\n        setFieldTouched();\n    }, [setFieldTouched]);\n\n    const handleTabChange = useCallback(\n        (tab: EPaymentMethod) => {\n            setFieldValue({ ...value, paymentMethod: tab });\n\n            onPaymentTabChange && onPaymentTabChange();\n        },\n        [onPaymentTabChange, setFieldValue, value],\n    );\n\n    return stripePromise ? (\n        <Field\n            name={name}\n            required={required}\n            // label={' ' || t('Payment method (Credit / Debit Card)')}\n            errorMessage={cardError || errorMessage}\n        >\n            <Elements\n                stripe={stripePromise}\n                options={{\n                    fonts: [\n                        {\n                            cssSrc: `${document.location.origin}/stripeStyles.css`,\n                        },\n                        {\n                            cssSrc: 'https://fonts.googleapis.com/css2?family=Overpass:wght@600&display=swap',\n                        },\n                    ],\n                    appearance: {\n                        variables: {},\n                    },\n                }}\n            >\n                <StripeInternal\n                    defaultOptionName={defaultOptionName}\n                    paymentMethodOptions={paymentMethodOptions}\n                    onTabChange={handleTabChange}\n                    paymentButtonClientSecret={props.clientSecret}\n                    onPaymentButtonChange={handleTokenInit}\n                    onStripeInit={onStripeInit}\n                    onCardChange={handleCardChange}\n                    onBlur={handleBlur}\n                />\n            </Elements>\n        </Field>\n    ) : null;\n};\n"]},"metadata":{},"sourceType":"module"}