{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport API from '@aws-amplify/api';\nimport { ConsoleLogger as Logger, jitteredBackoff, NonRetryableError, retry, BackgroundProcessManager } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType, ProcessName } from '../../types';\nimport { exhaustiveCheck, extractTargetNamesFromSrc, USER, USER_AGENT_SUFFIX_DATASTORE, ID } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, getModelAuthModes, TransformerMutationType, getTokenForCustomAuth } from '../utils';\nimport { getMutationErrorType } from './errorMaps';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\nvar MutationProcessor = /** @class */function () {\n  function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, amplifyConfig, authModeStrategy, errorHandler, conflictHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n    this.schema = schema;\n    this.storage = storage;\n    this.userClasses = userClasses;\n    this.outbox = outbox;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.MutationEvent = MutationEvent;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.conflictHandler = conflictHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.processing = false;\n    this.runningProcesses = new BackgroundProcessManager();\n    this.amplifyContext.API = this.amplifyContext.API || API;\n    this.generateQueries();\n  }\n  MutationProcessor.prototype.generateQueries = function () {\n    var _this = this;\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = __read(buildGraphQLOperation(namespace, model, 'CREATE'), 1),\n          createMutation = _a[0];\n        var _b = __read(buildGraphQLOperation(namespace, model, 'UPDATE'), 1),\n          updateMutation = _b[0];\n        var _c = __read(buildGraphQLOperation(namespace, model, 'DELETE'), 1),\n          deleteMutation = _c[0];\n        _this.typeQuery.set(model, [createMutation, updateMutation, deleteMutation]);\n      });\n    });\n  };\n  MutationProcessor.prototype.isReady = function () {\n    return this.observer !== undefined;\n  };\n  MutationProcessor.prototype.start = function () {\n    var _this = this;\n    var observable = new Observable(function (observer) {\n      _this.observer = observer;\n      try {\n        _this.resume();\n      } catch (error) {\n        logger.error('mutations processor start error', error);\n        throw error;\n      }\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            this.pause();\n            return [2 /*return*/];\n          });\n        });\n      });\n    });\n\n    return observable;\n  };\n  MutationProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.resume = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.runningProcesses.isOpen && this.runningProcesses.add(function (onTerminate) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var head, namespaceName, _loop_1, this_1, _a;\n                var _this = this;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      if (this.processing || !this.isReady() || !this.runningProcesses.isOpen) {\n                        return [2 /*return*/];\n                      }\n\n                      this.processing = true;\n                      namespaceName = USER;\n                      _loop_1 = function _loop_1() {\n                        var model, operation, data, condition, modelConstructor, result, opName, modelDefinition, modelAuthModes, operationAuthModes_1, authModeAttempts_1, _authModeRetry_, error_1, record, hasMore;\n                        var _a;\n                        return __generator(this, function (_b) {\n                          switch (_b.label) {\n                            case 0:\n                              model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n                              modelConstructor = this_1.userClasses[model];\n                              result = void 0;\n                              opName = void 0;\n                              modelDefinition = void 0;\n                              _b.label = 1;\n                            case 1:\n                              _b.trys.push([1, 4,, 5]);\n                              return [4 /*yield*/, getModelAuthModes({\n                                authModeStrategy: this_1.authModeStrategy,\n                                defaultAuthMode: this_1.amplifyConfig.aws_appsync_authenticationType,\n                                modelName: model,\n                                schema: this_1.schema\n                              })];\n                            case 2:\n                              modelAuthModes = _b.sent();\n                              operationAuthModes_1 = modelAuthModes[operation.toUpperCase()];\n                              authModeAttempts_1 = 0;\n                              _authModeRetry_ = function authModeRetry_1() {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  var response, error_2;\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        _a.trys.push([0, 2,, 4]);\n                                        logger.debug(\"Attempting mutation with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [4 /*yield*/, this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head, operationAuthModes_1[authModeAttempts_1], onTerminate)];\n                                      case 1:\n                                        response = _a.sent();\n                                        logger.debug(\"Mutation sent successfully with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [2 /*return*/, response];\n                                      case 2:\n                                        error_2 = _a.sent();\n                                        authModeAttempts_1++;\n                                        if (authModeAttempts_1 >= operationAuthModes_1.length) {\n                                          logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1]);\n                                          throw error_2;\n                                        }\n                                        logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1] + \". Retrying with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [4 /*yield*/, _authModeRetry_()];\n                                      case 3:\n                                        return [2 /*return*/, _a.sent()];\n                                      case 4:\n                                        return [2 /*return*/];\n                                    }\n                                  });\n                                });\n                              };\n\n                              return [4 /*yield*/, _authModeRetry_()];\n                            case 3:\n                              _a = __read.apply(void 0, [_b.sent(), 3]), result = _a[0], opName = _a[1], modelDefinition = _a[2];\n                              return [3 /*break*/, 5];\n                            case 4:\n                              error_1 = _b.sent();\n                              if (error_1.message === 'Offline' || error_1.message === 'RetryMutation') {\n                                return [2 /*return*/, \"continue\"];\n                              }\n                              return [3 /*break*/, 5];\n                            case 5:\n                              if (!(result === undefined)) return [3 /*break*/, 7];\n                              logger.debug('done retrying');\n                              return [4 /*yield*/, this_1.storage.runExclusive(function (storage) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        return [4 /*yield*/, this.outbox.dequeue(storage)];\n                                      case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                    }\n                                  });\n                                });\n                              })];\n\n                            case 6:\n                              _b.sent();\n                              return [2 /*return*/, \"continue\"];\n                            case 7:\n                              record = result.data[opName];\n                              hasMore = false;\n                              return [4 /*yield*/, this_1.storage.runExclusive(function (storage) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        // using runExclusive to prevent possible race condition\n                                        // when another record gets enqueued between dequeue and peek\n                                        return [4 /*yield*/, this.outbox.dequeue(storage, record, operation)];\n                                      case 1:\n                                        // using runExclusive to prevent possible race condition\n                                        // when another record gets enqueued between dequeue and peek\n                                        _a.sent();\n                                        return [4 /*yield*/, this.outbox.peek(storage)];\n                                      case 2:\n                                        hasMore = _a.sent() !== undefined;\n                                        return [2 /*return*/];\n                                    }\n                                  });\n                                });\n                              })];\n\n                            case 8:\n                              _b.sent();\n                              this_1.observer.next({\n                                operation: operation,\n                                modelDefinition: modelDefinition,\n                                model: record,\n                                hasMore: hasMore\n                              });\n                              return [2 /*return*/];\n                          }\n                        });\n                      };\n\n                      this_1 = this;\n                      _b.label = 1;\n                    case 1:\n                      _a = this.processing && this.runningProcesses.isOpen;\n                      if (!_a) return [3 /*break*/, 3];\n                      return [4 /*yield*/, this.outbox.peek(this.storage)];\n                    case 2:\n                      _a = (head = _b.sent()) !== undefined;\n                      _b.label = 3;\n                    case 3:\n                      if (!_a) return [3 /*break*/, 5];\n                      return [5 /*yield**/, _loop_1()];\n                    case 4:\n                      _b.sent();\n                      return [3 /*break*/, 1];\n                    case 5:\n                      // pauses itself\n                      this.pause();\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }, 'mutation resume loop')];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent, authMode, onTerminate) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, retry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, query, variables, graphQLCondition, opName, modelDefinition, authToken, tryWith, attempt, opType, result, err_1, _b, error, _c, _d, code, retryWith, err_2, _e, _f, opName_1, query_1, authToken_1, serverData, namespace, updatedMutation;\n                var _g;\n                return __generator(this, function (_h) {\n                  switch (_h.label) {\n                    case 0:\n                      _a = __read(this.createQueryVariables(namespaceName, model, operation, data, condition), 5), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                      return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                    case 1:\n                      authToken = _h.sent();\n                      tryWith = {\n                        query: query,\n                        variables: variables,\n                        authMode: authMode,\n                        authToken: authToken,\n                        userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE\n                      };\n                      attempt = 0;\n                      opType = this.opTypeFromTransformerOperation(operation);\n                      _h.label = 2;\n                    case 2:\n                      _h.trys.push([2, 4,, 17]);\n                      return [4 /*yield*/, this.amplifyContext.API.graphql(tryWith)];\n                    case 3:\n                      result = _h.sent();\n                      // `as any` because TypeScript doesn't seem to like passing tuples\n                      // through generic params???\n                      return [2 /*return*/, [result, opName, modelDefinition]];\n                    case 4:\n                      err_1 = _h.sent();\n                      if (!(err_1.errors && err_1.errors.length > 0)) return [3 /*break*/, 15];\n                      _b = __read(err_1.errors, 1), error = _b[0];\n                      _c = error.originalError, _d = (_c === void 0 ? {} : _c).code, code = _d === void 0 ? null : _d;\n                      if (error.errorType === 'Unauthorized') {\n                        throw new NonRetryableError('Unauthorized');\n                      }\n                      if (error.message === 'Network Error' || code === 'ECONNABORTED' // refers to axios timeout error caused by device's bad network condition\n                      ) {\n                        if (!this.processing) {\n                          throw new NonRetryableError('Offline');\n                        }\n                        // TODO: Check errors on different env (react-native or other browsers)\n                        throw new Error('Network Error');\n                      }\n                      if (!(error.errorType === 'ConflictUnhandled')) return [3 /*break*/, 13];\n                      // TODO: add on ConflictConditionalCheck error query last from server\n                      attempt++;\n                      retryWith = void 0;\n                      if (!(attempt > MAX_ATTEMPTS)) return [3 /*break*/, 5];\n                      retryWith = DISCARD;\n                      return [3 /*break*/, 8];\n                    case 5:\n                      _h.trys.push([5, 7,, 8]);\n                      return [4 /*yield*/, this.conflictHandler({\n                        modelConstructor: modelConstructor,\n                        localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                        remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                        operation: opType,\n                        attempts: attempt\n                      })];\n                    case 6:\n                      retryWith = _h.sent();\n                      return [3 /*break*/, 8];\n                    case 7:\n                      err_2 = _h.sent();\n                      logger.warn('conflict trycatch', err_2);\n                      return [3 /*break*/, 17];\n                    case 8:\n                      if (!(retryWith === DISCARD)) return [3 /*break*/, 11];\n                      _e = __read(buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET'), 1), _f = __read(_e[0], 3), opName_1 = _f[1], query_1 = _f[2];\n                      return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                    case 9:\n                      authToken_1 = _h.sent();\n                      return [4 /*yield*/, this.amplifyContext.API.graphql({\n                        query: query_1,\n                        variables: {\n                          id: variables.input.id\n                        },\n                        authMode: authMode,\n                        authToken: authToken_1,\n                        userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE\n                      })];\n                    case 10:\n                      serverData = _h.sent();\n                      // onTerminate cancel graphql()\n                      return [2 /*return*/, [serverData, opName_1, modelDefinition]];\n                    case 11:\n                      namespace = this.schema.namespaces[namespaceName];\n                      updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                      return [4 /*yield*/, this.storage.save(updatedMutation)];\n                    case 12:\n                      _h.sent();\n                      throw new NonRetryableError('RetryMutation');\n                    case 13:\n                      try {\n                        this.errorHandler({\n                          recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                          localModel: variables.input,\n                          message: error.message,\n                          operation: operation,\n                          errorType: getMutationErrorType(error),\n                          errorInfo: error.errorInfo,\n                          process: ProcessName.mutate,\n                          cause: error,\n                          remoteModel: error.data ? this.modelInstanceCreator(modelConstructor, error.data) : null\n                        });\n                      } catch (err) {\n                        logger.warn('Mutation error handler failed with:', err);\n                      } finally {\n                        // Return empty tuple, dequeues the mutation\n                        return [2 /*return*/, error.data ? [{\n                          data: (_g = {}, _g[opName] = error.data, _g)\n                        }, opName, modelDefinition] : []];\n                      }\n                      _h.label = 14;\n                    case 14:\n                      return [3 /*break*/, 16];\n                    case 15:\n                      // Catch-all for client-side errors that don't come back in the `GraphQLError` format.\n                      // These errors should not be retried.\n                      throw new NonRetryableError(err_1);\n                    case 16:\n                      return [3 /*break*/, 17];\n                    case 17:\n                      if (tryWith) return [3 /*break*/, 2];\n                      _h.label = 18;\n                    case 18:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }, [model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent], safeJitteredBackoff, onTerminate)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n    var e_1, _a, e_2, _b, e_3, _c;\n    var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n    var primaryKey = this.schema.namespaces[namespaceName].keys[model].primaryKey;\n    var queriesTuples = this.typeQuery.get(modelDefinition);\n    var _d = __read(queriesTuples.find(function (_a) {\n        var _b = __read(_a, 1),\n          transformerMutationType = _b[0];\n        return transformerMutationType === operation;\n      }), 3),\n      opName = _d[1],\n      query = _d[2];\n    var _e = JSON.parse(data),\n      _version = _e._version,\n      parsedData = __rest(_e, [\"_version\"]);\n    // include all the fields that comprise a custom PK if one is specified\n    var deleteInput = {};\n    if (primaryKey === null || primaryKey === void 0 ? void 0 : primaryKey.length) {\n      try {\n        for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {\n          var pkField = primaryKey_1_1.value;\n          deleteInput[pkField] = parsedData[pkField];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return)) _a.call(primaryKey_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    } else {\n      deleteInput[ID] = parsedData.id;\n    }\n    var mutationInput;\n    if (operation === TransformerMutationType.DELETE) {\n      // For DELETE mutations, only the key(s) are included in the input\n      mutationInput = deleteInput;\n    } else {\n      // Otherwise, we construct the mutation input with the following logic\n      mutationInput = {};\n      var modelFields = Object.values(modelDefinition.fields);\n      try {\n        for (var modelFields_1 = __values(modelFields), modelFields_1_1 = modelFields_1.next(); !modelFields_1_1.done; modelFields_1_1 = modelFields_1.next()) {\n          var _f = modelFields_1_1.value,\n            name_1 = _f.name,\n            type = _f.type,\n            association = _f.association;\n          // model fields should be stripped out from the input\n          if (isModelFieldType(type)) {\n            // except for belongs to relations - we need to replace them with the correct foreign key(s)\n            if (isTargetNameAssociation(association) && association.connectionType === 'BELONGS_TO') {\n              var targetNames = extractTargetNamesFromSrc(association);\n              if (targetNames) {\n                try {\n                  // instead of including the connected model itself, we add its key(s) to the mutation input\n                  for (var targetNames_1 = (e_3 = void 0, __values(targetNames)), targetNames_1_1 = targetNames_1.next(); !targetNames_1_1.done; targetNames_1_1 = targetNames_1.next()) {\n                    var targetName = targetNames_1_1.value;\n                    mutationInput[targetName] = parsedData[targetName];\n                  }\n                } catch (e_3_1) {\n                  e_3 = {\n                    error: e_3_1\n                  };\n                } finally {\n                  try {\n                    if (targetNames_1_1 && !targetNames_1_1.done && (_c = targetNames_1.return)) _c.call(targetNames_1);\n                  } finally {\n                    if (e_3) throw e_3.error;\n                  }\n                }\n              }\n            }\n            continue;\n          }\n          // scalar fields / non-model types\n          if (operation === TransformerMutationType.UPDATE) {\n            if (!parsedData.hasOwnProperty(name_1)) {\n              // for update mutations - strip out a field if it's unchanged\n              continue;\n            }\n          }\n          // all other fields are added to the input object\n          mutationInput[name_1] = parsedData[name_1];\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (modelFields_1_1 && !modelFields_1_1.done && (_b = modelFields_1.return)) _b.call(modelFields_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n    // Build mutation variables input object\n    var input = __assign(__assign({}, mutationInput), {\n      _version: _version\n    });\n    var graphQLCondition = JSON.parse(condition);\n    var variables = __assign({\n      input: input\n    }, operation === TransformerMutationType.CREATE ? {} : {\n      condition: Object.keys(graphQLCondition).length > 0 ? graphQLCondition : null\n    });\n    return [query, variables, graphQLCondition, opName, modelDefinition];\n  };\n  MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n    switch (operation) {\n      case TransformerMutationType.CREATE:\n        return OpType.INSERT;\n      case TransformerMutationType.DELETE:\n        return OpType.DELETE;\n      case TransformerMutationType.UPDATE:\n        return OpType.UPDATE;\n      case TransformerMutationType.GET:\n        // Intentionally blank\n        break;\n      default:\n        exhaustiveCheck(operation);\n    }\n  };\n  MutationProcessor.prototype.pause = function () {\n    this.processing = false;\n  };\n  return MutationProcessor;\n}();\nvar MAX_RETRY_DELAY_MS = 5 * 60 * 1000;\nvar originalJitteredBackoff = jitteredBackoff(MAX_RETRY_DELAY_MS);\n/**\n * @private\n * Internal use of Amplify only.\n *\n * Wraps the jittered backoff calculation to retry Network Errors indefinitely.\n * Backs off according to original jittered retry logic until the original retry\n * logic hits its max. After this occurs, if the error is a Network Error, we\n * ignore the attempt count and return MAX_RETRY_DELAY_MS to retry forever (until\n * the request succeeds).\n *\n * @param attempt ignored\n * @param _args ignored\n * @param error tested to see if `.message` is 'Network Error'\n * @returns number | false :\n */\nexport var safeJitteredBackoff = function safeJitteredBackoff(attempt, _args, error) {\n  var attemptResult = originalJitteredBackoff(attempt);\n  // If this is the last attempt and it is a network error, we retry indefinitively every 5 minutes\n  if (attemptResult === false && (error === null || error === void 0 ? void 0 : error.message) === 'Network Error') {\n    return MAX_RETRY_DELAY_MS;\n  }\n  return attemptResult;\n};\nexport { MutationProcessor };","map":{"version":3,"sources":["../../../src/sync/processors/mutation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport API from '@aws-amplify/api';\nimport { ConsoleLogger as Logger, jitteredBackoff, NonRetryableError, retry, BackgroundProcessManager, } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType, ProcessName, } from '../../types';\nimport { exhaustiveCheck, extractTargetNamesFromSrc, USER, USER_AGENT_SUFFIX_DATASTORE, ID, } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, getModelAuthModes, TransformerMutationType, getTokenForCustomAuth, } from '../utils';\nimport { getMutationErrorType } from './errorMaps';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\nvar MutationProcessor = /** @class */ (function () {\n    function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, amplifyConfig, authModeStrategy, errorHandler, conflictHandler, amplifyContext) {\n        if (amplifyConfig === void 0) { amplifyConfig = {}; }\n        this.schema = schema;\n        this.storage = storage;\n        this.userClasses = userClasses;\n        this.outbox = outbox;\n        this.modelInstanceCreator = modelInstanceCreator;\n        this.MutationEvent = MutationEvent;\n        this.amplifyConfig = amplifyConfig;\n        this.authModeStrategy = authModeStrategy;\n        this.errorHandler = errorHandler;\n        this.conflictHandler = conflictHandler;\n        this.amplifyContext = amplifyContext;\n        this.typeQuery = new WeakMap();\n        this.processing = false;\n        this.runningProcesses = new BackgroundProcessManager();\n        this.amplifyContext.API = this.amplifyContext.API || API;\n        this.generateQueries();\n    }\n    MutationProcessor.prototype.generateQueries = function () {\n        var _this = this;\n        Object.values(this.schema.namespaces).forEach(function (namespace) {\n            Object.values(namespace.models)\n                .filter(function (_a) {\n                var syncable = _a.syncable;\n                return syncable;\n            })\n                .forEach(function (model) {\n                var _a = __read(buildGraphQLOperation(namespace, model, 'CREATE'), 1), createMutation = _a[0];\n                var _b = __read(buildGraphQLOperation(namespace, model, 'UPDATE'), 1), updateMutation = _b[0];\n                var _c = __read(buildGraphQLOperation(namespace, model, 'DELETE'), 1), deleteMutation = _c[0];\n                _this.typeQuery.set(model, [\n                    createMutation,\n                    updateMutation,\n                    deleteMutation,\n                ]);\n            });\n        });\n    };\n    MutationProcessor.prototype.isReady = function () {\n        return this.observer !== undefined;\n    };\n    MutationProcessor.prototype.start = function () {\n        var _this = this;\n        var observable = new Observable(function (observer) {\n            _this.observer = observer;\n            try {\n                _this.resume();\n            }\n            catch (error) {\n                logger.error('mutations processor start error', error);\n                throw error;\n            }\n            return _this.runningProcesses.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    this.pause();\n                    return [2 /*return*/];\n                });\n            }); });\n        });\n        return observable;\n    };\n    MutationProcessor.prototype.stop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.runningProcesses.close()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.runningProcesses.open()];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MutationProcessor.prototype.resume = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, (this.runningProcesses.isOpen &&\n                            this.runningProcesses.add(function (onTerminate) { return __awaiter(_this, void 0, void 0, function () {\n                                var head, namespaceName, _loop_1, this_1, _a;\n                                var _this = this;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            if (this.processing ||\n                                                !this.isReady() ||\n                                                !this.runningProcesses.isOpen) {\n                                                return [2 /*return*/];\n                                            }\n                                            this.processing = true;\n                                            namespaceName = USER;\n                                            _loop_1 = function () {\n                                                var model, operation, data, condition, modelConstructor, result, opName, modelDefinition, modelAuthModes, operationAuthModes_1, authModeAttempts_1, authModeRetry_1, error_1, record, hasMore;\n                                                var _a;\n                                                return __generator(this, function (_b) {\n                                                    switch (_b.label) {\n                                                        case 0:\n                                                            model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n                                                            modelConstructor = this_1.userClasses[model];\n                                                            result = void 0;\n                                                            opName = void 0;\n                                                            modelDefinition = void 0;\n                                                            _b.label = 1;\n                                                        case 1:\n                                                            _b.trys.push([1, 4, , 5]);\n                                                            return [4 /*yield*/, getModelAuthModes({\n                                                                    authModeStrategy: this_1.authModeStrategy,\n                                                                    defaultAuthMode: this_1.amplifyConfig.aws_appsync_authenticationType,\n                                                                    modelName: model,\n                                                                    schema: this_1.schema,\n                                                                })];\n                                                        case 2:\n                                                            modelAuthModes = _b.sent();\n                                                            operationAuthModes_1 = modelAuthModes[operation.toUpperCase()];\n                                                            authModeAttempts_1 = 0;\n                                                            authModeRetry_1 = function () { return __awaiter(_this, void 0, void 0, function () {\n                                                                var response, error_2;\n                                                                return __generator(this, function (_a) {\n                                                                    switch (_a.label) {\n                                                                        case 0:\n                                                                            _a.trys.push([0, 2, , 4]);\n                                                                            logger.debug(\"Attempting mutation with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                                                            return [4 /*yield*/, this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head, operationAuthModes_1[authModeAttempts_1], onTerminate)];\n                                                                        case 1:\n                                                                            response = _a.sent();\n                                                                            logger.debug(\"Mutation sent successfully with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                                                            return [2 /*return*/, response];\n                                                                        case 2:\n                                                                            error_2 = _a.sent();\n                                                                            authModeAttempts_1++;\n                                                                            if (authModeAttempts_1 >= operationAuthModes_1.length) {\n                                                                                logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1]);\n                                                                                throw error_2;\n                                                                            }\n                                                                            logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1] + \". Retrying with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                                                            return [4 /*yield*/, authModeRetry_1()];\n                                                                        case 3: return [2 /*return*/, _a.sent()];\n                                                                        case 4: return [2 /*return*/];\n                                                                    }\n                                                                });\n                                                            }); };\n                                                            return [4 /*yield*/, authModeRetry_1()];\n                                                        case 3:\n                                                            _a = __read.apply(void 0, [_b.sent(), 3]), result = _a[0], opName = _a[1], modelDefinition = _a[2];\n                                                            return [3 /*break*/, 5];\n                                                        case 4:\n                                                            error_1 = _b.sent();\n                                                            if (error_1.message === 'Offline' ||\n                                                                error_1.message === 'RetryMutation') {\n                                                                return [2 /*return*/, \"continue\"];\n                                                            }\n                                                            return [3 /*break*/, 5];\n                                                        case 5:\n                                                            if (!(result === undefined)) return [3 /*break*/, 7];\n                                                            logger.debug('done retrying');\n                                                            return [4 /*yield*/, this_1.storage.runExclusive(function (storage) { return __awaiter(_this, void 0, void 0, function () {\n                                                                    return __generator(this, function (_a) {\n                                                                        switch (_a.label) {\n                                                                            case 0: return [4 /*yield*/, this.outbox.dequeue(storage)];\n                                                                            case 1:\n                                                                                _a.sent();\n                                                                                return [2 /*return*/];\n                                                                        }\n                                                                    });\n                                                                }); })];\n                                                        case 6:\n                                                            _b.sent();\n                                                            return [2 /*return*/, \"continue\"];\n                                                        case 7:\n                                                            record = result.data[opName];\n                                                            hasMore = false;\n                                                            return [4 /*yield*/, this_1.storage.runExclusive(function (storage) { return __awaiter(_this, void 0, void 0, function () {\n                                                                    return __generator(this, function (_a) {\n                                                                        switch (_a.label) {\n                                                                            case 0: \n                                                                            // using runExclusive to prevent possible race condition\n                                                                            // when another record gets enqueued between dequeue and peek\n                                                                            return [4 /*yield*/, this.outbox.dequeue(storage, record, operation)];\n                                                                            case 1:\n                                                                                // using runExclusive to prevent possible race condition\n                                                                                // when another record gets enqueued between dequeue and peek\n                                                                                _a.sent();\n                                                                                return [4 /*yield*/, this.outbox.peek(storage)];\n                                                                            case 2:\n                                                                                hasMore = (_a.sent()) !== undefined;\n                                                                                return [2 /*return*/];\n                                                                        }\n                                                                    });\n                                                                }); })];\n                                                        case 8:\n                                                            _b.sent();\n                                                            this_1.observer.next({\n                                                                operation: operation,\n                                                                modelDefinition: modelDefinition,\n                                                                model: record,\n                                                                hasMore: hasMore,\n                                                            });\n                                                            return [2 /*return*/];\n                                                    }\n                                                });\n                                            };\n                                            this_1 = this;\n                                            _b.label = 1;\n                                        case 1:\n                                            _a = this.processing &&\n                                                this.runningProcesses.isOpen;\n                                            if (!_a) return [3 /*break*/, 3];\n                                            return [4 /*yield*/, this.outbox.peek(this.storage)];\n                                        case 2:\n                                            _a = (head = _b.sent()) !== undefined;\n                                            _b.label = 3;\n                                        case 3:\n                                            if (!_a) return [3 /*break*/, 5];\n                                            return [5 /*yield**/, _loop_1()];\n                                        case 4:\n                                            _b.sent();\n                                            return [3 /*break*/, 1];\n                                        case 5:\n                                            // pauses itself\n                                            this.pause();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); }, 'mutation resume loop'))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent, authMode, onTerminate) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, retry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) { return __awaiter(_this, void 0, void 0, function () {\n                            var _a, query, variables, graphQLCondition, opName, modelDefinition, authToken, tryWith, attempt, opType, result, err_1, _b, error, _c, _d, code, retryWith, err_2, _e, _f, opName_1, query_1, authToken_1, serverData, namespace, updatedMutation;\n                            var _g;\n                            return __generator(this, function (_h) {\n                                switch (_h.label) {\n                                    case 0:\n                                        _a = __read(this.createQueryVariables(namespaceName, model, operation, data, condition), 5), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                                        return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                                    case 1:\n                                        authToken = _h.sent();\n                                        tryWith = {\n                                            query: query,\n                                            variables: variables,\n                                            authMode: authMode,\n                                            authToken: authToken,\n                                            userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE,\n                                        };\n                                        attempt = 0;\n                                        opType = this.opTypeFromTransformerOperation(operation);\n                                        _h.label = 2;\n                                    case 2:\n                                        _h.trys.push([2, 4, , 17]);\n                                        return [4 /*yield*/, this.amplifyContext.API.graphql(tryWith)];\n                                    case 3:\n                                        result = (_h.sent());\n                                        // `as any` because TypeScript doesn't seem to like passing tuples\n                                        // through generic params???\n                                        return [2 /*return*/, [result, opName, modelDefinition]];\n                                    case 4:\n                                        err_1 = _h.sent();\n                                        if (!(err_1.errors && err_1.errors.length > 0)) return [3 /*break*/, 15];\n                                        _b = __read(err_1.errors, 1), error = _b[0];\n                                        _c = error.originalError, _d = (_c === void 0 ? {} : _c).code, code = _d === void 0 ? null : _d;\n                                        if (error.errorType === 'Unauthorized') {\n                                            throw new NonRetryableError('Unauthorized');\n                                        }\n                                        if (error.message === 'Network Error' ||\n                                            code === 'ECONNABORTED' // refers to axios timeout error caused by device's bad network condition\n                                        ) {\n                                            if (!this.processing) {\n                                                throw new NonRetryableError('Offline');\n                                            }\n                                            // TODO: Check errors on different env (react-native or other browsers)\n                                            throw new Error('Network Error');\n                                        }\n                                        if (!(error.errorType === 'ConflictUnhandled')) return [3 /*break*/, 13];\n                                        // TODO: add on ConflictConditionalCheck error query last from server\n                                        attempt++;\n                                        retryWith = void 0;\n                                        if (!(attempt > MAX_ATTEMPTS)) return [3 /*break*/, 5];\n                                        retryWith = DISCARD;\n                                        return [3 /*break*/, 8];\n                                    case 5:\n                                        _h.trys.push([5, 7, , 8]);\n                                        return [4 /*yield*/, this.conflictHandler({\n                                                modelConstructor: modelConstructor,\n                                                localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                                                remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                                                operation: opType,\n                                                attempts: attempt,\n                                            })];\n                                    case 6:\n                                        retryWith = _h.sent();\n                                        return [3 /*break*/, 8];\n                                    case 7:\n                                        err_2 = _h.sent();\n                                        logger.warn('conflict trycatch', err_2);\n                                        return [3 /*break*/, 17];\n                                    case 8:\n                                        if (!(retryWith === DISCARD)) return [3 /*break*/, 11];\n                                        _e = __read(buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET'), 1), _f = __read(_e[0], 3), opName_1 = _f[1], query_1 = _f[2];\n                                        return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                                    case 9:\n                                        authToken_1 = _h.sent();\n                                        return [4 /*yield*/, this.amplifyContext.API.graphql({\n                                                query: query_1,\n                                                variables: { id: variables.input.id },\n                                                authMode: authMode,\n                                                authToken: authToken_1,\n                                                userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE,\n                                            })];\n                                    case 10:\n                                        serverData = _h.sent();\n                                        // onTerminate cancel graphql()\n                                        return [2 /*return*/, [serverData, opName_1, modelDefinition]];\n                                    case 11:\n                                        namespace = this.schema.namespaces[namespaceName];\n                                        updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                                        return [4 /*yield*/, this.storage.save(updatedMutation)];\n                                    case 12:\n                                        _h.sent();\n                                        throw new NonRetryableError('RetryMutation');\n                                    case 13:\n                                        try {\n                                            this.errorHandler({\n                                                recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                localModel: variables.input,\n                                                message: error.message,\n                                                operation: operation,\n                                                errorType: getMutationErrorType(error),\n                                                errorInfo: error.errorInfo,\n                                                process: ProcessName.mutate,\n                                                cause: error,\n                                                remoteModel: error.data\n                                                    ? this.modelInstanceCreator(modelConstructor, error.data)\n                                                    : null,\n                                            });\n                                        }\n                                        catch (err) {\n                                            logger.warn('Mutation error handler failed with:', err);\n                                        }\n                                        finally {\n                                            // Return empty tuple, dequeues the mutation\n                                            return [2 /*return*/, error.data\n                                                    ? [\n                                                        { data: (_g = {}, _g[opName] = error.data, _g) },\n                                                        opName,\n                                                        modelDefinition,\n                                                    ]\n                                                    : []];\n                                        }\n                                        _h.label = 14;\n                                    case 14: return [3 /*break*/, 16];\n                                    case 15: \n                                    // Catch-all for client-side errors that don't come back in the `GraphQLError` format.\n                                    // These errors should not be retried.\n                                    throw new NonRetryableError(err_1);\n                                    case 16: return [3 /*break*/, 17];\n                                    case 17:\n                                        if (tryWith) return [3 /*break*/, 2];\n                                        _h.label = 18;\n                                    case 18: return [2 /*return*/];\n                                }\n                            });\n                        }); }, [\n                            model,\n                            operation,\n                            data,\n                            condition,\n                            modelConstructor,\n                            MutationEvent,\n                            mutationEvent,\n                        ], safeJitteredBackoff, onTerminate)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n        var e_1, _a, e_2, _b, e_3, _c;\n        var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n        var primaryKey = this.schema.namespaces[namespaceName].keys[model].primaryKey;\n        var queriesTuples = this.typeQuery.get(modelDefinition);\n        var _d = __read(queriesTuples.find(function (_a) {\n            var _b = __read(_a, 1), transformerMutationType = _b[0];\n            return transformerMutationType === operation;\n        }), 3), opName = _d[1], query = _d[2];\n        var _e = JSON.parse(data), _version = _e._version, parsedData = __rest(_e, [\"_version\"]);\n        // include all the fields that comprise a custom PK if one is specified\n        var deleteInput = {};\n        if (primaryKey === null || primaryKey === void 0 ? void 0 : primaryKey.length) {\n            try {\n                for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {\n                    var pkField = primaryKey_1_1.value;\n                    deleteInput[pkField] = parsedData[pkField];\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return)) _a.call(primaryKey_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        else {\n            deleteInput[ID] = parsedData.id;\n        }\n        var mutationInput;\n        if (operation === TransformerMutationType.DELETE) {\n            // For DELETE mutations, only the key(s) are included in the input\n            mutationInput = deleteInput;\n        }\n        else {\n            // Otherwise, we construct the mutation input with the following logic\n            mutationInput = {};\n            var modelFields = Object.values(modelDefinition.fields);\n            try {\n                for (var modelFields_1 = __values(modelFields), modelFields_1_1 = modelFields_1.next(); !modelFields_1_1.done; modelFields_1_1 = modelFields_1.next()) {\n                    var _f = modelFields_1_1.value, name_1 = _f.name, type = _f.type, association = _f.association;\n                    // model fields should be stripped out from the input\n                    if (isModelFieldType(type)) {\n                        // except for belongs to relations - we need to replace them with the correct foreign key(s)\n                        if (isTargetNameAssociation(association) &&\n                            association.connectionType === 'BELONGS_TO') {\n                            var targetNames = extractTargetNamesFromSrc(association);\n                            if (targetNames) {\n                                try {\n                                    // instead of including the connected model itself, we add its key(s) to the mutation input\n                                    for (var targetNames_1 = (e_3 = void 0, __values(targetNames)), targetNames_1_1 = targetNames_1.next(); !targetNames_1_1.done; targetNames_1_1 = targetNames_1.next()) {\n                                        var targetName = targetNames_1_1.value;\n                                        mutationInput[targetName] = parsedData[targetName];\n                                    }\n                                }\n                                catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                                finally {\n                                    try {\n                                        if (targetNames_1_1 && !targetNames_1_1.done && (_c = targetNames_1.return)) _c.call(targetNames_1);\n                                    }\n                                    finally { if (e_3) throw e_3.error; }\n                                }\n                            }\n                        }\n                        continue;\n                    }\n                    // scalar fields / non-model types\n                    if (operation === TransformerMutationType.UPDATE) {\n                        if (!parsedData.hasOwnProperty(name_1)) {\n                            // for update mutations - strip out a field if it's unchanged\n                            continue;\n                        }\n                    }\n                    // all other fields are added to the input object\n                    mutationInput[name_1] = parsedData[name_1];\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (modelFields_1_1 && !modelFields_1_1.done && (_b = modelFields_1.return)) _b.call(modelFields_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n        // Build mutation variables input object\n        var input = __assign(__assign({}, mutationInput), { _version: _version });\n        var graphQLCondition = JSON.parse(condition);\n        var variables = __assign({ input: input }, (operation === TransformerMutationType.CREATE\n            ? {}\n            : {\n                condition: Object.keys(graphQLCondition).length > 0\n                    ? graphQLCondition\n                    : null,\n            }));\n        return [query, variables, graphQLCondition, opName, modelDefinition];\n    };\n    MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n        switch (operation) {\n            case TransformerMutationType.CREATE:\n                return OpType.INSERT;\n            case TransformerMutationType.DELETE:\n                return OpType.DELETE;\n            case TransformerMutationType.UPDATE:\n                return OpType.UPDATE;\n            case TransformerMutationType.GET: // Intentionally blank\n                break;\n            default:\n                exhaustiveCheck(operation);\n        }\n    };\n    MutationProcessor.prototype.pause = function () {\n        this.processing = false;\n    };\n    return MutationProcessor;\n}());\nvar MAX_RETRY_DELAY_MS = 5 * 60 * 1000;\nvar originalJitteredBackoff = jitteredBackoff(MAX_RETRY_DELAY_MS);\n/**\n * @private\n * Internal use of Amplify only.\n *\n * Wraps the jittered backoff calculation to retry Network Errors indefinitely.\n * Backs off according to original jittered retry logic until the original retry\n * logic hits its max. After this occurs, if the error is a Network Error, we\n * ignore the attempt count and return MAX_RETRY_DELAY_MS to retry forever (until\n * the request succeeds).\n *\n * @param attempt ignored\n * @param _args ignored\n * @param error tested to see if `.message` is 'Network Error'\n * @returns number | false :\n */\nexport var safeJitteredBackoff = function (attempt, _args, error) {\n    var attemptResult = originalJitteredBackoff(attempt);\n    // If this is the last attempt and it is a network error, we retry indefinitively every 5 minutes\n    if (attemptResult === false && (error === null || error === void 0 ? void 0 : error.message) === 'Network Error') {\n        return MAX_RETRY_DELAY_MS;\n    }\n    return attemptResult;\n};\nexport { MutationProcessor };\n//# sourceMappingURL=mutation.js.map"]},"metadata":{},"sourceType":"module"}