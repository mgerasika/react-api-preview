{"ast":null,"code":"import { slicedToArray as _slicedToArray, asyncToGenerator as _asyncToGenerator, regeneratorRuntime as _regeneratorRuntime } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { StatusTag } from '../tag/status-tag.component.js';\nimport { t } from '../../hooks/use-t.hook.js';\nimport { consoleService } from '../../services/console.service.js';\nimport { useStripe, PaymentRequestButtonElement } from '@stripe/react-stripe-js';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { jsx } from '@emotion/react';\nvar PaymentButton = function PaymentButton(_ref) {\n  var onTokenInit = _ref.onTokenInit,\n    clientSecret = _ref.clientSecret;\n  var stripe = useStripe();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    paymentRequest = _useState2[0],\n    setPaymentRequest = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    message = _useState4[0],\n    setMessage = _useState4[1];\n  useEffect(function () {\n    if (stripe) {\n      var pr = stripe.paymentRequest({\n        country: 'GB',\n        currency: 'gbp',\n        total: {\n          label: 'Subscribe',\n          amount: 0\n        },\n        requestPayerName: true,\n        requestPayerEmail: true,\n        requestPayerPhone: true,\n        requestShipping: false\n      });\n\n      // Full example https://github.com/stripe-samples/accept-a-payment/blob/main/custom-payment-flow/client/react-cra/src/GooglePay.js\n      // Check the availability of the Payment Request API.\n      pr.canMakePayment().then(function (result) {\n        if (result) {\n          setPaymentRequest(pr);\n        } else {\n          setMessage(t('Google Pay / Apple Pay not detected, please check your device settings or choose Credit / Debit card'));\n        }\n      }).catch(function (e) {\n        return consoleService.log('error =', e);\n      });\n    }\n  }, [onTokenInit, stripe]);\n  useEffect(function () {\n    if (paymentRequest && stripe) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      paymentRequest === null || paymentRequest === void 0 ? void 0 : paymentRequest.on('paymentmethod', /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ev) {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  stripe === null || stripe === void 0 ? void 0 : stripe.confirmCardSetup(clientSecret, {\n                    payment_method: ev.paymentMethod.id\n                  }).then(function (setupIndent) {\n                    if (!setupIndent.error) {\n                      onTokenInit && onTokenInit(setupIndent);\n                      setMessage(t('Card successfully initialized'));\n                      consoleService.log('confirmCardSetup success', setupIndent);\n                      ev.complete('success');\n                    } else {\n                      consoleService.log('confirmCardSetup error', setupIndent);\n                      ev.complete('fail');\n                    }\n                  }).catch(function (e) {\n                    consoleService.log('confirmCardSetup error', e);\n                    ev.complete('fail');\n                  });\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }, [clientSecret, onTokenInit, paymentRequest, stripe]);\n  var handleReady = function handleReady(e) {\n    consoleService.log('handleReady', e);\n  };\n  var options = useMemo(function () {\n    return {\n      paymentRequest: paymentRequest,\n      style: {\n        paymentRequestButton: {\n          // theme: 'dark',\n          height: '42px',\n          type: 'default'\n        }\n      }\n    };\n  }, [paymentRequest]);\n  if (options && paymentRequest) {\n    return jsx(React.Fragment, null, jsx(PaymentRequestButtonElement, {\n      options: options,\n      onReady: handleReady\n    }), message && jsx(StatusTag, {\n      tw: \"mt-1\",\n      status: \"success\"\n    }, message));\n  } else {\n    if (message) {\n      return jsx(StatusTag, {\n        status: \"info\"\n      }, message);\n    }\n  }\n  return jsx(React.Fragment, null);\n};\nexport { PaymentButton };","map":{"version":3,"sources":["../../../../src/general-ui/stripe/payment-button.component.tsx"],"names":["PaymentButton","onTokenInit","clientSecret","stripe","useStripe","paymentRequest","setPaymentRequest","useState","_useState2","message","setMessage","_useState4","useEffect","pr","country","currency","total","label","amount","requestPayerName","requestPayerEmail","requestPayerPhone","requestShipping","canMakePayment","then","result","t","catch","e","consoleService","log","on","ev","confirmCardSetup","payment_method","paymentMethod","id","setupIndent","error","complete","handleReady","options","useMemo","style","paymentRequestButton","height","type","___EmotionJSX","PaymentRequestButtonElement","onReady","StatusTag","tw","status"],"mappings":"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","sourcesContent":["import { StatusTag } from '@common/general-ui/tag/status-tag.component';\nimport { t } from '@common/hooks/use-t.hook';\nimport { consoleService } from '@common/services/console.service';\nimport { PaymentRequestButtonElement, useStripe } from '@stripe/react-stripe-js';\nimport { SetupIntentResult, StripePaymentRequestButtonElementOptions } from '@stripe/stripe-js';\nimport React, { useEffect, useMemo, useState } from 'react';\n\ninterface IProps {\n    onTokenInit?: (token: SetupIntentResult) => void;\n    clientSecret: string;\n}\nexport const PaymentButton = ({ onTokenInit, clientSecret }: IProps): JSX.Element => {\n    const stripe = useStripe();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const [paymentRequest, setPaymentRequest] = useState<any>(null);\n    const [message, setMessage] = useState('');\n\n    useEffect(() => {\n        if (stripe) {\n            const pr = stripe.paymentRequest({\n                country: 'GB',\n                currency: 'gbp',\n                total: {\n                    label: 'Subscribe',\n                    amount: 0,\n                },\n                requestPayerName: true,\n                requestPayerEmail: true,\n                requestPayerPhone: true,\n                requestShipping: false,\n            });\n\n            // Full example https://github.com/stripe-samples/accept-a-payment/blob/main/custom-payment-flow/client/react-cra/src/GooglePay.js\n            // Check the availability of the Payment Request API.\n            pr.canMakePayment()\n                .then((result) => {\n                    if (result) {\n                        setPaymentRequest(pr);\n                    } else {\n                        setMessage(\n                            t(\n                                'Google Pay / Apple Pay not detected, please check your device settings or choose Credit / Debit card',\n                            ),\n                        );\n                    }\n                })\n                .catch((e) => consoleService.log('error =', e));\n        }\n    }, [onTokenInit, stripe]);\n\n    useEffect(() => {\n        if (paymentRequest && stripe) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            paymentRequest?.on('paymentmethod', async (ev: any) => {\n                stripe\n                    ?.confirmCardSetup(clientSecret, {\n                        payment_method: ev.paymentMethod.id,\n                    })\n                    .then((setupIndent) => {\n                        if (!setupIndent.error) {\n                            onTokenInit && onTokenInit(setupIndent);\n                            setMessage(t('Card successfully initialized'));\n                            consoleService.log('confirmCardSetup success', setupIndent);\n                            ev.complete('success');\n                        } else {\n                            consoleService.log('confirmCardSetup error', setupIndent);\n                            ev.complete('fail');\n                        }\n                    })\n                    .catch((e) => {\n                        consoleService.log('confirmCardSetup error', e);\n                        ev.complete('fail');\n                    });\n            });\n        }\n    }, [clientSecret, onTokenInit, paymentRequest, stripe]);\n\n    const handleReady = (e: unknown): void => {\n        consoleService.log('handleReady', e);\n    };\n    const options = useMemo(\n        () =>\n            ({\n                paymentRequest,\n                style: {\n                    paymentRequestButton: {\n                        // theme: 'dark',\n                        height: '42px',\n                        type: 'default',\n                    },\n                },\n            } as unknown as StripePaymentRequestButtonElementOptions),\n        [paymentRequest],\n    );\n\n    if (options && paymentRequest) {\n        return (\n            <>\n                <PaymentRequestButtonElement options={options} onReady={handleReady} />\n\n                {message && (\n                    <StatusTag tw=\"mt-1\" status=\"success\">\n                        {message}\n                    </StatusTag>\n                )}\n            </>\n        );\n    } else {\n        if (message) {\n            return <StatusTag status=\"info\">{message}</StatusTag>;\n        }\n    }\n\n    return <></>;\n};\n"]},"metadata":{},"sourceType":"module"}