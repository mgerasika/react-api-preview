{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetDocumentTextDetectionRequest, GetDocumentTextDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetDocumentTextDetectionCommand, serializeAws_json1_1GetDocumentTextDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the results for an Amazon Textract asynchronous operation that detects text in a document.\n *      Amazon Textract can detect lines of text and the words that make up a line of text.</p>\n *          <p>You start asynchronous text detection by calling <a>StartDocumentTextDetection</a>, which returns a job identifier\n *             (<code>JobId</code>). When the text detection operation finishes, Amazon Textract publishes a\n *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n *             <code>StartDocumentTextDetection</code>. To get the results of the text-detection\n *          operation, first check that the status value published to the Amazon SNS topic is\n *             <code>SUCCEEDED</code>. If so, call <code>GetDocumentTextDetection</code>, and pass the\n *          job identifier (<code>JobId</code>) from the initial call to\n *             <code>StartDocumentTextDetection</code>.</p>\n *          <p>\n *             <code>GetDocumentTextDetection</code> returns an array of <a>Block</a>\n *          objects. </p>\n *          <p>Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE <code>Block</code> object\n *         is the parent of LINE <code>Block</code> objects that represent the lines of detected text on a page. A LINE <code>Block</code> object is\n *         a parent for each word that makes up the line. Words are represented by <code>Block</code> objects of type WORD.</p>\n *\n *          <p>Use the MaxResults parameter to limit the number of blocks that are returned. If there\n *          are more results than specified in <code>MaxResults</code>, the value of\n *             <code>NextToken</code> in the operation response contains a pagination token for getting\n *          the next set of results. To get the next page of results, call\n *             <code>GetDocumentTextDetection</code>, and populate the <code>NextToken</code> request\n *          parameter with the token value that's returned from the previous call to\n *             <code>GetDocumentTextDetection</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\">Document Text Detection</a>.</p>\n */\nvar GetDocumentTextDetectionCommand = /** @class */function (_super) {\n  __extends(GetDocumentTextDetectionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetDocumentTextDetectionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetDocumentTextDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"TextractClient\";\n    var commandName = \"GetDocumentTextDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetDocumentTextDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetDocumentTextDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetDocumentTextDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetDocumentTextDetectionCommand(input, context);\n  };\n  GetDocumentTextDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetDocumentTextDetectionCommand(output, context);\n  };\n  return GetDocumentTextDetectionCommand;\n}($Command);\nexport { GetDocumentTextDetectionCommand };","map":{"version":3,"sources":["../../../commands/GetDocumentTextDetectionCommand.ts"],"names":[],"mappings":";AACA,SAAS,+BAA+B,EAAE,gCAAgC,QAAQ,oBAAoB;AACtG,SACE,qDAAqD,EACrD,mDAAmD,QAC9C,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BG;AACH,IAAA,+BAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAqD,SAAA,CAAA,+BAAA,EAAA,MAAA,CAAA;EAKnD;EACA;EAEA,SAAA,+BAAA,CAAqB,KAA2C,EAAA;IAAhE,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,+BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA2C,EAC3C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,gBAAgB;IACnC,IAAM,WAAW,GAAG,iCAAiC;IACrD,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,+BAA+B,CAAC,kBAAkB;MAC3E,wBAAwB,EAAE,gCAAgC,CAAC;KAC5D;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,+BAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAA2C,EAAE,OAAuB,EAAA;IACpF,OAAO,mDAAmD,CAAC,KAAK,EAAE,OAAO,CAAC;EAC5E,CAAC;EAEO,+BAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,qDAAqD,CAAC,MAAM,EAAE,OAAO,CAAC;EAC/E,CAAC;EAIH,OAAA,+BAAC;AAAD,CAAC,CAtDoD,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetDocumentTextDetectionRequest, GetDocumentTextDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetDocumentTextDetectionCommand, serializeAws_json1_1GetDocumentTextDetectionCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the results for an Amazon Textract asynchronous operation that detects text in a document.\n *      Amazon Textract can detect lines of text and the words that make up a line of text.</p>\n *          <p>You start asynchronous text detection by calling <a>StartDocumentTextDetection</a>, which returns a job identifier\n *             (<code>JobId</code>). When the text detection operation finishes, Amazon Textract publishes a\n *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n *             <code>StartDocumentTextDetection</code>. To get the results of the text-detection\n *          operation, first check that the status value published to the Amazon SNS topic is\n *             <code>SUCCEEDED</code>. If so, call <code>GetDocumentTextDetection</code>, and pass the\n *          job identifier (<code>JobId</code>) from the initial call to\n *             <code>StartDocumentTextDetection</code>.</p>\n *          <p>\n *             <code>GetDocumentTextDetection</code> returns an array of <a>Block</a>\n *          objects. </p>\n *          <p>Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE <code>Block</code> object\n *         is the parent of LINE <code>Block</code> objects that represent the lines of detected text on a page. A LINE <code>Block</code> object is\n *         a parent for each word that makes up the line. Words are represented by <code>Block</code> objects of type WORD.</p>\n *\n *          <p>Use the MaxResults parameter to limit the number of blocks that are returned. If there\n *          are more results than specified in <code>MaxResults</code>, the value of\n *             <code>NextToken</code> in the operation response contains a pagination token for getting\n *          the next set of results. To get the next page of results, call\n *             <code>GetDocumentTextDetection</code>, and populate the <code>NextToken</code> request\n *          parameter with the token value that's returned from the previous call to\n *             <code>GetDocumentTextDetection</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\">Document Text Detection</a>.</p>\n */\nvar GetDocumentTextDetectionCommand = /** @class */ (function (_super) {\n    __extends(GetDocumentTextDetectionCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetDocumentTextDetectionCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetDocumentTextDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"TextractClient\";\n        var commandName = \"GetDocumentTextDetectionCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetDocumentTextDetectionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: GetDocumentTextDetectionResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetDocumentTextDetectionCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1GetDocumentTextDetectionCommand(input, context);\n    };\n    GetDocumentTextDetectionCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1GetDocumentTextDetectionCommand(output, context);\n    };\n    return GetDocumentTextDetectionCommand;\n}($Command));\nexport { GetDocumentTextDetectionCommand };\n//# sourceMappingURL=GetDocumentTextDetectionCommand.js.map"]},"metadata":{},"sourceType":"module"}