{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DetectTextRequest, DetectTextResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1DetectTextCommand, serializeAws_json1_1DetectTextCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Detects text in the input image and converts it into machine-readable text.</p>\n *          <p>Pass the input image as base64-encoded image bytes or as a reference to an image in an\n *       Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, you must pass it as a\n *       reference to an image in an Amazon S3 bucket. For the AWS CLI, passing image bytes is not\n *       supported. The image must be either a .png or .jpeg formatted file. </p>\n *          <p>The <code>DetectText</code> operation returns text in an array of <a>TextDetection</a> elements, <code>TextDetections</code>. Each\n *         <code>TextDetection</code> element provides information about a single word or line of text\n *       that was detected in the image. </p>\n *          <p>A word is one or more ISO basic latin script characters that are not separated by spaces.\n *         <code>DetectText</code> can detect up to 50 words in an image.</p>\n *          <p>A line is a string of equally spaced words. A line isn't necessarily a complete\n *       sentence. For example, a driver's license number is detected as a line. A line ends when there\n *       is no aligned text after it. Also, a line ends when there is a large gap between words,\n *       relative to the length of the words. This means, depending on the gap between words, Amazon Rekognition\n *       may detect multiple lines in text aligned in the same direction. Periods don't represent the\n *       end of a line. If a sentence spans multiple lines, the <code>DetectText</code> operation\n *       returns multiple lines.</p>\n *          <p>To determine whether a <code>TextDetection</code> element is a line of text or a word,\n *       use the <code>TextDetection</code> object <code>Type</code> field. </p>\n *          <p>To be detected, text must be within +/- 90 degrees orientation of the horizontal axis.</p>\n *\n *          <p>For more information, see DetectText in the Amazon Rekognition Developer Guide.</p>\n */\nvar DetectTextCommand = /** @class */function (_super) {\n  __extends(DetectTextCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function DetectTextCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  DetectTextCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"DetectTextCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DetectTextRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectTextResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  DetectTextCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DetectTextCommand(input, context);\n  };\n  DetectTextCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DetectTextCommand(output, context);\n  };\n  return DetectTextCommand;\n}($Command);\nexport { DetectTextCommand };","map":{"version":3,"sources":["../../../commands/DetectTextCommand.ts"],"names":[],"mappings":";AACA,SAAS,iBAAiB,EAAE,kBAAkB,QAAQ,oBAAoB;AAC1E,SACE,uCAAuC,EACvC,qCAAqC,QAChC,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;AAuBG;AACH,IAAA,iBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAuC,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;EAKrC;EACA;EAEA,SAAA,iBAAA,CAAqB,KAA6B,EAAA;IAAlD,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,iBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA8C,EAC9C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,mBAAmB;IACtC,IAAM,WAAW,GAAG,mBAAmB;IACvC,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,iBAAiB,CAAC,kBAAkB;MAC7D,wBAAwB,EAAE,kBAAkB,CAAC;KAC9C;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,iBAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAA6B,EAAE,OAAuB,EAAA;IACtE,OAAO,qCAAqC,CAAC,KAAK,EAAE,OAAO,CAAC;EAC9D,CAAC;EAEO,iBAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,uCAAuC,CAAC,MAAM,EAAE,OAAO,CAAC;EACjE,CAAC;EAIH,OAAA,iBAAC;AAAD,CAAC,CAtDsC,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { DetectTextRequest, DetectTextResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1DetectTextCommand, serializeAws_json1_1DetectTextCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Detects text in the input image and converts it into machine-readable text.</p>\n *          <p>Pass the input image as base64-encoded image bytes or as a reference to an image in an\n *       Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, you must pass it as a\n *       reference to an image in an Amazon S3 bucket. For the AWS CLI, passing image bytes is not\n *       supported. The image must be either a .png or .jpeg formatted file. </p>\n *          <p>The <code>DetectText</code> operation returns text in an array of <a>TextDetection</a> elements, <code>TextDetections</code>. Each\n *         <code>TextDetection</code> element provides information about a single word or line of text\n *       that was detected in the image. </p>\n *          <p>A word is one or more ISO basic latin script characters that are not separated by spaces.\n *         <code>DetectText</code> can detect up to 50 words in an image.</p>\n *          <p>A line is a string of equally spaced words. A line isn't necessarily a complete\n *       sentence. For example, a driver's license number is detected as a line. A line ends when there\n *       is no aligned text after it. Also, a line ends when there is a large gap between words,\n *       relative to the length of the words. This means, depending on the gap between words, Amazon Rekognition\n *       may detect multiple lines in text aligned in the same direction. Periods don't represent the\n *       end of a line. If a sentence spans multiple lines, the <code>DetectText</code> operation\n *       returns multiple lines.</p>\n *          <p>To determine whether a <code>TextDetection</code> element is a line of text or a word,\n *       use the <code>TextDetection</code> object <code>Type</code> field. </p>\n *          <p>To be detected, text must be within +/- 90 degrees orientation of the horizontal axis.</p>\n *\n *          <p>For more information, see DetectText in the Amazon Rekognition Developer Guide.</p>\n */\nvar DetectTextCommand = /** @class */ (function (_super) {\n    __extends(DetectTextCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function DetectTextCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    DetectTextCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"DetectTextCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: DetectTextRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: DetectTextResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    DetectTextCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1DetectTextCommand(input, context);\n    };\n    DetectTextCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1DetectTextCommand(output, context);\n    };\n    return DetectTextCommand;\n}($Command));\nexport { DetectTextCommand };\n//# sourceMappingURL=DetectTextCommand.js.map"]},"metadata":{},"sourceType":"module"}