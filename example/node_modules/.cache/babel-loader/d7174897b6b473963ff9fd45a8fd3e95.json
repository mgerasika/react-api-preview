{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand } from '@aws-sdk/client-s3';\nimport { SEND_UPLOAD_PROGRESS_EVENT, SEND_DOWNLOAD_PROGRESS_EVENT } from './axios-http-handler';\nimport * as events from 'events';\nimport { createPrefixMiddleware, prefixMiddlewareOptions, autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, createS3Client } from '../common/S3ClientUtils';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\nvar AWSS3ProviderManagedUpload = /** @class */function () {\n  function AWSS3ProviderManagedUpload(params, opts, emitter) {\n    // Defaults\n    this.minPartSize = 5 * 1024 * 1024; // in MB\n    this.queueSize = 4;\n    // Data for current upload\n    this.body = null;\n    this.params = null;\n    this.opts = null;\n    this.completedParts = [];\n    this.uploadId = null;\n    // Progress reporting\n    this.bytesUploaded = 0;\n    this.totalBytesToUpload = 0;\n    this.emitter = null;\n    this.params = params;\n    this.opts = opts;\n    this.emitter = emitter;\n    this.s3client = this._createNewS3Client(opts, emitter);\n  }\n  AWSS3ProviderManagedUpload.prototype.upload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, putObjectCommand, _b, numberOfPartsToUpload, parts, start, error_1;\n      var _this = this;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 10,, 12]);\n            _a = this;\n            return [4 /*yield*/, this.validateAndSanitizeBody(this.params.Body)];\n          case 1:\n            _a.body = _c.sent();\n            this.totalBytesToUpload = this.byteLength(this.body);\n            if (!(this.totalBytesToUpload <= this.minPartSize)) return [3 /*break*/, 2];\n            // Multipart upload is not required. Upload the sanitized body as is\n            this.params.Body = this.body;\n            putObjectCommand = new PutObjectCommand(this.params);\n            return [2 /*return*/, this.s3client.send(putObjectCommand)];\n          case 2:\n            // Step 1: Initiate the multi part upload\n            _b = this;\n            return [4 /*yield*/, this.createMultiPartUpload()];\n          case 3:\n            // Step 1: Initiate the multi part upload\n            _b.uploadId = _c.sent();\n            numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);\n            parts = this.createParts();\n            start = 0;\n            _c.label = 4;\n          case 4:\n            if (!(start < numberOfPartsToUpload)) return [3 /*break*/, 7];\n            // Upload as many as `queueSize` parts simultaneously\n            return [4 /*yield*/, this.uploadParts(this.uploadId, parts.slice(start, start + this.queueSize))];\n          case 5:\n            // Upload as many as `queueSize` parts simultaneously\n            _c.sent();\n            _c.label = 6;\n          case 6:\n            start += this.queueSize;\n            return [3 /*break*/, 4];\n          case 7:\n            parts.map(function (part) {\n              _this.removeEventListener(part);\n            });\n            return [4 /*yield*/, this.finishMultiPartUpload(this.uploadId)];\n          case 8:\n            // Step 3: Finalize the upload such that S3 can recreate the file\n            return [2 /*return*/, _c.sent()];\n          case 9:\n            return [3 /*break*/, 12];\n          case 10:\n            error_1 = _c.sent();\n            // if any error is thrown, call cleanup\n            return [4 /*yield*/, this.cleanup(this.uploadId)];\n          case 11:\n            // if any error is thrown, call cleanup\n            _c.sent();\n            logger.error('Error. Cancelling the multipart upload.');\n            throw error_1;\n          case 12:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.createParts = function () {\n    try {\n      var parts = [];\n      for (var bodyStart = 0; bodyStart < this.totalBytesToUpload;) {\n        var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);\n        parts.push({\n          bodyPart: this.body.slice(bodyStart, bodyEnd),\n          partNumber: parts.length + 1,\n          emitter: new events.EventEmitter(),\n          _lastUploadedBytes: 0\n        });\n        bodyStart += this.minPartSize;\n      }\n      return parts;\n    } catch (error) {\n      logger.error(error);\n      throw error;\n    }\n  };\n  AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var createMultiPartUploadCommand, response, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n            return [4 /*yield*/, this.s3client.send(createMultiPartUploadCommand)];\n          case 1:\n            response = _a.sent();\n            logger.debug(response.UploadId);\n            return [2 /*return*/, response.UploadId];\n          case 2:\n            error_2 = _a.sent();\n            logger.error(error_2);\n            throw error_2;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @private Not to be extended outside of tests\n   * @VisibleFotTesting\n   */\n  AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allResults, i, error_3;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Promise.all(parts.map(function (part) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var options, _a, Key, Bucket, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, res;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      this.setupEventListener(part);\n                      options = {\n                        emitter: part.emitter\n                      };\n                      _a = this.params, Key = _a.Key, Bucket = _a.Bucket, SSECustomerAlgorithm = _a.SSECustomerAlgorithm, SSECustomerKey = _a.SSECustomerKey, SSECustomerKeyMD5 = _a.SSECustomerKeyMD5;\n                      return [4 /*yield*/, this.s3client.send(new UploadPartCommand(__assign(__assign(__assign({\n                        PartNumber: part.partNumber,\n                        Body: part.bodyPart,\n                        UploadId: uploadId,\n                        Key: Key,\n                        Bucket: Bucket\n                      }, SSECustomerAlgorithm && {\n                        SSECustomerAlgorithm: SSECustomerAlgorithm\n                      }), SSECustomerKey && {\n                        SSECustomerKey: SSECustomerKey\n                      }), SSECustomerKeyMD5 && {\n                        SSECustomerKeyMD5: SSECustomerKeyMD5\n                      })), options)];\n                    case 1:\n                      res = _b.sent();\n                      return [2 /*return*/, res];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            allResults = _a.sent();\n            // The order of resolved promises is the same as input promise order.\n            for (i = 0; i < allResults.length; i++) {\n              this.completedParts.push({\n                PartNumber: parts[i].partNumber,\n                ETag: allResults[i].ETag\n              });\n            }\n            return [3 /*break*/, 3];\n          case 2:\n            error_3 = _a.sent();\n            logger.error('Error happened while uploading a part. Cancelling the multipart upload');\n            throw error_3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, completeUploadCommand, data, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId,\n              MultipartUpload: {\n                Parts: this.completedParts\n              }\n            };\n            completeUploadCommand = new CompleteMultipartUploadCommand(input);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.s3client.send(completeUploadCommand)];\n          case 2:\n            data = _a.sent();\n            return [2 /*return*/, data.Key];\n          case 3:\n            error_4 = _a.sent();\n            logger.error('Error happened while finishing the upload.');\n            throw error_4;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Reset this's state\n            this.body = null;\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.totalBytesToUpload = 0;\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId\n            };\n            return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand(input))];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.s3client.send(new ListPartsCommand(input))];\n          case 2:\n            data = _a.sent();\n            if (data && data.Parts && data.Parts.length > 0) {\n              throw new Error('Multipart upload clean up failed.');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.removeEventListener = function (part) {\n    part.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n    part.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n  };\n  AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n    var _this = this;\n    part.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n      _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n      part._lastUploadedBytes = progress.loaded;\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n    this.bytesUploaded += incrementalUpdate;\n    this.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytesToUpload,\n      part: partNumber,\n      key: this.params.Key\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n    if (input === null || input === undefined) return 0;\n    if (typeof input.byteLength === 'number') {\n      return input.byteLength;\n    } else if (typeof input.length === 'number') {\n      return input.length;\n    } else if (typeof input.size === 'number') {\n      return input.size;\n    } else if (typeof input.path === 'string') {\n      /* NodeJs Support\n      return require('fs').lstatSync(input.path).size;\n      */\n    } else {\n      throw new Error('Cannot determine length of ' + input);\n    }\n  };\n  AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (this.isGenericObject(body)) {\n          // Any javascript object\n          return [2 /*return*/, JSON.stringify(body)];\n        } else {\n          // Files, arrayBuffer etc\n          return [2 /*return*/, body];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n    if (body !== null && typeof body === 'object') {\n      try {\n        return !(this.byteLength(body) >= 0);\n      } catch (error) {\n        // If we cannot determine the length of the body, consider it\n        // as a generic object and upload a stringified version of it\n        return true;\n      }\n    }\n    return false;\n  };\n  AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n    var s3client = createS3Client(config, emitter);\n    s3client.middlewareStack.add(createPrefixMiddleware(this.opts, this.params.Key), prefixMiddlewareOptions);\n    s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n    return s3client;\n  };\n  return AWSS3ProviderManagedUpload;\n}();\nexport { AWSS3ProviderManagedUpload };","map":{"version":3,"sources":["../../src/providers/AWSS3ProviderManagedUpload.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand, } from '@aws-sdk/client-s3';\nimport { SEND_UPLOAD_PROGRESS_EVENT, SEND_DOWNLOAD_PROGRESS_EVENT, } from './axios-http-handler';\nimport * as events from 'events';\nimport { createPrefixMiddleware, prefixMiddlewareOptions, autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, createS3Client, } from '../common/S3ClientUtils';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\nvar AWSS3ProviderManagedUpload = /** @class */ (function () {\n    function AWSS3ProviderManagedUpload(params, opts, emitter) {\n        // Defaults\n        this.minPartSize = 5 * 1024 * 1024; // in MB\n        this.queueSize = 4;\n        // Data for current upload\n        this.body = null;\n        this.params = null;\n        this.opts = null;\n        this.completedParts = [];\n        this.uploadId = null;\n        // Progress reporting\n        this.bytesUploaded = 0;\n        this.totalBytesToUpload = 0;\n        this.emitter = null;\n        this.params = params;\n        this.opts = opts;\n        this.emitter = emitter;\n        this.s3client = this._createNewS3Client(opts, emitter);\n    }\n    AWSS3ProviderManagedUpload.prototype.upload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, putObjectCommand, _b, numberOfPartsToUpload, parts, start, error_1;\n            var _this = this;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _c.trys.push([0, 10, , 12]);\n                        _a = this;\n                        return [4 /*yield*/, this.validateAndSanitizeBody(this.params.Body)];\n                    case 1:\n                        _a.body = _c.sent();\n                        this.totalBytesToUpload = this.byteLength(this.body);\n                        if (!(this.totalBytesToUpload <= this.minPartSize)) return [3 /*break*/, 2];\n                        // Multipart upload is not required. Upload the sanitized body as is\n                        this.params.Body = this.body;\n                        putObjectCommand = new PutObjectCommand(this.params);\n                        return [2 /*return*/, this.s3client.send(putObjectCommand)];\n                    case 2:\n                        // Step 1: Initiate the multi part upload\n                        _b = this;\n                        return [4 /*yield*/, this.createMultiPartUpload()];\n                    case 3:\n                        // Step 1: Initiate the multi part upload\n                        _b.uploadId = _c.sent();\n                        numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);\n                        parts = this.createParts();\n                        start = 0;\n                        _c.label = 4;\n                    case 4:\n                        if (!(start < numberOfPartsToUpload)) return [3 /*break*/, 7];\n                        // Upload as many as `queueSize` parts simultaneously\n                        return [4 /*yield*/, this.uploadParts(this.uploadId, parts.slice(start, start + this.queueSize))];\n                    case 5:\n                        // Upload as many as `queueSize` parts simultaneously\n                        _c.sent();\n                        _c.label = 6;\n                    case 6:\n                        start += this.queueSize;\n                        return [3 /*break*/, 4];\n                    case 7:\n                        parts.map(function (part) {\n                            _this.removeEventListener(part);\n                        });\n                        return [4 /*yield*/, this.finishMultiPartUpload(this.uploadId)];\n                    case 8: \n                    // Step 3: Finalize the upload such that S3 can recreate the file\n                    return [2 /*return*/, _c.sent()];\n                    case 9: return [3 /*break*/, 12];\n                    case 10:\n                        error_1 = _c.sent();\n                        // if any error is thrown, call cleanup\n                        return [4 /*yield*/, this.cleanup(this.uploadId)];\n                    case 11:\n                        // if any error is thrown, call cleanup\n                        _c.sent();\n                        logger.error('Error. Cancelling the multipart upload.');\n                        throw error_1;\n                    case 12: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.createParts = function () {\n        try {\n            var parts = [];\n            for (var bodyStart = 0; bodyStart < this.totalBytesToUpload;) {\n                var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);\n                parts.push({\n                    bodyPart: this.body.slice(bodyStart, bodyEnd),\n                    partNumber: parts.length + 1,\n                    emitter: new events.EventEmitter(),\n                    _lastUploadedBytes: 0,\n                });\n                bodyStart += this.minPartSize;\n            }\n            return parts;\n        }\n        catch (error) {\n            logger.error(error);\n            throw error;\n        }\n    };\n    AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var createMultiPartUploadCommand, response, error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n                        return [4 /*yield*/, this.s3client.send(createMultiPartUploadCommand)];\n                    case 1:\n                        response = _a.sent();\n                        logger.debug(response.UploadId);\n                        return [2 /*return*/, response.UploadId];\n                    case 2:\n                        error_2 = _a.sent();\n                        logger.error(error_2);\n                        throw error_2;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @private Not to be extended outside of tests\n     * @VisibleFotTesting\n     */\n    AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n        return __awaiter(this, void 0, void 0, function () {\n            var allResults, i, error_3;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, Promise.all(parts.map(function (part) { return __awaiter(_this, void 0, void 0, function () {\n                                var options, _a, Key, Bucket, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, res;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            this.setupEventListener(part);\n                                            options = { emitter: part.emitter };\n                                            _a = this.params, Key = _a.Key, Bucket = _a.Bucket, SSECustomerAlgorithm = _a.SSECustomerAlgorithm, SSECustomerKey = _a.SSECustomerKey, SSECustomerKeyMD5 = _a.SSECustomerKeyMD5;\n                                            return [4 /*yield*/, this.s3client.send(new UploadPartCommand(__assign(__assign(__assign({ PartNumber: part.partNumber, Body: part.bodyPart, UploadId: uploadId, Key: Key,\n                                                    Bucket: Bucket }, (SSECustomerAlgorithm && { SSECustomerAlgorithm: SSECustomerAlgorithm })), (SSECustomerKey && { SSECustomerKey: SSECustomerKey })), (SSECustomerKeyMD5 && { SSECustomerKeyMD5: SSECustomerKeyMD5 }))), options)];\n                                        case 1:\n                                            res = _b.sent();\n                                            return [2 /*return*/, res];\n                                    }\n                                });\n                            }); }))];\n                    case 1:\n                        allResults = _a.sent();\n                        // The order of resolved promises is the same as input promise order.\n                        for (i = 0; i < allResults.length; i++) {\n                            this.completedParts.push({\n                                PartNumber: parts[i].partNumber,\n                                ETag: allResults[i].ETag,\n                            });\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_3 = _a.sent();\n                        logger.error('Error happened while uploading a part. Cancelling the multipart upload');\n                        throw error_3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var input, completeUploadCommand, data, error_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        input = {\n                            Bucket: this.params.Bucket,\n                            Key: this.params.Key,\n                            UploadId: uploadId,\n                            MultipartUpload: { Parts: this.completedParts },\n                        };\n                        completeUploadCommand = new CompleteMultipartUploadCommand(input);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.s3client.send(completeUploadCommand)];\n                    case 2:\n                        data = _a.sent();\n                        return [2 /*return*/, data.Key];\n                    case 3:\n                        error_4 = _a.sent();\n                        logger.error('Error happened while finishing the upload.');\n                        throw error_4;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var input, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Reset this's state\n                        this.body = null;\n                        this.completedParts = [];\n                        this.bytesUploaded = 0;\n                        this.totalBytesToUpload = 0;\n                        input = {\n                            Bucket: this.params.Bucket,\n                            Key: this.params.Key,\n                            UploadId: uploadId,\n                        };\n                        return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand(input))];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.s3client.send(new ListPartsCommand(input))];\n                    case 2:\n                        data = _a.sent();\n                        if (data && data.Parts && data.Parts.length > 0) {\n                            throw new Error('Multipart upload clean up failed.');\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.removeEventListener = function (part) {\n        part.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n        part.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n    };\n    AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n        var _this = this;\n        part.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n            _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n            part._lastUploadedBytes = progress.loaded;\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n        this.bytesUploaded += incrementalUpdate;\n        this.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n            loaded: this.bytesUploaded,\n            total: this.totalBytesToUpload,\n            part: partNumber,\n            key: this.params.Key,\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n        if (input === null || input === undefined)\n            return 0;\n        if (typeof input.byteLength === 'number') {\n            return input.byteLength;\n        }\n        else if (typeof input.length === 'number') {\n            return input.length;\n        }\n        else if (typeof input.size === 'number') {\n            return input.size;\n        }\n        else if (typeof input.path === 'string') {\n            /* NodeJs Support\n            return require('fs').lstatSync(input.path).size;\n            */\n        }\n        else {\n            throw new Error('Cannot determine length of ' + input);\n        }\n    };\n    AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (this.isGenericObject(body)) {\n                    // Any javascript object\n                    return [2 /*return*/, JSON.stringify(body)];\n                }\n                else {\n                    // Files, arrayBuffer etc\n                    return [2 /*return*/, body];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n        if (body !== null && typeof body === 'object') {\n            try {\n                return !(this.byteLength(body) >= 0);\n            }\n            catch (error) {\n                // If we cannot determine the length of the body, consider it\n                // as a generic object and upload a stringified version of it\n                return true;\n            }\n        }\n        return false;\n    };\n    AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n        var s3client = createS3Client(config, emitter);\n        s3client.middlewareStack.add(createPrefixMiddleware(this.opts, this.params.Key), prefixMiddlewareOptions);\n        s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n        return s3client;\n    };\n    return AWSS3ProviderManagedUpload;\n}());\nexport { AWSS3ProviderManagedUpload };\n//# sourceMappingURL=AWSS3ProviderManagedUpload.js.map"]},"metadata":{},"sourceType":"module"}