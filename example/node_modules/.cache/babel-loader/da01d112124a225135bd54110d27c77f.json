{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function addExpectContinueMiddleware(options) {\n  var _this = this;\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var request;\n        return __generator(this, function (_a) {\n          request = args.request;\n          if (HttpRequest.isInstance(request) && request.body && options.runtime === \"node\") {\n            request.headers = __assign(__assign({}, request.headers), {\n              Expect: \"100-continue\"\n            });\n          }\n          return [2 /*return*/, next(__assign(__assign({}, args), {\n            request: request\n          }))];\n        });\n      });\n    };\n  };\n}\nexport var addExpectContinueMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n  name: \"addExpectContinueMiddleware\",\n  override: true\n};\nexport var getAddExpectContinuePlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";AAAA,SAAS,WAAW,QAAQ,wBAAwB;AAepD,OAAM,SAAU,2BAA2B,CAAC,OAA2B,EAAA;EAAvE,IAAA,KAAA,GAAA,IAAA;EACE,OAAO,UAAgC,IAA+B,EAAA;IAAgC,OAAA,UACpG,IAAgC,EAAA;MAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;UAExB,OAAO,GAAK,IAAI,CAAA,OAAT;UACf,IAAI,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO,KAAK,MAAM,EAAE;YACjF,OAAO,CAAC,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACV,OAAO,CAAC,OAAO,CAAA,EAAA;cAClB,MAAM,EAAE;YAAc,CAAA,CACvB;UACF;UACD,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACN,IAAI,CAAA,EAAA;YACP,OAAO,EAAA;UAAA,CAAA,CAAA,CACP,CAAA;;;KACH;EAdqG,CAcrG;AACH;AAEA,OAAO,IAAM,kCAAkC,GAAwB;EACrE,IAAI,EAAE,OAAO;EACb,IAAI,EAAE,CAAC,mBAAmB,EAAE,eAAe,CAAC;EAC5C,IAAI,EAAE,6BAA6B;EACnC,QAAQ,EAAE;CACX;AAED,OAAO,IAAM,0BAA0B,GAAG,UAAC,OAA2B,EAAA;EAA0B,OAAC;IAC/F,YAAY,EAAE,UAAC,WAAW,EAAA;MACxB,WAAW,CAAC,GAAG,CAAC,2BAA2B,CAAC,OAAO,CAAC,EAAE,kCAAkC,CAAC;IAC3F;GACD;AAJ+F,CAI9F","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\ninterface PreviouslyResolved {\n  runtime: string;\n}\n\nexport function addExpectContinueMiddleware(options: PreviouslyResolved): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(next: BuildHandler<any, Output>): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    const { request } = args;\n    if (HttpRequest.isInstance(request) && request.body && options.runtime === \"node\") {\n      request.headers = {\n        ...request.headers,\n        Expect: \"100-continue\",\n      };\n    }\n    return next({\n      ...args,\n      request,\n    });\n  };\n}\n\nexport const addExpectContinueMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n  name: \"addExpectContinueMiddleware\",\n  override: true,\n};\n\nexport const getAddExpectContinuePlugin = (options: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}