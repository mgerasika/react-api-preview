{"ast":null,"code":"import { objectSpread2 as _objectSpread2, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { useField } from '../../hooks/use-field.hook.js';\nimport { useCallback } from 'react';\nimport { Select } from './select.component.js';\nimport { jsx } from '@emotion/react';\nfunction FormSelect(props) {\n  var name = props.name,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    getCustomErrorMessage = props.getCustomErrorMessage;\n  var _useField = useField(_objectSpread2(_objectSpread2({}, props), {}, {\n      getCustomErrorMessage: getCustomErrorMessage\n    })),\n    setFieldValue = _useField.setFieldValue,\n    setFieldTouched = _useField.setFieldTouched,\n    value = _useField.value,\n    errorMessage = _useField.errorMessage;\n  var handleChange = useCallback(function (e) {\n    setFieldValue(e.value);\n    onChange && onChange(e);\n    setFieldTouched();\n  }, [onChange, setFieldValue, setFieldTouched]);\n  var handleBlur = useCallback(function (e) {\n    var newEv = _objectSpread2(_objectSpread2({}, e), {}, {\n      target: _objectSpread2(_objectSpread2({}, e.target), {}, {\n        name: name,\n        value: value\n      })\n    });\n    setFieldValue(value);\n    onBlur && onBlur(newEv);\n    setFieldTouched();\n  }, [name, value, onBlur, setFieldValue, setFieldTouched]);\n  return jsx(Select, _extends({\n    errorMessage: errorMessage\n  }, props, {\n    onChange: handleChange,\n    onBlur: handleBlur,\n    name: name,\n    value: value,\n    readOnly: props.readOnly\n  }));\n}\nexport { FormSelect };","map":{"version":3,"sources":["../../../../src/general-ui/select/form-select.component.tsx"],"names":["FormSelect","props","name","onBlur","onChange","getCustomErrorMessage","setFieldValue","setFieldTouched","value","errorMessage","useField","handleChange","useCallback","e","handleBlur","newEv","target","___EmotionJSX","Select","readOnly"],"mappings":";;;;;AAMO,SAASA,UAAU,CAAcC,KAAoC,EAAe;EACvF,IAAQC,IAAI,GAA8CD,KAAK,CAAvDC,IAAI;IAAEC,MAAM,GAAsCF,KAAK,CAAjDE,MAAM;IAAEC,QAAQ,GAA4BH,KAAK,CAAzCG,QAAQ;IAAEC,qBAAqB,GAAKJ,KAAK,CAA/BI,qBAAqB;EACrD,IAAgEK,SAAAA,GAAAA,QAAQ,CAAA,cAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EACjET,KAAK,CAAA,EAAA,CAAA,CAAA,EAAA;MACRI,qBAAqB,EAArBA;KACF,CAAA,CAAA;IAHMC,aAAa,GAAA,SAAA,CAAbA,aAAa;IAAEC,eAAe,GAAA,SAAA,CAAfA,eAAe;IAAEC,KAAK,GAAA,SAAA,CAALA,KAAK;IAAEC,YAAY,GAAA,SAAA,CAAZA,YAAY;EAK3D,IAAME,YAAY,GAAGC,WAAW,CAC5B,UAACC,CAAC,EAAK;IACHP,aAAa,CAACO,CAAC,CAACL,KAAK,CAAC;IACtBJ,QAAQ,IAAIA,QAAQ,CAACS,CAAC,CAAC;IACvBN,eAAe,EAAE;EACpB,CAAA,EACD,CAACH,QAAQ,EAAEE,aAAa,EAAEC,eAAe,CAAC,CAC7C;EAED,IAAMO,UAAU,GAAGF,WAAW,CAC1B,UAACC,CAAqC,EAAK;IACvC,IAAME,KAAK,GAAA,cAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EAAQF,CAAC,CAAA,EAAA,CAAA,CAAA,EAAA;MAAEG,MAAM,EAAA,cAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EAAOH,CAAC,CAACG,MAAM,CAAA,EAAA,CAAA,CAAA,EAAA;QAAEd,IAAI,EAAJA,IAAI;QAAEM,KAAK,EAALA;MAAK,CAAA;KAAI,CAAA;IAC5DF,aAAa,CAACE,KAAK,CAAC;IACpBL,MAAM,IAAIA,MAAM,CAACY,KAAK,CAAkD;IACxER,eAAe,EAAE;EACrB,CAAC,EACD,CAACL,IAAI,EAAEM,KAAK,EAAEL,MAAM,EAAEG,aAAa,EAAEC,eAAe,CAAC,CACxD;EAED,OACIU,GAAAA,CAACC,MAAM,EAAA,QAAA,CAAA;IACHT,YAAY,EAAEA;EAAa,CAAA,EACvBR,KAAK,EAAA;IACTG,QAAQ,EAAEO,YAAa;IACvBR,MAAM,EAAEW,UAAW;IACnBZ,IAAI,EAAEA,IAAe;IACrBM,KAAK,EAAEA,KAAM;IACbW,QAAQ,EAAElB,KAAK,CAACkB;EAClB,CAAA,CAAA,CAAA;AAEV","sourcesContent":["import { useField } from '@common/hooks/use-field.hook';\nimport React, { useCallback } from 'react';\nimport { ISelectChangeHandler, ISelectProps, Select } from './select.component';\n\ntype IFormSelectProps<TFormValues> = Omit<ISelectProps<keyof TFormValues>, 'value' | 'defaultValue'>;\n\nexport function FormSelect<TFormValues>(props: IFormSelectProps<TFormValues>): JSX.Element {\n    const { name, onBlur, onChange, getCustomErrorMessage } = props;\n    const { setFieldValue, setFieldTouched, value, errorMessage } = useField<string>({\n        ...props,\n        getCustomErrorMessage,\n    });\n\n    const handleChange = useCallback<ISelectChangeHandler>(\n        (e) => {\n            setFieldValue(e.value);\n            onChange && onChange(e);\n            setFieldTouched();\n        },\n        [onChange, setFieldValue, setFieldTouched],\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            const newEv = { ...e, target: { ...e.target, name, value } };\n            setFieldValue(value);\n            onBlur && onBlur(newEv as unknown as React.FocusEvent<HTMLInputElement>);\n            setFieldTouched();\n        },\n        [name, value, onBlur, setFieldValue, setFieldTouched],\n    );\n\n    return (\n        <Select\n            errorMessage={errorMessage}\n            {...props}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            name={name as string}\n            value={value}\n            readOnly={props.readOnly}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"module"}