{"ast":null,"code":"import { useState, useCallback } from 'react';\nconst usePromise = () => {\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [errors, setErrors] = useState();\n  return {\n    start: useCallback(promise => {\n      setErrors(undefined);\n      setSuccess(false);\n      setLoading(true);\n      Promise.all(promise).then(() => {\n        setSuccess(true);\n      }).catch(error => {\n        setErrors(prev => {\n          if (prev) {\n            return [...prev, error];\n          }\n          return [error];\n        });\n      }).finally(() => {\n        setLoading(false);\n      });\n    }, []),\n    errors,\n    success,\n    loading\n  };\n};\nexport { usePromise };","map":{"version":3,"sources":["../../../src/hooks/use-promise.hook.ts"],"names":["usePromise","loading","setLoading","useState","success","setSuccess","errors","setErrors","start","useCallback","promise","undefined","Promise","all","then","catch","error","prev","finally"],"mappings":";AASO,MAAMA,UAAU,GAAG,MAAe;EACrC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGF,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,EAA0B;EAC9D,OAAO;IACHK,KAAK,EAAEC,WAAW,CAAEC,OAA2B,IAAW;MACtDH,SAAS,CAACI,SAAS,CAAC;MACpBN,UAAU,CAAC,KAAK,CAAC;MACjBH,UAAU,CAAC,IAAI,CAAC;MAChBU,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC,CACfI,IAAI,CAAC,MAAM;QACRT,UAAU,CAAC,IAAI,CAAC;MACpB,CAAC,CAAC,CACDU,KAAK,CAAEC,KAAK,IAAK;QACdT,SAAS,CAAEU,IAAI,IAA6B;UACxC,IAAIA,IAAI,EAAE;YACN,OAAO,CAAC,GAAGA,IAAI,EAAED,KAAK,CAAC;UAC3B;UACA,OAAO,CAACA,KAAK,CAAC;QAClB,CAAC,CAAC;MACN,CAAC,CAAC,CACDE,OAAO,CAAC,MAAM;QACXhB,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC;KACT,EAAE,EAAE,CAAC;IACNI,MAAM;IACNF,OAAO;IACPH;GACH;AACL,CAAA","sourcesContent":["import { IBEError } from '@common/interfaces/be-error.interface';\nimport { useCallback, useState } from 'react';\n\ninterface IReturn {\n    start: (promises: Promise<unknown>[]) => void;\n    loading: boolean;\n    errors: IBEError[] | undefined;\n    success: boolean;\n}\nexport const usePromise = (): IReturn => {\n    const [loading, setLoading] = useState(false);\n    const [success, setSuccess] = useState(false);\n    const [errors, setErrors] = useState<IBEError[] | undefined>();\n    return {\n        start: useCallback((promise: Promise<unknown>[]): void => {\n            setErrors(undefined);\n            setSuccess(false);\n            setLoading(true);\n            Promise.all(promise)\n                .then(() => {\n                    setSuccess(true);\n                })\n                .catch((error) => {\n                    setErrors((prev): IBEError[] | undefined => {\n                        if (prev) {\n                            return [...prev, error];\n                        }\n                        return [error];\n                    });\n                })\n                .finally(() => {\n                    setLoading(false);\n                });\n        }, []),\n        errors,\n        success,\n        loading,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}