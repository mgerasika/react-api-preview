{"ast":null,"code":"import { slicedToArray as _slicedToArray } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { useState, useEffect } from 'react';\nvar useTimer = function useTimer(duration) {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    timer = _useState2[0],\n    setTimer = _useState2[1];\n  useEffect(function () {\n    var interval = null;\n    if (duration) {\n      setTimer(duration);\n      interval = setInterval(function () {\n        setTimer(function (prevVal) {\n          var result = prevVal - 1;\n          if (result <= 0) {\n            clearInterval(interval);\n          }\n          return result;\n        });\n      }, 1000);\n    }\n    return function () {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [duration]);\n  return {\n    timer: timer\n  };\n};\nexport { useTimer };","map":{"version":3,"sources":["../../../src/hooks/use-timer.hook.ts"],"names":["useTimer","duration","timer","setTimer","useState","_useState2","useEffect","interval","setInterval","prevVal","result","clearInterval"],"mappings":";;IAMaA,QAAQ,GAAG,SAAXA,QAAQ,CAAIC,QAA4B,EAAc;EAC/D,IAA0BG,SAAAA,GAAAA,QAAQ,CAAS,CAAC,CAACC;IAAAA,UAAAA,GAAAA,cAAAA,CAAAA,SAAAA,EAAAA,CAAAA,CAAAA;IAAtCH,KAAK,GAAA,UAAA,CAAA,CAAA,CAAA;IAAEC,QAAQ,GAAA,UAAA,CAAA,CAAA,CAAA;EAEtBG,SAAS,CAAC,YAAM;IACZ,IAAIC,QAA6B,GAAG,IAAI;IAExC,IAAIN,QAAQ,EAAE;MACVE,QAAQ,CAACF,QAAQ,CAAC;MAClBM,QAAQ,GAAGC,WAAW,CAAC,YAAM;QACzBL,QAAQ,CAAC,UAACM,OAAO,EAAK;UAClB,IAAMC,MAAM,GAAGD,OAAO,GAAG,CAAC;UAC1B,IAAIC,MAAM,IAAI,CAAC,EAAE;YACbC,aAAa,CAACJ,QAAQ,CAAiB;UAC3C;UACA,OAAOG,MAAM;QACjB,CAAC,CAAC;MACL,CAAA,EAAE,IAAI,CAAC;IACZ;IAEA,OAAO,YAAY;MACf,IAAIH,QAAQ,EAAE;QACVI,aAAa,CAACJ,QAAQ,CAAC;MAC3B;KACH;EACL,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAEd,OAAO;IAAEC,KAAK,EAALA;GAAO;AACpB,CAAA","sourcesContent":["import { useEffect, useState } from 'react';\n\ninterface IReturn {\n    timer: number;\n}\n\nexport const useTimer = (duration: number | undefined): IReturn => {\n    const [timer, setTimer] = useState<number>(0);\n\n    useEffect(() => {\n        let interval: NodeJS.Timer | null = null;\n\n        if (duration) {\n            setTimer(duration);\n            interval = setInterval(() => {\n                setTimer((prevVal) => {\n                    const result = prevVal - 1;\n                    if (result <= 0) {\n                        clearInterval(interval as NodeJS.Timer);\n                    }\n                    return result;\n                });\n            }, 1000);\n        }\n\n        return (): void => {\n            if (interval) {\n                clearInterval(interval);\n            }\n        };\n    }, [duration]);\n\n    return { timer };\n};\n"]},"metadata":{},"sourceType":"module"}