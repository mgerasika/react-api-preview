{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { isTranslateTextInput, isTextToSpeechInput, isSpeechToTextInput } from '../Predictions';\nimport { AbstractPredictionsProvider } from './AbstractPredictionsProvider';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('AbstractConvertPredictionsProvider');\nvar AbstractConvertPredictionsProvider = /** @class */function (_super) {\n  __extends(AbstractConvertPredictionsProvider, _super);\n  function AbstractConvertPredictionsProvider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  AbstractConvertPredictionsProvider.prototype.getCategory = function () {\n    return 'Convert';\n  };\n  AbstractConvertPredictionsProvider.prototype.convert = function (input) {\n    if (isTranslateTextInput(input)) {\n      logger.debug('translateText');\n      return this.translateText(input);\n    } else if (isTextToSpeechInput(input)) {\n      logger.debug('textToSpeech');\n      return this.convertTextToSpeech(input);\n    } else if (isSpeechToTextInput(input)) {\n      logger.debug('textToSpeech');\n      return this.convertSpeechToText(input);\n    }\n  };\n  AbstractConvertPredictionsProvider.prototype.translateText = function (translateTextInput) {\n    throw new Error('convertText is not implemented by this provider');\n  };\n  AbstractConvertPredictionsProvider.prototype.convertTextToSpeech = function (textToSpeechInput) {\n    throw new Error('convertTextToSpeech is not implemented by this provider');\n  };\n  AbstractConvertPredictionsProvider.prototype.convertSpeechToText = function (speechToTextInput) {\n    throw new Error('convertSpeechToText is not implemented by this provider');\n  };\n  return AbstractConvertPredictionsProvider;\n}(AbstractPredictionsProvider);\nexport { AbstractConvertPredictionsProvider };","map":{"version":3,"sources":["../../../src/types/Providers/AbstractConvertPredictionsProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SAIC,oBAAoB,EACpB,mBAAmB,EACnB,mBAAmB,QAIb,gBAAgB;AACvB,SAAS,2BAA2B,QAAQ,+BAA+B;AAC3E,SAAS,aAAa,IAAI,MAAM,QAAQ,mBAAmB;AAC3D,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,oCAAoC,CAAC;AAE/D,IAAA,kCAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiE,SAAA,CAAA,kCAAA,EAAA,MAAA,CAAA;EAAjE,SAAA,kCAAA,GAAA;;EAqCA;EApCC,kCAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACC,OAAO,SAAS;EACjB,CAAC;EAED,kCAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UACC,KAAiE,EAAA;IAEjE,IAAI,oBAAoB,CAAC,KAAK,CAAC,EAAE;MAChC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC;MAC7B,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC;KAChC,MAAM,IAAI,mBAAmB,CAAC,KAAK,CAAC,EAAE;MACtC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC;MAC5B,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;KACtC,MAAM,IAAI,mBAAmB,CAAC,KAAK,CAAC,EAAE;MACtC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC;MAC5B,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;IACtC;EACF,CAAC;EAES,kCAAA,CAAA,SAAA,CAAA,aAAa,GAAvB,UACC,kBAAsC,EAAA;IAEtC,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC;EACnE,CAAC;EAES,kCAAA,CAAA,SAAA,CAAA,mBAAmB,GAA7B,UACC,iBAAoC,EAAA;IAEpC,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC;EAC3E,CAAC;EAES,kCAAA,CAAA,SAAA,CAAA,mBAAmB,GAA7B,UACC,iBAAoC,EAAA;IAEpC,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC;EAC3E,CAAC;EACF,OAAA,kCAAC;AAAD,CAAC,CArCgE,2BAA2B,CAAA","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { isTranslateTextInput, isTextToSpeechInput, isSpeechToTextInput, } from '../Predictions';\nimport { AbstractPredictionsProvider } from './AbstractPredictionsProvider';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('AbstractConvertPredictionsProvider');\nvar AbstractConvertPredictionsProvider = /** @class */ (function (_super) {\n    __extends(AbstractConvertPredictionsProvider, _super);\n    function AbstractConvertPredictionsProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AbstractConvertPredictionsProvider.prototype.getCategory = function () {\n        return 'Convert';\n    };\n    AbstractConvertPredictionsProvider.prototype.convert = function (input) {\n        if (isTranslateTextInput(input)) {\n            logger.debug('translateText');\n            return this.translateText(input);\n        }\n        else if (isTextToSpeechInput(input)) {\n            logger.debug('textToSpeech');\n            return this.convertTextToSpeech(input);\n        }\n        else if (isSpeechToTextInput(input)) {\n            logger.debug('textToSpeech');\n            return this.convertSpeechToText(input);\n        }\n    };\n    AbstractConvertPredictionsProvider.prototype.translateText = function (translateTextInput) {\n        throw new Error('convertText is not implemented by this provider');\n    };\n    AbstractConvertPredictionsProvider.prototype.convertTextToSpeech = function (textToSpeechInput) {\n        throw new Error('convertTextToSpeech is not implemented by this provider');\n    };\n    AbstractConvertPredictionsProvider.prototype.convertSpeechToText = function (speechToTextInput) {\n        throw new Error('convertSpeechToText is not implemented by this provider');\n    };\n    return AbstractConvertPredictionsProvider;\n}(AbstractPredictionsProvider));\nexport { AbstractConvertPredictionsProvider };\n//# sourceMappingURL=AbstractConvertPredictionsProvider.js.map"]},"metadata":{},"sourceType":"module"}