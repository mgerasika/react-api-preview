{"ast":null,"code":"import { consoleService } from '../services/console.service.js';\nimport { useMemo, useState } from 'react';\nfunction useSessionState(key, defaultValue) {\n  const value = useMemo(() => {\n    const val = sessionStorage.getItem(key);\n    if (val) {\n      try {\n        const json = JSON.parse(val);\n        return json.value;\n      } catch (ex) {\n        consoleService.error(ex);\n      }\n    }\n    return undefined;\n  }, [key]);\n  const [state, setState] = useState(value !== undefined ? value : defaultValue);\n  return [state, newState => {\n    sessionStorage.setItem(key, JSON.stringify({\n      type: typeof newState,\n      value: newState\n    }));\n    setState(newState);\n  }];\n}\nexport { useSessionState };","map":{"version":3,"sources":["../../../src/hooks/use-session-state.hook.ts"],"names":["useSessionState","key","defaultValue","value","useMemo","val","sessionStorage","getItem","json","JSON","parse","ex","consoleService","error","undefined","state","setState","useState","newState","setItem","stringify","type"],"mappings":";;AAQO,SAASA,eAAe,CAAIC,GAAW,EAAEC,YAAe,EAAyB;EACpF,MAAMC,KAAK,GAAGC,OAAO,CAAC,MAAM;IACxB,MAAMC,GAAG,GAAGC,cAAc,CAACC,OAAO,CAACN,GAAG,CAAC;IACvC,IAAII,GAAG,EAAE;MACL,IAAI;QACA,MAAMG,IAAY,GAAGC,IAAI,CAACC,KAAK,CAACL,GAAG,CAAqB;QACxD,OAAOG,IAAI,CAACL,KAAK;OACpB,CAAC,OAAOQ,EAAE,EAAE;QACTC,cAAc,CAACC,KAAK,CAACF,EAAE,CAAC;MAC5B;IACJ;IACA,OAAOG,SAAS;EACpB,CAAC,EAAE,CAACb,GAAG,CAAC,CAAC;EAET,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAAId,KAAK,KAAKW,SAAS,GAAIX,KAAK,GAAoBD,YAAY,CAAC;EACnG,OAAO,CACHa,KAAK,EACJG,QAAQ,IAAW;IAChBZ,cAAc,CAACa,OAAO,CAClBlB,GAAG,EACHQ,IAAI,CAACW,SAAS,CAAC;MACXC,IAAI,EAAE,OAAOH,QAAQ;MACrBf,KAAK,EAAEe;IACX,CAAC,CAAsB,CAC1B;IACDF,QAAQ,CAACE,QAAQ,CAAC;EACtB,CAAC,CACJ;AACL","sourcesContent":["import { consoleService } from '@common/services/console.service';\nimport { useMemo, useState } from 'react';\n\ninterface IState {\n    type: 'boolean' | 'string';\n    value: string;\n}\n\nexport function useSessionState<T>(key: string, defaultValue: T): [T, (arg: T) => void] {\n    const value = useMemo(() => {\n        const val = sessionStorage.getItem(key);\n        if (val) {\n            try {\n                const json: IState = JSON.parse(val as string) as IState;\n                return json.value;\n            } catch (ex) {\n                consoleService.error(ex);\n            }\n        }\n        return undefined;\n    }, [key]);\n\n    const [state, setState] = useState<T>(value !== undefined ? (value as unknown as T) : defaultValue);\n    return [\n        state,\n        (newState): void => {\n            sessionStorage.setItem(\n                key,\n                JSON.stringify({\n                    type: typeof newState,\n                    value: newState,\n                } as unknown as IState),\n            );\n            setState(newState);\n        },\n    ];\n}\n"]},"metadata":{},"sourceType":"module"}