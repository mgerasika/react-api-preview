{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');\nvar useField_hook = require('../../hooks/use-field.hook.js');\nvar React = require('react');\nvar multiSelect_component = require('./multi-select.component.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nfunction FormMultiSelect(props) {\n  const {\n    onChange,\n    onBlur,\n    getCustomErrorMessage\n  } = props;\n  const {\n    setFieldValue,\n    setFieldTouched,\n    value,\n    errorMessage\n  } = useField_hook.useField({\n    ...props,\n    getCustomErrorMessage\n  });\n  const handleChange = React.useCallback(e => {\n    onChange && onChange(e);\n    setFieldValue(e.value);\n  }, [setFieldValue, onChange]);\n  const handleBlur = React.useCallback(e => {\n    const newEvent = {\n      ...e,\n      target: {\n        ...e.target,\n        value: value || []\n      }\n    };\n    onBlur && onBlur(newEvent);\n    setFieldValue(value);\n    setFieldTouched();\n  }, [onBlur, setFieldTouched, setFieldValue, value]);\n  return /*#__PURE__*/React__default[\"default\"].createElement(multiSelect_component.MultiSelect, _rollupPluginBabelHelpers[\"extends\"]({\n    errorMessage: errorMessage\n  }, props, {\n    onChange: handleChange,\n    onBlur: handleBlur,\n    name: props.name,\n    value: value\n  }));\n}\nexports.FormMultiSelect = FormMultiSelect;","map":{"version":3,"sources":["../../../../src/general-ui/multi-select/form-multi-select.component.tsx"],"names":["FormMultiSelect","props","onChange","onBlur","getCustomErrorMessage","setFieldValue","setFieldTouched","value","errorMessage","useField","handleChange","useCallback","e","handleBlur","newEvent","target","React","MultiSelect","name"],"mappings":";;;;;;;;;;;;;;;AAIO,SAASA,eAAe,CAC3BC,KAA2E,EAChE;EACX,MAAM;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAsB,CAAC,GAAGH,KAAK;EACzD,MAAM;IAAEI,aAAa;IAAEC,eAAe;IAAEC,KAAK;IAAEC;GAAc,GAAGC,aAAAA,CAAAA,QAAQ,CAAW;IAC/E,GAAGR,KAAK;IACRG;EACJ,CAAC,CAAC;EAEF,MAAMM,YAAY,GAAGC,KAAAA,CAAAA,WAAW,CAC3BC,CAAC,IAAK;IACHV,QAAQ,IAAIA,QAAQ,CAACU,CAAC,CAAC;IACvBP,aAAa,CAACO,CAAC,CAACL,KAAK,CAAC;EAC1B,CAAC,EACD,CAACF,aAAa,EAAEH,QAAQ,CAAC,CAC5B;EAED,MAAMW,UAAU,GAAGF,KAAAA,CAAAA,WAAW,CACzBC,CAAqC,IAAK;IACvC,MAAME,QAAQ,GAAG;MACb,GAAGF,CAAC;MACJG,MAAM,EAAE;QAAE,GAAGH,CAAC,CAACG,MAAM;QAAER,KAAK,EAAEA,KAAK,IAAI;MAAG;KACI;IAClDJ,MAAM,IAAIA,MAAM,CAACW,QAAQ,CAAC;IAC1BT,aAAa,CAACE,KAAK,CAAC;IACpBD,eAAe,EAAE;GACpB,EACD,CAACH,MAAM,EAAEG,eAAe,EAAED,aAAa,EAAEE,KAAK,CAAC,CAClD;EAED,OAAA,aACIS,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAACC,qBAAAA,CAAAA,WAAW,EAAA,yBAAA,CAAA,SAAA,CAAA,CAAA;IACR,YAAY,EAAET;EAAa,CAAA,EACvBP,KAAK,EAAA;IACT,QAAQ,EAAES,YAAa;IACvB,MAAM,EAAEG,UAAW;IACnB,IAAI,EAAEZ,KAAK,CAACiB,IAAe;IAC3B,KAAK,EAAEX;GACT,CAAA,CAAA;AAEV","sourcesContent":["import { useField } from '@common/hooks/use-field.hook';\nimport React, { useCallback } from 'react';\nimport { IMultiSelectChangeHandler, IMultiSelectProps, MultiSelect } from './multi-select.component';\n\nexport function FormMultiSelect<TFormValues>(\n    props: Omit<IMultiSelectProps<keyof TFormValues>, 'value' | 'defaultValue'>,\n): JSX.Element {\n    const { onChange, onBlur, getCustomErrorMessage } = props;\n    const { setFieldValue, setFieldTouched, value, errorMessage } = useField<string[]>({\n        ...props,\n        getCustomErrorMessage,\n    });\n\n    const handleChange = useCallback<IMultiSelectChangeHandler>(\n        (e) => {\n            onChange && onChange(e);\n            setFieldValue(e.value);\n        },\n        [setFieldValue, onChange],\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            const newEvent = {\n                ...e,\n                target: { ...e.target, value: value || [] },\n            } as unknown as React.FocusEvent<HTMLInputElement>;\n            onBlur && onBlur(newEvent);\n            setFieldValue(value);\n            setFieldTouched();\n        },\n        [onBlur, setFieldTouched, setFieldValue, value],\n    );\n\n    return (\n        <MultiSelect\n            errorMessage={errorMessage}\n            {...props}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            name={props.name as string}\n            value={value}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"script"}