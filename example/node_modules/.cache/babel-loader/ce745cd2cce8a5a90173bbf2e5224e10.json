{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { runPolling } from \"./poller\";\nimport { validateWaiterOptions } from \"./utils\";\nimport { waiterServiceDefaults, WaiterState } from \"./waiter\";\nvar abortTimeout = function abortTimeout(abortSignal) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2 /*return*/, new Promise(function (resolve) {\n        abortSignal.onabort = function () {\n          return resolve({\n            state: WaiterState.ABORTED\n          });\n        };\n      })];\n    });\n  });\n};\n/**\n * Create a waiter promise that only resolves when:\n * 1. Abort controller is signaled\n * 2. Max wait time is reached\n * 3. `acceptorChecks` succeeds, or fails\n * Otherwise, it invokes `acceptorChecks` with exponential-backoff delay.\n *\n * @internal\n */\nexport var createWaiter = function createWaiter(options, input, acceptorChecks) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var params, exitConditions;\n    return __generator(this, function (_a) {\n      params = __assign(__assign({}, waiterServiceDefaults), options);\n      validateWaiterOptions(params);\n      exitConditions = [runPolling(params, input, acceptorChecks)];\n      if (options.abortController) {\n        exitConditions.push(abortTimeout(options.abortController.signal));\n      }\n      return [2 /*return*/, Promise.race(exitConditions)];\n    });\n  });\n};","map":{"version":3,"sources":["../../src/createWaiter.ts"],"names":[],"mappings":";AAEA,SAAS,UAAU,QAAQ,UAAU;AACrC,SAAS,qBAAqB,QAAQ,SAAS;AAC/C,SAAsC,qBAAqB,EAAE,WAAW,QAAQ,UAAU;AAE1F,IAAM,YAAY,GAAG,SAAf,YAAY,CAAU,WAAwB,EAAA;EAAA,OAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;MAClD,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAA;QACzB,WAAW,CAAC,OAAO,GAAG,YAAA;UAAM,OAAA,OAAO,CAAC;YAAE,KAAK,EAAE,WAAW,CAAC;UAAO,CAAE,CAAC;QAAvC,CAAuC;MACrE,CAAC,CAAC,CAAA;;;CACH;AAED;;;;;;;;AAQG;AACH,OAAO,IAAM,YAAY,GAAG,SAAf,YAAY,CACvB,OAA8B,EAC9B,KAAY,EACZ,cAAuE,EAAA;EAAA,OAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;MAEjE,MAAM,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACP,qBAAqB,CAAA,EACrB,OAAO,CACX;MACD,qBAAqB,CAAC,MAAM,CAAC;MAEvB,cAAc,GAAG,CAAC,UAAU,CAAgB,MAAM,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC;MACjF,IAAI,OAAO,CAAC,eAAe,EAAE;QAC3B,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;MAClE;MACD,OAAA,CAAA,CAAA,CAAA,YAAO,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;;;CACpC","sourcesContent":["import { AbortSignal } from \"@aws-sdk/types\";\n\nimport { runPolling } from \"./poller\";\nimport { validateWaiterOptions } from \"./utils\";\nimport { WaiterOptions, WaiterResult, waiterServiceDefaults, WaiterState } from \"./waiter\";\n\nconst abortTimeout = async (abortSignal: AbortSignal): Promise<WaiterResult> => {\n  return new Promise((resolve) => {\n    abortSignal.onabort = () => resolve({ state: WaiterState.ABORTED });\n  });\n};\n\n/**\n * Create a waiter promise that only resolves when:\n * 1. Abort controller is signaled\n * 2. Max wait time is reached\n * 3. `acceptorChecks` succeeds, or fails\n * Otherwise, it invokes `acceptorChecks` with exponential-backoff delay.\n *\n * @internal\n */\nexport const createWaiter = async <Client, Input>(\n  options: WaiterOptions<Client>,\n  input: Input,\n  acceptorChecks: (client: Client, input: Input) => Promise<WaiterResult>\n): Promise<WaiterResult> => {\n  const params = {\n    ...waiterServiceDefaults,\n    ...options,\n  };\n  validateWaiterOptions(params);\n\n  const exitConditions = [runPolling<Client, Input>(params, input, acceptorChecks)];\n  if (options.abortController) {\n    exitConditions.push(abortTimeout(options.abortController.signal));\n  }\n  return Promise.race(exitConditions);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}