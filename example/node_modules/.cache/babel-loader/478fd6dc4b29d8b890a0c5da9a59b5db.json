{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ensureBlock;\nvar _toBlock = require(\"./toBlock\");\nfunction ensureBlock(node) {\n  let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"body\";\n  const result = (0, _toBlock.default)(node[key], node);\n  node[key] = result;\n  return result;\n}","map":{"version":3,"sources":["../../src/converters/ensureBlock.ts"],"names":["ensureBlock","node","key","result"],"mappings":";;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AASe,SAASA,WAAT,CACbC,IADa,EAGK;EAAA,IADlBC,GAAW,uEAAG,MAFD;EAKb,MAAMC,MAAM,GAAG,CAAA,CAAA,EAAA,QAAA,CAAA,OAAA,EAAQF,IAAI,CAACC,GAAD,CAAZ,EAAmBD,IAAnB,CAAf;EAEAA,IAAI,CAACC,GAAD,CAAJD,GAAYE,MAAZF;EACA,OAAOE,MAAP;AACD","sourcesContent":["import toBlock from \"./toBlock\";\nimport type * as t from \"..\";\n\n/**\n * Ensure the `key` (defaults to \"body\") of a `node` is a block.\n * Casting it to a block if it is not.\n *\n * Returns the BlockStatement\n */\nexport default function ensureBlock(\n  node: t.Node,\n  key: string = \"body\",\n): t.BlockStatement {\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  const result = toBlock(node[key], node);\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  node[key] = result;\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}