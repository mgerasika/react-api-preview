{"ast":null,"code":"import { __assign, __awaiter, __generator, __values } from \"tslib\";\nimport { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function applyMd5BodyChecksumMiddleware(options) {\n  var _this = this;\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var request, body, headers, digest, hash, _a, _b, _c, _d, _e;\n        var _f, _g;\n        return __generator(this, function (_h) {\n          switch (_h.label) {\n            case 0:\n              request = args.request;\n              if (!HttpRequest.isInstance(request)) return [3 /*break*/, 2];\n              body = request.body, headers = request.headers;\n              if (!!hasHeader(\"Content-MD5\", headers)) return [3 /*break*/, 2];\n              digest = void 0;\n              if (body === undefined || typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n                hash = new options.md5();\n                hash.update(body || \"\");\n                digest = hash.digest();\n              } else {\n                digest = options.streamHasher(options.md5, body);\n              }\n              _a = [__assign({}, request)];\n              _f = {};\n              _b = [__assign({}, headers)];\n              _g = {};\n              _c = \"Content-MD5\";\n              _e = (_d = options).base64Encoder;\n              return [4 /*yield*/, digest];\n            case 1:\n              request = __assign.apply(void 0, _a.concat([(_f.headers = __assign.apply(void 0, _b.concat([(_g[_c] = _e.apply(_d, [_h.sent()]), _g)])), _f)]));\n              _h.label = 2;\n            case 2:\n              return [2 /*return*/, next(__assign(__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n}\nexport var applyMd5BodyChecksumMiddlewareOptions = {\n  name: \"applyMd5BodyChecksumMiddleware\",\n  step: \"build\",\n  tags: [\"SET_CONTENT_MD5\", \"BODY_CHECKSUM\"],\n  override: true\n};\nexport var getApplyMd5BodyChecksumPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(applyMd5BodyChecksumMiddleware(config), applyMd5BodyChecksumMiddlewareOptions);\n    }\n  };\n};\nfunction hasHeader(soughtHeader, headers) {\n  var e_1, _a;\n  soughtHeader = soughtHeader.toLowerCase();\n  try {\n    for (var _b = __values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var headerName = _c.value;\n      if (soughtHeader === headerName.toLowerCase()) {\n        return true;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return false;\n}","map":{"version":3,"sources":["../../src/applyMd5BodyChecksumMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  HeaderBag,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nimport { Md5BodyChecksumResolvedConfig } from \"./md5Configuration\";\n\nexport function applyMd5BodyChecksumMiddleware(options: Md5BodyChecksumResolvedConfig): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(next: BuildHandler<any, Output>): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    let { request } = args;\n    if (HttpRequest.isInstance(request)) {\n      const { body, headers } = request;\n      if (!hasHeader(\"Content-MD5\", headers)) {\n        let digest: Promise<Uint8Array>;\n        if (body === undefined || typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n          const hash = new options.md5();\n          hash.update(body || \"\");\n          digest = hash.digest();\n        } else {\n          digest = options.streamHasher(options.md5, body);\n        }\n\n        request = {\n          ...request,\n          headers: {\n            ...headers,\n            \"Content-MD5\": options.base64Encoder(await digest),\n          },\n        };\n      }\n    }\n    return next({\n      ...args,\n      request,\n    });\n  };\n}\n\nexport const applyMd5BodyChecksumMiddlewareOptions: BuildHandlerOptions = {\n  name: \"applyMd5BodyChecksumMiddleware\",\n  step: \"build\",\n  tags: [\"SET_CONTENT_MD5\", \"BODY_CHECKSUM\"],\n  override: true,\n};\n\nexport const getApplyMd5BodyChecksumPlugin = (config: Md5BodyChecksumResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(applyMd5BodyChecksumMiddleware(config), applyMd5BodyChecksumMiddlewareOptions);\n  },\n});\n\nfunction hasHeader(soughtHeader: string, headers: HeaderBag): boolean {\n  soughtHeader = soughtHeader.toLowerCase();\n  for (const headerName of Object.keys(headers)) {\n    if (soughtHeader === headerName.toLowerCase()) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}