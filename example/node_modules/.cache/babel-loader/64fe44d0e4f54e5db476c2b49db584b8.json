{"ast":null,"code":"import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { CONST } from '../../constants/const.constant.js';\nimport { useField } from '../../hooks/use-field.hook.js';\nimport { useTimeout } from '../../hooks/use-timeout.hook.js';\nimport { useRef, useEffect, useCallback } from 'react';\nimport { TextArea } from './textarea.component.js';\nimport { jsx } from '@emotion/react';\nfunction FormTextArea(props) {\n  const {\n    onChange,\n    onBlur,\n    getCustomErrorMessage\n  } = props;\n  const {\n    setFieldValue,\n    setFieldTouched,\n    triggerValidate,\n    value,\n    errorMessage\n  } = useField({\n    ...props,\n    getCustomErrorMessage\n  });\n  const refValue = useRef(value);\n  useEffect(() => {\n    refValue.current = value;\n  }, [value]);\n  const {\n    start: updateValueWithDelay\n  } = useTimeout(useCallback(newValue => {\n    refValue.current = newValue;\n    setFieldValue(newValue);\n    triggerValidate();\n  }, [setFieldValue, triggerValidate]), CONST.DEBOUNCE);\n  const handleChange = useCallback(e => {\n    refValue.current = e.target.value;\n    onChange && onChange(e);\n    updateValueWithDelay(e.target.value);\n  }, [onChange, updateValueWithDelay]);\n  const handleBlur = useCallback(e => {\n    onBlur && onBlur(e);\n    setFieldValue(refValue.current);\n    setFieldTouched();\n  }, [onBlur, setFieldTouched, setFieldValue]);\n  return jsx(TextArea, _extends({\n    errorMessage: errorMessage\n  }, props, {\n    onChange: handleChange,\n    onBlur: handleBlur,\n    name: props.name,\n    value: value\n  }));\n}\nexport { FormTextArea };","map":{"version":3,"sources":["../../../../src/general-ui/textarea/form-textarea.component.tsx"],"names":["FormTextArea","props","onChange","onBlur","getCustomErrorMessage","setFieldValue","setFieldTouched","triggerValidate","value","errorMessage","useField","refValue","useRef","useEffect","current","start","updateValueWithDelay","useTimeout","useCallback","newValue","CONST","DEBOUNCE","handleChange","e","target","handleBlur","___EmotionJSX","name"],"mappings":";;;;;;;AAMO,SAASA,YAAY,CACxBC,KAAwE,EAC7D;EACX,MAAM;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAsB,CAAC,GAAGH,KAAK;EACzD,MAAM;IAAEI,aAAa;IAAEC,eAAe;IAAEC,eAAe;IAAEC,KAAK;IAAEC;GAAc,GAAGC,QAAQ,CAAS;IAC9F,GAAGT,KAAK;IACRG;EACJ,CAAC,CAAC;EACF,MAAMO,QAAQ,GAAGC,MAAM,CAACJ,KAAK,CAAC;EAC9BK,SAAS,CAAC,MAAM;IACZF,QAAQ,CAACG,OAAO,GAAGN,KAAK;EAC5B,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAM;IAAEO,KAAK,EAAEC;EAAqB,CAAC,GAAGC,UAAU,CAC9CC,WAAW,CACNC,QAAgB,IAAK;IAClBR,QAAQ,CAACG,OAAO,GAAGK,QAAQ;IAC3Bd,aAAa,CAACc,QAAQ,CAAC;IACvBZ,eAAe,EAAE;GACpB,EACD,CAACF,aAAa,EAAEE,eAAe,CAAC,CACnC,EACDa,KAAK,CAACC,QAAQ,CACjB;EAED,MAAMC,YAAY,GAAGJ,WAAW,CAC3BK,CAAC,IAAK;IACHZ,QAAQ,CAACG,OAAO,GAAGS,CAAC,CAACC,MAAM,CAAChB,KAAK;IACjCN,QAAQ,IAAIA,QAAQ,CAACqB,CAAC,CAAC;IAEvBP,oBAAoB,CAACO,CAAC,CAACC,MAAM,CAAChB,KAAK,CAAC;EACxC,CAAC,EACD,CAACN,QAAQ,EAAEc,oBAAoB,CAAC,CACnC;EAED,MAAMS,UAAU,GAAGP,WAAW,CACzBK,CAAwC,IAAK;IAC1CpB,MAAM,IAAIA,MAAM,CAACoB,CAAC,CAAC;IACnBlB,aAAa,CAACM,QAAQ,CAACG,OAAO,CAAC;IAC/BR,eAAe,EAAE;GACpB,EACD,CAACH,MAAM,EAAEG,eAAe,EAAED,aAAa,CAAC,CAC3C;EAED,OACIqB,GAAAA,CAAC,QAAQ,EAAA,QAAA,CAAA;IACL,YAAY,EAAEjB;EAAa,CAAA,EACvBR,KAAK,EAAA;IACT,QAAQ,EAAEqB,YAAa;IACvB,MAAM,EAAEG,UAAW;IACnB,IAAI,EAAExB,KAAK,CAAC0B,IAAe;IAC3B,KAAK,EAAEnB;GACT,CAAA,CAAA;AAEV","sourcesContent":["import { CONST } from '@common/constants/const.constant';\nimport { useField } from '@common/hooks/use-field.hook';\nimport { useTimeout } from '@common/hooks/use-timeout.hook';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { ITextAreaChangeHandler, ITextAreaProps, TextArea } from './textarea.component';\n\nexport function FormTextArea<TFormValues>(\n    props: Omit<ITextAreaProps<keyof TFormValues>, 'value' | 'defaultValue'>,\n): JSX.Element {\n    const { onChange, onBlur, getCustomErrorMessage } = props;\n    const { setFieldValue, setFieldTouched, triggerValidate, value, errorMessage } = useField<string>({\n        ...props,\n        getCustomErrorMessage,\n    });\n    const refValue = useRef(value);\n    useEffect(() => {\n        refValue.current = value;\n    }, [value]);\n\n    const { start: updateValueWithDelay } = useTimeout<string>(\n        useCallback(\n            (newValue: string) => {\n                refValue.current = newValue;\n                setFieldValue(newValue);\n                triggerValidate();\n            },\n            [setFieldValue, triggerValidate],\n        ),\n        CONST.DEBOUNCE,\n    );\n\n    const handleChange = useCallback<ITextAreaChangeHandler>(\n        (e) => {\n            refValue.current = e.target.value;\n            onChange && onChange(e);\n\n            updateValueWithDelay(e.target.value);\n        },\n        [onChange, updateValueWithDelay],\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<HTMLTextAreaElement>) => {\n            onBlur && onBlur(e);\n            setFieldValue(refValue.current);\n            setFieldTouched();\n        },\n        [onBlur, setFieldTouched, setFieldValue],\n    );\n\n    return (\n        <TextArea\n            errorMessage={errorMessage}\n            {...props}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            name={props.name as string}\n            value={value}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"module"}