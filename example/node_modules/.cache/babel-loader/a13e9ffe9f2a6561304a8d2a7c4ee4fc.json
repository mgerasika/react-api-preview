{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { useField } from '../../hooks/use-field.hook.js';\nimport React, { useCallback } from 'react';\nimport { Checkbox } from './checkbox.component.js';\nfunction FormCheckbox(props) {\n  var onChange = props.onChange,\n    onBlur = props.onBlur;\n  var _useField = useField(_objectSpread(_objectSpread({}, props), {}, {\n      getCustomErrorMessage: props.getCustomErrorMessage\n    })),\n    setFieldValue = _useField.setFieldValue,\n    setFieldTouched = _useField.setFieldTouched,\n    value = _useField.value,\n    errorMessage = _useField.errorMessage,\n    triggerValidate = _useField.triggerValidate;\n  var handleChange = useCallback(function (e) {\n    onChange && onChange(e);\n    setFieldValue(e.checked);\n    setFieldTouched();\n    triggerValidate();\n  }, [onChange, setFieldValue, setFieldTouched, triggerValidate]);\n  var handleBlur = useCallback(function (e) {\n    onBlur && onBlur(e);\n    setFieldTouched();\n  }, [onBlur, setFieldTouched]);\n  return /*#__PURE__*/React.createElement(Checkbox, _extends({\n    errorMessage: errorMessage\n  }, props, {\n    onChange: handleChange,\n    onBlur: handleBlur,\n    name: props.name,\n    value: value\n  }));\n}\nexport { FormCheckbox };","map":{"version":3,"sources":["../../../../src/general-ui/checkbox/form-checkbox.component.tsx"],"names":["FormCheckbox","props","onChange","onBlur","setFieldValue","setFieldTouched","value","errorMessage","triggerValidate","useField","getCustomErrorMessage","handleChange","useCallback","e","checked","handleBlur","React","Checkbox","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO,SAASA,YAAY,CACxBC,KAAwE,EAC7D;EACX,IAAQC,QAAQ,GAAaD,KAAK,CAA1BC,QAAQ;IAAEC,MAAAA,GAAWF,KAAK,CAAhBE,MAAAA;EAClB,IAAA,SAAA,GAAiFM,QAAQ,CAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EAClFR,KAAK,CAAA,EAAA,CAAA,CAAA,EAAA;MACRS,qBAAqB,EAAET,KAAK,CAACS;IAAAA,CAAAA,CAAAA,CAC/B;IAHMN,aAAa,GAAA,SAAA,CAAbA,aAAa;IAAEC,eAAe,GAAA,SAAA,CAAfA,eAAe;IAAEC,KAAK,GAAA,SAAA,CAALA,KAAK;IAAEC,YAAY,GAAA,SAAA,CAAZA,YAAY;IAAEC,eAAAA,GAAAA,SAAAA,CAAAA,eAAAA;EAK7D,IAAMG,YAAY,GAAGC,WAAW,CAC3BC,UAAAA,CAAC,EAAK;IACHX,QAAQ,IAAIA,QAAQ,CAACW,CAAC,CAAC;IACvBT,aAAa,CAACS,CAAC,CAACC,OAAO,CAAC;IACxBT,eAAe,EAAE;IACjBG,eAAe,EAAE;EACpB,CAAA,EACD,CAACN,QAAQ,EAAEE,aAAa,EAAEC,eAAe,EAAEG,eAAe,CAAC,CAC9D;EAED,IAAMO,UAAU,GAAGH,WAAW,CACzBC,UAAAA,CAAqC,EAAK;IACvCV,MAAM,IAAIA,MAAM,CAACU,CAAC,CAAC;IACnBR,eAAe,EAAE;EACrB,CAAC,EACD,CAACF,MAAM,EAAEE,eAAe,CAAC,CAC5B;EAED,OAAA,aACIW,KAAAA,CAAAA,aAAAA,CAACC,QAAQ,EAAA,QAAA,CAAA;IACLV,YAAY,EAAEA;EAAa,CAAA,EACvBN,KAAK,EAAA;IACTC,QAAQ,EAAES,YAAa;IACvBR,MAAM,EAAEY,UAAW;IACnBG,IAAI,EAAEjB,KAAK,CAACiB,IAAe;IAC3BZ,KAAK,EAAEA;EACT,CAAA,CAAA,CAAA;AAEV","sourcesContent":["import { useField } from '@common/hooks/use-field.hook';\nimport React, { useCallback } from 'react';\nimport { Checkbox, ICheckboxChangeHandler, ICheckboxProps } from './checkbox.component';\n\nexport function FormCheckbox<TFormValues>(\n    props: Omit<ICheckboxProps<keyof TFormValues>, 'value' | 'defaultValue'>,\n): JSX.Element {\n    const { onChange, onBlur } = props;\n    const { setFieldValue, setFieldTouched, value, errorMessage, triggerValidate } = useField<boolean>({\n        ...props,\n        getCustomErrorMessage: props.getCustomErrorMessage,\n    });\n\n    const handleChange = useCallback<ICheckboxChangeHandler>(\n        (e) => {\n            onChange && onChange(e);\n            setFieldValue(e.checked);\n            setFieldTouched();\n            triggerValidate();\n        },\n        [onChange, setFieldValue, setFieldTouched, triggerValidate],\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            onBlur && onBlur(e);\n            setFieldTouched();\n        },\n        [onBlur, setFieldTouched],\n    );\n\n    return (\n        <Checkbox\n            errorMessage={errorMessage}\n            {...props}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            name={props.name as string}\n            value={value}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"module"}