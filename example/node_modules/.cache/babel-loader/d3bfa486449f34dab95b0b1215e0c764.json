{"ast":null,"code":"import { StoreContext } from '@common/store/store.context';\nimport { useContext, useMemo } from 'react';\nconst useStore = () => {\n  const context = useContext(StoreContext);\n  return useMemo(() => {\n    return {\n      store: context.store,\n      updateStore: context.updateStore\n    };\n  }, [context]);\n};\nexport { useStore };","map":{"version":3,"sources":["../../../src/hooks/use-store.hook.ts"],"names":["useStore","context","useContext","StoreContext","useMemo","store","updateStore"],"mappings":";;AAUO,MAAMA,QAAQ,GAAG,MAAe;EACnC,MAAMC,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC;EAExC,OAAOC,OAAO,CAAU,MAAe;IACnC,OAAO;MACHC,KAAK,EAAEJ,OAAO,CAACI,KAAK;MACpBC,WAAW,EAAEL,OAAO,CAACK;KACxB;EACL,CAAC,EAAE,CAACL,OAAO,CAAC,CAAC;AACjB,CAAA","sourcesContent":["import { IStore, StoreContext } from '@common/store/store.context';\nimport { useContext, useMemo } from 'react';\n\nexport type TLayoutType = 'tabs' | 'groupBar';\n\ninterface IResult {\n    store: IStore;\n    updateStore: (data: IStore) => void;\n}\n\nexport const useStore = (): IResult => {\n    const context = useContext(StoreContext);\n\n    return useMemo<IResult>((): IResult => {\n        return {\n            store: context.store,\n            updateStore: context.updateStore,\n        };\n    }, [context]);\n};\n"]},"metadata":{},"sourceType":"module"}