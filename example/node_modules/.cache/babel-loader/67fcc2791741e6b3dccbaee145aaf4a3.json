{"ast":null,"code":"var _excluded = [\"onFieldChange\", \"onFieldBlur\", \"control\", \"name\", \"className\", \"maxLength\", \"readOnly\"];\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { EFormControl } from '../../enums/form-control.enum.js';\nimport { FormAddress } from '../address/form-address.component.js';\nimport { FormCheckboxGroup } from '../checkbox-group/form-checkbox-group.component.js';\nimport { FormCheckbox } from '../checkbox/form-checkbox.component.js';\nimport { FormDatePicker } from '../date-picker/form-date-picker.component.js';\nimport { FormInputLoqate } from '../input-loqate/form-input-loqate.component.js';\nimport { FormInput } from '../input/form-input.component.js';\nimport { FormMultiSelect } from '../multi-select/form-multi-select.component.js';\nimport { FormORSwitch } from '../or-switch/form-or-switch.component.js';\nimport { FormPassword } from '../password/form-password.component.js';\nimport { FormPhoneNumber } from '../phone-number/form-phone-number.component.js';\nimport { FormRadioGroup } from '../radio-group/form-radio-group.component.js';\nimport { FormRangePicker } from '../range-picker/form-range-picker.component.js';\nimport { FormSelect } from '../select/form-select.component.js';\nimport { FormSwitch } from '../switch/form-switch.component.js';\nimport { FormTextArea } from '../textarea/form-textarea.component.js';\nimport { FormTimePicker } from '../time-picker/form-time-picker.component.js';\nimport { FormUploadImage } from '../upload-image/form-upload-image.component.js';\nimport React, { useCallback } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { jsx } from '@emotion/react';\nfunction FormField(props) {\n  var onFieldChange = props.onFieldChange,\n    onFieldBlur = props.onFieldBlur,\n    control = props.control,\n    name = props.name,\n    className = props.className,\n    maxLength = props.maxLength,\n    readOnly = props.readOnly,\n    rest = _objectWithoutProperties(props, _excluded);\n  var _useFormContext = useFormContext(),\n    watch = _useFormContext.watch;\n  var handleOnBlur = useCallback(function () {\n    onFieldBlur && onFieldBlur(name);\n  }, [name, onFieldBlur]);\n  var handleOnChange = useCallback(function () {\n    onFieldChange && onFieldChange(name, watch(name));\n  }, [name, onFieldChange, watch]);\n  var renderContent = function renderContent() {\n    switch (control) {\n      case EFormControl.text:\n        return jsx(FormInput, _extends({\n          type: \"text\",\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur,\n          maxLength: maxLength\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.phoneNumber:\n        return jsx(FormPhoneNumber, _extends({\n          type: \"text\",\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.password:\n        return jsx(FormPassword, _extends({\n          type: \"password\",\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.textArea:\n        return jsx(FormTextArea, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur,\n          maxLength: maxLength\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.checkbox:\n        return jsx(FormCheckbox, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.checkboxGroup:\n        return jsx(FormCheckboxGroup, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.switch:\n        return jsx(FormSwitch, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.orSwitch:\n        return jsx(FormORSwitch, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur,\n          childrenRight: \"\",\n          childrenLeft: \"\"\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.numeric:\n        return jsx(FormInput, _extends({\n          className: className,\n          type: \"number\",\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.email:\n        return jsx(FormInput, _extends({\n          className: className,\n          type: \"email\",\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.select:\n        return jsx(FormSelect, _extends({\n          className: className,\n          name: name\n        }, rest, {\n          onChange: handleOnChange,\n          onBlur: handleOnBlur,\n          readOnly: readOnly\n        }));\n      case EFormControl.treeSelect:\n        return (\n          //FormTreeSelect problem with build\n          jsx(FormSelect, _extends({\n            className: className,\n            name: name\n          }, rest, {\n            onChange: handleOnChange,\n            onBlur: handleOnBlur,\n            readOnly: readOnly\n          }))\n        );\n      case EFormControl.multiSelect:\n        return jsx(FormMultiSelect, _extends({\n          className: className,\n          name: name\n        }, rest, {\n          onChange: handleOnChange,\n          onBlur: handleOnBlur,\n          readOnly: readOnly\n        }));\n      case EFormControl.radioGroup:\n        return jsx(FormRadioGroup, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.uploadImage:\n        return jsx(FormUploadImage, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.datePicker:\n        return jsx(FormDatePicker, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.rangePicker:\n        return jsx(FormRangePicker, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.inputLoqate:\n        return jsx(FormInputLoqate, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.address:\n        return jsx(FormAddress, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.timePicker:\n        return jsx(FormTimePicker, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      default:\n        return jsx(\"div\", null, \"not implemented control=\", control);\n    }\n  };\n  return jsx(React.Fragment, null, renderContent());\n}\nexport { FormField };","map":{"version":3,"sources":["../../../../src/general-ui/form-field/form-field.component.tsx"],"names":["FormField","props","onFieldChange","onFieldBlur","control","name","className","maxLength","readOnly","rest","watch","useFormContext","handleOnBlur","useCallback","handleOnChange","renderContent","EFormControl","text","___EmotionJSX","FormInput","type","onChange","onBlur","phoneNumber","FormPhoneNumber","password","FormPassword","textArea","FormTextArea","checkbox","FormCheckbox","checkboxGroup","FormCheckboxGroup","switch","FormSwitch","orSwitch","FormORSwitch","childrenRight","childrenLeft","numeric","email","select","FormSelect","treeSelect","multiSelect","FormMultiSelect","radioGroup","FormRadioGroup","uploadImage","FormUploadImage","datePicker","FormDatePicker","rangePicker","FormRangePicker","inputLoqate","FormInputLoqate","address","FormAddress","timePicker","FormTimePicker"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCO,SAASA,SAAS,CAAcC,KAA0B,EAAe;EAC5E,IAAQC,aAAa,GAA0ED,KAAK,CAA5FC,aAAa;IAAEC,WAAW,GAA6DF,KAAK,CAA7EE,WAAW;IAAEC,OAAO,GAAoDH,KAAK,CAAhEG,OAAO;IAAEC,IAAI,GAA8CJ,KAAK,CAAvDI,IAAI;IAAEC,SAAS,GAAmCL,KAAK,CAAjDK,SAAS;IAAEC,SAAS,GAAwBN,KAAK,CAAtCM,SAAS;IAAEC,QAAQ,GAAcP,KAAK,CAA3BO,QAAQ;IAAKC,IAAAA,GAAAA,wBAAAA,CAASR,KAAK,EAAA,SAAA,CAAA;EACpG,IAAA,eAAA,GAAkBU,cAAc,EAAE;IAA1BD,KAAAA,GAAAA,eAAAA,CAAAA,KAAAA;EAER,IAAME,YAAY,GAAGC,WAAW,CAAC,YAAM;IACnCV,WAAW,IAAIA,WAAW,CAACE,IAAI,CAAC;EACpC,CAAC,EAAE,CAACA,IAAI,EAAEF,WAAW,CAAC,CAAC;EAEvB,IAAMW,cAAc,GAAGD,WAAW,CAAC,YAAM;IACrCX,aAAa,IAAIA,aAAa,CAACG,IAAI,EAAEK,KAAK,CAACL,IAAI,CAAW,CAAC;EAC9D,CAAA,EAAE,CAACA,IAAI,EAAEH,aAAa,EAAEQ,KAAK,CAAC,CAAC;EAEhC,IAAMK,aAAa,GAAG,SAAhBA,aAAa,GAAsB;IACrC,QAAQX,OAAO;MACX,KAAKY,YAAY,CAACC,IAAI;QAClB,OACIC,GAAAA,CAACC,SAAS,EAAA,QAAA,CAAA;UACNC,IAAI,EAAC,MAAM;UACXd,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV,YAAa;UACrBL,SAAS,EAAEA;QAAU,CAAA,EACjBE,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAACO,WAAW;QACzB,OACIL,GAAAA,CAACM,eAAe,EAAA,QAAA,CAAA;UACZJ,IAAI,EAAC,MAAM;UACXd,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EACjBH,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAACS,QAAQ;QACtB,OACIP,GAAAA,CAACQ,YAAY,EAAA,QAAA,CAAA;UACTN,IAAI,EAAC,UAAU;UACfd,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EACjBH,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAACW,QAAQ;QACtB,OACIT,GAAAA,CAACU,YAAY,EAAA,QAAA,CAAA;UACTtB,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV,YAAa;UACrBL,SAAS,EAAEA;QAAU,CAAA,EACjBE,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAACa,QAAQ;QACtB,OACIX,GAAAA,CAACY,YAAY,EAAA,QAAA,CAAA;UACTxB,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EACjBH,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAACe,aAAa;QAC3B,OACIb,GAAAA,CAACc,iBAAiB,EAAA,QAAA,CAAA;UACd1B,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EACjBH,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAACiB,MAAM;QACpB,OACIf,GAAAA,CAACgB,UAAU,EAAA,QAAA,CAAA;UACP5B,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EACjBH,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAACmB,QAAQ;QACtB,OACIjB,GAAAA,CAACkB,YAAY,EAAA,QAAA,CAAA;UACT9B,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV,YAAa;UACrByB,aAAa,EAAC,EAAE;UAChBC,YAAY,EAAC;QAAE,CAAA,EACX7B,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAACuB,OAAO;QACrB,OACIrB,GAAAA,CAACC,SAAS,EAAA,QAAA,CAAA;UACNb,SAAS,EAAEA,SAAU;UACrBc,IAAI,EAAC,QAAQ;UACbf,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EACjBH,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAACwB,KAAK;QACnB,OACItB,GAAAA,CAACC,SAAS,EAAA,QAAA,CAAA;UACNb,SAAS,EAAEA,SAAU;UACrBc,IAAI,EAAC,OAAO;UACZf,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EACjBH,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAACyB,MAAM;QACpB,OACIvB,GAAAA,CAACwB,UAAU,EAAA,QAAA,CAAA;UACPpC,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA;QAAK,CAAA,EACPI,IAAI,EAAA;UACRY,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV,YAAa;UACrBJ,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAAC2B,UAAU;QACxB;UACI;UACAzB,GAAAA,CAACwB,UAAU,EAAA,QAAA,CAAA;YACPpC,SAAS,EAAEA,SAAU;YACrBD,IAAI,EAAEA;UAAK,CAAA,EACPI,IAAI,EAAA;YACRY,QAAQ,EAAEP,cAAe;YACzBQ,MAAM,EAAEV,YAAa;YACrBJ,QAAQ,EAAEA;UAAS,CAAA,CAAA;QAAA;MAG/B,KAAKQ,YAAY,CAAC4B,WAAW;QACzB,OACI1B,GAAAA,CAAC2B,eAAe,EAAA,QAAA,CAAA;UACZvC,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA;QAAK,CAAA,EACPI,IAAI,EAAA;UACRY,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV,YAAa;UACrBJ,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAAC8B,UAAU;QACxB,OACI5B,GAAAA,CAAC6B,cAAc,EAAA,QAAA,CAAA;UACXzC,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EAChBH,IAAI,EAAA;UACTD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAGV,KAAKQ,YAAY,CAACgC,WAAW;QACzB,OACI9B,GAAAA,CAAC+B,eAAe,EAAA,QAAA,CAAA;UACZ3C,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EACjBH,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAGV,KAAKQ,YAAY,CAACkC,UAAU;QACxB,OACIhC,GAAAA,CAACiC,cAAc,EAAA,QAAA,CAAA;UACX7C,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EACjBH,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAGV,KAAKQ,YAAY,CAACoC,WAAW;QACzB,OACIlC,GAAAA,CAACmC,eAAe,EAAA,QAAA,CAAA;UACZ/C,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EACjBH,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAGV,KAAKQ,YAAY,CAACsC,WAAW;QACzB,OACIpC,GAAAA,CAACqC,eAAe,EAAA,QAAA,CAAA;UACZjD,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EACjBH,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAACwC,OAAO;QACrB,OACItC,GAAAA,CAACuC,WAAW,EAAA,QAAA,CAAA;UACRnD,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EACjBH,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAEV,KAAKQ,YAAY,CAAC0C,UAAU;QACxB,OACIxC,GAAAA,CAACyC,cAAc,EAAA,QAAA,CAAA;UACXrD,SAAS,EAAEA,SAAU;UACrBD,IAAI,EAAEA,IAAK;UACXgB,QAAQ,EAAEP,cAAe;UACzBQ,MAAM,EAAEV;QAAa,CAAA,EACjBH,IAAI,EAAA;UACRD,QAAQ,EAAEA;QACZ,CAAA,CAAA,CAAA;MAGV;QACI,OAAOU,GAAAA,CAAAA,KAAAA,EAAAA,IAAAA,EAAAA,0BAAAA,EAA8Bd,OAAO,CAAO;IAAA;GAE9D;EAED,OAAOc,GAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EAAGH,aAAa,EAAE,CAAI;AACjC","sourcesContent":["import { EFormControl } from '@common/enums/form-control.enum';\nimport { FormAddress } from '@common/general-ui/address/form-address.component';\nimport { FormCheckboxGroup } from '@common/general-ui/checkbox-group/form-checkbox-group.component';\nimport { FormCheckbox } from '@common/general-ui/checkbox/form-checkbox.component';\nimport { FormDatePicker } from '@common/general-ui/date-picker/form-date-picker.component';\nimport { FormInputLoqate } from '@common/general-ui/input-loqate/form-input-loqate.component';\nimport { FormInput as FormInput } from '@common/general-ui/input/form-input.component';\nimport { FormMultiSelect } from '@common/general-ui/multi-select/form-multi-select.component';\nimport { FormORSwitch } from '@common/general-ui/or-switch/form-or-switch.component';\nimport { FormPassword } from '@common/general-ui/password/form-password.component';\nimport { FormPhoneNumber } from '@common/general-ui/phone-number/form-phone-number.component';\nimport { FormRadioGroup } from '@common/general-ui/radio-group/form-radio-group.component';\nimport { IRadioGroupProps } from '@common/general-ui/radio-group/radio-group.component';\nimport { FormRangePicker } from '@common/general-ui/range-picker/form-range-picker.component';\nimport { FormSelect } from '@common/general-ui/select/form-select.component';\nimport { FormSwitch } from '@common/general-ui/switch/form-switch.component';\nimport { FormTextArea } from '@common/general-ui/textarea/form-textarea.component';\nimport { FormTimePicker } from '@common/general-ui/time-picker/form-time-picker.component';\nimport { FormUploadImage } from '@common/general-ui/upload-image/form-upload-image.component';\nimport { IFormFieldProps } from '@common/interfaces/form-field-props.interface';\nimport React, { useCallback } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\ntype IProps<TFormValues> = {\n    className?: string;\n    name: keyof TFormValues;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onFieldChange?: (name: keyof TFormValues, value: any) => void;\n    onFieldBlur?: (name: keyof TFormValues) => void;\n    maxLength?: number;\n} & IFormFieldProps<keyof TFormValues>;\n\nexport function FormField<TFormValues>(props: IProps<TFormValues>): JSX.Element {\n    const { onFieldChange, onFieldBlur, control, name, className, maxLength, readOnly, ...rest } = props;\n    const { watch } = useFormContext();\n\n    const handleOnBlur = useCallback(() => {\n        onFieldBlur && onFieldBlur(name);\n    }, [name, onFieldBlur]);\n\n    const handleOnChange = useCallback(() => {\n        onFieldChange && onFieldChange(name, watch(name as string));\n    }, [name, onFieldChange, watch]);\n\n    const renderContent = (): JSX.Element => {\n        switch (control) {\n            case EFormControl.text:\n                return (\n                    <FormInput<TFormValues>\n                        type=\"text\"\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        maxLength={maxLength}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.phoneNumber:\n                return (\n                    <FormPhoneNumber<TFormValues>\n                        type=\"text\"\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.password:\n                return (\n                    <FormPassword<TFormValues>\n                        type=\"password\"\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.textArea:\n                return (\n                    <FormTextArea<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        maxLength={maxLength}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.checkbox:\n                return (\n                    <FormCheckbox<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.checkboxGroup:\n                return (\n                    <FormCheckboxGroup<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.switch:\n                return (\n                    <FormSwitch<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.orSwitch:\n                return (\n                    <FormORSwitch<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        childrenRight=\"\"\n                        childrenLeft=\"\"\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.numeric:\n                return (\n                    <FormInput<TFormValues>\n                        className={className}\n                        type=\"number\"\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.email:\n                return (\n                    <FormInput<TFormValues>\n                        className={className}\n                        type=\"email\"\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.select:\n                return (\n                    <FormSelect<TFormValues>\n                        className={className}\n                        name={name}\n                        {...rest}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.treeSelect:\n                return (\n                    //FormTreeSelect problem with build\n                    <FormSelect<TFormValues>\n                        className={className}\n                        name={name}\n                        {...rest}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.multiSelect:\n                return (\n                    <FormMultiSelect<TFormValues>\n                        className={className}\n                        name={name}\n                        {...rest}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.radioGroup:\n                return (\n                    <FormRadioGroup<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...(rest as unknown as Omit<IRadioGroupProps<TFormValues>, 'name'>)}\n                        readOnly={readOnly}\n                    />\n                );\n\n            case EFormControl.uploadImage:\n                return (\n                    <FormUploadImage<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n\n            case EFormControl.datePicker:\n                return (\n                    <FormDatePicker<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n\n            case EFormControl.rangePicker:\n                return (\n                    <FormRangePicker<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n\n            case EFormControl.inputLoqate:\n                return (\n                    <FormInputLoqate<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.address:\n                return (\n                    <FormAddress<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.timePicker:\n                return (\n                    <FormTimePicker<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n\n            default:\n                return <div>not implemented control={control}</div>;\n        }\n    };\n\n    return <>{renderContent()}</>;\n}\n"]},"metadata":{},"sourceType":"module"}