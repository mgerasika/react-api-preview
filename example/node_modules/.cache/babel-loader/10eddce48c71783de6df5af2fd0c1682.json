{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { useField } from '../../hooks/use-field.hook.js';\nimport React, { useCallback } from 'react';\nimport { InputLoqate } from './input-loqate.component.js';\nfunction FormInputLoqate(props) {\n  var onChange = props.onChange,\n    getCustomErrorMessage = props.getCustomErrorMessage;\n  var _useField = useField(_objectSpread(_objectSpread({}, props), {}, {\n      getCustomErrorMessage: getCustomErrorMessage\n    })),\n    setFieldValue = _useField.setFieldValue,\n    value = _useField.value,\n    errorMessage = _useField.errorMessage,\n    setFieldTouched = _useField.setFieldTouched;\n  var handleChange = useCallback(function (e) {\n    setFieldValue(e.value);\n    onChange && onChange(e);\n    setFieldTouched();\n  }, [onChange, setFieldTouched, setFieldValue]);\n  return /*#__PURE__*/React.createElement(InputLoqate, _extends({\n    errorMessage: errorMessage\n  }, props, {\n    onChange: handleChange,\n    name: props.name,\n    defaultValue: value,\n    value: value\n  }));\n}\nexport { FormInputLoqate };","map":{"version":3,"sources":["../../../../src/general-ui/input-loqate/form-input-loqate.component.tsx"],"names":["FormInputLoqate","props","onChange","getCustomErrorMessage","setFieldValue","value","errorMessage","setFieldTouched","useField","handleChange","useCallback","e","React","InputLoqate","name","defaultValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO,SAASA,eAAe,CAC3BC,KAA2E,EAChE;EACX,IAAQC,QAAQ,GAA4BD,KAAK,CAAzCC,QAAQ;IAAEC,qBAAAA,GAA0BF,KAAK,CAA/BE,qBAAAA;EAClB,IAAA,SAAA,GAMIK,QAAQ,CAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACLP,KAAK,CAAA,EAAA,CAAA,CAAA,EAAA;MACRE,qBAAAA,EAAAA;IAAAA,CAAAA,CAAAA,CACF;IAREC,aAAa,GAAA,SAAA,CAAbA,aAAa;IAEbC,KAAK,GAAA,SAAA,CAALA,KAAK;IACLC,YAAY,GAAA,SAAA,CAAZA,YAAY;IACKC,eAAAA,GAAAA,SAAAA,CAAjBA,eAAe;EAMnB,IAAME,YAAY,GAAGC,WAAW,CAC3BC,UAAAA,CAAC,EAAK;IACHP,aAAa,CAACO,CAAC,CAACN,KAAK,CAAC;IACtBH,QAAQ,IAAIA,QAAQ,CAACS,CAAC,CAAC;IACvBJ,eAAe,EAAE;EACpB,CAAA,EACD,CAACL,QAAQ,EAAEK,eAAe,EAAEH,aAAa,CAAC,CAC7C;EACD,OAAA,aACIQ,KAAAA,CAAAA,aAAAA,CAACC,WAAW,EAAA,QAAA,CAAA;IACRP,YAAY,EAAEA;EAAa,CAAA,EACvBL,KAAK,EAAA;IACTC,QAAQ,EAAEO,YAAa;IACvBK,IAAI,EAAEb,KAAK,CAACa,IAAe;IAC3BC,YAAY,EAAEV,KAAM;IACpBA,KAAK,EAAEA;EACT,CAAA,CAAA,CAAA;AAEV","sourcesContent":["import { useField } from '@common/hooks/use-field.hook';\nimport React, { useCallback } from 'react';\nimport { IInputLoqateChangeHandler, IInputLoqateProps, IInputLoqateValue, InputLoqate } from './input-loqate.component';\n\nexport function FormInputLoqate<TFormValues>(\n    props: Omit<IInputLoqateProps<keyof TFormValues>, 'value' | 'defaultValue'>,\n): JSX.Element {\n    const { onChange, getCustomErrorMessage } = props;\n    const {\n        setFieldValue,\n\n        value,\n        errorMessage,\n        setFieldTouched: setFieldTouched,\n    } = useField<IInputLoqateValue>({\n        ...props,\n        getCustomErrorMessage,\n    });\n\n    const handleChange = useCallback<IInputLoqateChangeHandler>(\n        (e) => {\n            setFieldValue(e.value);\n            onChange && onChange(e);\n            setFieldTouched();\n        },\n        [onChange, setFieldTouched, setFieldValue],\n    );\n    return (\n        <InputLoqate\n            errorMessage={errorMessage}\n            {...props}\n            onChange={handleChange}\n            name={props.name as string}\n            defaultValue={value}\n            value={value}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"module"}