{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toKeyAlias;\nvar _generated = require(\"../validators/generated\");\nvar _cloneNode = require(\"../clone/cloneNode\");\nvar _removePropertiesDeep = require(\"../modifications/removePropertiesDeep\");\nfunction toKeyAlias(node) {\n  let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : node.key;\n  let alias;\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if ((0, _generated.isIdentifier)(key)) {\n    alias = key.name;\n  } else if ((0, _generated.isStringLiteral)(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));\n  }\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n  return alias;\n}\ntoKeyAlias.uid = 0;\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return toKeyAlias.uid = 0;\n  } else {\n    return toKeyAlias.uid++;\n  }\n};","map":{"version":3,"sources":["../../src/converters/toKeyAlias.ts"],"names":["toKeyAlias","node","key","alias","kind","increment","name","JSON","stringify","value","computed","static","uid","Number","MAX_SAFE_INTEGER"],"mappings":";;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AACA,IAAA,qBAAA,GAAA,OAAA,CAAA,uCAAA,CAAA;AAGe,SAASA,UAAT,CACbC,IADa,EAGL;EAAA,IADRC,GAAW,uEAAGD,IAAI,CAACC,GAFN;EAIb,IAAIC,KAAJ;EAGA,IAAIF,IAAI,CAACG,IAALH,KAAc,QAAlB,EAA4B;IAC1B,OAAOD,UAAU,CAACK,SAAXL,EAAAA,GAAyB,EAAhC;EACD,CAFD,MAEO,IAAI,CAAA,CAAA,EAAA,UAAA,CAAA,YAAA,EAAaE,GAAb,CAAJ,EAAuB;IAC5BC,KAAK,GAAGD,GAAG,CAACI,IAAZH;EACD,CAFM,MAEA,IAAI,CAAA,CAAA,EAAA,UAAA,CAAA,eAAA,EAAgBD,GAAhB,CAAJ,EAA0B;IAC/BC,KAAK,GAAGI,IAAI,CAACC,SAALD,CAAeL,GAAG,CAACO,KAAnBF,CAARJ;EACD,CAFM,MAEA;IACLA,KAAK,GAAGI,IAAI,CAACC,SAALD,CAAe,CAAA,CAAA,EAAA,qBAAA,CAAA,OAAA,EAAqB,CAAA,CAAA,EAAA,UAAA,CAAA,OAAA,EAAUL,GAAV,CAArB,CAAfK,CAARJ;EACD;EAGD,IAAIF,IAAI,CAACS,QAAT,EAAmB;IACjBP,KAAK,GAAI,IAAGA,KAAM,GAAlBA;EACD;EAGD,IAAIF,IAAI,CAACU,MAAT,EAAiB;IACfR,KAAK,GAAI,UAASA,KAAM,EAAxBA;EACD;EAED,OAAOA,KAAP;AACD;AAEDH,UAAU,CAACY,GAAXZ,GAAiB,CAAjBA;AAEAA,UAAU,CAACK,SAAXL,GAAuB,YAAY;EACjC,IAAIA,UAAU,CAACY,GAAXZ,IAAkBa,MAAM,CAACC,gBAA7B,EAA+C;IAC7C,OAAQd,UAAU,CAACY,GAAXZ,GAAiB,CAAzB;EACD,CAFD,MAEO;IACL,OAAOA,UAAU,CAACY,GAAXZ,EAAP;EACD;AACF,CANDA","sourcesContent":["import { isIdentifier, isStringLiteral } from \"../validators/generated\";\nimport cloneNode from \"../clone/cloneNode\";\nimport removePropertiesDeep from \"../modifications/removePropertiesDeep\";\nimport type * as t from \"..\";\n\nexport default function toKeyAlias(\n  node: t.Method | t.Property,\n  key: t.Node = node.key,\n): string {\n  let alias;\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.kind`\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if (isIdentifier(key)) {\n    alias = key.name;\n  } else if (isStringLiteral(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify(removePropertiesDeep(cloneNode(key)));\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.computed`\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.static`\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return (toKeyAlias.uid = 0);\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}