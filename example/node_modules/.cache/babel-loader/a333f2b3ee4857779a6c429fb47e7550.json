{"ast":null,"code":"export function blobReader(blob, onChunk, chunkSize) {\n  if (chunkSize === void 0) {\n    chunkSize = 1024 * 1024;\n  }\n  return new Promise(function (resolve, reject) {\n    var fileReader = new FileReader();\n    fileReader.addEventListener(\"error\", reject);\n    fileReader.addEventListener(\"abort\", reject);\n    var size = blob.size;\n    var totalBytesRead = 0;\n    function read() {\n      if (totalBytesRead >= size) {\n        resolve();\n        return;\n      }\n      fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));\n    }\n    fileReader.addEventListener(\"load\", function (event) {\n      var result = event.target.result;\n      onChunk(new Uint8Array(result));\n      totalBytesRead += result.byteLength;\n      // read the next block\n      read();\n    });\n    // kick off the read\n    read();\n  });\n}","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAM,SAAU,UAAU,CACxB,IAAU,EACV,OAAoC,EACpC,SAA+B,EAAA;EAA/B,IAAA,SAAA,KAAA,KAAA,CAAA,EAAA;IAAA,SAAA,GAAoB,IAAI,GAAG,IAAI;EAAA;EAE/B,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;IACjC,IAAM,UAAU,GAAG,IAAI,UAAU,EAAE;IAEnC,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC;IAC5C,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC;IAE5C,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI;IACtB,IAAI,cAAc,GAAG,CAAC;IAEtB,SAAS,IAAI,GAAA;MACX,IAAI,cAAc,IAAI,IAAI,EAAE;QAC1B,OAAO,EAAE;QACT;MACD;MACD,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,cAAc,GAAG,SAAS,CAAC,CAAC,CAAC;IACtG;IAEA,UAAU,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAC,KAAK,EAAA;MACxC,IAAM,MAAM,GAAiB,KAAK,CAAC,MAAc,CAAC,MAAM;MACxD,OAAO,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;MAC/B,cAAc,IAAI,MAAM,CAAC,UAAU;MACnC;MACA,IAAI,EAAE;IACR,CAAC,CAAC;IAEF;IACA,IAAI,EAAE;EACR,CAAC,CAAC;AACJ","sourcesContent":["export function blobReader(\n  blob: Blob,\n  onChunk: (chunk: Uint8Array) => void,\n  chunkSize: number = 1024 * 1024\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n\n    fileReader.addEventListener(\"error\", reject);\n    fileReader.addEventListener(\"abort\", reject);\n\n    const size = blob.size;\n    let totalBytesRead = 0;\n\n    function read() {\n      if (totalBytesRead >= size) {\n        resolve();\n        return;\n      }\n      fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));\n    }\n\n    fileReader.addEventListener(\"load\", (event) => {\n      const result = <ArrayBuffer>(event.target as any).result;\n      onChunk(new Uint8Array(result));\n      totalBytesRead += result.byteLength;\n      // read the next block\n      read();\n    });\n\n    // kick off the read\n    read();\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}