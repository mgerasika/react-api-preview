{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { defaultConfig, getCurrTime } from './Utils';\nimport { StorageCache } from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Cache');\n/**\n * Customized storage based on the SessionStorage or LocalStorage with LRU implemented\n */\nvar BrowserStorageCacheClass = /** @class */function (_super) {\n  __extends(BrowserStorageCacheClass, _super);\n  /**\n   * initialize the cache\n   * @param config - the configuration of the cache\n   */\n  function BrowserStorageCacheClass(config) {\n    var _this = this;\n    var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    _this = _super.call(this, cacheConfig) || this;\n    _this.config.storage = cacheConfig.storage;\n    _this.getItem = _this.getItem.bind(_this);\n    _this.setItem = _this.setItem.bind(_this);\n    _this.removeItem = _this.removeItem.bind(_this);\n    return _this;\n  }\n  /**\n   * decrease current size of the cache\n   *\n   * @private\n   * @param amount - the amount of the cache size which needs to be decreased\n   */\n  BrowserStorageCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {\n    var curSize = this.getCacheCurSize();\n    this.config.storage.setItem(this.cacheCurSizeKey, (curSize - amount).toString());\n  };\n  /**\n   * increase current size of the cache\n   *\n   * @private\n   * @param amount - the amount of the cache szie which need to be increased\n   */\n  BrowserStorageCacheClass.prototype._increaseCurSizeInBytes = function (amount) {\n    var curSize = this.getCacheCurSize();\n    this.config.storage.setItem(this.cacheCurSizeKey, (curSize + amount).toString());\n  };\n  /**\n   * update the visited time if item has been visited\n   *\n   * @private\n   * @param item - the item which need to be refreshed\n   * @param prefixedKey - the key of the item\n   *\n   * @return the refreshed item\n   */\n  BrowserStorageCacheClass.prototype._refreshItem = function (item, prefixedKey) {\n    item.visitedTime = getCurrTime();\n    this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n    return item;\n  };\n  /**\n   * check wether item is expired\n   *\n   * @private\n   * @param key - the key of the item\n   *\n   * @return true if the item is expired.\n   */\n  BrowserStorageCacheClass.prototype._isExpired = function (key) {\n    var text = this.config.storage.getItem(key);\n    var item = JSON.parse(text);\n    if (getCurrTime() >= item.expires) {\n      return true;\n    }\n    return false;\n  };\n  /**\n   * delete item from cache\n   *\n   * @private\n   * @param prefixedKey - the key of the item\n   * @param size - optional, the byte size of the item\n   */\n  BrowserStorageCacheClass.prototype._removeItem = function (prefixedKey, size) {\n    var itemSize = size ? size : JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;\n    this._decreaseCurSizeInBytes(itemSize);\n    // remove the cache item\n    this.config.storage.removeItem(prefixedKey);\n  };\n  /**\n   * put item into cache\n   *\n   * @private\n   * @param prefixedKey - the key of the item\n   * @param itemData - the value of the item\n   * @param itemSizeInBytes - the byte size of the item\n   */\n  BrowserStorageCacheClass.prototype._setItem = function (prefixedKey, item) {\n    // update the cache size\n    this._increaseCurSizeInBytes(item.byteSize);\n    try {\n      this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n    } catch (setItemErr) {\n      // if failed, we need to rollback the cache size\n      this._decreaseCurSizeInBytes(item.byteSize);\n      logger.error(\"Failed to set item \" + setItemErr);\n    }\n  };\n  /**\n   * total space needed when poping out items\n   *\n   * @private\n   * @param itemSize\n   *\n   * @return total space needed\n   */\n  BrowserStorageCacheClass.prototype._sizeToPop = function (itemSize) {\n    var spaceItemNeed = this.getCacheCurSize() + itemSize - this.config.capacityInBytes;\n    var cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;\n    return spaceItemNeed > cacheThresholdSpace ? spaceItemNeed : cacheThresholdSpace;\n  };\n  /**\n   * see whether cache is full\n   *\n   * @private\n   * @param itemSize\n   *\n   * @return true if cache is full\n   */\n  BrowserStorageCacheClass.prototype._isCacheFull = function (itemSize) {\n    return itemSize + this.getCacheCurSize() > this.config.capacityInBytes;\n  };\n  /**\n   * scan the storage and find out all the keys owned by this cache\n   * also clean the expired keys while scanning\n   *\n   * @private\n   *\n   * @return array of keys\n   */\n  BrowserStorageCacheClass.prototype._findValidKeys = function () {\n    var keys = [];\n    var keyInCache = [];\n    // get all keys in Storage\n    for (var i = 0; i < this.config.storage.length; i += 1) {\n      keyInCache.push(this.config.storage.key(i));\n    }\n    // find those items which belong to our cache and also clean those expired items\n    for (var i = 0; i < keyInCache.length; i += 1) {\n      var key = keyInCache[i];\n      if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\n        if (this._isExpired(key)) {\n          this._removeItem(key);\n        } else {\n          keys.push(key);\n        }\n      }\n    }\n    return keys;\n  };\n  /**\n   * get all the items we have, sort them by their priority,\n   * if priority is same, sort them by their last visited time\n   * pop out items from the low priority (5 is the lowest)\n   *\n   * @private\n   * @param keys - all the keys in this cache\n   * @param sizeToPop - the total size of the items which needed to be poped out\n   */\n  BrowserStorageCacheClass.prototype._popOutItems = function (keys, sizeToPop) {\n    var items = [];\n    var remainedSize = sizeToPop;\n    // get the items from Storage\n    for (var i = 0; i < keys.length; i += 1) {\n      var val = this.config.storage.getItem(keys[i]);\n      if (val != null) {\n        var item = JSON.parse(val);\n        items.push(item);\n      }\n    }\n    // first compare priority\n    // then compare visited time\n    items.sort(function (a, b) {\n      if (a.priority > b.priority) {\n        return -1;\n      } else if (a.priority < b.priority) {\n        return 1;\n      } else {\n        if (a.visitedTime < b.visitedTime) {\n          return -1;\n        } else return 1;\n      }\n    });\n    for (var i = 0; i < items.length; i += 1) {\n      // pop out items until we have enough room for new item\n      this._removeItem(items[i].key, items[i].byteSize);\n      remainedSize -= items[i].byteSize;\n      if (remainedSize <= 0) {\n        return;\n      }\n    }\n  };\n  /**\n   * Set item into cache. You can put number, string, boolean or object.\n   * The cache will first check whether has the same key.\n   * If it has, it will delete the old item and then put the new item in\n   * The cache will pop out items if it is full\n   * You can specify the cache item options. The cache will abort and output a warning:\n   * If the key is invalid\n   * If the size of the item exceeds itemMaxSize.\n   * If the value is undefined\n   * If incorrect cache item configuration\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param value - the value of the item\n   * @param {Object} [options] - optional, the specified meta-data\n   */\n  BrowserStorageCacheClass.prototype.setItem = function (key, value, options) {\n    logger.log(\"Set item: key is \" + key + \", value is \" + value + \" with options: \" + options);\n    var prefixedKey = this.config.keyPrefix + key;\n    // invalid keys\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return;\n    }\n    if (typeof value === 'undefined') {\n      logger.warn(\"The value of item should not be undefined!\");\n      return;\n    }\n    var cacheItemOptions = {\n      priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n      expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\n    };\n    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n      logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n      return;\n    }\n    var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\n    // check wether this item is too big;\n    if (item.byteSize > this.config.itemMaxSize) {\n      logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n      return;\n    }\n    try {\n      // first look into the storage, if it exists, delete it.\n      var val = this.config.storage.getItem(prefixedKey);\n      if (val) {\n        this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n      }\n      // check whether the cache is full\n      if (this._isCacheFull(item.byteSize)) {\n        var validKeys = this._findValidKeys();\n        // check again and then pop out items\n        if (this._isCacheFull(item.byteSize)) {\n          var sizeToPop = this._sizeToPop(item.byteSize);\n          this._popOutItems(validKeys, sizeToPop);\n        }\n      }\n      // put item in the cache\n      // may failed due to storage full\n      this._setItem(prefixedKey, item);\n    } catch (e) {\n      logger.warn(\"setItem failed! \" + e);\n    }\n  };\n  /**\n   * Get item from cache. It will return null if item doesn’t exist or it has been expired.\n   * If you specified callback function in the options,\n   * then the function will be executed if no such item in the cache\n   * and finally put the return value into cache.\n   * Please make sure the callback function will return the value you want to put into the cache.\n   * The cache will abort output a warning:\n   * If the key is invalid\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param {Object} [options] - the options of callback function\n   *\n   * @return - return the value of the item\n   */\n  BrowserStorageCacheClass.prototype.getItem = function (key, options) {\n    logger.log(\"Get item: key is \" + key + \" with options \" + options);\n    var ret = null;\n    var prefixedKey = this.config.keyPrefix + key;\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return null;\n    }\n    try {\n      ret = this.config.storage.getItem(prefixedKey);\n      if (ret != null) {\n        if (this._isExpired(prefixedKey)) {\n          // if expired, remove that item and return null\n          this._removeItem(prefixedKey, JSON.parse(ret).byteSize);\n          ret = null;\n        } else {\n          // if not expired, great, return the value and refresh it\n          var item = JSON.parse(ret);\n          item = this._refreshItem(item, prefixedKey);\n          return item.data;\n        }\n      }\n      if (options && options.callback !== undefined) {\n        var val = options.callback();\n        if (val !== null) {\n          this.setItem(key, val, options);\n        }\n        return val;\n      }\n      return null;\n    } catch (e) {\n      logger.warn(\"getItem failed! \" + e);\n      return null;\n    }\n  };\n  /**\n   * remove item from the cache\n   * The cache will abort output a warning:\n   * If error happened with browser storage\n   * @param key - the key of the item\n   */\n  BrowserStorageCacheClass.prototype.removeItem = function (key) {\n    logger.log(\"Remove item: key is \" + key);\n    var prefixedKey = this.config.keyPrefix + key;\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      return;\n    }\n    try {\n      var val = this.config.storage.getItem(prefixedKey);\n      if (val) {\n        this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n      }\n    } catch (e) {\n      logger.warn(\"removeItem failed! \" + e);\n    }\n  };\n  /**\n   * clear the entire cache\n   * The cache will abort output a warning:\n   * If error happened with browser storage\n   */\n  BrowserStorageCacheClass.prototype.clear = function () {\n    logger.log(\"Clear Cache\");\n    var keysToRemove = [];\n    for (var i = 0; i < this.config.storage.length; i += 1) {\n      var key = this.config.storage.key(i);\n      if (key.indexOf(this.config.keyPrefix) === 0) {\n        keysToRemove.push(key);\n      }\n    }\n    try {\n      for (var i = 0; i < keysToRemove.length; i += 1) {\n        this.config.storage.removeItem(keysToRemove[i]);\n      }\n    } catch (e) {\n      logger.warn(\"clear failed! \" + e);\n    }\n  };\n  /**\n   * Return all the keys in the cache.\n   *\n   * @return - all keys in the cache\n   */\n  BrowserStorageCacheClass.prototype.getAllKeys = function () {\n    var keys = [];\n    for (var i = 0; i < this.config.storage.length; i += 1) {\n      var key = this.config.storage.key(i);\n      if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\n        keys.push(key.substring(this.config.keyPrefix.length));\n      }\n    }\n    return keys;\n  };\n  /**\n   * return the current size of the cache\n   *\n   * @return - current size of the cache\n   */\n  BrowserStorageCacheClass.prototype.getCacheCurSize = function () {\n    var ret = this.config.storage.getItem(this.cacheCurSizeKey);\n    if (!ret) {\n      this.config.storage.setItem(this.cacheCurSizeKey, '0');\n      ret = '0';\n    }\n    return Number(ret);\n  };\n  /**\n   * Return a new instance of cache with customized configuration.\n   * @param config - the customized configuration\n   *\n   * @return - new instance of Cache\n   */\n  BrowserStorageCacheClass.prototype.createInstance = function (config) {\n    if (!config.keyPrefix || config.keyPrefix === defaultConfig.keyPrefix) {\n      logger.error('invalid keyPrefix, setting keyPrefix with timeStamp');\n      config.keyPrefix = getCurrTime.toString();\n    }\n    return new BrowserStorageCacheClass(config);\n  };\n  return BrowserStorageCacheClass;\n}(StorageCache);\nexport { BrowserStorageCacheClass };\nexport var BrowserStorageCache = new BrowserStorageCacheClass();\n/**\n * @deprecated use named import\n */\nexport default BrowserStorageCache;","map":{"version":3,"sources":["../src/BrowserStorageCache.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { defaultConfig, getCurrTime } from './Utils';\nimport { StorageCache } from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Cache');\n/**\n * Customized storage based on the SessionStorage or LocalStorage with LRU implemented\n */\nvar BrowserStorageCacheClass = /** @class */ (function (_super) {\n    __extends(BrowserStorageCacheClass, _super);\n    /**\n     * initialize the cache\n     * @param config - the configuration of the cache\n     */\n    function BrowserStorageCacheClass(config) {\n        var _this = this;\n        var cacheConfig = config\n            ? Object.assign({}, defaultConfig, config)\n            : defaultConfig;\n        _this = _super.call(this, cacheConfig) || this;\n        _this.config.storage = cacheConfig.storage;\n        _this.getItem = _this.getItem.bind(_this);\n        _this.setItem = _this.setItem.bind(_this);\n        _this.removeItem = _this.removeItem.bind(_this);\n        return _this;\n    }\n    /**\n     * decrease current size of the cache\n     *\n     * @private\n     * @param amount - the amount of the cache size which needs to be decreased\n     */\n    BrowserStorageCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {\n        var curSize = this.getCacheCurSize();\n        this.config.storage.setItem(this.cacheCurSizeKey, (curSize - amount).toString());\n    };\n    /**\n     * increase current size of the cache\n     *\n     * @private\n     * @param amount - the amount of the cache szie which need to be increased\n     */\n    BrowserStorageCacheClass.prototype._increaseCurSizeInBytes = function (amount) {\n        var curSize = this.getCacheCurSize();\n        this.config.storage.setItem(this.cacheCurSizeKey, (curSize + amount).toString());\n    };\n    /**\n     * update the visited time if item has been visited\n     *\n     * @private\n     * @param item - the item which need to be refreshed\n     * @param prefixedKey - the key of the item\n     *\n     * @return the refreshed item\n     */\n    BrowserStorageCacheClass.prototype._refreshItem = function (item, prefixedKey) {\n        item.visitedTime = getCurrTime();\n        this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n        return item;\n    };\n    /**\n     * check wether item is expired\n     *\n     * @private\n     * @param key - the key of the item\n     *\n     * @return true if the item is expired.\n     */\n    BrowserStorageCacheClass.prototype._isExpired = function (key) {\n        var text = this.config.storage.getItem(key);\n        var item = JSON.parse(text);\n        if (getCurrTime() >= item.expires) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * delete item from cache\n     *\n     * @private\n     * @param prefixedKey - the key of the item\n     * @param size - optional, the byte size of the item\n     */\n    BrowserStorageCacheClass.prototype._removeItem = function (prefixedKey, size) {\n        var itemSize = size\n            ? size\n            : JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;\n        this._decreaseCurSizeInBytes(itemSize);\n        // remove the cache item\n        this.config.storage.removeItem(prefixedKey);\n    };\n    /**\n     * put item into cache\n     *\n     * @private\n     * @param prefixedKey - the key of the item\n     * @param itemData - the value of the item\n     * @param itemSizeInBytes - the byte size of the item\n     */\n    BrowserStorageCacheClass.prototype._setItem = function (prefixedKey, item) {\n        // update the cache size\n        this._increaseCurSizeInBytes(item.byteSize);\n        try {\n            this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n        }\n        catch (setItemErr) {\n            // if failed, we need to rollback the cache size\n            this._decreaseCurSizeInBytes(item.byteSize);\n            logger.error(\"Failed to set item \" + setItemErr);\n        }\n    };\n    /**\n     * total space needed when poping out items\n     *\n     * @private\n     * @param itemSize\n     *\n     * @return total space needed\n     */\n    BrowserStorageCacheClass.prototype._sizeToPop = function (itemSize) {\n        var spaceItemNeed = this.getCacheCurSize() + itemSize - this.config.capacityInBytes;\n        var cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;\n        return spaceItemNeed > cacheThresholdSpace\n            ? spaceItemNeed\n            : cacheThresholdSpace;\n    };\n    /**\n     * see whether cache is full\n     *\n     * @private\n     * @param itemSize\n     *\n     * @return true if cache is full\n     */\n    BrowserStorageCacheClass.prototype._isCacheFull = function (itemSize) {\n        return itemSize + this.getCacheCurSize() > this.config.capacityInBytes;\n    };\n    /**\n     * scan the storage and find out all the keys owned by this cache\n     * also clean the expired keys while scanning\n     *\n     * @private\n     *\n     * @return array of keys\n     */\n    BrowserStorageCacheClass.prototype._findValidKeys = function () {\n        var keys = [];\n        var keyInCache = [];\n        // get all keys in Storage\n        for (var i = 0; i < this.config.storage.length; i += 1) {\n            keyInCache.push(this.config.storage.key(i));\n        }\n        // find those items which belong to our cache and also clean those expired items\n        for (var i = 0; i < keyInCache.length; i += 1) {\n            var key = keyInCache[i];\n            if (key.indexOf(this.config.keyPrefix) === 0 &&\n                key !== this.cacheCurSizeKey) {\n                if (this._isExpired(key)) {\n                    this._removeItem(key);\n                }\n                else {\n                    keys.push(key);\n                }\n            }\n        }\n        return keys;\n    };\n    /**\n     * get all the items we have, sort them by their priority,\n     * if priority is same, sort them by their last visited time\n     * pop out items from the low priority (5 is the lowest)\n     *\n     * @private\n     * @param keys - all the keys in this cache\n     * @param sizeToPop - the total size of the items which needed to be poped out\n     */\n    BrowserStorageCacheClass.prototype._popOutItems = function (keys, sizeToPop) {\n        var items = [];\n        var remainedSize = sizeToPop;\n        // get the items from Storage\n        for (var i = 0; i < keys.length; i += 1) {\n            var val = this.config.storage.getItem(keys[i]);\n            if (val != null) {\n                var item = JSON.parse(val);\n                items.push(item);\n            }\n        }\n        // first compare priority\n        // then compare visited time\n        items.sort(function (a, b) {\n            if (a.priority > b.priority) {\n                return -1;\n            }\n            else if (a.priority < b.priority) {\n                return 1;\n            }\n            else {\n                if (a.visitedTime < b.visitedTime) {\n                    return -1;\n                }\n                else\n                    return 1;\n            }\n        });\n        for (var i = 0; i < items.length; i += 1) {\n            // pop out items until we have enough room for new item\n            this._removeItem(items[i].key, items[i].byteSize);\n            remainedSize -= items[i].byteSize;\n            if (remainedSize <= 0) {\n                return;\n            }\n        }\n    };\n    /**\n     * Set item into cache. You can put number, string, boolean or object.\n     * The cache will first check whether has the same key.\n     * If it has, it will delete the old item and then put the new item in\n     * The cache will pop out items if it is full\n     * You can specify the cache item options. The cache will abort and output a warning:\n     * If the key is invalid\n     * If the size of the item exceeds itemMaxSize.\n     * If the value is undefined\n     * If incorrect cache item configuration\n     * If error happened with browser storage\n     *\n     * @param key - the key of the item\n     * @param value - the value of the item\n     * @param {Object} [options] - optional, the specified meta-data\n     */\n    BrowserStorageCacheClass.prototype.setItem = function (key, value, options) {\n        logger.log(\"Set item: key is \" + key + \", value is \" + value + \" with options: \" + options);\n        var prefixedKey = this.config.keyPrefix + key;\n        // invalid keys\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return;\n        }\n        if (typeof value === 'undefined') {\n            logger.warn(\"The value of item should not be undefined!\");\n            return;\n        }\n        var cacheItemOptions = {\n            priority: options && options.priority !== undefined\n                ? options.priority\n                : this.config.defaultPriority,\n            expires: options && options.expires !== undefined\n                ? options.expires\n                : this.config.defaultTTL + getCurrTime(),\n        };\n        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n            logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n            return;\n        }\n        var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\n        // check wether this item is too big;\n        if (item.byteSize > this.config.itemMaxSize) {\n            logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n            return;\n        }\n        try {\n            // first look into the storage, if it exists, delete it.\n            var val = this.config.storage.getItem(prefixedKey);\n            if (val) {\n                this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n            }\n            // check whether the cache is full\n            if (this._isCacheFull(item.byteSize)) {\n                var validKeys = this._findValidKeys();\n                // check again and then pop out items\n                if (this._isCacheFull(item.byteSize)) {\n                    var sizeToPop = this._sizeToPop(item.byteSize);\n                    this._popOutItems(validKeys, sizeToPop);\n                }\n            }\n            // put item in the cache\n            // may failed due to storage full\n            this._setItem(prefixedKey, item);\n        }\n        catch (e) {\n            logger.warn(\"setItem failed! \" + e);\n        }\n    };\n    /**\n     * Get item from cache. It will return null if item doesn’t exist or it has been expired.\n     * If you specified callback function in the options,\n     * then the function will be executed if no such item in the cache\n     * and finally put the return value into cache.\n     * Please make sure the callback function will return the value you want to put into the cache.\n     * The cache will abort output a warning:\n     * If the key is invalid\n     * If error happened with browser storage\n     *\n     * @param key - the key of the item\n     * @param {Object} [options] - the options of callback function\n     *\n     * @return - return the value of the item\n     */\n    BrowserStorageCacheClass.prototype.getItem = function (key, options) {\n        logger.log(\"Get item: key is \" + key + \" with options \" + options);\n        var ret = null;\n        var prefixedKey = this.config.keyPrefix + key;\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return null;\n        }\n        try {\n            ret = this.config.storage.getItem(prefixedKey);\n            if (ret != null) {\n                if (this._isExpired(prefixedKey)) {\n                    // if expired, remove that item and return null\n                    this._removeItem(prefixedKey, JSON.parse(ret).byteSize);\n                    ret = null;\n                }\n                else {\n                    // if not expired, great, return the value and refresh it\n                    var item = JSON.parse(ret);\n                    item = this._refreshItem(item, prefixedKey);\n                    return item.data;\n                }\n            }\n            if (options && options.callback !== undefined) {\n                var val = options.callback();\n                if (val !== null) {\n                    this.setItem(key, val, options);\n                }\n                return val;\n            }\n            return null;\n        }\n        catch (e) {\n            logger.warn(\"getItem failed! \" + e);\n            return null;\n        }\n    };\n    /**\n     * remove item from the cache\n     * The cache will abort output a warning:\n     * If error happened with browser storage\n     * @param key - the key of the item\n     */\n    BrowserStorageCacheClass.prototype.removeItem = function (key) {\n        logger.log(\"Remove item: key is \" + key);\n        var prefixedKey = this.config.keyPrefix + key;\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            return;\n        }\n        try {\n            var val = this.config.storage.getItem(prefixedKey);\n            if (val) {\n                this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n            }\n        }\n        catch (e) {\n            logger.warn(\"removeItem failed! \" + e);\n        }\n    };\n    /**\n     * clear the entire cache\n     * The cache will abort output a warning:\n     * If error happened with browser storage\n     */\n    BrowserStorageCacheClass.prototype.clear = function () {\n        logger.log(\"Clear Cache\");\n        var keysToRemove = [];\n        for (var i = 0; i < this.config.storage.length; i += 1) {\n            var key = this.config.storage.key(i);\n            if (key.indexOf(this.config.keyPrefix) === 0) {\n                keysToRemove.push(key);\n            }\n        }\n        try {\n            for (var i = 0; i < keysToRemove.length; i += 1) {\n                this.config.storage.removeItem(keysToRemove[i]);\n            }\n        }\n        catch (e) {\n            logger.warn(\"clear failed! \" + e);\n        }\n    };\n    /**\n     * Return all the keys in the cache.\n     *\n     * @return - all keys in the cache\n     */\n    BrowserStorageCacheClass.prototype.getAllKeys = function () {\n        var keys = [];\n        for (var i = 0; i < this.config.storage.length; i += 1) {\n            var key = this.config.storage.key(i);\n            if (key.indexOf(this.config.keyPrefix) === 0 &&\n                key !== this.cacheCurSizeKey) {\n                keys.push(key.substring(this.config.keyPrefix.length));\n            }\n        }\n        return keys;\n    };\n    /**\n     * return the current size of the cache\n     *\n     * @return - current size of the cache\n     */\n    BrowserStorageCacheClass.prototype.getCacheCurSize = function () {\n        var ret = this.config.storage.getItem(this.cacheCurSizeKey);\n        if (!ret) {\n            this.config.storage.setItem(this.cacheCurSizeKey, '0');\n            ret = '0';\n        }\n        return Number(ret);\n    };\n    /**\n     * Return a new instance of cache with customized configuration.\n     * @param config - the customized configuration\n     *\n     * @return - new instance of Cache\n     */\n    BrowserStorageCacheClass.prototype.createInstance = function (config) {\n        if (!config.keyPrefix || config.keyPrefix === defaultConfig.keyPrefix) {\n            logger.error('invalid keyPrefix, setting keyPrefix with timeStamp');\n            config.keyPrefix = getCurrTime.toString();\n        }\n        return new BrowserStorageCacheClass(config);\n    };\n    return BrowserStorageCacheClass;\n}(StorageCache));\nexport { BrowserStorageCacheClass };\nexport var BrowserStorageCache = new BrowserStorageCacheClass();\n/**\n * @deprecated use named import\n */\nexport default BrowserStorageCache;\n//# sourceMappingURL=BrowserStorageCache.js.map"]},"metadata":{},"sourceType":"module"}