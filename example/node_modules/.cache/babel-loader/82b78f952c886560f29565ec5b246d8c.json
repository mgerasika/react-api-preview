{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');\nvar input_component = require('../input/input.component.js');\nvar React = require('react');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nconst PhoneNumber = props => {\n  const [val, setVal] = React.useState(props.defaultValue || props.value);\n  React.useEffect(() => {\n    if (props.value !== undefined) {\n      setVal(props.value);\n    }\n  }, [props.value]);\n  React.useEffect(() => {\n    if (props.defaultValue !== undefined) {\n      setVal(props.defaultValue);\n    }\n  }, [props.defaultValue]);\n  const handleChange = React.useCallback(e => {\n    setVal(e.target.value);\n    props.onChange && props.onChange({\n      ...e,\n      target: {\n        ...e.target,\n        value: e.target.value\n      }\n    });\n  }, [props]);\n  const formatValue = React.useCallback(value => {\n    const first = value?.length ? value[0] : '';\n    const newValue = first === '+' ? first + value.replaceAll(/[^0-9]/g, '') : value.replaceAll(/[^0-9]/g, '');\n    return newValue;\n  }, []);\n  return /*#__PURE__*/React__default[\"default\"].createElement(input_component.Input, _rollupPluginBabelHelpers[\"extends\"]({}, props, {\n    type: \"text\",\n    onChange: handleChange,\n    formatValue: formatValue,\n    value: val\n  }));\n};\nexports.PhoneNumber = PhoneNumber;","map":{"version":3,"sources":["../../../../src/general-ui/phone-number/phone-number.component.tsx"],"names":["PhoneNumber","props","val","setVal","useState","defaultValue","value","useEffect","undefined","handleChange","useCallback","e","target","onChange","formatValue","first","length","newValue","replaceAll","React","Input"],"mappings":";;;;;;;;;;;;;;AAGaA,MAAAA,WAAW,GAAIC,KAAgC,IAAkB;EAC1E,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGC,KAAAA,CAAAA,QAAQ,CAACH,KAAK,CAACI,YAAY,IAAIJ,KAAK,CAACK,KAAK,CAAC;EACjEC,KAAAA,CAAAA,SAAS,CAAC,MAAM;IACZ,IAAIN,KAAK,CAACK,KAAK,KAAKE,SAAS,EAAE;MAC3BL,MAAM,CAACF,KAAK,CAACK,KAAK,CAAC;IACvB;EACJ,CAAC,EAAE,CAACL,KAAK,CAACK,KAAK,CAAC,CAAC;EAEjBC,KAAAA,CAAAA,SAAS,CAAC,MAAM;IACZ,IAAIN,KAAK,CAACI,YAAY,KAAKG,SAAS,EAAE;MAClCL,MAAM,CAACF,KAAK,CAACI,YAAY,CAAC;IAC9B;EACJ,CAAC,EAAE,CAACJ,KAAK,CAACI,YAAY,CAAC,CAAC;EAExB,MAAMI,YAAY,GAAGC,KAAAA,CAAAA,WAAW,CAC3BC,CAAsC,IAAK;IACxCR,MAAM,CAACQ,CAAC,CAACC,MAAM,CAACN,KAAK,CAAC;IACtBL,KAAK,CAACY,QAAQ,IAAIZ,KAAK,CAACY,QAAQ,CAAC;MAAE,GAAGF,CAAC;MAAEC,MAAM,EAAE;QAAE,GAAGD,CAAC,CAACC,MAAM;QAAEN,KAAK,EAAEK,CAAC,CAACC,MAAM,CAACN;MAAM;IAAE,CAAC,CAAC;EAC9F,CAAC,EACD,CAACL,KAAK,CAAC,CACV;EAED,MAAMa,WAAW,GAAGJ,KAAAA,CAAAA,WAAW,CAAEJ,KAAa,IAAK;IAC/C,MAAMS,KAAK,GAAGT,KAAK,EAAEU,MAAM,GAAGV,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;IAC3C,MAAMW,QAAQ,GAAGF,KAAK,KAAK,GAAG,GAAGA,KAAK,GAAGT,KAAK,CAACY,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,GAAGZ,KAAK,CAACY,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC;IAC1G,OAAOD,QAAQ;GAClB,EAAE,EAAE,CAAC;EAEN,OAAA,aAAOE,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAACC,eAAAA,CAAAA,KAAK,EAAA,yBAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,EAAKnB,KAAK,EAAA;IAAE,IAAI,EAAC,MAAM;IAAC,QAAQ,EAAEQ,YAAa;IAAC,WAAW,EAAEK,WAAY;IAAC,KAAK,EAAEZ;GAAO,CAAA,CAAA;AACzG,CAAA","sourcesContent":["import { IInputProps, Input } from '@common/general-ui/input/input.component';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nexport const PhoneNumber = (props: Omit<IInputProps, 'type'>): JSX.Element => {\n    const [val, setVal] = useState(props.defaultValue || props.value);\n    useEffect(() => {\n        if (props.value !== undefined) {\n            setVal(props.value);\n        }\n    }, [props.value]);\n\n    useEffect(() => {\n        if (props.defaultValue !== undefined) {\n            setVal(props.defaultValue);\n        }\n    }, [props.defaultValue]);\n\n    const handleChange = useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            setVal(e.target.value);\n            props.onChange && props.onChange({ ...e, target: { ...e.target, value: e.target.value } });\n        },\n        [props],\n    );\n\n    const formatValue = useCallback((value: string) => {\n        const first = value?.length ? value[0] : '';\n        const newValue = first === '+' ? first + value.replaceAll(/[^0-9]/g, '') : value.replaceAll(/[^0-9]/g, '');\n        return newValue;\n    }, []);\n\n    return <Input {...props} type=\"text\" onChange={handleChange} formatValue={formatValue} value={val} />;\n};\n"]},"metadata":{},"sourceType":"script"}