{"ast":null,"code":"import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, objectSpread2 as _objectSpread2, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { Field } from '../field/field.component.js';\nimport { Readonly } from '../readonly.component.js';\nimport { Input } from 'antd';\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { inputStyles } from './input.component.js';\nimport { jsx } from '@emotion/react';\nvar _excluded = [\"size\", \"errorMessage\", \"helperText\", \"value\", \"validate\"];\nvar InputNumber = function InputNumber(props) {\n  props.size;\n  props.errorMessage;\n  props.helperText;\n  var value = props.value;\n  props.validate;\n  var rest = _objectWithoutProperties(props, _excluded);\n  var _useState = useState(props.defaultValue || props.value),\n    _useState2 = _slicedToArray(_useState, 2),\n    val = _useState2[0],\n    setVal = _useState2[1];\n  useEffect(function () {\n    if (props.value !== undefined) {\n      setVal(props.value);\n    }\n  }, [props.value]);\n  useEffect(function () {\n    if (props.defaultValue !== undefined) {\n      setVal(props.defaultValue);\n    }\n  }, [props.defaultValue]);\n  var handleChange = useCallback(function (e) {\n    // eslint-disable-next-line no-useless-escape\n    var newValueStr = e.target.value.replaceAll(/[^-0-9\\.]/g, '');\n    newValueStr = newValueStr.replaceAll(/--/g, '-');\n    if (newValueStr.split('.').length > 2) {\n      newValueStr = (value === null || value === void 0 ? void 0 : value.toString()) || '';\n    }\n    if (newValueStr === '.') {\n      newValueStr = '';\n    }\n    setVal(newValueStr);\n    props.onChange && props.onChange(_objectSpread2(_objectSpread2({}, e), {}, {\n      target: _objectSpread2(_objectSpread2({}, e.target), {}, {\n        value: newValueStr\n      })\n    }));\n  }, [props, value]);\n  var handleBlur = useCallback(function (e) {\n    props.onBlur && props.onBlur(_objectSpread2(_objectSpread2({}, e), {}, {\n      target: _objectSpread2(_objectSpread2({}, e.target), {}, {\n        value: e.target.value\n      })\n    }));\n  }, [props]);\n  var formatText = useMemo(function () {\n    return val !== undefined ? \"\".concat(val) : '';\n  }, [val]);\n  return jsx(Field, props, jsx(\"div\", {\n    tw: \"relative\"\n  }, props.readOnly && jsx(Readonly, null), jsx(Input, _extends({}, rest, {\n    prefix: props.prefix,\n    maxLength: props.maxLength,\n    tabIndex: props.readOnly ? -1 : 0,\n    type: \"text\",\n    css: inputStyles.input(!!props.readOnly),\n    value: formatText,\n    onChange: handleChange,\n    onPaste: handleChange,\n    onBlur: handleBlur\n  }))));\n};\nexport { InputNumber };","map":{"version":3,"sources":["../../../../src/general-ui/input/input-number.component.tsx"],"names":["InputNumber","props","size","errorMessage","helperText","value","validate","rest","val","setVal","useState","defaultValue","_useState2","useEffect","undefined","handleChange","useCallback","e","newValueStr","target","replaceAll","split","length","toString","onChange","handleBlur","onBlur","formatText","useMemo","___EmotionJSX","tw","readOnly","Readonly","AntdInput","prefix","maxLength","tabIndex","type","css","inputStyles","input","onPaste"],"mappings":"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","sourcesContent":["import { Field } from '@common/general-ui/field/field.component';\nimport { Readonly } from '@common/general-ui/readonly.component';\nimport { Input as AntdInput } from 'antd';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { IInputProps, inputStyles } from './input.component';\n\nexport const InputNumber = (props: IInputProps): JSX.Element => {\n    const { size, errorMessage, helperText, value, validate: registerOptions, ...rest } = props;\n\n    const [val, setVal] = useState(props.defaultValue || props.value);\n    useEffect(() => {\n        if (props.value !== undefined) {\n            setVal(props.value);\n        }\n    }, [props.value]);\n\n    useEffect(() => {\n        if (props.defaultValue !== undefined) {\n            setVal(props.defaultValue);\n        }\n    }, [props.defaultValue]);\n\n    const handleChange = useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            // eslint-disable-next-line no-useless-escape\n            let newValueStr = e.target.value.replaceAll(/[^-0-9\\.]/g, '');\n            newValueStr = newValueStr.replaceAll(/--/g, '-');\n            if (newValueStr.split('.').length > 2) {\n                newValueStr = value?.toString() || '';\n            }\n            if (newValueStr === '.') {\n                newValueStr = '';\n            }\n\n            setVal(newValueStr);\n            props.onChange && props.onChange({ ...e, target: { ...e.target, value: newValueStr as unknown as string } });\n        },\n        [props, value],\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            props.onBlur && props.onBlur({ ...e, target: { ...e.target, value: e.target.value } });\n        },\n        [props],\n    );\n\n    const formatText = useMemo(() => {\n        return val !== undefined ? `${val}` : '';\n    }, [val]);\n\n    return (\n        <Field {...props}>\n            <div tw=\"relative\">\n                {props.readOnly && <Readonly />}\n                <AntdInput\n                    {...rest}\n                    prefix={props.prefix}\n                    maxLength={props.maxLength}\n                    tabIndex={props.readOnly ? -1 : 0}\n                    type=\"text\"\n                    css={inputStyles.input(!!props.readOnly)}\n                    value={formatText}\n                    onChange={handleChange}\n                    onPaste={handleChange as unknown as React.ClipboardEventHandler}\n                    onBlur={handleBlur}\n                />\n            </div>\n        </Field>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}