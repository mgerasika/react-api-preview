{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { useField } from '../../hooks/use-field.hook.js';\nimport React, { useCallback } from 'react';\nimport { CheckboxGroup } from './checkbox-group.component.js';\nfunction FormCheckboxGroup(props) {\n  var onChange = props.onChange,\n    getCustomErrorMessage = props.getCustomErrorMessage;\n  var _useField = useField(_objectSpread(_objectSpread({}, props), {}, {\n      getCustomErrorMessage: getCustomErrorMessage\n    })),\n    setFieldValue = _useField.setFieldValue,\n    value = _useField.value,\n    errorMessage = _useField.errorMessage;\n  var handleChange = useCallback(function (e) {\n    onChange && onChange(e);\n    setFieldValue(e.value);\n  }, [setFieldValue, onChange]);\n  return /*#__PURE__*/React.createElement(CheckboxGroup, _extends({\n    errorMessage: errorMessage\n  }, props, {\n    onChange: handleChange,\n    name: props.name,\n    value: value\n  }));\n}\nexport { FormCheckboxGroup };","map":{"version":3,"sources":["../../../../src/general-ui/checkbox-group/form-checkbox-group.component.tsx"],"names":["FormCheckboxGroup","props","onChange","getCustomErrorMessage","setFieldValue","value","errorMessage","useField","handleChange","useCallback","e","React","CheckboxGroup","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO,SAASA,iBAAiB,CAC7BC,KAA6E,EAClE;EACX,IAAQC,QAAQ,GAA4BD,KAAK,CAAzCC,QAAQ;IAAEC,qBAAAA,GAA0BF,KAAK,CAA/BE,qBAAAA;EAClB,IAAA,SAAA,GAA+CI,QAAQ,CAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EAChDN,KAAK,CAAA,EAAA,CAAA,CAAA,EAAA;MACRE,qBAAAA,EAAAA;IAAAA,CAAAA,CAAAA,CACF;IAHMC,aAAa,GAAA,SAAA,CAAbA,aAAa;IAAEC,KAAK,GAAA,SAAA,CAALA,KAAK;IAAEC,YAAAA,GAAAA,SAAAA,CAAAA,YAAAA;EAK9B,IAAME,YAAY,GAAGC,WAAW,CAC3BC,UAAAA,CAAC,EAAK;IACHR,QAAQ,IAAIA,QAAQ,CAACQ,CAAC,CAAC;IACvBN,aAAa,CAACM,CAAC,CAACL,KAAK,CAAC;EAC1B,CAAC,EACD,CAACD,aAAa,EAAEF,QAAQ,CAAC,CAC5B;EAED,OAAA,aACIS,KAAAA,CAAAA,aAAAA,CAACC,aAAa,EAAA,QAAA,CAAA;IACVN,YAAY,EAAEA;EAAa,CAAA,EACvBL,KAAK,EAAA;IACTC,QAAQ,EAAEM,YAAa;IACvBK,IAAI,EAAEZ,KAAK,CAACY,IAAe;IAC3BR,KAAK,EAAEA;EACT,CAAA,CAAA,CAAA;AAEV","sourcesContent":["import { useField } from '@common/hooks/use-field.hook';\nimport React, { useCallback } from 'react';\nimport { CheckboxGroup, ICheckboxGroupChangeHandler, ICheckboxGroupProps } from './checkbox-group.component';\n\nexport function FormCheckboxGroup<TFormValues>(\n    props: Omit<ICheckboxGroupProps<keyof TFormValues>, 'value' | 'defaultValue'>,\n): JSX.Element {\n    const { onChange, getCustomErrorMessage } = props;\n    const { setFieldValue, value, errorMessage } = useField<string[]>({\n        ...props,\n        getCustomErrorMessage,\n    });\n\n    const handleChange = useCallback<ICheckboxGroupChangeHandler>(\n        (e) => {\n            onChange && onChange(e);\n            setFieldValue(e.value);\n        },\n        [setFieldValue, onChange],\n    );\n\n    return (\n        <CheckboxGroup\n            errorMessage={errorMessage}\n            {...props}\n            onChange={handleChange}\n            name={props.name as string}\n            value={value}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"module"}