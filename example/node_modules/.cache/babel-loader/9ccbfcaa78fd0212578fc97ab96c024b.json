{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar const_constant = require('../constants/const.constant.js');\nvar dayjs = require('dayjs');\nvar dayjsEx_util = require('./dayjs-ex.util.js');\nvar isCypress_util = require('./is-cypress.util.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);\n\n// dayjs fails in the tests\nconst formatDate = date => {\n  if (!date) {\n    return 'Invalid date';\n  }\n  const d = new Date(date);\n  const month = '' + (d.getMonth() + 1);\n  const day = '' + d.getDate();\n  const year = d.getFullYear();\n\n  // dayjs fails in the tests\n  // return dayjs(date).format('YYYY-MM-DD');\n  return [year, month.length < 2 ? '0' + month : month, day.length < 2 ? '0' + day : day].join('-');\n};\nconst formatDateWithDayOfWeek = date => {\n  if (!date) {\n    return '';\n  }\n  return dayjsEx_util.dayjsEx(date).format('dddd, Do MMMM YYYY');\n};\nconst formatDateTimeWithHours = date => {\n  if (!date) {\n    return '';\n  }\n  return dayjsEx_util.dayjsEx(date).format('dddd, Do MMMM YYYY, hh:mma');\n};\nconst toServerDate = date => {\n  return dayjsEx_util.dayjsEx(date).format(const_constant.CONST.SERVER_DATE_FORMAT);\n};\nconst toServerTime = date => {\n  if (!date) {\n    return 'invlid date';\n  }\n  if (!isCypress_util.isCypress()) {\n    return dayjsEx_util.dayjsEx(date).utc().format('HH:mm');\n  }\n  const hours = '0' + date.getUTCHours();\n  const minutes = '0' + date.getUTCMinutes();\n  return `${hours.substring(hours.length - 2)}:${minutes.substring(minutes.length - 2)}`;\n};\nconst formatTime = date => {\n  return dayjs__default[\"default\"](date).format('hh:mma');\n};\nexports.formatDate = formatDate;\nexports.formatDateTimeWithHours = formatDateTimeWithHours;\nexports.formatDateWithDayOfWeek = formatDateWithDayOfWeek;\nexports.formatTime = formatTime;\nexports.toServerDate = toServerDate;\nexports.toServerTime = toServerTime;","map":{"version":3,"sources":["../../../src/utils/format-date.util.ts"],"names":["formatDate","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","formatDateWithDayOfWeek","dayjsEx","format","formatDateTimeWithHours","toServerDate","CONST","SERVER_DATE_FORMAT","toServerTime","isCypress","utc","hours","getUTCHours","minutes","getUTCMinutes","substring","formatTime","dayjs"],"mappings":";;;;;;;;;;;;;;;;AAKA;AACaA,MAAAA,UAAU,GAAIC,IAAwC,IAAa;EAC5E,IAAI,CAACA,IAAI,EAAE;IACP,OAAO,cAAc;EACzB;EACA,MAAMC,CAAC,GAAG,IAAIC,IAAI,CAACF,IAAI,CAAC;EACxB,MAAMG,KAAK,GAAG,EAAE,IAAIF,CAAC,CAACG,QAAQ,EAAE,GAAG,CAAC,CAAC;EACrC,MAAMC,GAAG,GAAG,EAAE,GAAGJ,CAAC,CAACK,OAAO,EAAE;EAC5B,MAAMC,IAAI,GAAGN,CAAC,CAACO,WAAW,EAAE;;EAE5B;EACA;EACA,OAAO,CAACD,IAAI,EAAEJ,KAAK,CAACM,MAAM,GAAG,CAAC,GAAG,GAAG,GAAGN,KAAK,GAAGA,KAAK,EAAEE,GAAG,CAACI,MAAM,GAAG,CAAC,GAAG,GAAG,GAAGJ,GAAG,GAAGA,GAAG,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC;AACrG,CAAA;AAEaC,MAAAA,uBAAuB,GAAIX,IAAsB,IAAa;EACvE,IAAI,CAACA,IAAI,EAAE;IACP,OAAO,EAAE;EACb;EACA,OAAOY,YAAAA,CAAAA,OAAO,CAACZ,IAAI,CAAC,CAACa,MAAM,CAAC,oBAAoB,CAAC;AACrD,CAAA;AAEaC,MAAAA,uBAAuB,GAAId,IAAsB,IAAa;EACvE,IAAI,CAACA,IAAI,EAAE;IACP,OAAO,EAAE;EACb;EACA,OAAOY,YAAAA,CAAAA,OAAO,CAACZ,IAAI,CAAC,CAACa,MAAM,CAAC,4BAA4B,CAAC;AAC7D,CAAA;AAEaE,MAAAA,YAAY,GAAIf,IAAsB,IAAa;EAC5D,OAAOY,YAAAA,CAAAA,OAAO,CAACZ,IAAI,CAAC,CAACa,MAAM,CAACG,cAAAA,CAAAA,KAAK,CAACC,kBAAkB,CAAC;AACzD,CAAA;AAEaC,MAAAA,YAAY,GAAIlB,IAAsB,IAAa;EAC5D,IAAI,CAACA,IAAI,EAAE;IACP,OAAO,aAAa;EACxB;EACA,IAAI,CAACmB,cAAAA,CAAAA,SAAS,EAAE,EAAE;IACd,OAAQP,YAAAA,CAAAA,OAAO,CAACZ,IAAI,CAAC,CAA2CoB,GAAG,EAAE,CAACP,MAAM,CAAC,OAAO,CAAC;EACzF;EACA,MAAMQ,KAAK,GAAG,GAAG,GAAGrB,IAAI,CAACsB,WAAW,EAAE;EACtC,MAAMC,OAAO,GAAG,GAAG,GAAGvB,IAAI,CAACwB,aAAa,EAAE;EAC1C,OAAQ,GAAEH,KAAK,CAACI,SAAS,CAACJ,KAAK,CAACZ,MAAM,GAAG,CAAC,CAAE,IAAGc,OAAO,CAACE,SAAS,CAACF,OAAO,CAACd,MAAM,GAAG,CAAC,CAAG,EAAA;AAC1F,CAAA;AAEaiB,MAAAA,UAAU,GAAI1B,IAAsB,IAAa;EAC1D,OAAO2B,cAAAA,CAAAA,SAAAA,CAAK,CAAC3B,IAAI,CAAC,CAACa,MAAM,CAAC,QAAQ,CAAC;AACvC,CAAA","sourcesContent":["import { CONST } from '@common/constants/const.constant';\nimport dayjs from 'dayjs';\nimport { dayjsEx } from './dayjs-ex.util';\nimport { isCypress } from './is-cypress.util';\n\n// dayjs fails in the tests\nexport const formatDate = (date: number | string | Date | undefined): string => {\n    if (!date) {\n        return 'Invalid date';\n    }\n    const d = new Date(date);\n    const month = '' + (d.getMonth() + 1);\n    const day = '' + d.getDate();\n    const year = d.getFullYear();\n\n    // dayjs fails in the tests\n    // return dayjs(date).format('YYYY-MM-DD');\n    return [year, month.length < 2 ? '0' + month : month, day.length < 2 ? '0' + day : day].join('-');\n};\n\nexport const formatDateWithDayOfWeek = (date: Date | undefined): string => {\n    if (!date) {\n        return '';\n    }\n    return dayjsEx(date).format('dddd, Do MMMM YYYY');\n};\n\nexport const formatDateTimeWithHours = (date: Date | undefined): string => {\n    if (!date) {\n        return '';\n    }\n    return dayjsEx(date).format('dddd, Do MMMM YYYY, hh:mma');\n};\n\nexport const toServerDate = (date: Date | undefined): string => {\n    return dayjsEx(date).format(CONST.SERVER_DATE_FORMAT);\n};\n\nexport const toServerTime = (date: Date | undefined): string => {\n    if (!date) {\n        return 'invlid date';\n    }\n    if (!isCypress()) {\n        return (dayjsEx(date) as unknown as { utc: () => dayjs.Dayjs }).utc().format('HH:mm');\n    }\n    const hours = '0' + date.getUTCHours();\n    const minutes = '0' + date.getUTCMinutes();\n    return `${hours.substring(hours.length - 2)}:${minutes.substring(minutes.length - 2)}`;\n};\n\nexport const formatTime = (date: Date | undefined): string => {\n    return dayjs(date).format('hh:mma');\n};\n"]},"metadata":{},"sourceType":"script"}