{"ast":null,"code":"import * as React from 'react';\nimport { memo, useState, useEffect, useCallback, useMemo, useContext } from 'react';\nimport * as ReactDOM from 'react-dom';\n\n/**\r\n * Throw error when ModalContext is used outside of context provider\r\n */\nvar invariantViolation = function invariantViolation() {\n  throw new Error(\"Attempted to call useModal outside of modal context. Make sure your app is rendered inside ModalProvider.\");\n};\n/**\r\n * Modal Context Object\r\n */\nvar ModalContext = React.createContext({\n  showModal: invariantViolation,\n  hideModal: invariantViolation\n});\nModalContext.displayName = 'ModalContext';\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return _assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\n/**\r\n * Component responsible for rendering the modal.\r\n *\r\n * The identity of `Component` may change dependeing on the inputs passed to\r\n * `useModal`. If we simply rendered `<Component />` then the modal would be\r\n * susceptible to rerenders whenever one of the inputs change.\r\n */\nvar ModalRenderer = memo(function (_a) {\n  var component = _a.component,\n    rest = __rest(_a, [\"component\"]);\n  return component(rest);\n});\n/**\r\n * Modal Root\r\n *\r\n * Renders modals using react portal.\r\n */\nvar ModalRoot = memo(function (_a) {\n  var modals = _a.modals,\n    container = _a.container,\n    _b = _a.component,\n    RootComponent = _b === void 0 ? React.Fragment : _b;\n  var _c = useState(undefined),\n    mountNode = _c[0],\n    setMountNode = _c[1];\n  // This effect will not be ran in the server environment\n  useEffect(function () {\n    return setMountNode(container || document.body);\n  });\n  return mountNode ? ReactDOM.createPortal(React.createElement(RootComponent, null, Object.keys(modals).map(function (key) {\n    return React.createElement(ModalRenderer, {\n      key: key,\n      component: modals[key]\n    });\n  })), mountNode) : null;\n});\n\n/**\r\n * Modal Provider\r\n *\r\n * Provides modal context and renders ModalRoot.\r\n */\nvar ModalProvider = function ModalProvider(_a) {\n  var container = _a.container,\n    rootComponent = _a.rootComponent,\n    children = _a.children;\n  if (container && !(container instanceof HTMLElement)) {\n    throw new Error(\"Container must specify DOM element to mount modal root into.\\n\\n    This behavior has changed in 3.0.0. Please use `rootComponent` prop instead.\\n    See: https://github.com/mpontus/react-modal-hook/issues/18\");\n  }\n  var _b = useState({}),\n    modals = _b[0],\n    setModals = _b[1];\n  var showModal = useCallback(function (key, modal) {\n    return setModals(function (modals) {\n      var _a;\n      return _assign(_assign({}, modals), (_a = {}, _a[key] = modal, _a));\n    });\n  }, []);\n  var hideModal = useCallback(function (key) {\n    return setModals(function (modals) {\n      if (!modals[key]) {\n        return modals;\n      }\n      var newModals = _assign({}, modals);\n      delete newModals[key];\n      return newModals;\n    });\n  }, []);\n  var contextValue = useMemo(function () {\n    return {\n      showModal: showModal,\n      hideModal: hideModal\n    };\n  }, []);\n  return React.createElement(ModalContext.Provider, {\n    value: contextValue\n  }, React.createElement(React.Fragment, null, children, React.createElement(ModalRoot, {\n    modals: modals,\n    component: rootComponent,\n    container: container\n  })));\n};\n\n/**\r\n * Utility function to generate unique number per component instance\r\n */\nvar generateModalKey = function () {\n  var count = 0;\n  return function () {\n    return \"\".concat(++count);\n  };\n}();\n/**\r\n * Check whether the argument is a stateless component.\r\n *\r\n * We take advantage of the stateless nature of functional components to be\r\n * inline the rendering of the modal component as part of another immutable\r\n * component.\r\n *\r\n * This is necessary for allowing the modal to update based on the inputs passed\r\n * as the second argument to useModal without unmounting the previous version of\r\n * the modal component.\r\n */\nvar isFunctionalComponent = function isFunctionalComponent(Component) {\n  var prototype = Component.prototype;\n  return !prototype || !prototype.isReactComponent;\n};\n/**\r\n * React hook for showing modal windows\r\n */\nvar useModal = function useModal(component, inputs) {\n  if (inputs === void 0) {\n    inputs = [];\n  }\n  if (!isFunctionalComponent(component)) {\n    throw new Error(\"Only stateless components can be used as an argument to useModal. You have probably passed a class component where a function was expected.\");\n  }\n  var key = useMemo(generateModalKey, []);\n  var modal = useMemo(function () {\n    return component;\n  }, inputs);\n  var context = useContext(ModalContext);\n  var _a = useState(false),\n    isShown = _a[0],\n    setShown = _a[1];\n  var showModal = useCallback(function () {\n    return setShown(true);\n  }, []);\n  var hideModal = useCallback(function () {\n    return setShown(false);\n  }, []);\n  useEffect(function () {\n    if (isShown) {\n      context.showModal(key, modal);\n    } else {\n      context.hideModal(key);\n    }\n    // Hide modal when parent component unmounts\n    return function () {\n      return context.hideModal(key);\n    };\n  }, [modal, isShown]);\n  return [showModal, hideModal];\n};\nexport { ModalContext, ModalProvider, useModal };","map":{"version":3,"sources":["../src/ModalContext.ts","../src/ModalRoot.tsx","../src/ModalProvider.tsx","../src/useModal.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\n\n/**\n * Modals are represented as react components\n *\n * This is what gets passed to useModal as the first argument.\n */\nexport type ModalType = React.FunctionComponent<any>;\n\n/**\n * The shape of the modal context\n */\nexport interface ModalContextType {\n  showModal(key: string, component: ModalType): void;\n  hideModal(key: string): void;\n}\n\n/**\n * Throw error when ModalContext is used outside of context provider\n */\nconst invariantViolation = () => {\n  throw new Error(\n    \"Attempted to call useModal outside of modal context. Make sure your app is rendered inside ModalProvider.\"\n  );\n};\n\n/**\n * Modal Context Object\n */\nexport const ModalContext = React.createContext<ModalContextType>({\n  showModal: invariantViolation,\n  hideModal: invariantViolation\n});\nModalContext.displayName = 'ModalContext';\n","import { memo, useState, useEffect } from \"react\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { ModalType } from \"./ModalContext\";\n\n/**\n * Modal Root Props\n */\ninterface ModalRootProps {\n  /**\n   * Map of modal instances associated by unique ids\n   */\n  modals: Record<string, ModalType>;\n\n  /**\n   * Container component for modals\n   *\n   * Modals will be rendered as children of this component. React.Fragment is\n   * used by defualt, specifying a different component can change the way modals\n   * are rendered across the whole application.\n   */\n  component?: React.ComponentType<any>;\n\n  /**\n   * Specifies the root element to render modals into\n   */\n  container?: Element;\n}\n\n/**\n * Modal renderer props\n */\ninterface ModalRendererProps {\n  /**\n   * Functional component representing the modal\n   */\n  component: ModalType;\n}\n\n/**\n * Component responsible for rendering the modal.\n *\n * The identity of `Component` may change dependeing on the inputs passed to\n * `useModal`. If we simply rendered `<Component />` then the modal would be\n * susceptible to rerenders whenever one of the inputs change.\n */\nconst ModalRenderer = memo(({ component, ...rest }: ModalRendererProps) =>\n  component(rest)\n);\n\n/**\n * Modal Root\n *\n * Renders modals using react portal.\n */\nexport const ModalRoot = memo(\n  ({\n    modals,\n    container,\n    component: RootComponent = React.Fragment\n  }: ModalRootProps) => {\n    const [mountNode, setMountNode] = useState<Element | undefined>(undefined);\n\n    // This effect will not be ran in the server environment\n    useEffect(() => setMountNode(container || document.body));\n\n    return mountNode\n      ? ReactDOM.createPortal(\n          <RootComponent>\n            {Object.keys(modals).map(key => (\n              <ModalRenderer key={key} component={modals[key]} />\n            ))}\n          </RootComponent>,\n          mountNode\n        )\n      : null;\n  }\n);\n","import { useCallback, useState, useMemo } from \"react\";\nimport * as React from \"react\";\nimport { ModalType, ModalContext } from \"./ModalContext\";\nimport { ModalRoot } from \"./ModalRoot\";\n\n/**\n * Modal Provider Props\n */\nexport interface ModalProviderProps {\n  /**\n   * Specifies the root element to render modals into\n   */\n  container?: Element;\n\n  /**\n   * Container component for modal nodes\n   */\n  rootComponent?: React.ComponentType<any>;\n\n  /**\n   * Subtree that will receive modal context\n   */\n  children: React.ReactNode;\n}\n\n/**\n * Modal Provider\n *\n * Provides modal context and renders ModalRoot.\n */\nexport const ModalProvider = ({\n  container,\n  rootComponent,\n  children\n}: ModalProviderProps) => {\n  if (container && !(container instanceof HTMLElement)) {\n    throw new Error(`Container must specify DOM element to mount modal root into.\n\n    This behavior has changed in 3.0.0. Please use \\`rootComponent\\` prop instead.\n    See: https://github.com/mpontus/react-modal-hook/issues/18`);\n  }\n  const [modals, setModals] = useState<Record<string, ModalType>>({});\n  const showModal = useCallback(\n    (key: string, modal: ModalType) =>\n      setModals(modals => ({\n        ...modals,\n        [key]: modal\n      })),\n    []\n  );\n  const hideModal = useCallback(\n    (key: string) =>\n      setModals(modals => {\n        if (!modals[key]) {\n          return modals;\n        }\n        const newModals = { ...modals };\n        delete newModals[key];\n        return newModals;\n      }),\n    []\n  );\n  const contextValue = useMemo(() => ({ showModal, hideModal }), []);\n\n  return (\n    <ModalContext.Provider value={contextValue}>\n      <React.Fragment>\n        {children}\n        <ModalRoot\n          modals={modals}\n          component={rootComponent}\n          container={container}\n        />\n      </React.Fragment>\n    </ModalContext.Provider>\n  );\n};\n","import { useContext, useEffect, useState, useCallback, useMemo, DependencyList } from \"react\";\nimport { ModalContext, ModalType } from \"./ModalContext\";\n\n/**\n * Callback types provided for descriptive type-hints\n */\ntype ShowModal = () => void;\ntype HideModal = () => void;\n\n/**\n * Utility function to generate unique number per component instance\n */\nconst generateModalKey = (() => {\n  let count = 0;\n\n  return () => `${++count}`;\n})();\n\n/**\n * Check whether the argument is a stateless component.\n *\n * We take advantage of the stateless nature of functional components to be\n * inline the rendering of the modal component as part of another immutable\n * component.\n *\n * This is necessary for allowing the modal to update based on the inputs passed\n * as the second argument to useModal without unmounting the previous version of\n * the modal component.\n */\nconst isFunctionalComponent = (Component: Function) => {\n  const prototype = Component.prototype;\n\n  return !prototype || !prototype.isReactComponent;\n};\n\n/**\n * React hook for showing modal windows\n */\nexport const useModal = (\n  component: ModalType,\n  inputs: DependencyList = []\n): [ShowModal, HideModal] => {\n  if (!isFunctionalComponent(component)) {\n    throw new Error(\n      \"Only stateless components can be used as an argument to useModal. You have probably passed a class component where a function was expected.\"\n    );\n  }\n\n  const key = useMemo(generateModalKey, []);\n  const modal = useMemo(() => component, inputs);\n  const context = useContext(ModalContext);\n  const [isShown, setShown] = useState<boolean>(false);\n  const showModal = useCallback(() => setShown(true), []);\n  const hideModal = useCallback(() => setShown(false), []);\n\n  useEffect(() => {\n    if (isShown) {\n      context.showModal(key, modal);\n    } else {\n      context.hideModal(key);\n    }\n\n    // Hide modal when parent component unmounts\n    return () => context.hideModal(key);\n  }, [modal, isShown]);\n\n  return [showModal, hideModal];\n};\n"]},"metadata":{},"sourceType":"module"}