{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');\nvar getTranslationPrefix_util = require('../utils/get-translation-prefix.util.js');\nvar i18n = require('i18next');\nvar React = require('react');\nvar reactI18next = require('react-i18next');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar i18n__default = /*#__PURE__*/_interopDefaultLegacy(i18n);\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\n// interface IReturn {\n//     t: (i18nKey: string, description?: TTranslationCategory, options?: any) => any;\n// }\n\n// export const useT = (): IReturn => {\n//     const { t } = useTranslation();\n//     return {\n//         t: (translation, _description, options): string => {\n//             const localePrefix = i18n.exists(translation) ? getCurrentLocaleTranslationPrefix() : '';\n//             return `${getTranslationPrefix()}${localePrefix}${t(translation, options)}`;\n//         },\n//     };\n// };\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction t(i18nKey, _description, options) {\n  const localePrefix = i18n__default[\"default\"].exists(i18nKey) ? getTranslationPrefix_util.getCurrentLocaleTranslationPrefix() : '';\n  return `${getTranslationPrefix_util.getTranslationPrefix()}${localePrefix}${i18n__default[\"default\"].t(i18nKey, options) || i18nKey}`;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction T(_ref) {\n  let {\n    children,\n    i18nKey,\n    ...rest\n  } = _ref;\n  const localePrefix = i18nKey && i18n__default[\"default\"].exists(i18nKey) ? getTranslationPrefix_util.getCurrentLocaleTranslationPrefix() : '';\n  return /*#__PURE__*/React__default[\"default\"].createElement(React__default[\"default\"].Fragment, null, getTranslationPrefix_util.getTranslationPrefix(), localePrefix, /*#__PURE__*/React__default[\"default\"].createElement(reactI18next.Trans, _rollupPluginBabelHelpers[\"extends\"]({\n    i18nKey: i18nKey\n  }, rest), children));\n}\nexports.T = T;\nexports.t = t;","map":{"version":3,"sources":["../../../src/hooks/use-t.hook.tsx"],"names":["t","i18nKey","_description","options","localePrefix","i18n","exists","getCurrentLocaleTranslationPrefix","getTranslationPrefix","T","children","rest","React","Trans"],"mappings":";;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO,SAASA,CAAC,CAACC,OAAe,EAAEC,YAAmC,EAAEC,OAAiC,EAAU;EAC/G,MAAMC,YAAY,GAAGC,aAAAA,CAAAA,SAAAA,CAAI,CAACC,MAAM,CAACL,OAAO,CAAC,GAAGM,yBAAAA,CAAAA,iCAAiC,EAAE,GAAG,EAAE;EACpF,OAAQ,GAAEC,yBAAAA,CAAAA,oBAAoB,EAAKJ,GAAAA,YAAa,GAAEC,aAAAA,CAAAA,SAAAA,CAAI,CAACL,CAAC,CAACC,OAAO,EAAEE,OAAO,CAAC,IAAIF,OAAS,EAAA;AAC3F;AAOA;AACO,SAASQ,CAAC,OAA4D;EAAA,IAA3D;IAAEC,QAAQ;IAAET,OAAO;IAAE,GAAGU;EAAmB,CAAC;EAC1D,MAAMP,YAAY,GAAGH,OAAO,IAAII,aAAAA,CAAAA,SAAAA,CAAI,CAACC,MAAM,CAACL,OAAO,CAAC,GAAGM,yBAAAA,CAAAA,iCAAiC,EAAE,GAAG,EAAE;EAC/F,OAAA,aACIK,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAAAA,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EACKJ,yBAAAA,CAAAA,oBAAoB,EAAE,EACtBJ,YAAY,EAAA,aACbQ,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAACC,YAAAA,CAAAA,KAAK,EAAA,yBAAA,CAAA,SAAA,CAAA,CAAA;IAAC,OAAO,EAAEZ;EAAQ,CAAA,EAAKU,IAAI,CAAA,EAC5BD,QAAQ,CACL,CACT;AAEX","sourcesContent":["import { getCurrentLocaleTranslationPrefix, getTranslationPrefix } from '@common/utils/get-translation-prefix.util';\nimport i18n, { TOptions } from 'i18next';\nimport React, { ReactNode } from 'react';\nimport { Trans } from 'react-i18next';\n\n// interface IReturn {\n//     t: (i18nKey: string, description?: TTranslationCategory, options?: any) => any;\n// }\n\ntype TTranslationCategory = string;\n// export const useT = (): IReturn => {\n//     const { t } = useTranslation();\n//     return {\n//         t: (translation, _description, options): string => {\n//             const localePrefix = i18n.exists(translation) ? getCurrentLocaleTranslationPrefix() : '';\n//             return `${getTranslationPrefix()}${localePrefix}${t(translation, options)}`;\n//         },\n//     };\n// };\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function t(i18nKey: string, _description?: TTranslationCategory, options?: string | TOptions | any): string {\n    const localePrefix = i18n.exists(i18nKey) ? getCurrentLocaleTranslationPrefix() : '';\n    return `${getTranslationPrefix()}${localePrefix}${i18n.t(i18nKey, options) || i18nKey}`;\n}\n\ninterface IProps {\n    i18nKey?: string;\n    children: JSX.Element | JSX.Element[] | ReactNode;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function T({ children, i18nKey, ...rest }: IProps & any): JSX.Element {\n    const localePrefix = i18nKey && i18n.exists(i18nKey) ? getCurrentLocaleTranslationPrefix() : '';\n    return (\n        <>\n            {getTranslationPrefix()}\n            {localePrefix}\n            <Trans i18nKey={i18nKey} {...rest}>\n                {children}\n            </Trans>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"script"}