{"ast":null,"code":"import { localStorageService } from '../services/local-storage.service.js';\nimport { useState, useMemo } from 'react';\nconst KEY = `ui-settings`;\nfunction useTableUISettings(_ref) {\n  let {\n    name,\n    initial = {\n      chooserColumns: []\n    }\n  } = _ref;\n  const fromStorage = localStorageService.load(KEY, {\n    chooserColumns: []\n  });\n  const [ui, setUI] = useState(fromStorage && fromStorage[name] ? fromStorage[name] : initial);\n  return useMemo(() => {\n    return {\n      tableUISettings: ui,\n      saveTableUISettings: data => {\n        const prev = localStorageService.load(KEY, {});\n        setUI(data);\n        localStorageService.save(KEY, {\n          ...prev,\n          [name]: data\n        });\n      }\n    };\n  }, [name, ui]);\n}\nexport { useTableUISettings };","map":{"version":3,"sources":["../../../src/hooks/use-ui-settings.hook.ts"],"names":["KEY","useTableUISettings","name","initial","chooserColumns","fromStorage","localStorageService","load","ui","setUI","useState","useMemo","tableUISettings","saveTableUISettings","data","prev","save"],"mappings":";;AAcA,MAAMA,GAAG,GAAgB,aAAA;AAElB,SAASC,kBAAkB,OAA8D;EAAA,IAA7D;IAAEC,IAAI;IAAEC,OAAO,GAAG;MAAEC,cAAc,EAAE;IAAG;EAAU,CAAC;EACjF,MAAMC,WAAW,GAAGC,mBAAmB,CAACC,IAAI,CAAmBP,GAAG,EAAE;IAAEI,cAAc,EAAE;EAAG,CAAC,CAAC;EAC3F,MAAM,CAACI,EAAE,EAAEC,KAAK,CAAC,GAAGC,QAAQ,CAAmBL,WAAW,IAAIA,WAAW,CAACH,IAAI,CAAC,GAAGG,WAAW,CAACH,IAAI,CAAC,GAAGC,OAAO,CAAC;EAE9G,OAAOQ,OAAO,CAAC,MAAe;IAC1B,OAAO;MACHC,eAAe,EAAEJ,EAAE;MACnBK,mBAAmB,EAAGC,IAAsB,IAAW;QACnD,MAAMC,IAAI,GAAGT,mBAAmB,CAACC,IAAI,CAACP,GAAG,EAAE,CAAA,CAAE,CAAC;QAE9CS,KAAK,CAACK,IAAI,CAAC;QACXR,mBAAmB,CAACU,IAAI,CAAChB,GAAG,EAAE;UAC1B,GAAGe,IAAI;UACP,CAACb,IAAI,GAAGY;QACZ,CAAC,CAAC;MACN;KACH;EACL,CAAC,EAAE,CAACZ,IAAI,EAAEM,EAAE,CAAC,CAAC;AAClB","sourcesContent":["import { ITableUISettings } from '@common/interfaces/ui-settings.interface';\nimport { localStorageService } from '@common/services/local-storage.service';\nimport { useMemo, useState } from 'react';\n\ninterface IProps {\n    initial?: ITableUISettings;\n    name: string;\n}\n\ninterface IResult {\n    tableUISettings: ITableUISettings;\n    saveTableUISettings: (data: ITableUISettings) => void;\n}\n\nconst KEY = `ui-settings`;\n\nexport function useTableUISettings({ name, initial = { chooserColumns: [] } }: IProps): IResult {\n    const fromStorage = localStorageService.load<ITableUISettings>(KEY, { chooserColumns: [] });\n    const [ui, setUI] = useState<ITableUISettings>(fromStorage && fromStorage[name] ? fromStorage[name] : initial);\n\n    return useMemo((): IResult => {\n        return {\n            tableUISettings: ui,\n            saveTableUISettings: (data: ITableUISettings): void => {\n                const prev = localStorageService.load(KEY, {});\n\n                setUI(data);\n                localStorageService.save(KEY, {\n                    ...prev,\n                    [name]: data,\n                });\n            },\n        };\n    }, [name, ui]);\n}\n"]},"metadata":{},"sourceType":"module"}