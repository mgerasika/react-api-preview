{"ast":null,"code":"/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\n/**\n * Dispatches an event on the passed element.\n * @param {!Element} element The DOM element to dispatch the event on.\n * @param {string} eventType The type of event to dispatch.\n * @param {Object|string=} eventName A string name of the event constructor\n *     to use. Defaults to 'Event' if nothing is passed or 'CustomEvent' if\n *     a value is set on `initDict.detail`. If eventName is given an object\n *     it is assumed to be initDict and thus reassigned.\n * @param {Object=} initDict The initialization attributes for the\n *     event. A `detail` property can be used here to pass custom data.\n * @return {boolean} The return value of `element.dispatchEvent`, which will\n *     be false if any of the event listeners called `preventDefault`.\n */\nexport function dispatch(element, eventType, evtName, init_dict) {\n  if (evtName === void 0) {\n    evtName = 'Event';\n  }\n  if (init_dict === void 0) {\n    init_dict = {};\n  }\n  var event;\n  var isCustom;\n  var initDict = init_dict;\n  var eventName = evtName;\n  // eventName is optional\n  if (typeof eventName === 'object') {\n    initDict = eventName;\n    eventName = 'Event';\n  }\n  initDict['bubbles'] = initDict['bubbles'] || false;\n  initDict['cancelable'] = initDict['cancelable'] || false;\n  initDict['composed'] = initDict['composed'] || false;\n  // If a detail property is passed, this is a custom event.\n  if ('detail' in initDict) isCustom = true;\n  eventName = isCustom ? 'CustomEvent' : eventName;\n  // Tries to create the event using constructors, if that doesn't work,\n  // fallback to `document.createEvent()`.\n  try {\n    event = new window[eventName](eventType, initDict);\n  } catch (err) {\n    event = document.createEvent(eventName);\n    var initMethod = 'init' + (isCustom ? 'Custom' : '') + 'Event';\n    event[initMethod](eventType, initDict['bubbles'], initDict['cancelable'], initDict['detail']);\n  }\n  return element.dispatchEvent(event);\n}","map":{"version":3,"sources":["../../../src/vendor/dom-utils/dispatch.ts"],"names":[],"mappings":"AAAA;;AAEG;AAEH;;;;;;;;;;;;AAYG;AACH,OAAM,SAAU,QAAQ,CACvB,OAAO,EACP,SAAS,EACT,OAAiB,EACjB,SAAc,EAAA;EADd,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;IAAA,OAAA,GAAA,OAAiB;EAAA;EACjB,IAAA,SAAA,KAAA,KAAA,CAAA,EAAA;IAAA,SAAA,GAAA,CAAA,CAAc;EAAA;EAEd,IAAI,KAAK;EACT,IAAI,QAAQ;EACZ,IAAI,QAAQ,GAAG,SAAS;EACxB,IAAI,SAAS,GAAG,OAAO;EAEvB;EACA,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;IAClC,QAAQ,GAAG,SAAS;IACpB,SAAS,GAAG,OAAO;EACnB;EAED,QAAQ,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,KAAK;EAClD,QAAQ,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,KAAK;EACxD,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,IAAI,KAAK;EAEpD;EACA,IAAI,QAAQ,IAAI,QAAQ,EAAE,QAAQ,GAAG,IAAI;EACzC,SAAS,GAAG,QAAQ,GAAG,aAAa,GAAG,SAAS;EAEhD;EACA;EACA,IAAI;IACH,KAAK,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC;GAClD,CAAC,OAAO,GAAG,EAAE;IACb,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;IACvC,IAAM,UAAU,GAAG,MAAM,IAAI,QAAQ,GAAG,QAAQ,GAAG,EAAE,CAAC,GAAG,OAAO;IAChE,KAAK,CAAC,UAAU,CAAC,CAChB,SAAS,EACT,QAAQ,CAAC,SAAS,CAAC,EACnB,QAAQ,CAAC,YAAY,CAAC,EACtB,QAAQ,CAAC,QAAQ,CAAC,CAClB;EACD;EAED,OAAO,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC;AACpC","sourceRoot":"","sourcesContent":["/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\n/**\n * Dispatches an event on the passed element.\n * @param {!Element} element The DOM element to dispatch the event on.\n * @param {string} eventType The type of event to dispatch.\n * @param {Object|string=} eventName A string name of the event constructor\n *     to use. Defaults to 'Event' if nothing is passed or 'CustomEvent' if\n *     a value is set on `initDict.detail`. If eventName is given an object\n *     it is assumed to be initDict and thus reassigned.\n * @param {Object=} initDict The initialization attributes for the\n *     event. A `detail` property can be used here to pass custom data.\n * @return {boolean} The return value of `element.dispatchEvent`, which will\n *     be false if any of the event listeners called `preventDefault`.\n */\nexport function dispatch(element, eventType, evtName, init_dict) {\n    if (evtName === void 0) { evtName = 'Event'; }\n    if (init_dict === void 0) { init_dict = {}; }\n    var event;\n    var isCustom;\n    var initDict = init_dict;\n    var eventName = evtName;\n    // eventName is optional\n    if (typeof eventName === 'object') {\n        initDict = eventName;\n        eventName = 'Event';\n    }\n    initDict['bubbles'] = initDict['bubbles'] || false;\n    initDict['cancelable'] = initDict['cancelable'] || false;\n    initDict['composed'] = initDict['composed'] || false;\n    // If a detail property is passed, this is a custom event.\n    if ('detail' in initDict)\n        isCustom = true;\n    eventName = isCustom ? 'CustomEvent' : eventName;\n    // Tries to create the event using constructors, if that doesn't work,\n    // fallback to `document.createEvent()`.\n    try {\n        event = new window[eventName](eventType, initDict);\n    }\n    catch (err) {\n        event = document.createEvent(eventName);\n        var initMethod = 'init' + (isCustom ? 'Custom' : '') + 'Event';\n        event[initMethod](eventType, initDict['bubbles'], initDict['cancelable'], initDict['detail']);\n    }\n    return element.dispatchEvent(event);\n}\n//# sourceMappingURL=dispatch.js.map"]},"metadata":{},"sourceType":"module"}