{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');\nvar field_component = require('../field/field.component.js');\nvar readonly_component = require('../readonly.component.js');\nvar antd = require('antd');\nvar React = require('react');\nvar input_component = require('./input.component.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nconst InputNumber = props => {\n  const {\n    size,\n    errorMessage,\n    helperText,\n    value,\n    validate: registerOptions,\n    ...rest\n  } = props;\n  const [val, setVal] = React.useState(props.defaultValue || props.value);\n  React.useEffect(() => {\n    if (props.value !== undefined) {\n      setVal(props.value);\n    }\n  }, [props.value]);\n  React.useEffect(() => {\n    if (props.defaultValue !== undefined) {\n      setVal(props.defaultValue);\n    }\n  }, [props.defaultValue]);\n  const handleChange = React.useCallback(e => {\n    // eslint-disable-next-line no-useless-escape\n    let newValueStr = e.target.value.replaceAll(/[^-0-9\\.]/g, '');\n    newValueStr = newValueStr.replaceAll(/--/g, '-');\n    if (newValueStr.split('.').length > 2) {\n      newValueStr = value?.toString() || '';\n    }\n    if (newValueStr === '.') {\n      newValueStr = '';\n    }\n    setVal(newValueStr);\n    props.onChange && props.onChange({\n      ...e,\n      target: {\n        ...e.target,\n        value: newValueStr\n      }\n    });\n  }, [props, value]);\n  const handleBlur = React.useCallback(e => {\n    props.onBlur && props.onBlur({\n      ...e,\n      target: {\n        ...e.target,\n        value: e.target.value\n      }\n    });\n  }, [props]);\n  const formatText = React.useMemo(() => {\n    return val !== undefined ? `${val}` : '';\n  }, [val]);\n  return /*#__PURE__*/React__default[\"default\"].createElement(field_component.Field, props, /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n    tw: \"relative\"\n  }, props.readOnly && /*#__PURE__*/React__default[\"default\"].createElement(readonly_component.Readonly, null), /*#__PURE__*/React__default[\"default\"].createElement(antd.Input, _rollupPluginBabelHelpers[\"extends\"]({}, rest, {\n    prefix: props.prefix,\n    maxLength: props.maxLength,\n    tabIndex: props.readOnly ? -1 : 0,\n    type: \"text\",\n    css: input_component.inputStyles.input(!!props.readOnly),\n    value: formatText,\n    onChange: handleChange,\n    onPaste: handleChange,\n    onBlur: handleBlur\n  }))));\n};\nexports.InputNumber = InputNumber;","map":{"version":3,"sources":["../../../../src/general-ui/input/input-number.component.tsx"],"names":["InputNumber","props","size","errorMessage","helperText","value","validate","registerOptions","rest","val","setVal","useState","defaultValue","useEffect","undefined","handleChange","useCallback","e","newValueStr","target","replaceAll","split","length","toString","onChange","handleBlur","onBlur","formatText","useMemo","React","readOnly","Readonly","AntdInput","prefix","maxLength","inputStyles","input"],"mappings":"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","sourcesContent":["import { Field } from '@common/general-ui/field/field.component';\nimport { Readonly } from '@common/general-ui/readonly.component';\nimport { Input as AntdInput } from 'antd';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { IInputProps, inputStyles } from './input.component';\n\nexport const InputNumber = (props: IInputProps): JSX.Element => {\n    const { size, errorMessage, helperText, value, validate: registerOptions, ...rest } = props;\n\n    const [val, setVal] = useState(props.defaultValue || props.value);\n    useEffect(() => {\n        if (props.value !== undefined) {\n            setVal(props.value);\n        }\n    }, [props.value]);\n\n    useEffect(() => {\n        if (props.defaultValue !== undefined) {\n            setVal(props.defaultValue);\n        }\n    }, [props.defaultValue]);\n\n    const handleChange = useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            // eslint-disable-next-line no-useless-escape\n            let newValueStr = e.target.value.replaceAll(/[^-0-9\\.]/g, '');\n            newValueStr = newValueStr.replaceAll(/--/g, '-');\n            if (newValueStr.split('.').length > 2) {\n                newValueStr = value?.toString() || '';\n            }\n            if (newValueStr === '.') {\n                newValueStr = '';\n            }\n\n            setVal(newValueStr);\n            props.onChange && props.onChange({ ...e, target: { ...e.target, value: newValueStr as unknown as string } });\n        },\n        [props, value],\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            props.onBlur && props.onBlur({ ...e, target: { ...e.target, value: e.target.value } });\n        },\n        [props],\n    );\n\n    const formatText = useMemo(() => {\n        return val !== undefined ? `${val}` : '';\n    }, [val]);\n\n    return (\n        <Field {...props}>\n            <div tw=\"relative\">\n                {props.readOnly && <Readonly />}\n                <AntdInput\n                    {...rest}\n                    prefix={props.prefix}\n                    maxLength={props.maxLength}\n                    tabIndex={props.readOnly ? -1 : 0}\n                    type=\"text\"\n                    css={inputStyles.input(!!props.readOnly)}\n                    value={formatText}\n                    onChange={handleChange}\n                    onPaste={handleChange as unknown as React.ClipboardEventHandler}\n                    onBlur={handleBlur}\n                />\n            </div>\n        </Field>\n    );\n};\n"]},"metadata":{},"sourceType":"script"}