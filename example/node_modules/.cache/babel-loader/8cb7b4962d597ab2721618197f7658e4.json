{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport { TranslateClient, TranslateTextCommand } from '@aws-sdk/client-translate';\nimport { PollyClient, SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\nimport { isBytesSource } from '../types';\nimport { Credentials, ConsoleLogger as Logger, Signer, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { EventStreamMarshaller } from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nvar logger = new Logger('AmazonAIConvertPredictionsProvider');\nvar eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\nvar LANGUAGES_CODE_IN_8KHZ = ['fr-FR', 'en-AU', 'en-GB', 'fr-CA'];\nvar AmazonAIConvertPredictionsProvider = /** @class */function (_super) {\n  __extends(AmazonAIConvertPredictionsProvider, _super);\n  function AmazonAIConvertPredictionsProvider() {\n    var _this = _super.call(this) || this;\n    _this.inputSampleRate = 44100;\n    return _this;\n  }\n  AmazonAIConvertPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIConvertPredictionsProvider';\n  };\n  AmazonAIConvertPredictionsProvider.prototype.translateText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, _c, _d, _e, sourceLanguage, _f, targetLanguage, _g, region, credentials, sourceLanguageCode, targetLanguageCode, translateTextCommand, data, err_1;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            logger.debug('Starting translation');\n            _a = this._config.translateText, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = _c === void 0 ? {} : _c, _e = _d.sourceLanguage, sourceLanguage = _e === void 0 ? '' : _e, _f = _d.targetLanguage, targetLanguage = _f === void 0 ? '' : _f, _g = _b.region, region = _g === void 0 ? '' : _g;\n            if (!region) {\n              return [2 /*return*/, Promise.reject('region not configured for transcription')];\n            }\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _h.sent();\n            if (!credentials) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            sourceLanguageCode = input.translateText.source.language || sourceLanguage;\n            targetLanguageCode = input.translateText.targetLanguage || targetLanguage;\n            if (!sourceLanguageCode || !targetLanguageCode) {\n              return [2 /*return*/, Promise.reject('Please provide both source and target language')];\n            }\n            this.translateClient = new TranslateClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            translateTextCommand = new TranslateTextCommand({\n              SourceLanguageCode: sourceLanguageCode,\n              TargetLanguageCode: targetLanguageCode,\n              Text: input.translateText.source.text\n            });\n            _h.label = 2;\n          case 2:\n            _h.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, this.translateClient.send(translateTextCommand)];\n          case 3:\n            data = _h.sent();\n            return [2 /*return*/, {\n              text: data.TranslatedText,\n              language: data.TargetLanguageCode\n            }];\n          case 4:\n            err_1 = _h.sent();\n            return [2 /*return*/, Promise.reject(err_1)];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertTextToSpeech = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, _d, VoiceId, _e, region, voiceId, synthesizeSpeechCommand, data, response, arrayBuffer, blob, url, err_2;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _f.sent();\n            if (!credentials) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            _a = this._config.speechGenerator, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).VoiceId, VoiceId = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n            if (!input.textToSpeech.source) {\n              return [2 /*return*/, Promise.reject('Source needs to be provided in the input')];\n            }\n            voiceId = input.textToSpeech.voiceId || VoiceId;\n            if (!region) {\n              return [2 /*return*/, Promise.reject('Region was undefined. Did you enable speech generator using amplify CLI?')];\n            }\n            if (!voiceId) {\n              return [2 /*return*/, Promise.reject('VoiceId was undefined.')];\n            }\n            this.pollyClient = new PollyClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            synthesizeSpeechCommand = new SynthesizeSpeechCommand({\n              OutputFormat: 'mp3',\n              Text: input.textToSpeech.source.text,\n              VoiceId: voiceId,\n              TextType: 'text',\n              SampleRate: '24000'\n            });\n            _f.label = 2;\n          case 2:\n            _f.trys.push([2, 5,, 6]);\n            return [4 /*yield*/, this.pollyClient.send(synthesizeSpeechCommand)];\n          case 3:\n            data = _f.sent();\n            response = new Response(data.AudioStream);\n            return [4 /*yield*/, response.arrayBuffer()];\n          case 4:\n            arrayBuffer = _f.sent();\n            blob = new Blob([arrayBuffer], {\n              type: data.ContentType\n            });\n            url = URL.createObjectURL(blob);\n            return [2 /*return*/, {\n              speech: {\n                url: url\n              },\n              audioStream: arrayBuffer,\n              text: input.textToSpeech.source.text\n            }];\n          case 5:\n            err_2 = _f.sent();\n            return [2 /*return*/, Promise.reject(err_2)];\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertSpeechToText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, _d, languageCode, _e, region, _f, source, _g, language, connection, fullText, err_3, err_4;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _h.trys.push([0, 7,, 8]);\n            logger.debug('starting transcription..');\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _h.sent();\n            if (!credentials) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            _a = this._config.transcription, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).language, languageCode = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n            if (!region) {\n              return [2 /*return*/, Promise.reject('region not configured for transcription')];\n            }\n            if (!languageCode) {\n              return [2 /*return*/, Promise.reject('languageCode not configured or provided for transcription')];\n            }\n            _f = input.transcription, source = _f.source, _g = _f.language, language = _g === void 0 ? languageCode : _g;\n            if (!isBytesSource(source)) return [3 /*break*/, 6];\n            return [4 /*yield*/, this.openConnectionWithTranscribe({\n              credentials: credentials,\n              region: region,\n              languageCode: language\n            })];\n          case 2:\n            connection = _h.sent();\n            _h.label = 3;\n          case 3:\n            _h.trys.push([3, 5,, 6]);\n            return [4 /*yield*/, this.sendDataToTranscribe({\n              connection: connection,\n              raw: source.bytes,\n              languageCode: language\n            })];\n          case 4:\n            fullText = _h.sent();\n            return [2 /*return*/, {\n              transcription: {\n                fullText: fullText\n              }\n            }];\n          case 5:\n            err_3 = _h.sent();\n            return [2 /*return*/, Promise.reject(err_3)];\n          case 6:\n            return [2 /*return*/, Promise.reject('Source types other than byte source are not supported.')];\n          case 7:\n            err_4 = _h.sent();\n            return [2 /*return*/, Promise.reject(err_4.name + ': ' + err_4.message)];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe = function (message) {\n    var decodedMessage = '';\n    var transcribeMessage = eventBuilder.unmarshall(Buffer.from(message.data));\n    var transcribeMessageJson = JSON.parse(toUtf8(transcribeMessage.body));\n    if (transcribeMessage.headers[':message-type'].value === 'exception') {\n      logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n      throw new Error(transcribeMessageJson.Message);\n    } else if (transcribeMessage.headers[':message-type'].value === 'event') {\n      if (transcribeMessageJson.Transcript.Results.length > 0) {\n        if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n          if (transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript.length > 0) {\n            if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n              decodedMessage = transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript + '\\n';\n              logger.debug({\n                decodedMessage: decodedMessage\n              });\n            } else {\n              logger.debug({\n                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n              });\n            }\n          }\n        }\n      }\n    }\n    return decodedMessage;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.sendDataToTranscribe = function (_a) {\n    var _this = this;\n    var connection = _a.connection,\n      raw = _a.raw,\n      languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      var fullText = '';\n      connection.onmessage = function (message) {\n        try {\n          var decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n          if (decodedMessage) {\n            fullText += decodedMessage + ' ';\n          }\n        } catch (err) {\n          logger.debug(err);\n          rej(err.message);\n        }\n      };\n      connection.onerror = function (errorEvent) {\n        logger.debug({\n          errorEvent: errorEvent\n        });\n        rej('failed to transcribe, network error');\n      };\n      connection.onclose = function (closeEvent) {\n        logger.debug({\n          closeEvent: closeEvent\n        });\n        return res(fullText.trim());\n      };\n      logger.debug({\n        raw: raw\n      });\n      if (Array.isArray(raw)) {\n        for (var i = 0; i < raw.length - 1023; i += 1024) {\n          var data = raw.slice(i, i + 1024);\n          _this.sendEncodedDataToTranscribe(connection, data, languageCode);\n        }\n      } else {\n        // If Buffer\n        _this.sendEncodedDataToTranscribe(connection, raw, languageCode);\n      }\n      // sending end frame\n      var endFrameEventMessage = _this.getAudioEventMessage(Buffer.from([]));\n      var endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n      connection.send(endFrameBinary);\n    });\n  };\n  AmazonAIConvertPredictionsProvider.prototype.sendEncodedDataToTranscribe = function (connection, data, languageCode) {\n    var downsampledBuffer = this.downsampleBuffer({\n      buffer: data,\n      outputSampleRate: LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? 8000 : 16000\n    });\n    var pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n    var audioEventMessage = this.getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n    var binary = eventBuilder.marshall(audioEventMessage);\n    connection.send(binary);\n  };\n  AmazonAIConvertPredictionsProvider.prototype.getAudioEventMessage = function (buffer) {\n    var audioEventMessage = {\n      body: buffer,\n      headers: {\n        ':message-type': {\n          type: 'string',\n          value: 'event'\n        },\n        ':event-type': {\n          type: 'string',\n          value: 'AudioEvent'\n        }\n      }\n    };\n    return audioEventMessage;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.pcmEncode = function (input) {\n    var offset = 0;\n    var buffer = new ArrayBuffer(input.length * 2);\n    var view = new DataView(buffer);\n    for (var i = 0; i < input.length; i++, offset += 2) {\n      var s = Math.max(-1, Math.min(1, input[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n    return buffer;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.downsampleBuffer = function (_a) {\n    var buffer = _a.buffer,\n      _b = _a.outputSampleRate,\n      outputSampleRate = _b === void 0 ? 16000 : _b;\n    if (outputSampleRate === this.inputSampleRate) {\n      return buffer;\n    }\n    var sampleRateRatio = this.inputSampleRate / outputSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Float32Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n    while (offsetResult < result.length) {\n      var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n      var accum = 0,\n        count = 0;\n      for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n        accum += buffer[i];\n        count++;\n      }\n      result[offsetResult] = accum / count;\n      offsetResult++;\n      offsetBuffer = nextOffsetBuffer;\n    }\n    return result;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.openConnectionWithTranscribe = function (_a) {\n    var _this = this;\n    var userCredentials = _a.credentials,\n      region = _a.region,\n      languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var access_key, secret_key, session_token, credentials, signedUrl, connection;\n        return __generator(this, function (_a) {\n          access_key = userCredentials.accessKeyId, secret_key = userCredentials.secretAccessKey, session_token = userCredentials.sessionToken;\n          credentials = {\n            access_key: access_key,\n            secret_key: secret_key,\n            session_token: session_token\n          };\n          signedUrl = this.generateTranscribeUrl({\n            credentials: credentials,\n            region: region,\n            languageCode: languageCode\n          });\n          logger.debug('connecting...');\n          connection = new WebSocket(signedUrl);\n          connection.binaryType = 'arraybuffer';\n          connection.onopen = function () {\n            logger.debug('connected');\n            res(connection);\n          };\n          return [2 /*return*/];\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.generateTranscribeUrl = function (_a) {\n    var credentials = _a.credentials,\n      region = _a.region,\n      languageCode = _a.languageCode;\n    var url = [\"wss://transcribestreaming.\" + region + \".amazonaws.com:8443\", '/stream-transcription-websocket?', \"media-encoding=pcm&\", \"sample-rate=\" + (LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? '8000' : '16000') + \"&\", \"language-code=\" + languageCode].join('');\n    var signedUrl = Signer.signUrl(url, credentials, {\n      region: region,\n      service: 'transcribe'\n    }, 300);\n    return signedUrl;\n  };\n  return AmazonAIConvertPredictionsProvider;\n}(AbstractConvertPredictionsProvider);\nexport { AmazonAIConvertPredictionsProvider };\n/**\n * @deprecated use named import\n */\nexport default AmazonAIConvertPredictionsProvider;","map":{"version":3,"sources":["../../src/Providers/AmazonAIConvertPredictionsProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport { TranslateClient, TranslateTextCommand, } from '@aws-sdk/client-translate';\nimport { PollyClient, SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\nimport { isBytesSource, } from '../types';\nimport { Credentials, ConsoleLogger as Logger, Signer, getAmplifyUserAgent, } from '@aws-amplify/core';\nimport { EventStreamMarshaller, } from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nvar logger = new Logger('AmazonAIConvertPredictionsProvider');\nvar eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\nvar LANGUAGES_CODE_IN_8KHZ = ['fr-FR', 'en-AU', 'en-GB', 'fr-CA'];\nvar AmazonAIConvertPredictionsProvider = /** @class */ (function (_super) {\n    __extends(AmazonAIConvertPredictionsProvider, _super);\n    function AmazonAIConvertPredictionsProvider() {\n        var _this = _super.call(this) || this;\n        _this.inputSampleRate = 44100;\n        return _this;\n    }\n    AmazonAIConvertPredictionsProvider.prototype.getProviderName = function () {\n        return 'AmazonAIConvertPredictionsProvider';\n    };\n    AmazonAIConvertPredictionsProvider.prototype.translateText = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, _c, _d, _e, sourceLanguage, _f, targetLanguage, _g, region, credentials, sourceLanguageCode, targetLanguageCode, translateTextCommand, data, err_1;\n            return __generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        logger.debug('Starting translation');\n                        _a = this._config.translateText, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = _c === void 0 ? {} : _c, _e = _d.sourceLanguage, sourceLanguage = _e === void 0 ? '' : _e, _f = _d.targetLanguage, targetLanguage = _f === void 0 ? '' : _f, _g = _b.region, region = _g === void 0 ? '' : _g;\n                        if (!region) {\n                            return [2 /*return*/, Promise.reject('region not configured for transcription')];\n                        }\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _h.sent();\n                        if (!credentials) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        sourceLanguageCode = input.translateText.source.language || sourceLanguage;\n                        targetLanguageCode = input.translateText.targetLanguage || targetLanguage;\n                        if (!sourceLanguageCode || !targetLanguageCode) {\n                            return [2 /*return*/, Promise.reject('Please provide both source and target language')];\n                        }\n                        this.translateClient = new TranslateClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        translateTextCommand = new TranslateTextCommand({\n                            SourceLanguageCode: sourceLanguageCode,\n                            TargetLanguageCode: targetLanguageCode,\n                            Text: input.translateText.source.text,\n                        });\n                        _h.label = 2;\n                    case 2:\n                        _h.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, this.translateClient.send(translateTextCommand)];\n                    case 3:\n                        data = _h.sent();\n                        return [2 /*return*/, {\n                                text: data.TranslatedText,\n                                language: data.TargetLanguageCode,\n                            }];\n                    case 4:\n                        err_1 = _h.sent();\n                        return [2 /*return*/, Promise.reject(err_1)];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AmazonAIConvertPredictionsProvider.prototype.convertTextToSpeech = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, _d, VoiceId, _e, region, voiceId, synthesizeSpeechCommand, data, response, arrayBuffer, blob, url, err_2;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _f.sent();\n                        if (!credentials) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        _a = this._config.speechGenerator, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).VoiceId, VoiceId = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n                        if (!input.textToSpeech.source) {\n                            return [2 /*return*/, Promise.reject('Source needs to be provided in the input')];\n                        }\n                        voiceId = input.textToSpeech.voiceId || VoiceId;\n                        if (!region) {\n                            return [2 /*return*/, Promise.reject('Region was undefined. Did you enable speech generator using amplify CLI?')];\n                        }\n                        if (!voiceId) {\n                            return [2 /*return*/, Promise.reject('VoiceId was undefined.')];\n                        }\n                        this.pollyClient = new PollyClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        synthesizeSpeechCommand = new SynthesizeSpeechCommand({\n                            OutputFormat: 'mp3',\n                            Text: input.textToSpeech.source.text,\n                            VoiceId: voiceId,\n                            TextType: 'text',\n                            SampleRate: '24000',\n                        });\n                        _f.label = 2;\n                    case 2:\n                        _f.trys.push([2, 5, , 6]);\n                        return [4 /*yield*/, this.pollyClient.send(synthesizeSpeechCommand)];\n                    case 3:\n                        data = _f.sent();\n                        response = new Response(data.AudioStream);\n                        return [4 /*yield*/, response.arrayBuffer()];\n                    case 4:\n                        arrayBuffer = _f.sent();\n                        blob = new Blob([arrayBuffer], {\n                            type: data.ContentType,\n                        });\n                        url = URL.createObjectURL(blob);\n                        return [2 /*return*/, {\n                                speech: { url: url },\n                                audioStream: arrayBuffer,\n                                text: input.textToSpeech.source.text,\n                            }];\n                    case 5:\n                        err_2 = _f.sent();\n                        return [2 /*return*/, Promise.reject(err_2)];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AmazonAIConvertPredictionsProvider.prototype.convertSpeechToText = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, _d, languageCode, _e, region, _f, source, _g, language, connection, fullText, err_3, err_4;\n            return __generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        _h.trys.push([0, 7, , 8]);\n                        logger.debug('starting transcription..');\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _h.sent();\n                        if (!credentials) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        _a = this._config.transcription, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).language, languageCode = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n                        if (!region) {\n                            return [2 /*return*/, Promise.reject('region not configured for transcription')];\n                        }\n                        if (!languageCode) {\n                            return [2 /*return*/, Promise.reject('languageCode not configured or provided for transcription')];\n                        }\n                        _f = input.transcription, source = _f.source, _g = _f.language, language = _g === void 0 ? languageCode : _g;\n                        if (!isBytesSource(source)) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.openConnectionWithTranscribe({\n                                credentials: credentials,\n                                region: region,\n                                languageCode: language,\n                            })];\n                    case 2:\n                        connection = _h.sent();\n                        _h.label = 3;\n                    case 3:\n                        _h.trys.push([3, 5, , 6]);\n                        return [4 /*yield*/, this.sendDataToTranscribe({\n                                connection: connection,\n                                raw: source.bytes,\n                                languageCode: language,\n                            })];\n                    case 4:\n                        fullText = _h.sent();\n                        return [2 /*return*/, {\n                                transcription: {\n                                    fullText: fullText,\n                                },\n                            }];\n                    case 5:\n                        err_3 = _h.sent();\n                        return [2 /*return*/, Promise.reject(err_3)];\n                    case 6: return [2 /*return*/, Promise.reject('Source types other than byte source are not supported.')];\n                    case 7:\n                        err_4 = _h.sent();\n                        return [2 /*return*/, Promise.reject(err_4.name + ': ' + err_4.message)];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe = function (message) {\n        var decodedMessage = '';\n        var transcribeMessage = eventBuilder.unmarshall(Buffer.from(message.data));\n        var transcribeMessageJson = JSON.parse(toUtf8(transcribeMessage.body));\n        if (transcribeMessage.headers[':message-type'].value === 'exception') {\n            logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n            throw new Error(transcribeMessageJson.Message);\n        }\n        else if (transcribeMessage.headers[':message-type'].value === 'event') {\n            if (transcribeMessageJson.Transcript.Results.length > 0) {\n                if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n                    if (transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n                        .Transcript.length > 0) {\n                        if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n                            decodedMessage =\n                                transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n                                    .Transcript + '\\n';\n                            logger.debug({ decodedMessage: decodedMessage });\n                        }\n                        else {\n                            logger.debug({\n                                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0],\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return decodedMessage;\n    };\n    AmazonAIConvertPredictionsProvider.prototype.sendDataToTranscribe = function (_a) {\n        var _this = this;\n        var connection = _a.connection, raw = _a.raw, languageCode = _a.languageCode;\n        return new Promise(function (res, rej) {\n            var fullText = '';\n            connection.onmessage = function (message) {\n                try {\n                    var decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n                    if (decodedMessage) {\n                        fullText += decodedMessage + ' ';\n                    }\n                }\n                catch (err) {\n                    logger.debug(err);\n                    rej(err.message);\n                }\n            };\n            connection.onerror = function (errorEvent) {\n                logger.debug({ errorEvent: errorEvent });\n                rej('failed to transcribe, network error');\n            };\n            connection.onclose = function (closeEvent) {\n                logger.debug({ closeEvent: closeEvent });\n                return res(fullText.trim());\n            };\n            logger.debug({ raw: raw });\n            if (Array.isArray(raw)) {\n                for (var i = 0; i < raw.length - 1023; i += 1024) {\n                    var data = raw.slice(i, i + 1024);\n                    _this.sendEncodedDataToTranscribe(connection, data, languageCode);\n                }\n            }\n            else {\n                // If Buffer\n                _this.sendEncodedDataToTranscribe(connection, raw, languageCode);\n            }\n            // sending end frame\n            var endFrameEventMessage = _this.getAudioEventMessage(Buffer.from([]));\n            var endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n            connection.send(endFrameBinary);\n        });\n    };\n    AmazonAIConvertPredictionsProvider.prototype.sendEncodedDataToTranscribe = function (connection, data, languageCode) {\n        var downsampledBuffer = this.downsampleBuffer({\n            buffer: data,\n            outputSampleRate: LANGUAGES_CODE_IN_8KHZ.includes(languageCode)\n                ? 8000\n                : 16000,\n        });\n        var pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n        var audioEventMessage = this.getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n        var binary = eventBuilder.marshall(audioEventMessage);\n        connection.send(binary);\n    };\n    AmazonAIConvertPredictionsProvider.prototype.getAudioEventMessage = function (buffer) {\n        var audioEventMessage = {\n            body: buffer,\n            headers: {\n                ':message-type': {\n                    type: 'string',\n                    value: 'event',\n                },\n                ':event-type': {\n                    type: 'string',\n                    value: 'AudioEvent',\n                },\n            },\n        };\n        return audioEventMessage;\n    };\n    AmazonAIConvertPredictionsProvider.prototype.pcmEncode = function (input) {\n        var offset = 0;\n        var buffer = new ArrayBuffer(input.length * 2);\n        var view = new DataView(buffer);\n        for (var i = 0; i < input.length; i++, offset += 2) {\n            var s = Math.max(-1, Math.min(1, input[i]));\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n        }\n        return buffer;\n    };\n    AmazonAIConvertPredictionsProvider.prototype.downsampleBuffer = function (_a) {\n        var buffer = _a.buffer, _b = _a.outputSampleRate, outputSampleRate = _b === void 0 ? 16000 : _b;\n        if (outputSampleRate === this.inputSampleRate) {\n            return buffer;\n        }\n        var sampleRateRatio = this.inputSampleRate / outputSampleRate;\n        var newLength = Math.round(buffer.length / sampleRateRatio);\n        var result = new Float32Array(newLength);\n        var offsetResult = 0;\n        var offsetBuffer = 0;\n        while (offsetResult < result.length) {\n            var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n            var accum = 0, count = 0;\n            for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n                accum += buffer[i];\n                count++;\n            }\n            result[offsetResult] = accum / count;\n            offsetResult++;\n            offsetBuffer = nextOffsetBuffer;\n        }\n        return result;\n    };\n    AmazonAIConvertPredictionsProvider.prototype.openConnectionWithTranscribe = function (_a) {\n        var _this = this;\n        var userCredentials = _a.credentials, region = _a.region, languageCode = _a.languageCode;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var access_key, secret_key, session_token, credentials, signedUrl, connection;\n            return __generator(this, function (_a) {\n                access_key = userCredentials.accessKeyId, secret_key = userCredentials.secretAccessKey, session_token = userCredentials.sessionToken;\n                credentials = {\n                    access_key: access_key,\n                    secret_key: secret_key,\n                    session_token: session_token,\n                };\n                signedUrl = this.generateTranscribeUrl({\n                    credentials: credentials,\n                    region: region,\n                    languageCode: languageCode,\n                });\n                logger.debug('connecting...');\n                connection = new WebSocket(signedUrl);\n                connection.binaryType = 'arraybuffer';\n                connection.onopen = function () {\n                    logger.debug('connected');\n                    res(connection);\n                };\n                return [2 /*return*/];\n            });\n        }); });\n    };\n    AmazonAIConvertPredictionsProvider.prototype.generateTranscribeUrl = function (_a) {\n        var credentials = _a.credentials, region = _a.region, languageCode = _a.languageCode;\n        var url = [\n            \"wss://transcribestreaming.\" + region + \".amazonaws.com:8443\",\n            '/stream-transcription-websocket?',\n            \"media-encoding=pcm&\",\n            \"sample-rate=\" + (LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? '8000' : '16000') + \"&\",\n            \"language-code=\" + languageCode,\n        ].join('');\n        var signedUrl = Signer.signUrl(url, credentials, { region: region, service: 'transcribe' }, 300);\n        return signedUrl;\n    };\n    return AmazonAIConvertPredictionsProvider;\n}(AbstractConvertPredictionsProvider));\nexport { AmazonAIConvertPredictionsProvider };\n/**\n * @deprecated use named import\n */\nexport default AmazonAIConvertPredictionsProvider;\n//# sourceMappingURL=AmazonAIConvertPredictionsProvider.js.map"]},"metadata":{},"sourceType":"module"}