{"ast":null,"code":"import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { css } from '@emotion/react';\nimport { THEME } from '@common/constants/theme.constant';\nimport { ColumnChooser } from '@common/general-ui/column-chooser/column-chooser.component';\nimport { Loading } from '@common/general-ui/loading/loading.component';\nimport { Pagination } from '@common/general-ui/pagination/pagination.component';\nimport { useIsScrollEnd } from '@common/hooks/use-is-scroll-end.hook';\nimport { t } from '@common/hooks/use-t.hook';\nimport { resizeEvent } from '@common/utils/event-emitter.util';\nimport { Table as Table$1 } from 'antd';\nimport React, { useRef, useState, useEffect, useCallback, useMemo } from 'react';\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n  return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\nconst createDefaultChooserColumns = tableColumns => {\n  return tableColumns.map(c => {\n    return {\n      id: c.id,\n      title: c.title,\n      isHidden: !c.isVisible,\n      isAlwaysVisible: !!c.isAlwaysVisible\n    };\n  });\n};\nconst getCssGridFrames = (columns, showSelection) => {\n  const clonedColumns = [...columns];\n  if (showSelection) {\n    clonedColumns.unshift({\n      id: 'id',\n      size: 1,\n      title: '',\n      isVisible: true,\n      render: () => null\n    });\n  }\n  const res = clonedColumns.map(c => c.size ? typeof c.size === 'number' ? `${c.size}fr` : c.size : '100fr');\n  return res.join(' ');\n};\nvar _ref2 = process.env.NODE_ENV === \"production\" ? {\n  name: \"178p478\",\n  styles: \"position:absolute;right:0px;top:0px;z-index:50\"\n} : {\n  name: \"t7gz29-renderColumnChooser\",\n  styles: \"position:absolute;right:0px;top:0px;z-index:50;label:renderColumnChooser;\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref3 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bjn8wh\",\n  styles: \"position:relative\"\n} : {\n  name: \"1au86qk-Table\",\n  styles: \"position:relative;label:Table;\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref4 = process.env.NODE_ENV === \"production\" ? {\n  name: \"149vo96\",\n  styles: \"position:relative;overflow-x:auto\"\n} : {\n  name: \"1btdhux-Table\",\n  styles: \"position:relative;overflow-x:auto;label:Table;\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref5 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1m349q0\",\n  styles: \"padding-top:1rem;text-align:right\"\n} : {\n  name: \"x0pcym-Table\",\n  styles: \"padding-top:1rem;text-align:right;label:Table;\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref6 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1fxbzjn\",\n  styles: \"padding-top:15rem;padding-bottom:15rem\"\n} : {\n  name: \"7r45nh-Table\",\n  styles: \"padding-top:15rem;padding-bottom:15rem;label:Table;\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nfunction Table(props) {\n  const {\n    columns,\n    dataSource,\n    autoSize,\n    onFetchMore,\n    chooser,\n    onChooserSettingsChange,\n    isLoading,\n    onSelectedRowsChange,\n    enableResize,\n    showColumnChooser\n  } = props;\n  const rootDivRef = useRef();\n  const divTableContainerForCalcWidthRef = useRef();\n  const [width, setWidth] = useState(rootDivRef?.current?.clientWidth || 0);\n  useEffect(() => {\n    const handleWindowResize = () => {\n      if (divTableContainerForCalcWidthRef.current && rootDivRef.current) {\n        divTableContainerForCalcWidthRef.current.style.position = 'absolute';\n        rootDivRef.current.style.height = '9999999px';\n      }\n      setWidth(rootDivRef?.current?.clientWidth || 0);\n      if (divTableContainerForCalcWidthRef.current && rootDivRef.current) {\n        divTableContainerForCalcWidthRef.current.style.position = 'static';\n        rootDivRef.current.style.height = 'auto';\n      }\n    };\n    if (enableResize) {\n      window.addEventListener('resize', handleWindowResize);\n      resizeEvent.subscribe(handleWindowResize);\n      handleWindowResize();\n    }\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n      resizeEvent.unsubscribe(handleWindowResize);\n    };\n  }, [enableResize, setWidth]);\n  const next_page = props.dataSource?.next_page;\n  useIsScrollEnd({\n    next_page,\n    onScrollEnd: useCallback(() => {\n      onFetchMore && onFetchMore({\n        next_page: props.dataSource?.next_page\n      });\n    }, [onFetchMore, props.dataSource?.next_page])\n  });\n  const filteredColumns = useMemo(() => (columns.filter(f => f.isVisible) || []).map(c => {\n    return {\n      ...c,\n      dataIndex: c.id,\n      render: (_, data) => c.render(data)\n    };\n  }), [columns]);\n  const cssGridFrames = useMemo(() => getCssGridFrames(filteredColumns, !!props.selectedRows), [filteredColumns, props.selectedRows]);\n  const [selectedKeys, setSelectedKeys] = useState([]);\n  useEffect(() => {\n    if (props.selectedRows) {\n      setSelectedKeys(props.selectedRows);\n    }\n  }, [dataSource?.list.length, props.selectedRows]);\n  const rowSelection = useMemo(() => {\n    return {\n      type: 'checkbox',\n      selectedRowKeys: selectedKeys ? selectedKeys.map(f => f.id) : [],\n      onChange: (_, selectedRows) => {\n        setSelectedKeys(selectedRows);\n        onSelectedRowsChange && onSelectedRowsChange(selectedRows, selectedRows.length === dataSource?.list.length);\n      },\n      getCheckboxProps: record => ({\n        disabled: record.id === 'Disabled User',\n        // Column configuration not to be checked\n        name: record.id.toString()\n      })\n    };\n  }, [dataSource?.list.length, onSelectedRowsChange, selectedKeys]);\n  const handleTableChange = useCallback((_pagination, _filter, _sorter) => {\n    // if (dataSource) {\n    //     const first = Array.isArray(sorter) ? sorter[0] : sorter;\n    //     const data: ICollectionRequestOptions = {\n    //         ...dataSource,\n    //         limit: dataSource.request.limit || CONST.LIST_LIMIT,\n    //         sortColumn: first.column?.dataIndex?.toString(),\n    //         sortOrder: first.order,\n    //     };\n    //     onTableOptionsChange && onTableOptionsChange(data);\n    // }\n  }, []);\n  const handleColumnChooserReset = useCallback(() => {\n    onChooserSettingsChange && onChooserSettingsChange({\n      chooserColumns: undefined\n    });\n  }, [onChooserSettingsChange]);\n  const handleColumnsChange = useCallback(columns => {\n    onChooserSettingsChange && onChooserSettingsChange({\n      chooserColumns: columns\n    });\n  }, [onChooserSettingsChange]);\n  const renderColumnChooser = () => {\n    if (!chooser) {\n      return null;\n    }\n    return /*#__PURE__*/React.createElement(ColumnChooser, {\n      css: _ref2,\n      asyncOnChange: true,\n      columns: chooser.chooserColumns,\n      onChange: handleColumnsChange,\n      onResetClick: handleColumnChooserReset\n    });\n  };\n  return /*#__PURE__*/React.createElement(Loading, {\n    isLoading: isLoading\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    css: _ref3\n  }, showColumnChooser ? renderColumnChooser() : undefined, /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": props.name,\n    ref: rootDivRef,\n    css: _ref4\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: enableResize ? {\n      width: `${width || rootDivRef?.current?.clientWidth || 0}px`\n    } : {},\n    ref: divTableContainerForCalcWidthRef\n  }, /*#__PURE__*/React.createElement(Table$1, _extends({}, props, {\n    locale: {\n      emptyText: t('No Data')\n    },\n    pagination: false,\n    columns: filteredColumns,\n    rowSelection: props.selectedRows ? rowSelection : undefined,\n    css: styles.table(!!autoSize, cssGridFrames, props.dataSource?.list),\n    dataSource: props.dataSource?.list,\n    rowKey: 'id',\n    onChange: handleTableChange,\n    rowClassName: (_record, index) => index % 2 === 0 ? 'table-row-light' : 'table-row-dark'\n  })), dataSource && /*#__PURE__*/React.createElement(Pagination, {\n    css: _ref5,\n    dataSource: dataSource,\n    onFetchMore: onFetchMore\n  }), isLoading && !props.dataSource?.list && /*#__PURE__*/React.createElement(\"div\", {\n    css: _ref6\n  })))));\n}\nconst fontWeight = '200';\nvar _ref = process.env.NODE_ENV === \"production\" ? {\n  name: \"4u0w7g\",\n  styles: \".ant-table-placeholder{display:none;}\"\n} : {\n  name: \"iv4dht-styles\",\n  styles: \".ant-table-placeholder{display:none;};label:styles;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst styles = {\n  table: (autoSize, frames, dataSource) => [/*#__PURE__*/css(\"&& .ant-table-thead .ant-table-cell{background-color:\", THEME.GREEN, \";color:white;padding:8px 16px;font-weight:\", fontWeight, \";}.table-row-dark{background-color:\", THEME.LIGHT_GRAY, \";}&& .ant-table-cell{font-size:\", THEME.BASE_FONT_SIZE, \";min-width:120px;line-height:24px;}&& .ant-table-selection-column{min-width:50px;}.ant-table-row>td::-webkit-scrollbar{display:none;}&& .ant-table-column-sorter-up{color:#aaa;}&& .ant-table-column-sorter-down{color:#aaa;}&& .ant-table-column-sorter-up.active{color:white;}&& .ant-table-column-sorter-down.active{color:white;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), !dataSource && _ref, !autoSize && /*#__PURE__*/css(\".ant-table-thead>tr{display:grid;grid-template-columns:\", frames, \";}.ant-table-row{display:grid;grid-template-columns:\", frames, \";}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")]\n};\nexport { Table, createDefaultChooserColumns };","map":{"version":3,"sources":["../../../../src/general-ui/table/table.component.tsx"],"names":["createDefaultChooserColumns","tableColumns","map","c","id","title","isHidden","isVisible","isAlwaysVisible","getCssGridFrames","columns","showSelection","clonedColumns","unshift","size","render","res","join","Table","props","dataSource","autoSize","onFetchMore","chooser","onChooserSettingsChange","isLoading","onSelectedRowsChange","enableResize","showColumnChooser","rootDivRef","useRef","divTableContainerForCalcWidthRef","width","setWidth","useState","current","clientWidth","useEffect","handleWindowResize","style","position","height","window","addEventListener","resizeEvent","subscribe","removeEventListener","unsubscribe","next_page","useIsScrollEnd","onScrollEnd","useCallback","filteredColumns","useMemo","filter","f","dataIndex","_","data","cssGridFrames","selectedRows","selectedKeys","setSelectedKeys","list","length","rowSelection","type","selectedRowKeys","onChange","getCheckboxProps","record","disabled","name","toString","handleTableChange","_pagination","_filter","_sorter","handleColumnChooserReset","chooserColumns","undefined","handleColumnsChange","renderColumnChooser","AntdTable","emptyText","t","styles","table","_record","index","fontWeight","frames","css","THEME","GREEN","LIGHT_GRAY","BASE_FONT_SIZE"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { THEME } from '@common/constants/theme.constant';\nimport { ColumnChooser, IColumnChooser } from '@common/general-ui/column-chooser/column-chooser.component';\nimport { Loading } from '@common/general-ui/loading/loading.component';\nimport { Pagination } from '@common/general-ui/pagination/pagination.component';\nimport { useIsScrollEnd } from '@common/hooks/use-is-scroll-end.hook';\nimport { t } from '@common/hooks/use-t.hook';\nimport {\n    ICollectionRequestOptions,\n    IFetchMoreRequestOptions,\n} from '@common/interfaces/collection-request-options.interface';\nimport { ICollection } from '@common/interfaces/collection.interface';\nimport { IIdObject } from '@common/interfaces/id-object.interface';\nimport { ITableUISettings } from '@common/interfaces/ui-settings.interface';\nimport { resizeEvent } from '@common/utils/event-emitter.util';\nimport { SerializedStyles } from '@emotion/react';\nimport { CheckboxProps, Table as AntdTable } from 'antd';\nimport { ColumnType } from 'antd/lib/table';\nimport { SorterResult, SortOrder, TablePaginationConfig, TableRowSelection } from 'antd/lib/table/interface';\nimport React, { ReactNode, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { css } from 'twin.macro';\n\nexport const createDefaultChooserColumns = (tableColumns: ITableColumn<any, any>[]): IColumnChooser[] => {\n    return tableColumns.map((c): IColumnChooser => {\n        return {\n            id: c.id as string,\n            title: c.title as string,\n            isHidden: !c.isVisible,\n            isAlwaysVisible: !!c.isAlwaysVisible,\n        };\n    });\n};\n\nexport interface ITableColumn<T extends IIdObject, TKey> {\n    title: ColumnType<T>['title'];\n    render: (data: T) => React.ReactNode;\n    id: TKey;\n    size?: number | string;\n    isVisible: boolean;\n    isAlwaysVisible?: boolean;\n    sorter?: ColumnType<T>['sorter'];\n    sortOrder?: SortOrder;\n    getCardAvatarUrl?: (data: T) => string | undefined;\n}\n\ninterface IProps<T extends IIdObject, TKey> {\n    name: string;\n    className?: string;\n    columns: ITableColumn<T, TKey>[];\n    dataSource: ICollection<T> | undefined;\n    selectedRows?: T[];\n    onFetchMore?: (pagination: IFetchMoreRequestOptions) => void;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onTableOptionsChange?: (pagination: ICollectionRequestOptions<any>) => void;\n    onSelectedRowsChange?: (selected: T[], isAllSelected: boolean) => void;\n    isLoading: boolean;\n    autoSize?: boolean;\n    enableResize?: boolean;\n    onChooserSettingsChange?: (settings: Partial<ITableUISettings>) => void | undefined;\n    chooser?: { chooserColumns: IColumnChooser[]; defaultChooserColumns: IColumnChooser[] };\n    showColumnChooser?: boolean;\n}\n\nconst getCssGridFrames = (columns: ITableColumn<any, any>[], showSelection?: boolean): string => {\n    const clonedColumns = [...columns];\n    if (showSelection) {\n        clonedColumns.unshift({\n            id: 'id',\n            size: 1,\n\n            title: '',\n            isVisible: true,\n            render: () => null,\n        });\n    }\n    const res = clonedColumns.map((c) => (c.size ? (typeof c.size === 'number' ? `${c.size}fr` : c.size) : '100fr'));\n    return res.join(' ');\n};\n\nexport function Table<T extends IIdObject, TKey>(props: IProps<T, TKey>): JSX.Element {\n    const {\n        columns,\n        dataSource,\n        autoSize,\n        onFetchMore,\n        chooser,\n        onChooserSettingsChange,\n        isLoading,\n        onSelectedRowsChange,\n        enableResize,\n        showColumnChooser,\n    } = props;\n\n    const rootDivRef = useRef<HTMLDivElement | undefined>();\n    const divTableContainerForCalcWidthRef = useRef<HTMLDivElement | undefined>();\n\n    const [width, setWidth] = useState(rootDivRef?.current?.clientWidth || 0);\n    useEffect(() => {\n        const handleWindowResize = (): void => {\n            if (divTableContainerForCalcWidthRef.current && rootDivRef.current) {\n                divTableContainerForCalcWidthRef.current.style.position = 'absolute';\n                rootDivRef.current.style.height = '9999999px';\n            }\n            setWidth(rootDivRef?.current?.clientWidth || 0);\n            if (divTableContainerForCalcWidthRef.current && rootDivRef.current) {\n                divTableContainerForCalcWidthRef.current.style.position = 'static';\n                rootDivRef.current.style.height = 'auto';\n            }\n        };\n\n        if (enableResize) {\n            window.addEventListener('resize', handleWindowResize);\n            resizeEvent.subscribe(handleWindowResize);\n            handleWindowResize();\n        }\n        return (): void => {\n            window.removeEventListener('resize', handleWindowResize);\n            resizeEvent.unsubscribe(handleWindowResize);\n        };\n    }, [enableResize, setWidth]);\n\n    const next_page = props.dataSource?.next_page;\n    useIsScrollEnd({\n        next_page,\n        onScrollEnd: useCallback(() => {\n            onFetchMore && onFetchMore({ next_page: props.dataSource?.next_page });\n        }, [onFetchMore, props.dataSource?.next_page]),\n    });\n\n    const filteredColumns: ITableColumn<T, TKey>[] = useMemo(\n        () =>\n            (columns.filter((f) => f.isVisible) || []).map((c) => {\n                return {\n                    ...c,\n                    dataIndex: c.id,\n                    render: (_: any, data: any): ReactNode => c.render(data),\n                } as unknown as ITableColumn<T, TKey>;\n            }),\n        [columns],\n    );\n\n    const cssGridFrames = useMemo(\n        () => getCssGridFrames(filteredColumns, !!props.selectedRows),\n        [filteredColumns, props.selectedRows],\n    );\n\n    const [selectedKeys, setSelectedKeys] = useState<IIdObject[]>([]);\n    useEffect(() => {\n        if (props.selectedRows) {\n            setSelectedKeys(props.selectedRows);\n        }\n    }, [dataSource?.list.length, props.selectedRows]);\n\n    const rowSelection = useMemo<TableRowSelection<any>>(() => {\n        return {\n            type: 'checkbox',\n            selectedRowKeys: selectedKeys ? selectedKeys.map((f) => f.id) : [],\n            onChange: (_: React.Key[], selectedRows: T[]): void => {\n                setSelectedKeys(selectedRows);\n                onSelectedRowsChange && onSelectedRowsChange(selectedRows, selectedRows.length === dataSource?.list.length);\n            },\n            getCheckboxProps: (record: IIdObject): Partial<CheckboxProps> => ({\n                disabled: record.id === 'Disabled User', // Column configuration not to be checked\n                name: record.id.toString(),\n            }),\n        };\n    }, [dataSource?.list.length, onSelectedRowsChange, selectedKeys]);\n\n    const handleTableChange = useCallback(\n        (_pagination: TablePaginationConfig, _filter, _sorter: SorterResult<any> | SorterResult<any>[]) => {\n            // if (dataSource) {\n            //     const first = Array.isArray(sorter) ? sorter[0] : sorter;\n            //     const data: ICollectionRequestOptions = {\n            //         ...dataSource,\n            //         limit: dataSource.request.limit || CONST.LIST_LIMIT,\n            //         sortColumn: first.column?.dataIndex?.toString(),\n            //         sortOrder: first.order,\n            //     };\n            //     onTableOptionsChange && onTableOptionsChange(data);\n            // }\n        },\n        [],\n    );\n\n    const handleColumnChooserReset = useCallback(() => {\n        onChooserSettingsChange &&\n            onChooserSettingsChange({\n                chooserColumns: undefined,\n            });\n    }, [onChooserSettingsChange]);\n\n    const handleColumnsChange = useCallback(\n        (columns: IColumnChooser[]) => {\n            onChooserSettingsChange &&\n                onChooserSettingsChange({\n                    chooserColumns: columns,\n                });\n        },\n        [onChooserSettingsChange],\n    );\n\n    const renderColumnChooser = (): JSX.Element | null => {\n        if (!chooser) {\n            return null;\n        }\n        return (\n            <ColumnChooser\n                tw=\"absolute right-0 top-0 z-50\"\n                asyncOnChange={true}\n                columns={chooser.chooserColumns}\n                onChange={handleColumnsChange}\n                onResetClick={handleColumnChooserReset}\n            />\n        );\n    };\n\n    return (\n        <Loading isLoading={isLoading}>\n            <div tw=\"relative\">\n                {showColumnChooser ? renderColumnChooser() : undefined}\n                <div\n                    data-testid={props.name}\n                    ref={rootDivRef as unknown as React.LegacyRef<HTMLDivElement>}\n                    tw=\"relative overflow-x-auto\"\n                >\n                    <div\n                        style={enableResize ? { width: `${width || rootDivRef?.current?.clientWidth || 0}px` } : {}}\n                        ref={divTableContainerForCalcWidthRef as unknown as React.LegacyRef<HTMLDivElement>}\n                    >\n                        <AntdTable\n                            {...props}\n                            locale={{ emptyText: t('No Data') }}\n                            pagination={false}\n                            columns={filteredColumns}\n                            rowSelection={props.selectedRows ? rowSelection : undefined}\n                            css={styles.table(!!autoSize, cssGridFrames, props.dataSource?.list)}\n                            dataSource={props.dataSource?.list}\n                            rowKey={'id'}\n                            onChange={handleTableChange}\n                            rowClassName={(_record, index): string =>\n                                index % 2 === 0 ? 'table-row-light' : 'table-row-dark'\n                            }\n                        />\n                        {dataSource && <Pagination tw=\"pt-4 text-right\" dataSource={dataSource} onFetchMore={onFetchMore} />}\n                        {isLoading && !props.dataSource?.list && <div tw=\"py-60\"></div>}\n                    </div>\n                </div>\n            </div>\n        </Loading>\n    );\n}\n\nconst fontWeight = '200';\nconst styles = {\n    table: (autoSize: boolean, frames: string, dataSource: any[] | undefined): (SerializedStyles | boolean)[] => [\n        css`\n            && .ant-table-thead .ant-table-cell {\n                background-color: ${THEME.GREEN};\n                color: white;\n                padding: 8px 16px;\n                font-weight: ${fontWeight};\n            }\n\n            .table-row-dark {\n                background-color: ${THEME.LIGHT_GRAY};\n            }\n\n            && .ant-table-cell {\n                font-size: ${THEME.BASE_FONT_SIZE};\n                // text-overflow: ellipsis;\n                // overflow: hidden;\n                // white-space: nowrap;\n                // word-break: break-word;\n                min-width: 120px;\n                line-height: 24px;\n            }\n\n            && .ant-table-selection-column {\n                min-width: 50px;\n            }\n\n            .ant-table-row > td::-webkit-scrollbar {\n                display: none;\n            }\n\n            && .ant-table-column-sorter-up {\n                color: #aaa;\n            }\n            && .ant-table-column-sorter-down {\n                color: #aaa;\n            }\n            && .ant-table-column-sorter-up.active {\n                color: white;\n            }\n            && .ant-table-column-sorter-down.active {\n                color: white;\n            }\n        `,\n        !dataSource &&\n            css`\n                .ant-table-placeholder {\n                    display: none;\n                }\n            `,\n        !autoSize &&\n            css`\n                .ant-table-thead > tr {\n                    display: grid;\n                    grid-template-columns: ${frames};\n                }\n\n                .ant-table-row {\n                    display: grid;\n                    grid-template-columns: ${frames};\n                }\n            `,\n    ],\n};\n"]},"metadata":{},"sourceType":"module"}