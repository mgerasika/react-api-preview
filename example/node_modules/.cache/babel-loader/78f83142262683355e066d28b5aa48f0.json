{"ast":null,"code":"import { CONST } from '../constants/const.constant.js';\nimport { throwException } from './throw-exception.util.js';\nfunction createCollection(data, next_page, request) {\n  return {\n    request: {\n      ...request,\n      limit: request?.limit || CONST.LIST_LIMIT\n    },\n    next_page: next_page || 0,\n    list: data || []\n  };\n}\nfunction deleteFromCollection(data, id) {\n  if (!data) {\n    return createCollection([], 0, {});\n  }\n  return {\n    ...data,\n    list: data?.list.filter(f => f.id !== id)\n  };\n}\nfunction addToCollection(data, item) {\n  if (!data) {\n    return createCollection([item], 0, {});\n  }\n  return {\n    ...data,\n    list: [item, ...data.list]\n  };\n}\nfunction getItem(data, id) {\n  return data?.list.find(item => {\n    if (item.id === id) {\n      return item;\n    }\n    return undefined;\n  });\n}\nfunction updateCollection(data, id, newItem) {\n  if (!data) {\n    return createCollection([newItem], 0, {});\n  }\n  let found = false;\n  const res = {\n    ...data,\n    list: data?.list.map(item => {\n      if (item.id === id) {\n        found = true;\n        return {\n          ...newItem\n        };\n      }\n      return item;\n    })\n  };\n  if (!found) {\n    throwException('update collection not found');\n  }\n  return res;\n}\nexport { addToCollection, createCollection, deleteFromCollection, getItem, updateCollection };","map":{"version":3,"sources":["../../../src/utils/create-collection.util.ts"],"names":["createCollection","data","next_page","request","limit","CONST","LIST_LIMIT","list","deleteFromCollection","id","filter","f","addToCollection","item","getItem","find","undefined","updateCollection","newItem","found","res","map","throwException"],"mappings":";;AAOO,SAASA,gBAAgB,CAC5BC,IAAqB,EACrBC,SAA6B,EAC7BC,OAA6F,EACtE;EACvB,OAAO;IACHA,OAAO,EAAE;MAAE,GAAGA,OAAO;MAAEC,KAAK,EAAED,OAAO,EAAEC,KAAK,IAAIC,KAAK,CAACC;KAAY;IAClEJ,SAAS,EAAEA,SAAS,IAAI,CAAC;IACzBK,IAAI,EAAEN,IAAI,IAAI;GACjB;AACL;AAEO,SAASO,oBAAoB,CAAsBP,IAAgC,EAAEQ,EAAO,EAAkB;EACjH,IAAI,CAACR,IAAI,EAAE;IACP,OAAOD,gBAAgB,CAAC,EAAE,EAAE,CAAC,EAAE,CAAA,CAAE,CAAC;EACtC;EACA,OAAO;IACH,GAAGC,IAAI;IACPM,IAAI,EAAEN,IAAI,EAAEM,IAAI,CAACG,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACF,EAAE,KAAKA,EAAE;GAC7C;AACL;AAEO,SAASG,eAAe,CAAsBX,IAAgC,EAAEY,IAAO,EAAkB;EAC5G,IAAI,CAACZ,IAAI,EAAE;IACP,OAAOD,gBAAgB,CAAC,CAACa,IAAI,CAAC,EAAE,CAAC,EAAE,CAAA,CAAE,CAAC;EAC1C;EACA,OAAO;IACH,GAAGZ,IAAI;IACPM,IAAI,EAAE,CAACM,IAAI,EAAE,GAAGZ,IAAI,CAACM,IAAI;GAC5B;AACL;AAEO,SAASO,OAAO,CAAsBb,IAAgC,EAAEQ,EAAO,EAAiB;EACnG,OAAOR,IAAI,EAAEM,IAAI,CAACQ,IAAI,CAAEF,IAAI,IAAoB;IAC5C,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,EAAE;MAChB,OAAOI,IAAI;IACf;IACA,OAAOG,SAAS;EACpB,CAAC,CAAC;AACN;AAEO,SAASC,gBAAgB,CAC5BhB,IAAgC,EAChCQ,EAAO,EACPS,OAAU,EACI;EACd,IAAI,CAACjB,IAAI,EAAE;IACP,OAAOD,gBAAgB,CAAC,CAACkB,OAAO,CAAC,EAAE,CAAC,EAAE,CAAA,CAAE,CAAC;EAC7C;EACA,IAAIC,KAAK,GAAG,KAAK;EACjB,MAAMC,GAAG,GAAG;IACR,GAAGnB,IAAI;IACPM,IAAI,EAAEN,IAAI,EAAEM,IAAI,CAACc,GAAG,CAAER,IAAI,IAAK;MAC3B,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,EAAE;QAChBU,KAAK,GAAG,IAAI;QACZ,OAAO;UAAE,GAAGD;SAAS;MACzB;MACA,OAAOL,IAAI;KACd;GACJ;EACD,IAAI,CAACM,KAAK,EAAE;IACRG,cAAc,CAAC,6BAA6B,CAAC;EACjD;EACA,OAAOF,GAAG;AACd","sourcesContent":["import { CONST } from '@common/constants/const.constant';\nimport { ICollectionRequestOptions } from '@common/interfaces/collection-request-options.interface';\nimport { ICollection } from '@common/interfaces/collection.interface';\nimport { IIdObject } from '@common/interfaces/id-object.interface';\nimport { UID } from '@common/interfaces/uid.interface';\nimport { throwException } from './throw-exception.util';\n\nexport function createCollection<T, TFilter = unknown>(\n    data: T[] | undefined,\n    next_page: number | undefined,\n    request: (Omit<ICollectionRequestOptions<TFilter>, 'limit'> & { limit?: number }) | undefined,\n): ICollection<T, TFilter> {\n    return {\n        request: { ...request, limit: request?.limit || CONST.LIST_LIMIT },\n        next_page: next_page || 0,\n        list: data || [],\n    };\n}\n\nexport function deleteFromCollection<T extends IIdObject>(data: ICollection<T> | undefined, id: UID): ICollection<T> {\n    if (!data) {\n        return createCollection([], 0, {});\n    }\n    return {\n        ...data,\n        list: data?.list.filter((f) => f.id !== id),\n    };\n}\n\nexport function addToCollection<T extends IIdObject>(data: ICollection<T> | undefined, item: T): ICollection<T> {\n    if (!data) {\n        return createCollection([item], 0, {});\n    }\n    return {\n        ...data,\n        list: [item, ...data.list],\n    };\n}\n\nexport function getItem<T extends IIdObject>(data: ICollection<T> | undefined, id: UID): T | undefined {\n    return data?.list.find((item): T | undefined => {\n        if (item.id === id) {\n            return item;\n        }\n        return undefined;\n    });\n}\n\nexport function updateCollection<T extends IIdObject>(\n    data: ICollection<T> | undefined,\n    id: UID,\n    newItem: T,\n): ICollection<T> {\n    if (!data) {\n        return createCollection([newItem], 0, {});\n    }\n    let found = false;\n    const res = {\n        ...data,\n        list: data?.list.map((item) => {\n            if (item.id === id) {\n                found = true;\n                return { ...newItem };\n            }\n            return item;\n        }),\n    };\n    if (!found) {\n        throwException('update collection not found');\n    }\n    return res;\n}\n"]},"metadata":{},"sourceType":"module"}