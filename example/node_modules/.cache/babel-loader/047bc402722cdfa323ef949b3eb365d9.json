{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar React = require('react');\nconst useTimer = duration => {\n  const [timer, setTimer] = React.useState(0);\n  React.useEffect(() => {\n    let interval = null;\n    if (duration) {\n      setTimer(duration);\n      interval = setInterval(() => {\n        setTimer(prevVal => {\n          const result = prevVal - 1;\n          if (result <= 0) {\n            clearInterval(interval);\n          }\n          return result;\n        });\n      }, 1000);\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [duration]);\n  return {\n    timer\n  };\n};\nexports.useTimer = useTimer;","map":{"version":3,"sources":["../../../src/hooks/use-timer.hook.ts"],"names":["useTimer","duration","timer","setTimer","useState","useEffect","interval","setInterval","prevVal","result","clearInterval"],"mappings":";;;;;;AAMaA,MAAAA,QAAQ,GAAIC,QAA4B,IAAc;EAC/D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,KAAAA,CAAAA,QAAQ,CAAS,CAAC,CAAC;EAE7CC,KAAAA,CAAAA,SAAS,CAAC,MAAM;IACZ,IAAIC,QAA6B,GAAG,IAAI;IAExC,IAAIL,QAAQ,EAAE;MACVE,QAAQ,CAACF,QAAQ,CAAC;MAClBK,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACzBJ,QAAQ,CAAEK,OAAO,IAAK;UAClB,MAAMC,MAAM,GAAGD,OAAO,GAAG,CAAC;UAC1B,IAAIC,MAAM,IAAI,CAAC,EAAE;YACbC,aAAa,CAACJ,QAAQ,CAAiB;UAC3C;UACA,OAAOG,MAAM;QACjB,CAAC,CAAC;OACL,EAAE,IAAI,CAAC;IACZ;IAEA,OAAO,MAAY;MACf,IAAIH,QAAQ,EAAE;QACVI,aAAa,CAACJ,QAAQ,CAAC;MAC3B;KACH;EACL,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC;EAEd,OAAO;IAAEC;GAAO;AACpB,CAAA","sourcesContent":["import { useEffect, useState } from 'react';\n\ninterface IReturn {\n    timer: number;\n}\n\nexport const useTimer = (duration: number | undefined): IReturn => {\n    const [timer, setTimer] = useState<number>(0);\n\n    useEffect(() => {\n        let interval: NodeJS.Timer | null = null;\n\n        if (duration) {\n            setTimer(duration);\n            interval = setInterval(() => {\n                setTimer((prevVal) => {\n                    const result = prevVal - 1;\n                    if (result <= 0) {\n                        clearInterval(interval as NodeJS.Timer);\n                    }\n                    return result;\n                });\n            }, 1000);\n        }\n\n        return (): void => {\n            if (interval) {\n                clearInterval(interval);\n            }\n        };\n    }, [duration]);\n\n    return { timer };\n};\n"]},"metadata":{},"sourceType":"script"}