{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport Storage from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport { RekognitionClient, SearchFacesByImageCommand, DetectTextCommand, DetectLabelsCommand, DetectFacesCommand, DetectModerationLabelsCommand, RecognizeCelebritiesCommand } from '@aws-sdk/client-rekognition';\nimport { isStorageSource, isFileSource, isBytesSource, isIdentifyCelebrities, isIdentifyFromCollection } from '../types';\nimport { TextractClient, DetectDocumentTextCommand, AnalyzeDocumentCommand } from '@aws-sdk/client-textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks } from './IdentifyTextUtils';\nvar AmazonAIIdentifyPredictionsProvider = /** @class */function (_super) {\n  __extends(AmazonAIIdentifyPredictionsProvider, _super);\n  function AmazonAIIdentifyPredictionsProvider() {\n    return _super.call(this) || this;\n  }\n  AmazonAIIdentifyPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIIdentifyPredictionsProvider';\n  };\n  /**\n   * Verify user input source and converts it into source object readable by Rekognition and Textract.\n   * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n   * @param {IdentifySource} source - User input source that directs to the object user wants\n   * to identify (storage, file, or bytes).\n   * @return {Promise<Image>} - Promise resolving to the converted source object.\n   */\n  AmazonAIIdentifyPredictionsProvider.prototype.configureSource = function (source) {\n    return new Promise(function (res, rej) {\n      if (isStorageSource(source)) {\n        var storageConfig = {\n          level: source.level,\n          identityId: source.identityId\n        };\n        Storage.get(source.key, storageConfig).then(function (url) {\n          var parser = /https:\\/\\/([a-zA-Z0-9%-_.]+)\\.s3\\.[A-Za-z0-9%-._~]+\\/([a-zA-Z0-9%-._~/]+)\\?/;\n          var parsedURL = url.match(parser);\n          if (parsedURL.length < 3) rej('Invalid S3 key was given.');\n          res({\n            S3Object: {\n              Bucket: parsedURL[1],\n              Name: decodeURIComponent(parsedURL[2])\n            }\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isFileSource(source)) {\n        blobToArrayBuffer(source.file).then(function (buffer) {\n          res({\n            Bytes: new Uint8Array(buffer)\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isBytesSource(source)) {\n        var bytes = source.bytes;\n        if (bytes instanceof Blob) {\n          blobToArrayBuffer(bytes).then(function (buffer) {\n            res({\n              Bytes: new Uint8Array(buffer)\n            });\n          }).catch(function (err) {\n            return rej(err);\n          });\n        }\n        if (bytes instanceof ArrayBuffer || bytes instanceof Buffer) {\n          res({\n            Bytes: new Uint8Array(bytes)\n          });\n        }\n        // everything else can be directly passed to Rekognition / Textract.\n        res({\n          Bytes: bytes\n        });\n      } else {\n        rej('Input source is not configured correctly.');\n      }\n    });\n  };\n  /**\n   * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n   * image and converts it into machine-readable text.\n   * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n   * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n   */\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, _e, configFormat, inputDocument, err_1, format, featureTypes, textractParam, rekognitionParam, detectTextCommand, rekognitionData, rekognitionResponse, detectDocumentTextCommand, Blocks, err_2, param, analyzeDocumentCommand, Blocks, err_3;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _f.sent();\n            if (!credentials) return [2 /*return*/, Promise.reject('No credentials')];\n            _a = this._config.identifyText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).format, configFormat = _e === void 0 ? 'PLAIN' : _e;\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            this.textractClient = new TextractClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            _f.label = 2;\n          case 2:\n            _f.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, this.configureSource(input.text.source)];\n          case 3:\n            inputDocument = _f.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            err_1 = _f.sent();\n            return [2 /*return*/, Promise.reject(err_1)];\n          case 5:\n            format = input.text.format || configFormat;\n            featureTypes = [];\n            if (format === 'FORM' || format === 'ALL') featureTypes.push('FORMS');\n            if (format === 'TABLE' || format === 'ALL') featureTypes.push('TABLES');\n            if (!(featureTypes.length === 0)) return [3 /*break*/, 11];\n            textractParam = {\n              Document: inputDocument\n            };\n            rekognitionParam = {\n              Image: inputDocument\n            };\n            _f.label = 6;\n          case 6:\n            _f.trys.push([6, 9,, 10]);\n            detectTextCommand = new DetectTextCommand(rekognitionParam);\n            return [4 /*yield*/, this.rekognitionClient.send(detectTextCommand)];\n          case 7:\n            rekognitionData = _f.sent();\n            rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n            if (rekognitionResponse.text.words.length < 50) {\n              // did not hit the word limit, return the data\n              return [2 /*return*/, rekognitionResponse];\n            }\n            detectDocumentTextCommand = new DetectDocumentTextCommand(textractParam);\n            return [4 /*yield*/, this.textractClient.send(detectDocumentTextCommand)];\n          case 8:\n            Blocks = _f.sent().Blocks;\n            if (rekognitionData.TextDetections.length > Blocks.length) {\n              return [2 /*return*/, rekognitionResponse];\n            }\n            return [2 /*return*/, categorizeTextractBlocks(Blocks)];\n          case 9:\n            err_2 = _f.sent();\n            Promise.reject(err_2);\n            return [3 /*break*/, 10];\n          case 10:\n            return [3 /*break*/, 15];\n          case 11:\n            param = {\n              Document: inputDocument,\n              FeatureTypes: featureTypes\n            };\n            _f.label = 12;\n          case 12:\n            _f.trys.push([12, 14,, 15]);\n            analyzeDocumentCommand = new AnalyzeDocumentCommand(param);\n            return [4 /*yield*/, this.textractClient.send(analyzeDocumentCommand)];\n          case 13:\n            Blocks = _f.sent().Blocks;\n            return [2 /*return*/, categorizeTextractBlocks(Blocks)];\n          case 14:\n            err_3 = _f.sent();\n            return [2 /*return*/, Promise.reject(err_3)];\n          case 15:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Identify instances of real world entities from an image and if it contains unsafe content.\n   * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n   */\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, _e, type, inputImage_1, param, servicePromises, entityType, err_4;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            _f.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _f.sent();\n            if (!credentials) return [2 /*return*/, Promise.reject('No credentials')];\n            _a = this._config.identifyLabels, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, type = _e === void 0 ? 'LABELS' : _e;\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            return [4 /*yield*/, this.configureSource(input.labels.source).then(function (data) {\n              inputImage_1 = data;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n          case 2:\n            _f.sent();\n            param = {\n              Image: inputImage_1\n            };\n            servicePromises = [];\n            entityType = input.labels.type || type;\n            if (entityType === 'LABELS' || entityType === 'ALL') {\n              servicePromises.push(this.detectLabels(param));\n            }\n            if (entityType === 'UNSAFE' || entityType === 'ALL') {\n              servicePromises.push(this.detectModerationLabels(param));\n            }\n            return [2 /*return*/, Promise.all(servicePromises).then(function (data) {\n              var identifyResult = {};\n              // concatenate resolved promises to a single object\n              data.forEach(function (val) {\n                identifyResult = __assign(__assign({}, identifyResult), val);\n              });\n              return identifyResult;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n          case 3:\n            err_4 = _f.sent();\n            return [2 /*return*/, Promise.reject(err_4)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectLabels and organizes the returned data.\n   * @param {DetectLabelsInput} param - parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n   */\n  AmazonAIIdentifyPredictionsProvider.prototype.detectLabels = function (param) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectLabelsCommand, data, detectLabelData, err_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            detectLabelsCommand = new DetectLabelsCommand(param);\n            return [4 /*yield*/, this.rekognitionClient.send(detectLabelsCommand)];\n          case 1:\n            data = _a.sent();\n            if (!data.Labels) return [2 /*return*/, {\n              labels: null\n            }]; // no image was detected\n            detectLabelData = data.Labels.map(function (val) {\n              var boxes = val.Instances ? val.Instances.map(function (val) {\n                return makeCamelCase(val.BoundingBox);\n              }) : undefined;\n              return {\n                name: val.Name,\n                boundingBoxes: boxes,\n                metadata: {\n                  confidence: val.Confidence,\n                  parents: makeCamelCaseArray(val.Parents)\n                }\n              };\n            });\n            return [2 /*return*/, {\n              labels: detectLabelData\n            }];\n          case 2:\n            err_5 = _a.sent();\n            return [2 /*return*/, Promise.reject(err_5)];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectModerationLabels and organizes the returned data.\n   * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n   */\n  AmazonAIIdentifyPredictionsProvider.prototype.detectModerationLabels = function (param) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectModerationLabelsCommand, data, err_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            detectModerationLabelsCommand = new DetectModerationLabelsCommand(param);\n            return [4 /*yield*/, this.rekognitionClient.send(detectModerationLabelsCommand)];\n          case 1:\n            data = _a.sent();\n            if (data.ModerationLabels.length !== 0) {\n              return [2 /*return*/, {\n                unsafe: 'YES'\n              }];\n            } else {\n              return [2 /*return*/, {\n                unsafe: 'NO'\n              }];\n            }\n            return [3 /*break*/, 3];\n          case 2:\n            err_6 = _a.sent();\n            return [2 /*return*/, Promise.reject(err_6)];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Identify faces within an image that is provided as input, and match faces from a collection\n   * or identify celebrities.\n   * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n   * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n   */\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, celebrityDetectionEnabled, _e, _f, _g, collectionIdConfig, _h, maxFacesConfig, inputImage, param, recognizeCelebritiesCommand, data, faces, err_7, _j, _k, collectionId, _l, maxFaces, updatedParam, searchFacesByImageCommand, data, faces, err_8, detectFacesCommand, data, faces, err_9;\n      var _this = this;\n      return __generator(this, function (_m) {\n        switch (_m.label) {\n          case 0:\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _m.sent();\n            if (!credentials) return [2 /*return*/, Promise.reject('No credentials')];\n            _a = this._config.identifyEntities, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.celebrityDetectionEnabled, celebrityDetectionEnabled = _d === void 0 ? false : _d, _e = _b.defaults, _f = _e === void 0 ? {} : _e, _g = _f.collectionId, collectionIdConfig = _g === void 0 ? '' : _g, _h = _f.maxEntities, maxFacesConfig = _h === void 0 ? 50 : _h;\n            // default arguments\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            return [4 /*yield*/, this.configureSource(input.entities.source).then(function (data) {\n              return inputImage = data;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n          case 2:\n            _m.sent();\n            param = {\n              Attributes: ['ALL'],\n              Image: inputImage\n            };\n            if (!(isIdentifyCelebrities(input.entities) && input.entities.celebrityDetection)) return [3 /*break*/, 7];\n            if (!celebrityDetectionEnabled) {\n              return [2 /*return*/, Promise.reject('Error: You have to enable celebrity detection first')];\n            }\n            _m.label = 3;\n          case 3:\n            _m.trys.push([3, 5,, 6]);\n            recognizeCelebritiesCommand = new RecognizeCelebritiesCommand(param);\n            return [4 /*yield*/, this.rekognitionClient.send(recognizeCelebritiesCommand)];\n          case 4:\n            data = _m.sent();\n            faces = data.CelebrityFaces.map(function (celebrity) {\n              return {\n                boundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n                landmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n                metadata: __assign(__assign({}, makeCamelCase(celebrity, ['Id', 'Name', 'Urls'])), {\n                  pose: makeCamelCase(celebrity.Face.Pose)\n                })\n              };\n            });\n            return [2 /*return*/, {\n              entities: faces\n            }];\n          case 5:\n            err_7 = _m.sent();\n            return [2 /*return*/, Promise.reject(err_7)];\n          case 6:\n            return [3 /*break*/, 15];\n          case 7:\n            if (!(isIdentifyFromCollection(input.entities) && input.entities.collection)) return [3 /*break*/, 12];\n            _j = input.entities, _k = _j.collectionId, collectionId = _k === void 0 ? collectionIdConfig : _k, _l = _j.maxEntities, maxFaces = _l === void 0 ? maxFacesConfig : _l;\n            updatedParam = __assign(__assign({}, param), {\n              CollectionId: collectionId,\n              MaxFaces: maxFaces\n            });\n            _m.label = 8;\n          case 8:\n            _m.trys.push([8, 10,, 11]);\n            searchFacesByImageCommand = new SearchFacesByImageCommand(updatedParam);\n            return [4 /*yield*/, this.rekognitionClient.send(searchFacesByImageCommand)];\n          case 9:\n            data = _m.sent();\n            faces = data.FaceMatches.map(function (val) {\n              return {\n                boundingBox: makeCamelCase(val.Face.BoundingBox),\n                metadata: {\n                  externalImageId: _this.decodeExternalImageId(val.Face.ExternalImageId),\n                  similarity: val.Similarity\n                }\n              };\n            });\n            return [2 /*return*/, {\n              entities: faces\n            }];\n          case 10:\n            err_8 = _m.sent();\n            return [2 /*return*/, Promise.reject(err_8)];\n          case 11:\n            return [3 /*break*/, 15];\n          case 12:\n            _m.trys.push([12, 14,, 15]);\n            detectFacesCommand = new DetectFacesCommand(param);\n            return [4 /*yield*/, this.rekognitionClient.send(detectFacesCommand)];\n          case 13:\n            data = _m.sent();\n            faces = data.FaceDetails.map(function (detail) {\n              // face attributes keys we want to extract from Rekognition's response\n              var attributeKeys = ['Smile', 'Eyeglasses', 'Sunglasses', 'Gender', 'Beard', 'Mustache', 'EyesOpen', 'MouthOpen'];\n              var faceAttributes = makeCamelCase(detail, attributeKeys);\n              if (detail.Emotions) {\n                faceAttributes['emotions'] = detail.Emotions.map(function (emotion) {\n                  return emotion.Type;\n                });\n              }\n              return {\n                boundingBox: makeCamelCase(detail.BoundingBox),\n                landmarks: makeCamelCaseArray(detail.Landmarks),\n                ageRange: makeCamelCase(detail.AgeRange),\n                attributes: faceAttributes,\n                metadata: {\n                  confidence: detail.Confidence,\n                  pose: makeCamelCase(detail.Pose)\n                }\n              };\n            });\n            return [2 /*return*/, {\n              entities: faces\n            }];\n          case 14:\n            err_9 = _m.sent();\n            return [2 /*return*/, Promise.reject(err_9)];\n          case 15:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIIdentifyPredictionsProvider.prototype.decodeExternalImageId = function (externalImageId) {\n    return ('' + externalImageId).replace(/::/g, '/');\n  };\n  return AmazonAIIdentifyPredictionsProvider;\n}(AbstractIdentifyPredictionsProvider);\nexport { AmazonAIIdentifyPredictionsProvider };\n/**\n * @deprecated use named import\n */\nexport default AmazonAIIdentifyPredictionsProvider;","map":{"version":3,"sources":["../../src/Providers/AmazonAIIdentifyPredictionsProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { Credentials, getAmplifyUserAgent, } from '@aws-amplify/core';\nimport Storage from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport { RekognitionClient, SearchFacesByImageCommand, DetectTextCommand, DetectLabelsCommand, DetectFacesCommand, DetectModerationLabelsCommand, RecognizeCelebritiesCommand, } from '@aws-sdk/client-rekognition';\nimport { isStorageSource, isFileSource, isBytesSource, isIdentifyCelebrities, isIdentifyFromCollection, } from '../types';\nimport { TextractClient, DetectDocumentTextCommand, AnalyzeDocumentCommand, } from '@aws-sdk/client-textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks, } from './IdentifyTextUtils';\nvar AmazonAIIdentifyPredictionsProvider = /** @class */ (function (_super) {\n    __extends(AmazonAIIdentifyPredictionsProvider, _super);\n    function AmazonAIIdentifyPredictionsProvider() {\n        return _super.call(this) || this;\n    }\n    AmazonAIIdentifyPredictionsProvider.prototype.getProviderName = function () {\n        return 'AmazonAIIdentifyPredictionsProvider';\n    };\n    /**\n     * Verify user input source and converts it into source object readable by Rekognition and Textract.\n     * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n     * @param {IdentifySource} source - User input source that directs to the object user wants\n     * to identify (storage, file, or bytes).\n     * @return {Promise<Image>} - Promise resolving to the converted source object.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.configureSource = function (source) {\n        return new Promise(function (res, rej) {\n            if (isStorageSource(source)) {\n                var storageConfig = {\n                    level: source.level,\n                    identityId: source.identityId,\n                };\n                Storage.get(source.key, storageConfig)\n                    .then(function (url) {\n                    var parser = /https:\\/\\/([a-zA-Z0-9%-_.]+)\\.s3\\.[A-Za-z0-9%-._~]+\\/([a-zA-Z0-9%-._~/]+)\\?/;\n                    var parsedURL = url.match(parser);\n                    if (parsedURL.length < 3)\n                        rej('Invalid S3 key was given.');\n                    res({\n                        S3Object: {\n                            Bucket: parsedURL[1],\n                            Name: decodeURIComponent(parsedURL[2]),\n                        },\n                    });\n                })\n                    .catch(function (err) { return rej(err); });\n            }\n            else if (isFileSource(source)) {\n                blobToArrayBuffer(source.file)\n                    .then(function (buffer) {\n                    res({ Bytes: new Uint8Array(buffer) });\n                })\n                    .catch(function (err) { return rej(err); });\n            }\n            else if (isBytesSource(source)) {\n                var bytes = source.bytes;\n                if (bytes instanceof Blob) {\n                    blobToArrayBuffer(bytes)\n                        .then(function (buffer) {\n                        res({ Bytes: new Uint8Array(buffer) });\n                    })\n                        .catch(function (err) { return rej(err); });\n                }\n                if (bytes instanceof ArrayBuffer || bytes instanceof Buffer) {\n                    res({ Bytes: new Uint8Array(bytes) });\n                }\n                // everything else can be directly passed to Rekognition / Textract.\n                res({ Bytes: bytes });\n            }\n            else {\n                rej('Input source is not configured correctly.');\n            }\n        });\n    };\n    /**\n     * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n     * image and converts it into machine-readable text.\n     * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n     * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, _e, configFormat, inputDocument, err_1, format, featureTypes, textractParam, rekognitionParam, detectTextCommand, rekognitionData, rekognitionResponse, detectDocumentTextCommand, Blocks, err_2, param, analyzeDocumentCommand, Blocks, err_3;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _f.sent();\n                        if (!credentials)\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        _a = this._config.identifyText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).format, configFormat = _e === void 0 ? 'PLAIN' : _e;\n                        this.rekognitionClient = new RekognitionClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        this.textractClient = new TextractClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        _f.label = 2;\n                    case 2:\n                        _f.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, this.configureSource(input.text.source)];\n                    case 3:\n                        inputDocument = _f.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _f.sent();\n                        return [2 /*return*/, Promise.reject(err_1)];\n                    case 5:\n                        format = input.text.format || configFormat;\n                        featureTypes = [];\n                        if (format === 'FORM' || format === 'ALL')\n                            featureTypes.push('FORMS');\n                        if (format === 'TABLE' || format === 'ALL')\n                            featureTypes.push('TABLES');\n                        if (!(featureTypes.length === 0)) return [3 /*break*/, 11];\n                        textractParam = {\n                            Document: inputDocument,\n                        };\n                        rekognitionParam = {\n                            Image: inputDocument,\n                        };\n                        _f.label = 6;\n                    case 6:\n                        _f.trys.push([6, 9, , 10]);\n                        detectTextCommand = new DetectTextCommand(rekognitionParam);\n                        return [4 /*yield*/, this.rekognitionClient.send(detectTextCommand)];\n                    case 7:\n                        rekognitionData = _f.sent();\n                        rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n                        if (rekognitionResponse.text.words.length < 50) {\n                            // did not hit the word limit, return the data\n                            return [2 /*return*/, rekognitionResponse];\n                        }\n                        detectDocumentTextCommand = new DetectDocumentTextCommand(textractParam);\n                        return [4 /*yield*/, this.textractClient.send(detectDocumentTextCommand)];\n                    case 8:\n                        Blocks = (_f.sent()).Blocks;\n                        if (rekognitionData.TextDetections.length > Blocks.length) {\n                            return [2 /*return*/, rekognitionResponse];\n                        }\n                        return [2 /*return*/, categorizeTextractBlocks(Blocks)];\n                    case 9:\n                        err_2 = _f.sent();\n                        Promise.reject(err_2);\n                        return [3 /*break*/, 10];\n                    case 10: return [3 /*break*/, 15];\n                    case 11:\n                        param = {\n                            Document: inputDocument,\n                            FeatureTypes: featureTypes,\n                        };\n                        _f.label = 12;\n                    case 12:\n                        _f.trys.push([12, 14, , 15]);\n                        analyzeDocumentCommand = new AnalyzeDocumentCommand(param);\n                        return [4 /*yield*/, this.textractClient.send(analyzeDocumentCommand)];\n                    case 13:\n                        Blocks = (_f.sent()).Blocks;\n                        return [2 /*return*/, categorizeTextractBlocks(Blocks)];\n                    case 14:\n                        err_3 = _f.sent();\n                        return [2 /*return*/, Promise.reject(err_3)];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Identify instances of real world entities from an image and if it contains unsafe content.\n     * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, _e, type, inputImage_1, param, servicePromises, entityType, err_4;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        _f.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _f.sent();\n                        if (!credentials)\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        _a = this._config.identifyLabels, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, type = _e === void 0 ? 'LABELS' : _e;\n                        this.rekognitionClient = new RekognitionClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        return [4 /*yield*/, this.configureSource(input.labels.source)\n                                .then(function (data) {\n                                inputImage_1 = data;\n                            })\n                                .catch(function (err) {\n                                return Promise.reject(err);\n                            })];\n                    case 2:\n                        _f.sent();\n                        param = { Image: inputImage_1 };\n                        servicePromises = [];\n                        entityType = input.labels.type || type;\n                        if (entityType === 'LABELS' || entityType === 'ALL') {\n                            servicePromises.push(this.detectLabels(param));\n                        }\n                        if (entityType === 'UNSAFE' || entityType === 'ALL') {\n                            servicePromises.push(this.detectModerationLabels(param));\n                        }\n                        return [2 /*return*/, Promise.all(servicePromises)\n                                .then(function (data) {\n                                var identifyResult = {};\n                                // concatenate resolved promises to a single object\n                                data.forEach(function (val) {\n                                    identifyResult = __assign(__assign({}, identifyResult), val);\n                                });\n                                return identifyResult;\n                            })\n                                .catch(function (err) { return Promise.reject(err); })];\n                    case 3:\n                        err_4 = _f.sent();\n                        return [2 /*return*/, Promise.reject(err_4)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Calls Rekognition.detectLabels and organizes the returned data.\n     * @param {DetectLabelsInput} param - parameter to be passed onto Rekognition\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.detectLabels = function (param) {\n        return __awaiter(this, void 0, void 0, function () {\n            var detectLabelsCommand, data, detectLabelData, err_5;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        detectLabelsCommand = new DetectLabelsCommand(param);\n                        return [4 /*yield*/, this.rekognitionClient.send(detectLabelsCommand)];\n                    case 1:\n                        data = _a.sent();\n                        if (!data.Labels)\n                            return [2 /*return*/, { labels: null }]; // no image was detected\n                        detectLabelData = data.Labels.map(function (val) {\n                            var boxes = val.Instances\n                                ? val.Instances.map(function (val) { return makeCamelCase(val.BoundingBox); })\n                                : undefined;\n                            return {\n                                name: val.Name,\n                                boundingBoxes: boxes,\n                                metadata: {\n                                    confidence: val.Confidence,\n                                    parents: makeCamelCaseArray(val.Parents),\n                                },\n                            };\n                        });\n                        return [2 /*return*/, { labels: detectLabelData }];\n                    case 2:\n                        err_5 = _a.sent();\n                        return [2 /*return*/, Promise.reject(err_5)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Calls Rekognition.detectModerationLabels and organizes the returned data.\n     * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.detectModerationLabels = function (param) {\n        return __awaiter(this, void 0, void 0, function () {\n            var detectModerationLabelsCommand, data, err_6;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        detectModerationLabelsCommand = new DetectModerationLabelsCommand(param);\n                        return [4 /*yield*/, this.rekognitionClient.send(detectModerationLabelsCommand)];\n                    case 1:\n                        data = _a.sent();\n                        if (data.ModerationLabels.length !== 0) {\n                            return [2 /*return*/, { unsafe: 'YES' }];\n                        }\n                        else {\n                            return [2 /*return*/, { unsafe: 'NO' }];\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        err_6 = _a.sent();\n                        return [2 /*return*/, Promise.reject(err_6)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Identify faces within an image that is provided as input, and match faces from a collection\n     * or identify celebrities.\n     * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n     * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, celebrityDetectionEnabled, _e, _f, _g, collectionIdConfig, _h, maxFacesConfig, inputImage, param, recognizeCelebritiesCommand, data, faces, err_7, _j, _k, collectionId, _l, maxFaces, updatedParam, searchFacesByImageCommand, data, faces, err_8, detectFacesCommand, data, faces, err_9;\n            var _this = this;\n            return __generator(this, function (_m) {\n                switch (_m.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _m.sent();\n                        if (!credentials)\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        _a = this._config.identifyEntities, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.celebrityDetectionEnabled, celebrityDetectionEnabled = _d === void 0 ? false : _d, _e = _b.defaults, _f = _e === void 0 ? {} : _e, _g = _f.collectionId, collectionIdConfig = _g === void 0 ? '' : _g, _h = _f.maxEntities, maxFacesConfig = _h === void 0 ? 50 : _h;\n                        // default arguments\n                        this.rekognitionClient = new RekognitionClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        return [4 /*yield*/, this.configureSource(input.entities.source)\n                                .then(function (data) { return (inputImage = data); })\n                                .catch(function (err) {\n                                return Promise.reject(err);\n                            })];\n                    case 2:\n                        _m.sent();\n                        param = { Attributes: ['ALL'], Image: inputImage };\n                        if (!(isIdentifyCelebrities(input.entities) &&\n                            input.entities.celebrityDetection)) return [3 /*break*/, 7];\n                        if (!celebrityDetectionEnabled) {\n                            return [2 /*return*/, Promise.reject('Error: You have to enable celebrity detection first')];\n                        }\n                        _m.label = 3;\n                    case 3:\n                        _m.trys.push([3, 5, , 6]);\n                        recognizeCelebritiesCommand = new RecognizeCelebritiesCommand(param);\n                        return [4 /*yield*/, this.rekognitionClient.send(recognizeCelebritiesCommand)];\n                    case 4:\n                        data = _m.sent();\n                        faces = data.CelebrityFaces.map(function (celebrity) {\n                            return {\n                                boundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n                                landmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n                                metadata: __assign(__assign({}, makeCamelCase(celebrity, ['Id', 'Name', 'Urls'])), { pose: makeCamelCase(celebrity.Face.Pose) }),\n                            };\n                        });\n                        return [2 /*return*/, { entities: faces }];\n                    case 5:\n                        err_7 = _m.sent();\n                        return [2 /*return*/, Promise.reject(err_7)];\n                    case 6: return [3 /*break*/, 15];\n                    case 7:\n                        if (!(isIdentifyFromCollection(input.entities) &&\n                            input.entities.collection)) return [3 /*break*/, 12];\n                        _j = input.entities, _k = _j.collectionId, collectionId = _k === void 0 ? collectionIdConfig : _k, _l = _j.maxEntities, maxFaces = _l === void 0 ? maxFacesConfig : _l;\n                        updatedParam = __assign(__assign({}, param), { CollectionId: collectionId, MaxFaces: maxFaces });\n                        _m.label = 8;\n                    case 8:\n                        _m.trys.push([8, 10, , 11]);\n                        searchFacesByImageCommand = new SearchFacesByImageCommand(updatedParam);\n                        return [4 /*yield*/, this.rekognitionClient.send(searchFacesByImageCommand)];\n                    case 9:\n                        data = _m.sent();\n                        faces = data.FaceMatches.map(function (val) {\n                            return {\n                                boundingBox: makeCamelCase(val.Face.BoundingBox),\n                                metadata: {\n                                    externalImageId: _this.decodeExternalImageId(val.Face.ExternalImageId),\n                                    similarity: val.Similarity,\n                                },\n                            };\n                        });\n                        return [2 /*return*/, { entities: faces }];\n                    case 10:\n                        err_8 = _m.sent();\n                        return [2 /*return*/, Promise.reject(err_8)];\n                    case 11: return [3 /*break*/, 15];\n                    case 12:\n                        _m.trys.push([12, 14, , 15]);\n                        detectFacesCommand = new DetectFacesCommand(param);\n                        return [4 /*yield*/, this.rekognitionClient.send(detectFacesCommand)];\n                    case 13:\n                        data = _m.sent();\n                        faces = data.FaceDetails.map(function (detail) {\n                            // face attributes keys we want to extract from Rekognition's response\n                            var attributeKeys = [\n                                'Smile',\n                                'Eyeglasses',\n                                'Sunglasses',\n                                'Gender',\n                                'Beard',\n                                'Mustache',\n                                'EyesOpen',\n                                'MouthOpen'\n                            ];\n                            var faceAttributes = makeCamelCase(detail, attributeKeys);\n                            if (detail.Emotions) {\n                                faceAttributes['emotions'] = detail.Emotions.map(function (emotion) { return emotion.Type; });\n                            }\n                            return {\n                                boundingBox: makeCamelCase(detail.BoundingBox),\n                                landmarks: makeCamelCaseArray(detail.Landmarks),\n                                ageRange: makeCamelCase(detail.AgeRange),\n                                attributes: faceAttributes,\n                                metadata: {\n                                    confidence: detail.Confidence,\n                                    pose: makeCamelCase(detail.Pose),\n                                },\n                            };\n                        });\n                        return [2 /*return*/, { entities: faces }];\n                    case 14:\n                        err_9 = _m.sent();\n                        return [2 /*return*/, Promise.reject(err_9)];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AmazonAIIdentifyPredictionsProvider.prototype.decodeExternalImageId = function (externalImageId) {\n        return ('' + externalImageId).replace(/::/g, '/');\n    };\n    return AmazonAIIdentifyPredictionsProvider;\n}(AbstractIdentifyPredictionsProvider));\nexport { AmazonAIIdentifyPredictionsProvider };\n/**\n * @deprecated use named import\n */\nexport default AmazonAIIdentifyPredictionsProvider;\n//# sourceMappingURL=AmazonAIIdentifyPredictionsProvider.js.map"]},"metadata":{},"sourceType":"module"}