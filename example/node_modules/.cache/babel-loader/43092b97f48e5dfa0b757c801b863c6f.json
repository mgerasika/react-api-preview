{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetDocumentAnalysisRequest, GetDocumentAnalysisResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetDocumentAnalysisCommand, serializeAws_json1_1GetDocumentAnalysisCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.</p>\n *          <p>You start asynchronous text analysis by calling <a>StartDocumentAnalysis</a>, which returns a job identifier\n *             (<code>JobId</code>). When the text analysis operation finishes, Amazon Textract publishes a\n *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n *             <code>StartDocumentAnalysis</code>. To get the results of the text-detection operation,\n *          first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *          If so, call <code>GetDocumentAnalysis</code>, and pass the job identifier\n *             (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.</p>\n *          <p>\n *             <code>GetDocumentAnalysis</code> returns an array of <a>Block</a> objects. The following\n *          types of information are returned: </p>\n *          <ul>\n *             <li>\n *                <p>Form data (key-value pairs). The related information is returned in two <a>Block</a> objects, each of type <code>KEY_VALUE_SET</code>: a KEY\n *             <code>Block</code> object and a VALUE <code>Block</code> object. For example,\n *             <i>Name: Ana Silva Carolina</i> contains a key and value.\n *             <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is\n *             the value.</p>\n *             </li>\n *             <li>\n *                <p>Table and table cell data. A TABLE <code>Block</code> object contains information about a detected table. A CELL\n *             <code>Block</code> object is returned for each cell in a table.</p>\n *             </li>\n *             <li>\n *                <p>Lines and words of text. A LINE <code>Block</code> object contains one or more WORD <code>Block</code> objects.\n *             All lines and words that are detected in the document are returned (including text that doesn't have a\n *             relationship with the value of the <code>StartDocumentAnalysis</code>\n *                   <code>FeatureTypes</code> input parameter). </p>\n *             </li>\n *          </ul>\n *\n *          <p>Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.\n *          A SELECTION_ELEMENT <code>Block</code> object contains information about a selection element,\n *          including the selection status.</p>\n *\n *\n *\n *          <p>Use the <code>MaxResults</code> parameter to limit the number of blocks that are\n *          returned. If there are more results than specified in <code>MaxResults</code>, the value of\n *             <code>NextToken</code> in the operation response contains a pagination token for getting\n *          the next set of results. To get the next page of results, call\n *             <code>GetDocumentAnalysis</code>, and populate the <code>NextToken</code> request\n *          parameter with the token value that's returned from the previous call to\n *             <code>GetDocumentAnalysis</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\">Document Text Analysis</a>.</p>\n */\nvar GetDocumentAnalysisCommand = /** @class */function (_super) {\n  __extends(GetDocumentAnalysisCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetDocumentAnalysisCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetDocumentAnalysisCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"TextractClient\";\n    var commandName = \"GetDocumentAnalysisCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetDocumentAnalysisRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetDocumentAnalysisResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetDocumentAnalysisCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetDocumentAnalysisCommand(input, context);\n  };\n  GetDocumentAnalysisCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetDocumentAnalysisCommand(output, context);\n  };\n  return GetDocumentAnalysisCommand;\n}($Command);\nexport { GetDocumentAnalysisCommand };","map":{"version":3,"sources":["../../../commands/GetDocumentAnalysisCommand.ts"],"names":[],"mappings":";AACA,SAAS,0BAA0B,EAAE,2BAA2B,QAAQ,oBAAoB;AAC5F,SACE,gDAAgD,EAChD,8CAA8C,QACzC,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CG;AACH,IAAA,0BAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAgD,SAAA,CAAA,0BAAA,EAAA,MAAA,CAAA;EAK9C;EACA;EAEA,SAAA,0BAAA,CAAqB,KAAsC,EAAA;IAA3D,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,0BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA2C,EAC3C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,gBAAgB;IACnC,IAAM,WAAW,GAAG,4BAA4B;IAChD,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,0BAA0B,CAAC,kBAAkB;MACtE,wBAAwB,EAAE,2BAA2B,CAAC;KACvD;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,0BAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAAsC,EAAE,OAAuB,EAAA;IAC/E,OAAO,8CAA8C,CAAC,KAAK,EAAE,OAAO,CAAC;EACvE,CAAC;EAEO,0BAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,gDAAgD,CAAC,MAAM,EAAE,OAAO,CAAC;EAC1E,CAAC;EAIH,OAAA,0BAAC;AAAD,CAAC,CAtD+C,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetDocumentAnalysisRequest, GetDocumentAnalysisResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetDocumentAnalysisCommand, serializeAws_json1_1GetDocumentAnalysisCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.</p>\n *          <p>You start asynchronous text analysis by calling <a>StartDocumentAnalysis</a>, which returns a job identifier\n *             (<code>JobId</code>). When the text analysis operation finishes, Amazon Textract publishes a\n *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n *             <code>StartDocumentAnalysis</code>. To get the results of the text-detection operation,\n *          first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *          If so, call <code>GetDocumentAnalysis</code>, and pass the job identifier\n *             (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.</p>\n *          <p>\n *             <code>GetDocumentAnalysis</code> returns an array of <a>Block</a> objects. The following\n *          types of information are returned: </p>\n *          <ul>\n *             <li>\n *                <p>Form data (key-value pairs). The related information is returned in two <a>Block</a> objects, each of type <code>KEY_VALUE_SET</code>: a KEY\n *             <code>Block</code> object and a VALUE <code>Block</code> object. For example,\n *             <i>Name: Ana Silva Carolina</i> contains a key and value.\n *             <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is\n *             the value.</p>\n *             </li>\n *             <li>\n *                <p>Table and table cell data. A TABLE <code>Block</code> object contains information about a detected table. A CELL\n *             <code>Block</code> object is returned for each cell in a table.</p>\n *             </li>\n *             <li>\n *                <p>Lines and words of text. A LINE <code>Block</code> object contains one or more WORD <code>Block</code> objects.\n *             All lines and words that are detected in the document are returned (including text that doesn't have a\n *             relationship with the value of the <code>StartDocumentAnalysis</code>\n *                   <code>FeatureTypes</code> input parameter). </p>\n *             </li>\n *          </ul>\n *\n *          <p>Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.\n *          A SELECTION_ELEMENT <code>Block</code> object contains information about a selection element,\n *          including the selection status.</p>\n *\n *\n *\n *          <p>Use the <code>MaxResults</code> parameter to limit the number of blocks that are\n *          returned. If there are more results than specified in <code>MaxResults</code>, the value of\n *             <code>NextToken</code> in the operation response contains a pagination token for getting\n *          the next set of results. To get the next page of results, call\n *             <code>GetDocumentAnalysis</code>, and populate the <code>NextToken</code> request\n *          parameter with the token value that's returned from the previous call to\n *             <code>GetDocumentAnalysis</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\">Document Text Analysis</a>.</p>\n */\nvar GetDocumentAnalysisCommand = /** @class */ (function (_super) {\n    __extends(GetDocumentAnalysisCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetDocumentAnalysisCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetDocumentAnalysisCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"TextractClient\";\n        var commandName = \"GetDocumentAnalysisCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetDocumentAnalysisRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: GetDocumentAnalysisResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetDocumentAnalysisCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1GetDocumentAnalysisCommand(input, context);\n    };\n    GetDocumentAnalysisCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1GetDocumentAnalysisCommand(output, context);\n    };\n    return GetDocumentAnalysisCommand;\n}($Command));\nexport { GetDocumentAnalysisCommand };\n//# sourceMappingURL=GetDocumentAnalysisCommand.js.map"]},"metadata":{},"sourceType":"module"}