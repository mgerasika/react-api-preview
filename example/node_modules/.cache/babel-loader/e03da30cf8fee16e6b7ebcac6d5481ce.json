{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nrequire('../constants/is-debug.constant.js');\nvar React = require('react');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nconst StoreContext = /*#__PURE__*/React__default[\"default\"].createContext(undefined);\nexports.StoreContext = StoreContext;","map":{"version":3,"sources":["../../../src/store/store.context.tsx"],"names":["StoreContext","React","createContext","undefined"],"mappings":";;;;;;;;;;;;;AAeO,MAAMA,YAAY,GAAA,aAAGC,cAAAA,CAAAA,SAAAA,CAAK,CAACC,aAAa,CAAgBC,SAAS,CAAA","sourcesContent":["import { IS_DEBUG } from '@common/constants/is-debug.constant';\nimport { IDictionary } from '@common/interfaces/dictionary.interface';\nimport { ICommonUISettings } from '@common/interfaces/ui-settings.interface';\nimport React, { ReactNode, useEffect, useRef, useState } from 'react';\n\nexport interface IStore {\n    uiCommonSettings?: ICommonUISettings;\n    example: string;\n}\n\nexport interface IStoreContext {\n    store: IStore;\n    updateStore: (newStore: IStore) => void;\n}\n\nexport const StoreContext = React.createContext<IStoreContext>(undefined as unknown as IStoreContext);\n\ninterface IProps {\n    children: ReactNode;\n}\n\n// Just for example\nexport const StoreContextProvider = ({ children }: IProps): JSX.Element => {\n    const [store, updateStore] = useState<IStore>({\n        uiCommonSettings: undefined,\n        example: 'hi',\n    });\n\n    const devToolsRef = useRef<{ dispatch: (e: { type: string; payload: IStore }) => void }>();\n    useEffect(() => {\n        const __REDUX_DEVTOOLS_EXTENSION__ = (window as IDictionary).__REDUX_DEVTOOLS_EXTENSION__;\n        if (IS_DEBUG && __REDUX_DEVTOOLS_EXTENSION__) {\n            if (!devToolsRef.current) {\n                const res = __REDUX_DEVTOOLS_EXTENSION__((_prev: IStore, newStore: IStore) => {\n                    return { ...newStore };\n                }, store);\n                devToolsRef.current = res;\n            }\n            devToolsRef.current?.dispatch({ type: 'updateStore', payload: store });\n        }\n    }, [store]);\n    return <StoreContext.Provider value={{ store, updateStore }}>{children}</StoreContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"script"}