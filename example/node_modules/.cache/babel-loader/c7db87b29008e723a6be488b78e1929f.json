{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeV2Client, RecognizeTextCommand, RecognizeUtteranceCommand } from '@aws-sdk/client-lex-runtime-v2';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nimport { unGzipBase64AsJson } from './AWSLexProviderHelper/commonUtils';\nvar logger = new Logger('AWSLexV2Provider');\nvar AWSLexV2Provider = /** @class */function (_super) {\n  __extends(AWSLexV2Provider, _super);\n  /**\n   * Initialize Interactions with AWS configurations\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n  function AWSLexV2Provider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n  AWSLexV2Provider.prototype.getProviderName = function () {\n    return 'AWSLexV2Provider';\n  };\n  /**\n   * Configure Interactions part with aws configuration\n   * @param {AWSLexV2ProviderOptions} config - Configuration of the Interactions\n   * @return {AWSLexV2ProviderOptions} - Current configuration\n   */\n  AWSLexV2Provider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var propertiesToTest = ['name', 'botId', 'aliasId', 'localeId', 'providerName', 'region'];\n    Object.keys(config).forEach(function (botKey) {\n      var botConfig = config[botKey];\n      // is bot config correct\n      if (!propertiesToTest.every(function (x) {\n        return x in botConfig;\n      })) {\n        throw new Error('invalid bot configuration');\n      }\n    });\n    return _super.prototype.configure.call(this, config);\n  };\n  /**\n   * Send a message to a bot\n   * @async\n   * @param {string} botname - Bot name to send the message\n   * @param {string | InteractionsMessage} message - message to send to the bot\n   * @return {Promise<InteractionsResponse>} A promise resolves to the response from the bot\n   */\n  AWSLexV2Provider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, error_1, response, reqBaseParams;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // check if bot exists\n            if (!this._config[botname]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, Credentials.get()];\n          case 2:\n            credentials = _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_1 = _a.sent();\n            return [2 /*return*/, Promise.reject('No credentials')];\n          case 4:\n            this._lexRuntimeServiceV2Client = new LexRuntimeV2Client({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            reqBaseParams = {\n              botAliasId: this._config[botname].aliasId,\n              botId: this._config[botname].botId,\n              localeId: this._config[botname].localeId,\n              sessionId: credentials.identityId\n            };\n            if (!(typeof message === 'string')) return [3 /*break*/, 6];\n            return [4 /*yield*/, this._handleRecognizeTextCommand(botname, message, reqBaseParams)];\n          case 5:\n            response = _a.sent();\n            return [3 /*break*/, 8];\n          case 6:\n            return [4 /*yield*/, this._handleRecognizeUtteranceCommand(botname, message, reqBaseParams)];\n          case 7:\n            response = _a.sent();\n            _a.label = 8;\n          case 8:\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  /**\n   * Attach a onComplete callback function to a bot.\n   * The callback is called once the bot's intent is fulfilled\n   * @param {string} botname - Bot name to attach the onComplete callback\n   * @param {(err: Error | null, confirmation: InteractionsResponse) => void} callback - called when Intent Fulfilled\n   */\n  AWSLexV2Provider.prototype.onComplete = function (botname, callback) {\n    // does bot exist\n    if (!this._config[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n    this._botsCompleteCallback[botname] = callback;\n  };\n  /**\n   * @private\n   * call onComplete callback for a bot if configured\n   */\n  AWSLexV2Provider.prototype._reportBotStatus = function (data, botname) {\n    var _this = this;\n    var _a, _b, _c, _d, _e, _f;\n    var sessionState = data === null || data === void 0 ? void 0 : data.sessionState;\n    // Check if state is fulfilled to resolve onFullfilment promise\n    logger.debug('postContent state', (_a = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _a === void 0 ? void 0 : _a.state);\n    var isConfigOnCompleteAttached = typeof ((_b = this._config) === null || _b === void 0 ? void 0 : _b[botname].onComplete) === 'function';\n    var isApiOnCompleteAttached = typeof ((_c = this._botsCompleteCallback) === null || _c === void 0 ? void 0 : _c[botname]) === 'function';\n    // no onComplete callbacks added\n    if (!isConfigOnCompleteAttached && !isApiOnCompleteAttached) return;\n    if (((_d = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _d === void 0 ? void 0 : _d.state) === 'ReadyForFulfillment' || ((_e = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _e === void 0 ? void 0 : _e.state) === 'Fulfilled') {\n      if (isApiOnCompleteAttached) {\n        setTimeout(function () {\n          var _a;\n          return (_a = _this._botsCompleteCallback) === null || _a === void 0 ? void 0 : _a[botname](null, data);\n        }, 0);\n      }\n      if (isConfigOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, data);\n        }, 0);\n      }\n    }\n    if (((_f = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _f === void 0 ? void 0 : _f.state) === 'Failed') {\n      var error_2 = new Error('Bot conversation failed');\n      if (isApiOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](error_2);\n        }, 0);\n      }\n      if (isConfigOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(error_2);\n        }, 0);\n      }\n    }\n  };\n  /**\n   * Format UtteranceCommandOutput's response\n   * decompress attributes\n   * update audioStream format\n   */\n  AWSLexV2Provider.prototype._formatUtteranceCommandOutput = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, _a, _b, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = [__assign({}, data)];\n            _b = {};\n            return [4 /*yield*/, unGzipBase64AsJson(data.messages)];\n          case 1:\n            _b.messages = _d.sent();\n            return [4 /*yield*/, unGzipBase64AsJson(data.sessionState)];\n          case 2:\n            _b.sessionState = _d.sent();\n            return [4 /*yield*/, unGzipBase64AsJson(data.interpretations)];\n          case 3:\n            _b.interpretations = _d.sent();\n            return [4 /*yield*/, unGzipBase64AsJson(data.requestAttributes)];\n          case 4:\n            _b.requestAttributes = _d.sent();\n            return [4 /*yield*/, unGzipBase64AsJson(data.inputTranscript)];\n          case 5:\n            _b.inputTranscript = _d.sent();\n            if (!data.audioStream) return [3 /*break*/, 7];\n            return [4 /*yield*/, convert(data.audioStream)];\n          case 6:\n            _c = _d.sent();\n            return [3 /*break*/, 8];\n          case 7:\n            _c = undefined;\n            _d.label = 8;\n          case 8:\n            response = __assign.apply(void 0, _a.concat([(_b.audioStream = _c, _b)]));\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  /**\n   * handle client's `RecognizeTextCommand`\n   * used for sending simple text message\n   */\n  AWSLexV2Provider.prototype._handleRecognizeTextCommand = function (botname, data, baseParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, recognizeTextCommand, data_1, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('postText to lex2', data);\n            params = __assign(__assign({}, baseParams), {\n              text: data\n            });\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            recognizeTextCommand = new RecognizeTextCommand(params);\n            return [4 /*yield*/, this._lexRuntimeServiceV2Client.send(recognizeTextCommand)];\n          case 2:\n            data_1 = _a.sent();\n            this._reportBotStatus(data_1, botname);\n            return [2 /*return*/, data_1];\n          case 3:\n            err_1 = _a.sent();\n            return [2 /*return*/, Promise.reject(err_1)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * handle client's `RecognizeUtteranceCommand`\n   * used for obj text or obj voice message\n   */\n  AWSLexV2Provider.prototype._handleRecognizeUtteranceCommand = function (botname, data, baseParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var content, messageType, params, inputStream, _a, recognizeUtteranceCommand, data_2, response, err_2;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            content = data.content, messageType = data.options.messageType;\n            logger.debug('postContent to lex2', data);\n            if (!(messageType === 'voice')) return [3 /*break*/, 4];\n            if (typeof content !== 'object') {\n              return [2 /*return*/, Promise.reject('invalid content type')];\n            }\n            if (!(content instanceof Uint8Array)) return [3 /*break*/, 1];\n            _a = content;\n            return [3 /*break*/, 3];\n          case 1:\n            return [4 /*yield*/, convert(content)];\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n          case 3:\n            inputStream = _a;\n            params = __assign(__assign({}, baseParams), {\n              requestContentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n              inputStream: inputStream\n            });\n            return [3 /*break*/, 5];\n          case 4:\n            // text input\n            if (typeof content !== 'string') return [2 /*return*/, Promise.reject('invalid content type')];\n            params = __assign(__assign({}, baseParams), {\n              requestContentType: 'text/plain; charset=utf-8',\n              inputStream: content\n            });\n            _b.label = 5;\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n            recognizeUtteranceCommand = new RecognizeUtteranceCommand(params);\n            return [4 /*yield*/, this._lexRuntimeServiceV2Client.send(recognizeUtteranceCommand)];\n          case 6:\n            data_2 = _b.sent();\n            return [4 /*yield*/, this._formatUtteranceCommandOutput(data_2)];\n          case 7:\n            response = _b.sent();\n            this._reportBotStatus(response, botname);\n            return [2 /*return*/, response];\n          case 8:\n            err_2 = _b.sent();\n            return [2 /*return*/, Promise.reject(err_2)];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return AWSLexV2Provider;\n}(AbstractInteractionsProvider);\nexport { AWSLexV2Provider };","map":{"version":3,"sources":["../../src/Providers/AWSLexV2Provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/*\n * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeV2Client, RecognizeTextCommand, RecognizeUtteranceCommand, } from '@aws-sdk/client-lex-runtime-v2';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent, } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nimport { unGzipBase64AsJson } from './AWSLexProviderHelper/commonUtils';\nvar logger = new Logger('AWSLexV2Provider');\nvar AWSLexV2Provider = /** @class */ (function (_super) {\n    __extends(AWSLexV2Provider, _super);\n    /**\n     * Initialize Interactions with AWS configurations\n     * @param {InteractionsOptions} options - Configuration object for Interactions\n     */\n    function AWSLexV2Provider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this._botsCompleteCallback = {};\n        return _this;\n    }\n    /**\n     * get provider name of the plugin\n     * @returns {string} name of the provider\n     */\n    AWSLexV2Provider.prototype.getProviderName = function () {\n        return 'AWSLexV2Provider';\n    };\n    /**\n     * Configure Interactions part with aws configuration\n     * @param {AWSLexV2ProviderOptions} config - Configuration of the Interactions\n     * @return {AWSLexV2ProviderOptions} - Current configuration\n     */\n    AWSLexV2Provider.prototype.configure = function (config) {\n        if (config === void 0) { config = {}; }\n        var propertiesToTest = [\n            'name',\n            'botId',\n            'aliasId',\n            'localeId',\n            'providerName',\n            'region',\n        ];\n        Object.keys(config).forEach(function (botKey) {\n            var botConfig = config[botKey];\n            // is bot config correct\n            if (!propertiesToTest.every(function (x) { return x in botConfig; })) {\n                throw new Error('invalid bot configuration');\n            }\n        });\n        return _super.prototype.configure.call(this, config);\n    };\n    /**\n     * Send a message to a bot\n     * @async\n     * @param {string} botname - Bot name to send the message\n     * @param {string | InteractionsMessage} message - message to send to the bot\n     * @return {Promise<InteractionsResponse>} A promise resolves to the response from the bot\n     */\n    AWSLexV2Provider.prototype.sendMessage = function (botname, message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, error_1, response, reqBaseParams;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // check if bot exists\n                        if (!this._config[botname]) {\n                            return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 2:\n                        credentials = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_1 = _a.sent();\n                        return [2 /*return*/, Promise.reject('No credentials')];\n                    case 4:\n                        this._lexRuntimeServiceV2Client = new LexRuntimeV2Client({\n                            region: this._config[botname].region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        reqBaseParams = {\n                            botAliasId: this._config[botname].aliasId,\n                            botId: this._config[botname].botId,\n                            localeId: this._config[botname].localeId,\n                            sessionId: credentials.identityId,\n                        };\n                        if (!(typeof message === 'string')) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._handleRecognizeTextCommand(botname, message, reqBaseParams)];\n                    case 5:\n                        response = _a.sent();\n                        return [3 /*break*/, 8];\n                    case 6: return [4 /*yield*/, this._handleRecognizeUtteranceCommand(botname, message, reqBaseParams)];\n                    case 7:\n                        response = _a.sent();\n                        _a.label = 8;\n                    case 8: return [2 /*return*/, response];\n                }\n            });\n        });\n    };\n    /**\n     * Attach a onComplete callback function to a bot.\n     * The callback is called once the bot's intent is fulfilled\n     * @param {string} botname - Bot name to attach the onComplete callback\n     * @param {(err: Error | null, confirmation: InteractionsResponse) => void} callback - called when Intent Fulfilled\n     */\n    AWSLexV2Provider.prototype.onComplete = function (botname, callback) {\n        // does bot exist\n        if (!this._config[botname]) {\n            throw new Error('Bot ' + botname + ' does not exist');\n        }\n        this._botsCompleteCallback[botname] = callback;\n    };\n    /**\n     * @private\n     * call onComplete callback for a bot if configured\n     */\n    AWSLexV2Provider.prototype._reportBotStatus = function (data, botname) {\n        var _this = this;\n        var _a, _b, _c, _d, _e, _f;\n        var sessionState = data === null || data === void 0 ? void 0 : data.sessionState;\n        // Check if state is fulfilled to resolve onFullfilment promise\n        logger.debug('postContent state', (_a = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _a === void 0 ? void 0 : _a.state);\n        var isConfigOnCompleteAttached = typeof ((_b = this._config) === null || _b === void 0 ? void 0 : _b[botname].onComplete) === 'function';\n        var isApiOnCompleteAttached = typeof ((_c = this._botsCompleteCallback) === null || _c === void 0 ? void 0 : _c[botname]) === 'function';\n        // no onComplete callbacks added\n        if (!isConfigOnCompleteAttached && !isApiOnCompleteAttached)\n            return;\n        if (((_d = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _d === void 0 ? void 0 : _d.state) === 'ReadyForFulfillment' ||\n            ((_e = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _e === void 0 ? void 0 : _e.state) === 'Fulfilled') {\n            if (isApiOnCompleteAttached) {\n                setTimeout(function () { var _a; return (_a = _this._botsCompleteCallback) === null || _a === void 0 ? void 0 : _a[botname](null, data); }, 0);\n            }\n            if (isConfigOnCompleteAttached) {\n                setTimeout(function () { return _this._config[botname].onComplete(null, data); }, 0);\n            }\n        }\n        if (((_f = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _f === void 0 ? void 0 : _f.state) === 'Failed') {\n            var error_2 = new Error('Bot conversation failed');\n            if (isApiOnCompleteAttached) {\n                setTimeout(function () { return _this._botsCompleteCallback[botname](error_2); }, 0);\n            }\n            if (isConfigOnCompleteAttached) {\n                setTimeout(function () { return _this._config[botname].onComplete(error_2); }, 0);\n            }\n        }\n    };\n    /**\n     * Format UtteranceCommandOutput's response\n     * decompress attributes\n     * update audioStream format\n     */\n    AWSLexV2Provider.prototype._formatUtteranceCommandOutput = function (data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, _a, _b, _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _a = [__assign({}, data)];\n                        _b = {};\n                        return [4 /*yield*/, unGzipBase64AsJson(data.messages)];\n                    case 1:\n                        _b.messages = _d.sent();\n                        return [4 /*yield*/, unGzipBase64AsJson(data.sessionState)];\n                    case 2:\n                        _b.sessionState = _d.sent();\n                        return [4 /*yield*/, unGzipBase64AsJson(data.interpretations)];\n                    case 3:\n                        _b.interpretations = _d.sent();\n                        return [4 /*yield*/, unGzipBase64AsJson(data.requestAttributes)];\n                    case 4:\n                        _b.requestAttributes = _d.sent();\n                        return [4 /*yield*/, unGzipBase64AsJson(data.inputTranscript)];\n                    case 5:\n                        _b.inputTranscript = _d.sent();\n                        if (!data.audioStream) return [3 /*break*/, 7];\n                        return [4 /*yield*/, convert(data.audioStream)];\n                    case 6:\n                        _c = _d.sent();\n                        return [3 /*break*/, 8];\n                    case 7:\n                        _c = undefined;\n                        _d.label = 8;\n                    case 8:\n                        response = __assign.apply(void 0, _a.concat([(_b.audioStream = _c, _b)]));\n                        return [2 /*return*/, response];\n                }\n            });\n        });\n    };\n    /**\n     * handle client's `RecognizeTextCommand`\n     * used for sending simple text message\n     */\n    AWSLexV2Provider.prototype._handleRecognizeTextCommand = function (botname, data, baseParams) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params, recognizeTextCommand, data_1, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('postText to lex2', data);\n                        params = __assign(__assign({}, baseParams), { text: data });\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        recognizeTextCommand = new RecognizeTextCommand(params);\n                        return [4 /*yield*/, this._lexRuntimeServiceV2Client.send(recognizeTextCommand)];\n                    case 2:\n                        data_1 = _a.sent();\n                        this._reportBotStatus(data_1, botname);\n                        return [2 /*return*/, data_1];\n                    case 3:\n                        err_1 = _a.sent();\n                        return [2 /*return*/, Promise.reject(err_1)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * handle client's `RecognizeUtteranceCommand`\n     * used for obj text or obj voice message\n     */\n    AWSLexV2Provider.prototype._handleRecognizeUtteranceCommand = function (botname, data, baseParams) {\n        return __awaiter(this, void 0, void 0, function () {\n            var content, messageType, params, inputStream, _a, recognizeUtteranceCommand, data_2, response, err_2;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        content = data.content, messageType = data.options.messageType;\n                        logger.debug('postContent to lex2', data);\n                        if (!(messageType === 'voice')) return [3 /*break*/, 4];\n                        if (typeof content !== 'object') {\n                            return [2 /*return*/, Promise.reject('invalid content type')];\n                        }\n                        if (!(content instanceof Uint8Array)) return [3 /*break*/, 1];\n                        _a = content;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, convert(content)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        inputStream = _a;\n                        params = __assign(__assign({}, baseParams), { requestContentType: 'audio/x-l16; sample-rate=16000; channel-count=1', inputStream: inputStream });\n                        return [3 /*break*/, 5];\n                    case 4:\n                        // text input\n                        if (typeof content !== 'string')\n                            return [2 /*return*/, Promise.reject('invalid content type')];\n                        params = __assign(__assign({}, baseParams), { requestContentType: 'text/plain; charset=utf-8', inputStream: content });\n                        _b.label = 5;\n                    case 5:\n                        _b.trys.push([5, 8, , 9]);\n                        recognizeUtteranceCommand = new RecognizeUtteranceCommand(params);\n                        return [4 /*yield*/, this._lexRuntimeServiceV2Client.send(recognizeUtteranceCommand)];\n                    case 6:\n                        data_2 = _b.sent();\n                        return [4 /*yield*/, this._formatUtteranceCommandOutput(data_2)];\n                    case 7:\n                        response = _b.sent();\n                        this._reportBotStatus(response, botname);\n                        return [2 /*return*/, response];\n                    case 8:\n                        err_2 = _b.sent();\n                        return [2 /*return*/, Promise.reject(err_2)];\n                    case 9: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AWSLexV2Provider;\n}(AbstractInteractionsProvider));\nexport { AWSLexV2Provider };\n//# sourceMappingURL=AWSLexV2Provider.js.map"]},"metadata":{},"sourceType":"module"}