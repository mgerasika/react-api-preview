{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n};\nimport API from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { Amplify, ConsoleLogger as Logger, Hub, JS, BackgroundProcessManager } from '@aws-amplify/core';\nimport { immerable, produce, setAutoFreeze, enablePatches } from 'immer';\nimport { v4 as uuid4 } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport { isPredicatesAll, ModelPredicateCreator, ModelSortPredicateCreator } from '../predicates';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport { GraphQLScalarType, isGraphQLScalarType, isSchemaModelWithAttributes, AuthModeStrategyType, isNonModelFieldType, isModelFieldType, isIdentifierObject } from '../types';\nimport { DATASTORE, errorMessages, establishRelationAndKeys, exhaustiveCheck, isModelConstructor, monotonicUlidFactory, STORAGE, SYNC, USER, isNullOrUndefined, registerNonModelClass, sortCompareFunction, DeferredCallbackResolver, extractPrimaryKeyFieldNames, extractPrimaryKeysAndValues, isIdManaged, isIdOptionallyManaged, validatePredicate, mergePatches } from '../util';\nimport { getIdentifierValue } from '../sync/utils';\nsetAutoFreeze(true);\nenablePatches();\nvar logger = new Logger('DataStore');\nvar ulid = monotonicUlidFactory(Date.now());\nvar isNode = JS.browserOrNode().isNode;\nvar SETTING_SCHEMA_VERSION = 'schemaVersion';\nvar schema;\nvar modelNamespaceMap = new WeakMap();\n// stores data for crafting the correct update mutation input for a model\n// Patch[] - array of changed fields and metadata\n// PersistentModel - the source model, used for diffing object-type fields\nvar modelPatchesMap = new WeakMap();\nvar getModelDefinition = function (modelConstructor) {\n  var namespace = modelNamespaceMap.get(modelConstructor);\n  return schema.namespaces[namespace].models[modelConstructor.name];\n};\nvar isValidModelConstructor = function (obj) {\n  return isModelConstructor(obj) && modelNamespaceMap.has(obj);\n};\nvar namespaceResolver = function (modelConstructor) {\n  return modelNamespaceMap.get(modelConstructor);\n};\n// exporting syncClasses for testing outbox.test.ts\nexport var syncClasses;\nvar userClasses;\nvar dataStoreClasses;\nvar storageClasses;\nvar initSchema = function (userSchema) {\n  var _a;\n  if (schema !== undefined) {\n    console.warn('The schema has already been initialized');\n    return userClasses;\n  }\n  logger.log('validating schema', {\n    schema: userSchema\n  });\n  var internalUserNamespace = __assign({\n    name: USER\n  }, userSchema);\n  logger.log('DataStore', 'Init models');\n  userClasses = createTypeClasses(internalUserNamespace);\n  logger.log('DataStore', 'Models initialized');\n  var dataStoreNamespace = getNamespace();\n  var storageNamespace = Storage.getNamespace();\n  var syncNamespace = SyncEngine.getNamespace();\n  dataStoreClasses = createTypeClasses(dataStoreNamespace);\n  storageClasses = createTypeClasses(storageNamespace);\n  syncClasses = createTypeClasses(syncNamespace);\n  schema = {\n    namespaces: (_a = {}, _a[dataStoreNamespace.name] = dataStoreNamespace, _a[internalUserNamespace.name] = internalUserNamespace, _a[storageNamespace.name] = storageNamespace, _a[syncNamespace.name] = syncNamespace, _a),\n    version: userSchema.version\n  };\n  Object.keys(schema.namespaces).forEach(function (namespace) {\n    var e_1, _a;\n    var _b = __read(establishRelationAndKeys(schema.namespaces[namespace]), 2),\n      relations = _b[0],\n      keys = _b[1];\n    schema.namespaces[namespace].relationships = relations;\n    schema.namespaces[namespace].keys = keys;\n    var modelAssociations = new Map();\n    Object.values(schema.namespaces[namespace].models).forEach(function (model) {\n      var connectedModels = [];\n      Object.values(model.fields).filter(function (field) {\n        return field.association && field.association.connectionType === 'BELONGS_TO' && field.type.model !== model.name;\n      }).forEach(function (field) {\n        return connectedModels.push(field.type.model);\n      });\n      modelAssociations.set(model.name, connectedModels);\n    });\n    var result = new Map();\n    var count = 1000;\n    while (true && count > 0) {\n      if (modelAssociations.size === 0) {\n        break;\n      }\n      count--;\n      if (count === 0) {\n        throw new Error('Models are not topologically sortable. Please verify your schema.');\n      }\n      try {\n        for (var _c = (e_1 = void 0, __values(Array.from(modelAssociations.keys()))), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var modelName = _d.value;\n          var parents = modelAssociations.get(modelName);\n          if (parents.every(function (x) {\n            return result.has(x);\n          })) {\n            result.set(modelName, parents);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      Array.from(result.keys()).forEach(function (x) {\n        return modelAssociations.delete(x);\n      });\n    }\n    schema.namespaces[namespace].modelTopologicalOrdering = result;\n  });\n  return userClasses;\n};\n/**\n * Throws an exception if the schema has *not* been initialized\n * by `initSchema()`.\n *\n * **To be called before trying to access schema.**\n *\n * Currently this only needs to be called in `start()` and `clear()` because\n * all other functions will call start first.\n */\nvar checkSchemaInitialized = function () {\n  if (schema === undefined) {\n    var message = 'Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions';\n    logger.error(message);\n    throw new Error(message);\n  }\n};\nvar createTypeClasses = function (namespace) {\n  var classes = {};\n  Object.entries(namespace.models).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      modelName = _b[0],\n      modelDefinition = _b[1];\n    var clazz = createModelClass(modelDefinition);\n    classes[modelName] = clazz;\n    modelNamespaceMap.set(clazz, namespace.name);\n  });\n  Object.entries(namespace.nonModels || {}).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      typeName = _b[0],\n      typeDefinition = _b[1];\n    var clazz = createNonModelClass(typeDefinition);\n    classes[typeName] = clazz;\n  });\n  return classes;\n};\n/**\n * Collection of instantiated models to allow storage of metadata apart from\n * the model visible to the consuming app -- in case the app doesn't have\n * metadata fields (_version, _deleted, etc.) exposed on the model itself.\n */\nvar instancesMetadata = new WeakSet();\nfunction modelInstanceCreator(modelConstructor, init) {\n  instancesMetadata.add(init);\n  return new modelConstructor(init);\n}\nvar validateModelFields = function (modelDefinition) {\n  return function (k, v) {\n    var fieldDefinition = modelDefinition.fields[k];\n    if (fieldDefinition !== undefined) {\n      var type_1 = fieldDefinition.type,\n        isRequired_1 = fieldDefinition.isRequired,\n        isArrayNullable = fieldDefinition.isArrayNullable,\n        name_1 = fieldDefinition.name,\n        isArray = fieldDefinition.isArray;\n      if ((!isArray && isRequired_1 || isArray && !isArrayNullable) && (v === null || v === undefined)) {\n        throw new Error(\"Field \" + name_1 + \" is required\");\n      }\n      if (isSchemaModelWithAttributes(modelDefinition) && !isIdManaged(modelDefinition)) {\n        var keys = extractPrimaryKeyFieldNames(modelDefinition);\n        if (keys.includes(k) && v === '') {\n          logger.error(errorMessages.idEmptyString, {\n            k: k,\n            value: v\n          });\n          throw new Error(errorMessages.idEmptyString);\n        }\n      }\n      if (isGraphQLScalarType(type_1)) {\n        var jsType_1 = GraphQLScalarType.getJSType(type_1);\n        var validateScalar_1 = GraphQLScalarType.getValidationFunction(type_1);\n        if (type_1 === 'AWSJSON') {\n          if (typeof v === jsType_1) {\n            return;\n          }\n          if (typeof v === 'string') {\n            try {\n              JSON.parse(v);\n              return;\n            } catch (error) {\n              throw new Error(\"Field \" + name_1 + \" is an invalid JSON object. \" + v);\n            }\n          }\n        }\n        if (isArray) {\n          var errorTypeText = jsType_1;\n          if (!isRequired_1) {\n            errorTypeText = jsType_1 + \" | null | undefined\";\n          }\n          if (!Array.isArray(v) && !isArrayNullable) {\n            throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n          }\n          if (!isNullOrUndefined(v) && v.some(function (e) {\n            return isNullOrUndefined(e) ? isRequired_1 : typeof e !== jsType_1;\n          })) {\n            var elemTypes = v.map(function (e) {\n              return e === null ? 'null' : typeof e;\n            }).join(',');\n            throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + errorTypeText + \", [\" + elemTypes + \"] received. \" + v);\n          }\n          if (validateScalar_1 && !isNullOrUndefined(v)) {\n            var validationStatus = v.map(function (e) {\n              if (!isNullOrUndefined(e)) {\n                return validateScalar_1(e);\n              } else if (isNullOrUndefined(e) && !isRequired_1) {\n                return true;\n              } else {\n                return false;\n              }\n            });\n            if (!validationStatus.every(function (s) {\n              return s;\n            })) {\n              throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1 + \", validation failed for one or more elements. \" + v);\n            }\n          }\n        } else if (!isRequired_1 && v === undefined) {\n          return;\n        } else if (typeof v !== jsType_1 && v !== null) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + jsType_1 + \", \" + typeof v + \" received. \" + v);\n        } else if (!isNullOrUndefined(v) && validateScalar_1 && !validateScalar_1(v)) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1 + \", validation failed. \" + v);\n        }\n      } else if (isNonModelFieldType(type_1)) {\n        // do not check non model fields if undefined or null\n        if (!isNullOrUndefined(v)) {\n          var subNonModelDefinition_1 = schema.namespaces.user.nonModels[type_1.nonModel];\n          var modelValidator_1 = validateModelFields(subNonModelDefinition_1);\n          if (isArray) {\n            var errorTypeText = type_1.nonModel;\n            if (!isRequired_1) {\n              errorTypeText = type_1.nonModel + \" | null | undefined\";\n            }\n            if (!Array.isArray(v)) {\n              throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n            }\n            v.forEach(function (item) {\n              if (isNullOrUndefined(item) && isRequired_1 || typeof item !== 'object' && typeof item !== 'undefined') {\n                throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1.nonModel + \", [\" + typeof item + \"] received. \" + item);\n              }\n              if (!isNullOrUndefined(item)) {\n                Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n                  modelValidator_1(subKey, item[subKey]);\n                });\n              }\n            });\n          } else {\n            if (typeof v !== 'object') {\n              throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1.nonModel + \", \" + typeof v + \" recieved. \" + v);\n            }\n            Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n              modelValidator_1(subKey, v[subKey]);\n            });\n          }\n        }\n      }\n    }\n  };\n};\nvar castInstanceType = function (modelDefinition, k, v) {\n  var _a = modelDefinition.fields[k] || {},\n    isArray = _a.isArray,\n    type = _a.type;\n  // attempt to parse stringified JSON\n  if (typeof v === 'string' && (isArray || type === 'AWSJSON' || isNonModelFieldType(type) || isModelFieldType(type))) {\n    try {\n      return JSON.parse(v);\n    } catch (_b) {\n      // if JSON is invalid, don't throw and let modelValidator handle it\n    }\n  }\n  // cast from numeric representation of boolean to JS boolean\n  if (typeof v === 'number' && type === 'Boolean') {\n    return Boolean(v);\n  }\n  return v;\n};\nvar initializeInstance = function (init, modelDefinition, draft) {\n  var modelValidator = validateModelFields(modelDefinition);\n  Object.entries(init).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      k = _b[0],\n      v = _b[1];\n    var parsedValue = castInstanceType(modelDefinition, k, v);\n    modelValidator(k, parsedValue);\n    draft[k] = parsedValue;\n  });\n};\nvar createModelClass = function (modelDefinition) {\n  var clazz = /** @class */function () {\n    function Model(init) {\n      var instance = produce(this, function (draft) {\n        initializeInstance(init, modelDefinition, draft);\n        // model is initialized inside a DataStore component (e.g. by Sync Engine, Storage Engine, etc.)\n        var isInternallyInitialized = instancesMetadata.has(init);\n        var modelInstanceMetadata = isInternallyInitialized ? init : {};\n        var _id = modelInstanceMetadata.id;\n        if (isIdManaged(modelDefinition)) {\n          var isInternalModel = _id !== null && _id !== undefined;\n          var id = isInternalModel ? _id : modelDefinition.syncable ? uuid4() : ulid();\n          draft.id = id;\n        } else if (isIdOptionallyManaged(modelDefinition)) {\n          // only auto-populate if the id was not provided\n          draft.id = draft.id || uuid4();\n        }\n        if (!isInternallyInitialized) {\n          checkReadOnlyPropertyOnCreate(draft, modelDefinition);\n        }\n        var _version = modelInstanceMetadata._version,\n          _lastChangedAt = modelInstanceMetadata._lastChangedAt,\n          _deleted = modelInstanceMetadata._deleted;\n        if (modelDefinition.syncable) {\n          draft._version = _version;\n          draft._lastChangedAt = _lastChangedAt;\n          draft._deleted = _deleted;\n        }\n      });\n      return instance;\n    }\n    Model.copyOf = function (source, fn) {\n      var modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n      if (!isValidModelConstructor(modelConstructor)) {\n        var msg = 'The source object is not a valid model';\n        logger.error(msg, {\n          source: source\n        });\n        throw new Error(msg);\n      }\n      var patches;\n      var model = produce(source, function (draft) {\n        fn(draft);\n        var keyNames = extractPrimaryKeyFieldNames(modelDefinition);\n        // Keys are immutable\n        keyNames.forEach(function (key) {\n          return draft[key] = source[key];\n        });\n        var modelValidator = validateModelFields(modelDefinition);\n        Object.entries(draft).forEach(function (_a) {\n          var _b = __read(_a, 2),\n            k = _b[0],\n            v = _b[1];\n          var parsedValue = castInstanceType(modelDefinition, k, v);\n          modelValidator(k, parsedValue);\n        });\n      }, function (p) {\n        return patches = p;\n      });\n      var hasExistingPatches = modelPatchesMap.has(source);\n      if (patches.length || hasExistingPatches) {\n        if (hasExistingPatches) {\n          var _a = __read(modelPatchesMap.get(source), 2),\n            existingPatches = _a[0],\n            existingSource = _a[1];\n          var mergedPatches = mergePatches(existingSource, existingPatches, patches);\n          modelPatchesMap.set(model, [mergedPatches, existingSource]);\n          checkReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);\n        } else {\n          modelPatchesMap.set(model, [patches, source]);\n          checkReadOnlyPropertyOnUpdate(patches, modelDefinition);\n        }\n      }\n      return model;\n    };\n    // \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n    // to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n    Model.fromJSON = function (json) {\n      var _this = this;\n      if (Array.isArray(json)) {\n        return json.map(function (init) {\n          return _this.fromJSON(init);\n        });\n      }\n      var instance = modelInstanceCreator(clazz, json);\n      var modelValidator = validateModelFields(modelDefinition);\n      Object.entries(instance).forEach(function (_a) {\n        var _b = __read(_a, 2),\n          k = _b[0],\n          v = _b[1];\n        modelValidator(k, v);\n      });\n      return instance;\n    };\n    return Model;\n  }();\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: modelDefinition.name\n  });\n  return clazz;\n};\nvar checkReadOnlyPropertyOnCreate = function (draft, modelDefinition) {\n  var modelKeys = Object.keys(draft);\n  var fields = modelDefinition.fields;\n  modelKeys.forEach(function (key) {\n    if (fields[key] && fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\nvar checkReadOnlyPropertyOnUpdate = function (patches, modelDefinition) {\n  var patchArray = patches.map(function (p) {\n    return [p.path[0], p.value];\n  });\n  var fields = modelDefinition.fields;\n  patchArray.forEach(function (_a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      val = _b[1];\n    if (!val || !fields[key]) return;\n    if (fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\nvar createNonModelClass = function (typeDefinition) {\n  var clazz = /** @class */function () {\n    function Model(init) {\n      var instance = produce(this, function (draft) {\n        initializeInstance(init, typeDefinition, draft);\n      });\n      return instance;\n    }\n    return Model;\n  }();\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: typeDefinition.name\n  });\n  registerNonModelClass(clazz);\n  return clazz;\n};\nfunction isQueryOne(obj) {\n  return typeof obj === 'string';\n}\nfunction defaultConflictHandler(conflictData) {\n  var localModel = conflictData.localModel,\n    modelConstructor = conflictData.modelConstructor,\n    remoteModel = conflictData.remoteModel;\n  var _version = remoteModel._version;\n  return modelInstanceCreator(modelConstructor, __assign(__assign({}, localModel), {\n    _version: _version\n  }));\n}\nfunction defaultErrorHandler(error) {\n  logger.warn(error);\n}\nfunction getModelConstructorByModelName(namespaceName, modelName) {\n  var result;\n  switch (namespaceName) {\n    case DATASTORE:\n      result = dataStoreClasses[modelName];\n      break;\n    case USER:\n      result = userClasses[modelName];\n      break;\n    case SYNC:\n      result = syncClasses[modelName];\n      break;\n    case STORAGE:\n      result = storageClasses[modelName];\n      break;\n    default:\n      exhaustiveCheck(namespaceName);\n      break;\n  }\n  if (isValidModelConstructor(result)) {\n    return result;\n  } else {\n    var msg = \"Model name is not valid for namespace. modelName: \" + modelName + \", namespace: \" + namespaceName;\n    logger.error(msg);\n    throw new Error(msg);\n  }\n}\n/**\n * Queries the DataStore metadata tables to see if they are the expected\n * version. If not, clobbers the whole DB. If so, leaves them alone.\n * Otherwise, simply writes the schema version.\n *\n * SIDE EFFECT:\n * 1. Creates a transaction\n * 1. Updates data.\n *\n * @param storage Storage adapter containing the metadata.\n * @param version The expected schema version.\n */\nfunction checkSchemaVersion(storage, version) {\n  return __awaiter(this, void 0, void 0, function () {\n    var Setting, modelDefinition;\n    var _this = this;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          Setting = dataStoreClasses.Setting;\n          modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n          return [4 /*yield*/, storage.runExclusive(function (s) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var _a, schemaVersionSetting, storedValue;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4 /*yield*/, s.query(Setting, ModelPredicateCreator.createFromExisting(modelDefinition, function (c) {\n                      return c.key('eq', SETTING_SCHEMA_VERSION);\n                    }), {\n                      page: 0,\n                      limit: 1\n                    })];\n                  case 1:\n                    _a = __read.apply(void 0, [_b.sent(), 1]), schemaVersionSetting = _a[0];\n                    if (!(schemaVersionSetting !== undefined && schemaVersionSetting.value !== undefined)) return [3 /*break*/, 4];\n                    storedValue = JSON.parse(schemaVersionSetting.value);\n                    if (!(storedValue !== version)) return [3 /*break*/, 3];\n                    return [4 /*yield*/, s.clear(false)];\n                  case 2:\n                    _b.sent();\n                    _b.label = 3;\n                  case 3:\n                    return [3 /*break*/, 6];\n                  case 4:\n                    return [4 /*yield*/, s.save(modelInstanceCreator(Setting, {\n                      key: SETTING_SCHEMA_VERSION,\n                      value: JSON.stringify(version)\n                    }))];\n                  case 5:\n                    _b.sent();\n                    _b.label = 6;\n                  case 6:\n                    return [2 /*return*/];\n                }\n              });\n            });\n          })];\n\n        case 1:\n          _a.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nvar syncSubscription;\nfunction getNamespace() {\n  var namespace = {\n    name: DATASTORE,\n    relationships: {},\n    enums: {},\n    nonModels: {},\n    models: {\n      Setting: {\n        name: 'Setting',\n        pluralName: 'Settings',\n        syncable: false,\n        fields: {\n          id: {\n            name: 'id',\n            type: 'ID',\n            isRequired: true,\n            isArray: false\n          },\n          key: {\n            name: 'key',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          },\n          value: {\n            name: 'value',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          }\n        }\n      }\n    }\n  };\n  return namespace;\n}\nvar DataStoreState;\n(function (DataStoreState) {\n  DataStoreState[\"NotRunning\"] = \"Not Running\";\n  DataStoreState[\"Starting\"] = \"Starting\";\n  DataStoreState[\"Running\"] = \"Running\";\n  DataStoreState[\"Stopping\"] = \"Stopping\";\n  DataStoreState[\"Clearing\"] = \"Clearing\";\n})(DataStoreState || (DataStoreState = {}));\nvar DataStore = /** @class */function () {\n  function DataStore() {\n    var _this = this;\n    // reference to configured category instances. Used for preserving SSR context\n    this.Auth = Auth;\n    this.API = API;\n    this.Cache = Cache;\n    this.amplifyConfig = {};\n    this.syncPredicates = new WeakMap();\n    // object that gets passed to descendent classes. Allows us to pass these down by reference\n    this.amplifyContext = {\n      Auth: this.Auth,\n      API: this.API,\n      Cache: this.Cache\n    };\n    /**\n     * **IMPORTANT!**\n     *\n     * Accumulator for background things that can **and MUST** be called when\n     * DataStore stops.\n     *\n     * These jobs **MUST** be *idempotent promises* that resolve ONLY\n     * once the intended jobs are completely finished and/or otherwise destroyed\n     * and cleaned up with ZERO outstanding:\n     *\n     * 1. side effects (e.g., state changes)\n     * 1. callbacks\n     * 1. subscriptions\n     * 1. calls to storage\n     * 1. *etc.*\n     *\n     * Methods that create pending promises, subscriptions, callbacks, or any\n     * type of side effect **MUST** be registered with the manager. And, a new\n     * manager must be created after each `exit()`.\n     *\n     * Failure to comply will put DataStore into a highly unpredictable state\n     * when it needs to stop or clear -- which occurs when restarting with new\n     * sync expressions, during testing, and potentially during app code\n     * recovery handling, etc..\n     *\n     * It is up to the discretion of each disposer whether to wait for job\n     * completion or to cancel operations and issue failures *as long as the\n     * disposer returns in a reasonable amount of time.*\n     *\n     * (Reasonable = *seconds*, not minutes.)\n     */\n    this.runningProcesses = new BackgroundProcessManager();\n    /**\n     * Indicates what state DataStore is in.\n     *\n     * Not [yet?] used for actual state management; but for messaging\n     * when errors occur, to help troubleshoot.\n     */\n    this.state = DataStoreState.NotRunning;\n    /**\n     * If not already done:\n     * 1. Attaches and initializes storage.\n     * 1. Loads the schema and records metadata.\n     * 1. If `this.amplifyConfig.aws_appsync_graphqlEndpoint` contains a URL,\n     * attaches a sync engine, starts it, and subscribes.\n     */\n    this.start = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var aws_appsync_graphqlEndpoint, _a, fullSyncIntervalInMilliseconds;\n              var _this = this;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    this.state = DataStoreState.Starting;\n                    if (!(this.initialized === undefined)) return [3 /*break*/, 1];\n                    logger.debug('Starting DataStore');\n                    this.initialized = new Promise(function (res, rej) {\n                      _this.initResolve = res;\n                      _this.initReject = rej;\n                    });\n                    return [3 /*break*/, 3];\n                  case 1:\n                    return [4 /*yield*/, this.initialized];\n                  case 2:\n                    _b.sent();\n                    return [2 /*return*/];\n                  case 3:\n                    this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n                    return [4 /*yield*/, this.storage.init()];\n                  case 4:\n                    _b.sent();\n                    checkSchemaInitialized();\n                    return [4 /*yield*/, checkSchemaVersion(this.storage, schema.version)];\n                  case 5:\n                    _b.sent();\n                    aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n                    if (!aws_appsync_graphqlEndpoint) return [3 /*break*/, 7];\n                    logger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n                    _a = this;\n                    return [4 /*yield*/, this.processSyncExpressions()];\n                  case 6:\n                    _a.syncPredicates = _b.sent();\n                    this.sync = new SyncEngine(schema, namespaceResolver, syncClasses, userClasses, this.storage, modelInstanceCreator, this.conflictHandler, this.errorHandler, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, this.amplifyContext, this.connectivityMonitor);\n                    fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60;\n                    syncSubscription = this.sync.start({\n                      fullSyncInterval: fullSyncIntervalInMilliseconds\n                    }).subscribe({\n                      next: function (_a) {\n                        var type = _a.type,\n                          data = _a.data;\n                        // In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n                        // In the Browser, we can begin returning data once subscriptions are in place.\n                        var readyType = isNode ? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY : ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n                        if (type === readyType) {\n                          _this.initResolve();\n                        }\n                        Hub.dispatch('datastore', {\n                          event: type,\n                          data: data\n                        });\n                      },\n                      error: function (err) {\n                        logger.warn('Sync error', err);\n                        _this.initReject();\n                      }\n                    });\n                    return [3 /*break*/, 8];\n                  case 7:\n                    logger.warn(\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\", {\n                      config: this.amplifyConfig\n                    });\n                    this.initResolve();\n                    _b.label = 8;\n                  case 8:\n                    return [4 /*yield*/, this.initialized];\n                  case 9:\n                    _b.sent();\n                    this.state = DataStoreState.Running;\n                    return [2 /*return*/];\n                }\n              });\n            });\n          }, 'datastore start').catch(this.handleAddProcError('DataStore.start()'))];\n        });\n      });\n    };\n    this.query = function (modelConstructor, identifierOrCriteria, paginationProducer) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var msg, modelDefinition, keyFields, predicate, msg, pagination, result, returnOne;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4 /*yield*/, this.start()];\n                  case 1:\n                    _a.sent();\n                    //#region Input validation\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Constructor is not for a valid model';\n                      logger.error(msg, {\n                        modelConstructor: modelConstructor\n                      });\n                      throw new Error(msg);\n                    }\n                    if (typeof identifierOrCriteria === 'string') {\n                      if (paginationProducer !== undefined) {\n                        logger.warn('Pagination is ignored when querying by id');\n                      }\n                    }\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                    if (isQueryOne(identifierOrCriteria)) {\n                      if (keyFields.length > 1) {\n                        msg = errorMessages.queryByPkWithCompositeKeyPresent;\n                        logger.error(msg, {\n                          keyFields: keyFields\n                        });\n                        throw new Error(msg);\n                      }\n                      predicate = ModelPredicateCreator.createForSingleField(modelDefinition, keyFields[0], identifierOrCriteria);\n                    } else {\n                      // Object is being queried using object literal syntax\n                      if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                        predicate = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                      } else if (isPredicatesAll(identifierOrCriteria)) {\n                        // Predicates.ALL means \"all records\", so no predicate (undefined)\n                        predicate = undefined;\n                      } else {\n                        predicate = ModelPredicateCreator.createFromExisting(modelDefinition, identifierOrCriteria);\n                      }\n                    }\n                    pagination = this.processPagination(modelDefinition, paginationProducer);\n                    //#endregion\n                    logger.debug('params ready', {\n                      modelConstructor: modelConstructor,\n                      predicate: ModelPredicateCreator.getPredicates(predicate, false),\n                      pagination: __assign(__assign({}, pagination), {\n                        sort: ModelSortPredicateCreator.getPredicates(pagination && pagination.sort, false)\n                      })\n                    });\n                    return [4 /*yield*/, this.storage.query(modelConstructor, predicate, pagination)];\n                  case 2:\n                    result = _a.sent();\n                    returnOne = isQueryOne(identifierOrCriteria) || isIdentifierObject(identifierOrCriteria, modelDefinition);\n                    return [2 /*return*/, returnOne ? result[0] : result];\n                }\n              });\n            });\n          }, 'datastore query').catch(this.handleAddProcError('DataStore.query()'))];\n        });\n      });\n    };\n    this.save = function (model, condition) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var patchesTuple, modelConstructor, msg, modelDefinition, producedCondition, _a, savedModel;\n              var _this = this;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4 /*yield*/, this.start()];\n                  case 1:\n                    _b.sent();\n                    patchesTuple = modelPatchesMap.get(model);\n                    modelConstructor = model ? model.constructor : undefined;\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Object is not an instance of a valid model';\n                      logger.error(msg, {\n                        model: model\n                      });\n                      throw new Error(msg);\n                    }\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    producedCondition = ModelPredicateCreator.createFromExisting(modelDefinition, condition);\n                    return [4 /*yield*/, this.storage.runExclusive(function (s) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              return [4 /*yield*/, s.save(model, producedCondition, undefined, patchesTuple)];\n                            case 1:\n                              _a.sent();\n                              return [2 /*return*/, s.query(modelConstructor, ModelPredicateCreator.createForPk(modelDefinition, model))];\n                          }\n                        });\n                      });\n                    })];\n                  case 2:\n                    _a = __read.apply(void 0, [_b.sent(), 1]), savedModel = _a[0];\n                    return [2 /*return*/, savedModel];\n                }\n              });\n            });\n          }, 'datastore save').catch(this.handleAddProcError('DataStore.save()'))];\n        });\n      });\n    };\n    this.setConflictHandler = function (config) {\n      var configDataStore = config.DataStore;\n      var conflictHandlerIsDefault = function () {\n        return _this.conflictHandler === defaultConflictHandler;\n      };\n      if (configDataStore && configDataStore.conflictHandler) {\n        return configDataStore.conflictHandler;\n      }\n      if (conflictHandlerIsDefault() && config.conflictHandler) {\n        return config.conflictHandler;\n      }\n      return _this.conflictHandler || defaultConflictHandler;\n    };\n    this.setErrorHandler = function (config) {\n      var configDataStore = config.DataStore;\n      var errorHandlerIsDefault = function () {\n        return _this.errorHandler === defaultErrorHandler;\n      };\n      if (configDataStore && configDataStore.errorHandler) {\n        return configDataStore.errorHandler;\n      }\n      if (errorHandlerIsDefault() && config.errorHandler) {\n        return config.errorHandler;\n      }\n      return _this.errorHandler || defaultErrorHandler;\n    };\n    this.delete = function (modelOrConstructor, identifierOrCriteria) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var condition, msg, modelConstructor, msg, modelDefinition, keyFields, msg, msg, _a, deleted, model, modelConstructor, msg, modelDefinition, pkPredicate, msg, _b, _c, deleted;\n              return __generator(this, function (_d) {\n                switch (_d.label) {\n                  case 0:\n                    return [4 /*yield*/, this.start()];\n                  case 1:\n                    _d.sent();\n                    if (!modelOrConstructor) {\n                      msg = 'Model or Model Constructor required';\n                      logger.error(msg, {\n                        modelOrConstructor: modelOrConstructor\n                      });\n                      throw new Error(msg);\n                    }\n                    if (!isValidModelConstructor(modelOrConstructor)) return [3 /*break*/, 3];\n                    modelConstructor = modelOrConstructor;\n                    if (!identifierOrCriteria) {\n                      msg = 'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n                      logger.error(msg, {\n                        identifierOrCriteria: identifierOrCriteria\n                      });\n                      throw new Error(msg);\n                    }\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    if (typeof identifierOrCriteria === 'string') {\n                      keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                      if (keyFields.length > 1) {\n                        msg = errorMessages.deleteByPkWithCompositeKeyPresent;\n                        logger.error(msg, {\n                          keyFields: keyFields\n                        });\n                        throw new Error(msg);\n                      }\n                      condition = ModelPredicateCreator.createForSingleField(getModelDefinition(modelConstructor), keyFields[0], identifierOrCriteria);\n                    } else {\n                      if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                        condition = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                      } else {\n                        condition = ModelPredicateCreator.createFromExisting(modelDefinition,\n                        /**\n                         * idOrCriteria is always a ProducerModelPredicate<T>, never a symbol.\n                         * The symbol is used only for typing purposes. e.g. see Predicates.ALL\n                         */\n                        identifierOrCriteria);\n                      }\n                      if (!condition || !ModelPredicateCreator.isValidPredicate(condition)) {\n                        msg = 'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n                        logger.error(msg, {\n                          condition: condition\n                        });\n                        throw new Error(msg);\n                      }\n                    }\n                    return [4 /*yield*/, this.storage.delete(modelConstructor, condition)];\n                  case 2:\n                    _a = __read.apply(void 0, [_d.sent(), 1]), deleted = _a[0];\n                    return [2 /*return*/, deleted];\n                  case 3:\n                    model = modelOrConstructor;\n                    modelConstructor = Object.getPrototypeOf(model || {}).constructor;\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Object is not an instance of a valid model';\n                      logger.error(msg, {\n                        model: model\n                      });\n                      throw new Error(msg);\n                    }\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    pkPredicate = ModelPredicateCreator.createForPk(modelDefinition, model);\n                    if (identifierOrCriteria) {\n                      if (typeof identifierOrCriteria !== 'function') {\n                        msg = 'Invalid criteria';\n                        logger.error(msg, {\n                          identifierOrCriteria: identifierOrCriteria\n                        });\n                        throw new Error(msg);\n                      }\n                      condition = identifierOrCriteria(pkPredicate);\n                    } else {\n                      condition = pkPredicate;\n                    }\n                    return [4 /*yield*/, this.storage.delete(model, condition)];\n                  case 4:\n                    _b = __read.apply(void 0, [_d.sent(), 1]), _c = __read(_b[0], 1), deleted = _c[0];\n                    return [2 /*return*/, deleted];\n                }\n              });\n            });\n          }, 'datastore delete').catch(this.handleAddProcError('DataStore.delete()'))];\n        });\n      });\n    };\n    this.observe = function (modelOrConstructor, identifierOrCriteria) {\n      var predicate;\n      var modelConstructor = modelOrConstructor && isValidModelConstructor(modelOrConstructor) ? modelOrConstructor : undefined;\n      if (modelOrConstructor && modelConstructor === undefined) {\n        var model = modelOrConstructor;\n        var modelConstructor_1 = model && Object.getPrototypeOf(model).constructor;\n        if (isValidModelConstructor(modelConstructor_1)) {\n          if (identifierOrCriteria) {\n            logger.warn('idOrCriteria is ignored when using a model instance', {\n              model: model,\n              identifierOrCriteria: identifierOrCriteria\n            });\n          }\n          return _this.observe(modelConstructor_1, model.id);\n        } else {\n          var msg = 'The model is not an instance of a PersistentModelConstructor';\n          logger.error(msg, {\n            model: model\n          });\n          throw new Error(msg);\n        }\n      }\n      // observe should not accept object literal syntax\n      if (identifierOrCriteria && modelConstructor && isIdentifierObject(identifierOrCriteria, getModelDefinition(modelConstructor))) {\n        var msg = errorMessages.observeWithObjectLiteral;\n        logger.error(msg, {\n          objectLiteral: identifierOrCriteria\n        });\n        throw new Error(msg);\n      }\n      if (identifierOrCriteria !== undefined && modelConstructor === undefined) {\n        var msg = 'Cannot provide criteria without a modelConstructor';\n        logger.error(msg, identifierOrCriteria);\n        throw new Error(msg);\n      }\n      if (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n        var msg = 'Constructor is not for a valid model';\n        logger.error(msg, {\n          modelConstructor: modelConstructor\n        });\n        throw new Error(msg);\n      }\n      if (typeof identifierOrCriteria === 'string') {\n        var modelDefinition = getModelDefinition(modelConstructor);\n        var _a = __read(extractPrimaryKeyFieldNames(modelDefinition), 1),\n          keyField = _a[0];\n        predicate = ModelPredicateCreator.createForSingleField(getModelDefinition(modelConstructor), keyField, identifierOrCriteria);\n      } else {\n        if (isPredicatesAll(identifierOrCriteria)) {\n          predicate = undefined;\n        } else {\n          predicate = modelConstructor && ModelPredicateCreator.createFromExisting(getModelDefinition(modelConstructor), identifierOrCriteria);\n        }\n      }\n      return new Observable(function (observer) {\n        var handle;\n        _this.runningProcesses.add(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4 /*yield*/, this.start()];\n                case 1:\n                  _a.sent();\n                  // Filter the events returned by Storage according to namespace,\n                  // append original element data, and subscribe to the observable\n                  handle = this.storage.observe(modelConstructor, predicate).filter(function (_a) {\n                    var model = _a.model;\n                    return namespaceResolver(model) === USER;\n                  }).subscribe({\n                    next: function (item) {\n                      return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var message, modelDefinition, keyFields, primaryKeysAndValues, freshElement;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                message = item;\n                                if (!(item.opType !== 'DELETE')) return [3 /*break*/, 2];\n                                modelDefinition = getModelDefinition(item.model);\n                                keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                primaryKeysAndValues = extractPrimaryKeysAndValues(item.element, keyFields);\n                                return [4 /*yield*/, this.query(item.model, primaryKeysAndValues)];\n                              case 1:\n                                freshElement = _a.sent();\n                                message = __assign(__assign({}, message), {\n                                  element: freshElement\n                                });\n                                _a.label = 2;\n                              case 2:\n                                observer.next(message);\n                                return [2 /*return*/];\n                            }\n                          });\n                        });\n                      }, 'datastore observe message handler');\n                    },\n                    error: function (err) {\n                      return observer.error(err);\n                    },\n                    complete: function () {\n                      return observer.complete();\n                    }\n                  });\n                  return [2 /*return*/];\n              }\n            });\n          });\n        }, 'datastore observe observable initialization').catch(_this.handleAddProcError('DataStore.observe()')).catch(function (error) {\n          observer.error(error);\n        });\n        // better than no cleaner, but if the subscriber is handling the\n        // complete() message async and not registering with the context,\n        // this will still be problematic.\n        return _this.runningProcesses.addCleaner(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              if (handle) {\n                handle.unsubscribe();\n              }\n              return [2 /*return*/];\n            });\n          });\n        }, 'DataStore.observe() cleanup');\n      });\n    };\n    this.observeQuery = function (model, criteria, options) {\n      return new Observable(function (observer) {\n        var items = new Map();\n        var itemsChanged = new Map();\n        var deletedItemIds = [];\n        var handle;\n        var predicate;\n        /**\n         * As the name suggests, this geneates a snapshot in the form of\n         * \t`{items: T[], isSynced: boolean}`\n         * and sends it to the observer.\n         *\n         * SIDE EFFECT: The underlying generation and emission methods may touch:\n         * `items`, `itemsChanged`, and `deletedItemIds`.\n         *\n         * Refer to `generateSnapshot` and `emitSnapshot` for more details.\n         */\n        var generateAndEmitSnapshot = function () {\n          var snapshot = generateSnapshot();\n          emitSnapshot(snapshot);\n        };\n        // a mechanism to return data after X amount of seconds OR after the\n        // \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n        var limitTimerRace = new DeferredCallbackResolver({\n          callback: generateAndEmitSnapshot,\n          errorHandler: observer.error,\n          maxInterval: 2000\n        });\n        var sort = (options || {}).sort;\n        var sortOptions = sort ? {\n          sort: sort\n        } : undefined;\n        var modelDefinition = getModelDefinition(model);\n        var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n        if (isQueryOne(criteria)) {\n          predicate = ModelPredicateCreator.createForSingleField(modelDefinition, keyFields[0], criteria);\n        } else {\n          if (isPredicatesAll(criteria)) {\n            // Predicates.ALL means \"all records\", so no predicate (undefined)\n            predicate = undefined;\n          } else {\n            predicate = ModelPredicateCreator.createFromExisting(modelDefinition, criteria);\n          }\n        }\n        var _a = ModelPredicateCreator.getPredicates(predicate, false) || {},\n          predicates = _a.predicates,\n          predicateGroupType = _a.type;\n        var hasPredicate = !!predicates;\n        _this.runningProcesses.add(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var err_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2,, 3]);\n                  return [4 /*yield*/, this.query(model, criteria, sortOptions)];\n                case 1:\n                  // first, query and return any locally-available records\n                  _a.sent().forEach(function (item) {\n                    var itemModelDefinition = getModelDefinition(model);\n                    var idOrPk = getIdentifierValue(itemModelDefinition, item);\n                    items.set(idOrPk, item);\n                  });\n                  // Observe the model and send a stream of updates (debounced).\n                  // We need to post-filter results instead of passing criteria through\n                  // to have visibility into items that move from in-set to out-of-set.\n                  // We need to explicitly remove those items from the existing snapshot.\n                  handle = this.observe(model).subscribe(function (_a) {\n                    var element = _a.element,\n                      model = _a.model,\n                      opType = _a.opType;\n                    var _b, _c;\n                    var itemModelDefinition = getModelDefinition(model);\n                    var idOrPk = getIdentifierValue(itemModelDefinition, element);\n                    if (hasPredicate && !validatePredicate(element, predicateGroupType, predicates)) {\n                      if (opType === 'UPDATE' && (items.has(idOrPk) || itemsChanged.has(idOrPk))) {\n                        // tracking as a \"deleted item\" will include the item in\n                        // page limit calculations and ensure it is removed from the\n                        // final items collection, regardless of which collection(s)\n                        // it is currently in. (I mean, it could be in both, right!?)\n                        deletedItemIds.push(idOrPk);\n                      } else {\n                        // ignore updates for irrelevant/filtered items.\n                        return;\n                      }\n                    }\n                    // Flag items which have been recently deleted\n                    // NOTE: Merging of separate operations to the same model instance is handled upstream\n                    // in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n                    // depends on the LATEST record (for a given id).\n                    if (opType === 'DELETE') {\n                      deletedItemIds.push(idOrPk);\n                    } else {\n                      itemsChanged.set(idOrPk, element);\n                    }\n                    var isSynced = (_c = (_b = _this.sync) === null || _b === void 0 ? void 0 : _b.getModelSyncedStatus(model)) !== null && _c !== void 0 ? _c : false;\n                    var limit = itemsChanged.size - deletedItemIds.length >= _this.syncPageSize;\n                    if (limit || isSynced) {\n                      limitTimerRace.resolve();\n                    }\n                    // kicks off every subsequent race as results sync down\n                    limitTimerRace.start();\n                  });\n                  // returns a set of initial/locally-available results\n                  generateAndEmitSnapshot();\n                  return [3 /*break*/, 3];\n                case 2:\n                  err_1 = _a.sent();\n                  observer.error(err_1);\n                  return [3 /*break*/, 3];\n                case 3:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        }, 'datastore observequery startup').catch(_this.handleAddProcError('DataStore.observeQuery()')).catch(function (error) {\n          observer.error(error);\n        });\n        /**\n         * Combines the `items`, `itemsChanged`, and `deletedItemIds` collections into\n         * a snapshot in the form of `{ items: T[], isSynced: boolean}`.\n         *\n         * SIDE EFFECT: The shared `items` collection is recreated.\n         */\n        var generateSnapshot = function () {\n          var _a, _b;\n          var isSynced = (_b = (_a = _this.sync) === null || _a === void 0 ? void 0 : _a.getModelSyncedStatus(model)) !== null && _b !== void 0 ? _b : false;\n          var itemsArray = __spread(Array.from(items.values()), Array.from(itemsChanged.values()));\n          if (options === null || options === void 0 ? void 0 : options.sort) {\n            sortItems(itemsArray);\n          }\n          items.clear();\n          itemsArray.forEach(function (item) {\n            var itemModelDefinition = getModelDefinition(model);\n            var idOrPk = getIdentifierValue(itemModelDefinition, item);\n            items.set(idOrPk, item);\n          });\n          // remove deleted items from the final result set\n          deletedItemIds.forEach(function (idOrPk) {\n            return items.delete(idOrPk);\n          });\n          return {\n            items: Array.from(items.values()),\n            isSynced: isSynced\n          };\n        };\n        /**\n         * Emits the list of items to the observer.\n         *\n         * SIDE EFFECT: `itemsChanged` and `deletedItemIds` are cleared to prepare\n         * for the next snapshot.\n         *\n         * @param snapshot The generated items data to emit.\n         */\n        var emitSnapshot = function (snapshot) {\n          // send the generated snapshot to the primary subscription.\n          // NOTE: This observer's handler *could* be async ...\n          observer.next(snapshot);\n          // reset the changed items sets\n          itemsChanged.clear();\n          deletedItemIds = [];\n        };\n        /**\n         * Sorts an `Array` of `T` according to the sort instructions given in the\n         * original  `observeQuery()` call.\n         *\n         * @param itemsToSort A array of model type.\n         */\n        var sortItems = function (itemsToSort) {\n          var modelDefinition = getModelDefinition(model);\n          var pagination = _this.processPagination(modelDefinition, options);\n          var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n          if (sortPredicates.length) {\n            var compareFn = sortCompareFunction(sortPredicates);\n            itemsToSort.sort(compareFn);\n          }\n        };\n        /**\n         * Force one last snapshot when the model is fully synced.\n         *\n         * This reduces latency for that last snapshot, which will otherwise\n         * wait for the configured timeout.\n         *\n         * @param payload The payload from the Hub event.\n         */\n        var hubCallback = function (_a) {\n          var payload = _a.payload;\n          var _b;\n          var event = payload.event,\n            data = payload.data;\n          if (event === ControlMessage.SYNC_ENGINE_MODEL_SYNCED && ((_b = data === null || data === void 0 ? void 0 : data.model) === null || _b === void 0 ? void 0 : _b.name) === model.name) {\n            generateAndEmitSnapshot();\n            Hub.remove('datastore', hubCallback);\n          }\n        };\n        Hub.listen('datastore', hubCallback);\n        return _this.runningProcesses.addCleaner(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              if (handle) {\n                handle.unsubscribe();\n              }\n              return [2 /*return*/];\n            });\n          });\n        }, 'datastore observequery cleaner');\n      });\n    };\n    this.configure = function (config) {\n      if (config === void 0) {\n        config = {};\n      }\n      _this.amplifyContext.Auth = _this.Auth;\n      _this.amplifyContext.API = _this.API;\n      _this.amplifyContext.Cache = _this.Cache;\n      var configDataStore = config.DataStore,\n        configAuthModeStrategyType = config.authModeStrategyType,\n        configConflictHandler = config.conflictHandler,\n        configErrorHandler = config.errorHandler,\n        configMaxRecordsToSync = config.maxRecordsToSync,\n        configSyncPageSize = config.syncPageSize,\n        configFullSyncInterval = config.fullSyncInterval,\n        configSyncExpressions = config.syncExpressions,\n        configAuthProviders = config.authProviders,\n        configStorageAdapter = config.storageAdapter,\n        configFromAmplify = __rest(config, [\"DataStore\", \"authModeStrategyType\", \"conflictHandler\", \"errorHandler\", \"maxRecordsToSync\", \"syncPageSize\", \"fullSyncInterval\", \"syncExpressions\", \"authProviders\", \"storageAdapter\"]);\n      _this.amplifyConfig = __assign(__assign({}, configFromAmplify), _this.amplifyConfig);\n      _this.conflictHandler = _this.setConflictHandler(config);\n      _this.errorHandler = _this.setErrorHandler(config);\n      var authModeStrategyType = configDataStore && configDataStore.authModeStrategyType || configAuthModeStrategyType || AuthModeStrategyType.DEFAULT;\n      switch (authModeStrategyType) {\n        case AuthModeStrategyType.MULTI_AUTH:\n          _this.authModeStrategy = multiAuthStrategy(_this.amplifyContext);\n          break;\n        case AuthModeStrategyType.DEFAULT:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n        default:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n      }\n      // store on config object, so that Sync, Subscription, and Mutation processors can have access\n      _this.amplifyConfig.authProviders = configDataStore && configDataStore.authProviders || configAuthProviders;\n      _this.syncExpressions = configDataStore && configDataStore.syncExpressions || configSyncExpressions || _this.syncExpressions;\n      _this.maxRecordsToSync = configDataStore && configDataStore.maxRecordsToSync || configMaxRecordsToSync || _this.maxRecordsToSync || 10000;\n      // store on config object, so that Sync, Subscription, and Mutation processors can have access\n      _this.amplifyConfig.maxRecordsToSync = _this.maxRecordsToSync;\n      _this.syncPageSize = configDataStore && configDataStore.syncPageSize || configSyncPageSize || _this.syncPageSize || 1000;\n      // store on config object, so that Sync, Subscription, and Mutation processors can have access\n      _this.amplifyConfig.syncPageSize = _this.syncPageSize;\n      _this.fullSyncInterval = configDataStore && configDataStore.fullSyncInterval || configFullSyncInterval || _this.fullSyncInterval || 24 * 60; // 1 day\n      _this.storageAdapter = configDataStore && configDataStore.storageAdapter || configStorageAdapter || _this.storageAdapter || undefined;\n      _this.sessionId = _this.retrieveSessionId();\n    };\n  }\n  DataStore.prototype.getModuleName = function () {\n    return 'DataStore';\n  };\n  /**\n   * Builds a function to capture `BackgroundManagerNotOpenError`'s to produce friendlier,\n   * more instructive errors for customers.\n   *\n   * @param operation The name of the operation (usually a Datastore method) the customer\n   * tried to call.\n   */\n  DataStore.prototype.handleAddProcError = function (operation) {\n    var _this = this;\n    /**\n     * If the tested error is a `BackgroundManagerNotOpenError`, it will be captured\n     * and replaced with a friendlier message that instructs the App Developer.\n     *\n     * @param err An error to test.\n     */\n    var handler = function (err) {\n      if (err.message.startsWith('BackgroundManagerNotOpenError')) {\n        throw new Error([\"DataStoreStateError: Tried to execute `\" + operation + \"` while DataStore was \\\"\" + _this.state + \"\\\".\", \"This can only be done while DataStore is \\\"Started\\\" or \\\"Stopped\\\". To remedy:\", 'Ensure all calls to `stop()` and `clear()` have completed first.', 'If this is not possible, retry the operation until it succeeds.'].join('\\n'));\n      } else {\n        throw err;\n      }\n    };\n    return handler;\n  };\n  /**\n   * Clears all data from storage and removes all data, schema info, other\n   * initialization details, and then stops DataStore.\n   *\n   * That said, reinitialization is required after clearing. This can be done\n   * by explicitiliy calling `start()` or any method that implicitly starts\n   * DataStore, such as `query()`, `save()`, or `delete()`.\n   */\n  DataStore.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            checkSchemaInitialized();\n            this.state = DataStoreState.Clearing;\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            if (!(this.storage === undefined)) return [3 /*break*/, 3];\n            // connect to storage so that it can be cleared without fully starting DataStore\n            this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n            return [4 /*yield*/, this.storage.init()];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            if (syncSubscription && !syncSubscription.closed) {\n              syncSubscription.unsubscribe();\n            }\n            if (!this.sync) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.sync.stop()];\n          case 4:\n            _a.sent();\n            _a.label = 5;\n          case 5:\n            return [4 /*yield*/, this.storage.clear()];\n          case 6:\n            _a.sent();\n            this.initialized = undefined; // Should re-initialize when start() is called.\n            this.storage = undefined;\n            this.sync = undefined;\n            this.syncPredicates = new WeakMap();\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 7:\n            _a.sent();\n            this.state = DataStoreState.NotRunning;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Stops all DataStore sync activities.\n   *\n   * TODO: \"Waits for graceful termination of\n   * running queries and terminates subscriptions.\"\n   */\n  DataStore.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.state = DataStoreState.Stopping;\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            if (syncSubscription && !syncSubscription.closed) {\n              syncSubscription.unsubscribe();\n            }\n            if (!this.sync) return [3 /*break*/, 3];\n            return [4 /*yield*/, this.sync.stop()];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            this.initialized = undefined; // Should re-initialize when start() is called.\n            this.sync = undefined;\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 4:\n            _a.sent();\n            this.state = DataStoreState.NotRunning;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Validates given pagination input from a query and creates a pagination\n   * argument for use against the storage layer.\n   *\n   * @param modelDefinition\n   * @param paginationProducer\n   */\n  DataStore.prototype.processPagination = function (modelDefinition, paginationProducer) {\n    var sortPredicate;\n    var _a = paginationProducer || {},\n      limit = _a.limit,\n      page = _a.page,\n      sort = _a.sort;\n    if (limit === undefined && page === undefined && sort === undefined) {\n      return undefined;\n    }\n    if (page !== undefined && limit === undefined) {\n      throw new Error('Limit is required when requesting a page');\n    }\n    if (page !== undefined) {\n      if (typeof page !== 'number') {\n        throw new Error('Page should be a number');\n      }\n      if (page < 0) {\n        throw new Error(\"Page can't be negative\");\n      }\n    }\n    if (limit !== undefined) {\n      if (typeof limit !== 'number') {\n        throw new Error('Limit should be a number');\n      }\n      if (limit < 0) {\n        throw new Error(\"Limit can't be negative\");\n      }\n    }\n    if (sort) {\n      sortPredicate = ModelSortPredicateCreator.createFromExisting(modelDefinition, paginationProducer.sort);\n    }\n    return {\n      limit: limit,\n      page: page,\n      sort: sortPredicate\n    };\n  };\n  /**\n   * Examines the configured `syncExpressions` and produces a WeakMap of\n   * SchemaModel -> predicate to use during sync.\n   */\n  DataStore.prototype.processSyncExpressions = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var syncPredicates;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.syncExpressions || !this.syncExpressions.length) {\n              return [2 /*return*/, new WeakMap()];\n            }\n            return [4 /*yield*/, Promise.all(this.syncExpressions.map(function (syncExpression) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, modelConstructor, conditionProducer, modelDefinition, condition, predicate;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4 /*yield*/, syncExpression];\n                    case 1:\n                      _a = _b.sent(), modelConstructor = _a.modelConstructor, conditionProducer = _a.conditionProducer;\n                      modelDefinition = getModelDefinition(modelConstructor);\n                      return [4 /*yield*/, this.unwrapPromise(conditionProducer)];\n                    case 2:\n                      condition = _b.sent();\n                      if (isPredicatesAll(condition)) {\n                        return [2 /*return*/, [modelDefinition, null]];\n                      }\n                      predicate = this.createFromCondition(modelDefinition, condition);\n                      return [2 /*return*/, [modelDefinition, predicate]];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            syncPredicates = _a.sent();\n            return [2 /*return*/, this.weakMapFromEntries(syncPredicates)];\n        }\n      });\n    });\n  };\n  DataStore.prototype.createFromCondition = function (modelDefinition, condition) {\n    try {\n      return ModelPredicateCreator.createFromExisting(modelDefinition, condition);\n    } catch (error) {\n      logger.error('Error creating Sync Predicate');\n      throw error;\n    }\n  };\n  DataStore.prototype.unwrapPromise = function (conditionProducer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var condition, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, conditionProducer()];\n          case 1:\n            condition = _a.sent();\n            return [2 /*return*/, condition];\n          case 2:\n            error_1 = _a.sent();\n            if (error_1 instanceof TypeError) {\n              return [2 /*return*/, conditionProducer];\n            }\n            throw error_1;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  DataStore.prototype.weakMapFromEntries = function (entries) {\n    return entries.reduce(function (map, _a) {\n      var _b = __read(_a, 2),\n        modelDefinition = _b[0],\n        predicate = _b[1];\n      if (map.has(modelDefinition)) {\n        var name_2 = modelDefinition.name;\n        logger.warn(\"You can only utilize one Sync Expression per model.\\n          Subsequent sync expressions for the \" + name_2 + \" model will be ignored.\");\n        return map;\n      }\n      if (predicate) {\n        map.set(modelDefinition, predicate);\n      }\n      return map;\n    }, new WeakMap());\n  };\n  /**\n   * A session ID to allow CMS to open databases against multiple apps.\n   * This session ID is only expected be set by AWS Amplify Studio.\n   */\n  DataStore.prototype.retrieveSessionId = function () {\n    try {\n      var sessionId = sessionStorage.getItem('datastoreSessionId');\n      if (sessionId) {\n        var aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n        var appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n        var _a = __read(appSyncUrl.split('.'), 1),\n          appSyncId = _a[0];\n        return sessionId + \"-\" + appSyncId;\n      }\n    } catch (_b) {}\n    return undefined;\n  };\n  return DataStore;\n}();\nvar instance = new DataStore();\nAmplify.register(instance);\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };","map":{"version":3,"sources":["../../src/datastore/datastore.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport API from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { Amplify, ConsoleLogger as Logger, Hub, JS, BackgroundProcessManager, } from '@aws-amplify/core';\nimport { immerable, produce, setAutoFreeze, enablePatches, } from 'immer';\nimport { v4 as uuid4 } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport { isPredicatesAll, ModelPredicateCreator, ModelSortPredicateCreator, } from '../predicates';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport { GraphQLScalarType, isGraphQLScalarType, isSchemaModelWithAttributes, AuthModeStrategyType, isNonModelFieldType, isModelFieldType, isIdentifierObject, } from '../types';\nimport { DATASTORE, errorMessages, establishRelationAndKeys, exhaustiveCheck, isModelConstructor, monotonicUlidFactory, STORAGE, SYNC, USER, isNullOrUndefined, registerNonModelClass, sortCompareFunction, DeferredCallbackResolver, extractPrimaryKeyFieldNames, extractPrimaryKeysAndValues, isIdManaged, isIdOptionallyManaged, validatePredicate, mergePatches, } from '../util';\nimport { getIdentifierValue } from '../sync/utils';\nsetAutoFreeze(true);\nenablePatches();\nvar logger = new Logger('DataStore');\nvar ulid = monotonicUlidFactory(Date.now());\nvar isNode = JS.browserOrNode().isNode;\nvar SETTING_SCHEMA_VERSION = 'schemaVersion';\nvar schema;\nvar modelNamespaceMap = new WeakMap();\n// stores data for crafting the correct update mutation input for a model\n// Patch[] - array of changed fields and metadata\n// PersistentModel - the source model, used for diffing object-type fields\nvar modelPatchesMap = new WeakMap();\nvar getModelDefinition = function (modelConstructor) {\n    var namespace = modelNamespaceMap.get(modelConstructor);\n    return schema.namespaces[namespace].models[modelConstructor.name];\n};\nvar isValidModelConstructor = function (obj) {\n    return isModelConstructor(obj) && modelNamespaceMap.has(obj);\n};\nvar namespaceResolver = function (modelConstructor) {\n    return modelNamespaceMap.get(modelConstructor);\n};\n// exporting syncClasses for testing outbox.test.ts\nexport var syncClasses;\nvar userClasses;\nvar dataStoreClasses;\nvar storageClasses;\nvar initSchema = function (userSchema) {\n    var _a;\n    if (schema !== undefined) {\n        console.warn('The schema has already been initialized');\n        return userClasses;\n    }\n    logger.log('validating schema', { schema: userSchema });\n    var internalUserNamespace = __assign({ name: USER }, userSchema);\n    logger.log('DataStore', 'Init models');\n    userClasses = createTypeClasses(internalUserNamespace);\n    logger.log('DataStore', 'Models initialized');\n    var dataStoreNamespace = getNamespace();\n    var storageNamespace = Storage.getNamespace();\n    var syncNamespace = SyncEngine.getNamespace();\n    dataStoreClasses = createTypeClasses(dataStoreNamespace);\n    storageClasses = createTypeClasses(storageNamespace);\n    syncClasses = createTypeClasses(syncNamespace);\n    schema = {\n        namespaces: (_a = {},\n            _a[dataStoreNamespace.name] = dataStoreNamespace,\n            _a[internalUserNamespace.name] = internalUserNamespace,\n            _a[storageNamespace.name] = storageNamespace,\n            _a[syncNamespace.name] = syncNamespace,\n            _a),\n        version: userSchema.version,\n    };\n    Object.keys(schema.namespaces).forEach(function (namespace) {\n        var e_1, _a;\n        var _b = __read(establishRelationAndKeys(schema.namespaces[namespace]), 2), relations = _b[0], keys = _b[1];\n        schema.namespaces[namespace].relationships = relations;\n        schema.namespaces[namespace].keys = keys;\n        var modelAssociations = new Map();\n        Object.values(schema.namespaces[namespace].models).forEach(function (model) {\n            var connectedModels = [];\n            Object.values(model.fields)\n                .filter(function (field) {\n                return field.association &&\n                    field.association.connectionType === 'BELONGS_TO' &&\n                    field.type.model !== model.name;\n            })\n                .forEach(function (field) {\n                return connectedModels.push(field.type.model);\n            });\n            modelAssociations.set(model.name, connectedModels);\n        });\n        var result = new Map();\n        var count = 1000;\n        while (true && count > 0) {\n            if (modelAssociations.size === 0) {\n                break;\n            }\n            count--;\n            if (count === 0) {\n                throw new Error('Models are not topologically sortable. Please verify your schema.');\n            }\n            try {\n                for (var _c = (e_1 = void 0, __values(Array.from(modelAssociations.keys()))), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var modelName = _d.value;\n                    var parents = modelAssociations.get(modelName);\n                    if (parents.every(function (x) { return result.has(x); })) {\n                        result.set(modelName, parents);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            Array.from(result.keys()).forEach(function (x) { return modelAssociations.delete(x); });\n        }\n        schema.namespaces[namespace].modelTopologicalOrdering = result;\n    });\n    return userClasses;\n};\n/**\n * Throws an exception if the schema has *not* been initialized\n * by `initSchema()`.\n *\n * **To be called before trying to access schema.**\n *\n * Currently this only needs to be called in `start()` and `clear()` because\n * all other functions will call start first.\n */\nvar checkSchemaInitialized = function () {\n    if (schema === undefined) {\n        var message = 'Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions';\n        logger.error(message);\n        throw new Error(message);\n    }\n};\nvar createTypeClasses = function (namespace) {\n    var classes = {};\n    Object.entries(namespace.models).forEach(function (_a) {\n        var _b = __read(_a, 2), modelName = _b[0], modelDefinition = _b[1];\n        var clazz = createModelClass(modelDefinition);\n        classes[modelName] = clazz;\n        modelNamespaceMap.set(clazz, namespace.name);\n    });\n    Object.entries(namespace.nonModels || {}).forEach(function (_a) {\n        var _b = __read(_a, 2), typeName = _b[0], typeDefinition = _b[1];\n        var clazz = createNonModelClass(typeDefinition);\n        classes[typeName] = clazz;\n    });\n    return classes;\n};\n/**\n * Collection of instantiated models to allow storage of metadata apart from\n * the model visible to the consuming app -- in case the app doesn't have\n * metadata fields (_version, _deleted, etc.) exposed on the model itself.\n */\nvar instancesMetadata = new WeakSet();\nfunction modelInstanceCreator(modelConstructor, init) {\n    instancesMetadata.add(init);\n    return new modelConstructor(init);\n}\nvar validateModelFields = function (modelDefinition) { return function (k, v) {\n    var fieldDefinition = modelDefinition.fields[k];\n    if (fieldDefinition !== undefined) {\n        var type_1 = fieldDefinition.type, isRequired_1 = fieldDefinition.isRequired, isArrayNullable = fieldDefinition.isArrayNullable, name_1 = fieldDefinition.name, isArray = fieldDefinition.isArray;\n        if (((!isArray && isRequired_1) || (isArray && !isArrayNullable)) &&\n            (v === null || v === undefined)) {\n            throw new Error(\"Field \" + name_1 + \" is required\");\n        }\n        if (isSchemaModelWithAttributes(modelDefinition) &&\n            !isIdManaged(modelDefinition)) {\n            var keys = extractPrimaryKeyFieldNames(modelDefinition);\n            if (keys.includes(k) && v === '') {\n                logger.error(errorMessages.idEmptyString, { k: k, value: v });\n                throw new Error(errorMessages.idEmptyString);\n            }\n        }\n        if (isGraphQLScalarType(type_1)) {\n            var jsType_1 = GraphQLScalarType.getJSType(type_1);\n            var validateScalar_1 = GraphQLScalarType.getValidationFunction(type_1);\n            if (type_1 === 'AWSJSON') {\n                if (typeof v === jsType_1) {\n                    return;\n                }\n                if (typeof v === 'string') {\n                    try {\n                        JSON.parse(v);\n                        return;\n                    }\n                    catch (error) {\n                        throw new Error(\"Field \" + name_1 + \" is an invalid JSON object. \" + v);\n                    }\n                }\n            }\n            if (isArray) {\n                var errorTypeText = jsType_1;\n                if (!isRequired_1) {\n                    errorTypeText = jsType_1 + \" | null | undefined\";\n                }\n                if (!Array.isArray(v) && !isArrayNullable) {\n                    throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n                }\n                if (!isNullOrUndefined(v) &&\n                    v.some(function (e) {\n                        return isNullOrUndefined(e) ? isRequired_1 : typeof e !== jsType_1;\n                    })) {\n                    var elemTypes = v\n                        .map(function (e) { return (e === null ? 'null' : typeof e); })\n                        .join(',');\n                    throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + errorTypeText + \", [\" + elemTypes + \"] received. \" + v);\n                }\n                if (validateScalar_1 && !isNullOrUndefined(v)) {\n                    var validationStatus = v.map(function (e) {\n                        if (!isNullOrUndefined(e)) {\n                            return validateScalar_1(e);\n                        }\n                        else if (isNullOrUndefined(e) && !isRequired_1) {\n                            return true;\n                        }\n                        else {\n                            return false;\n                        }\n                    });\n                    if (!validationStatus.every(function (s) { return s; })) {\n                        throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1 + \", validation failed for one or more elements. \" + v);\n                    }\n                }\n            }\n            else if (!isRequired_1 && v === undefined) {\n                return;\n            }\n            else if (typeof v !== jsType_1 && v !== null) {\n                throw new Error(\"Field \" + name_1 + \" should be of type \" + jsType_1 + \", \" + typeof v + \" received. \" + v);\n            }\n            else if (!isNullOrUndefined(v) &&\n                validateScalar_1 &&\n                !validateScalar_1(v)) {\n                throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1 + \", validation failed. \" + v);\n            }\n        }\n        else if (isNonModelFieldType(type_1)) {\n            // do not check non model fields if undefined or null\n            if (!isNullOrUndefined(v)) {\n                var subNonModelDefinition_1 = schema.namespaces.user.nonModels[type_1.nonModel];\n                var modelValidator_1 = validateModelFields(subNonModelDefinition_1);\n                if (isArray) {\n                    var errorTypeText = type_1.nonModel;\n                    if (!isRequired_1) {\n                        errorTypeText = type_1.nonModel + \" | null | undefined\";\n                    }\n                    if (!Array.isArray(v)) {\n                        throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n                    }\n                    v.forEach(function (item) {\n                        if ((isNullOrUndefined(item) && isRequired_1) ||\n                            (typeof item !== 'object' && typeof item !== 'undefined')) {\n                            throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1.nonModel + \", [\" + typeof item + \"] received. \" + item);\n                        }\n                        if (!isNullOrUndefined(item)) {\n                            Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n                                modelValidator_1(subKey, item[subKey]);\n                            });\n                        }\n                    });\n                }\n                else {\n                    if (typeof v !== 'object') {\n                        throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1.nonModel + \", \" + typeof v + \" recieved. \" + v);\n                    }\n                    Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n                        modelValidator_1(subKey, v[subKey]);\n                    });\n                }\n            }\n        }\n    }\n}; };\nvar castInstanceType = function (modelDefinition, k, v) {\n    var _a = modelDefinition.fields[k] || {}, isArray = _a.isArray, type = _a.type;\n    // attempt to parse stringified JSON\n    if (typeof v === 'string' &&\n        (isArray ||\n            type === 'AWSJSON' ||\n            isNonModelFieldType(type) ||\n            isModelFieldType(type))) {\n        try {\n            return JSON.parse(v);\n        }\n        catch (_b) {\n            // if JSON is invalid, don't throw and let modelValidator handle it\n        }\n    }\n    // cast from numeric representation of boolean to JS boolean\n    if (typeof v === 'number' && type === 'Boolean') {\n        return Boolean(v);\n    }\n    return v;\n};\nvar initializeInstance = function (init, modelDefinition, draft) {\n    var modelValidator = validateModelFields(modelDefinition);\n    Object.entries(init).forEach(function (_a) {\n        var _b = __read(_a, 2), k = _b[0], v = _b[1];\n        var parsedValue = castInstanceType(modelDefinition, k, v);\n        modelValidator(k, parsedValue);\n        draft[k] = parsedValue;\n    });\n};\nvar createModelClass = function (modelDefinition) {\n    var clazz = /** @class */ (function () {\n        function Model(init) {\n            var instance = produce(this, function (draft) {\n                initializeInstance(init, modelDefinition, draft);\n                // model is initialized inside a DataStore component (e.g. by Sync Engine, Storage Engine, etc.)\n                var isInternallyInitialized = instancesMetadata.has(init);\n                var modelInstanceMetadata = isInternallyInitialized\n                    ? init\n                    : {};\n                var _id = modelInstanceMetadata.id;\n                if (isIdManaged(modelDefinition)) {\n                    var isInternalModel = _id !== null && _id !== undefined;\n                    var id = isInternalModel\n                        ? _id\n                        : modelDefinition.syncable\n                            ? uuid4()\n                            : ulid();\n                    draft.id = id;\n                }\n                else if (isIdOptionallyManaged(modelDefinition)) {\n                    // only auto-populate if the id was not provided\n                    draft.id = draft.id || uuid4();\n                }\n                if (!isInternallyInitialized) {\n                    checkReadOnlyPropertyOnCreate(draft, modelDefinition);\n                }\n                var _version = modelInstanceMetadata._version, _lastChangedAt = modelInstanceMetadata._lastChangedAt, _deleted = modelInstanceMetadata._deleted;\n                if (modelDefinition.syncable) {\n                    draft._version = _version;\n                    draft._lastChangedAt = _lastChangedAt;\n                    draft._deleted = _deleted;\n                }\n            });\n            return instance;\n        }\n        Model.copyOf = function (source, fn) {\n            var modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n            if (!isValidModelConstructor(modelConstructor)) {\n                var msg = 'The source object is not a valid model';\n                logger.error(msg, { source: source });\n                throw new Error(msg);\n            }\n            var patches;\n            var model = produce(source, function (draft) {\n                fn(draft);\n                var keyNames = extractPrimaryKeyFieldNames(modelDefinition);\n                // Keys are immutable\n                keyNames.forEach(function (key) { return (draft[key] = source[key]); });\n                var modelValidator = validateModelFields(modelDefinition);\n                Object.entries(draft).forEach(function (_a) {\n                    var _b = __read(_a, 2), k = _b[0], v = _b[1];\n                    var parsedValue = castInstanceType(modelDefinition, k, v);\n                    modelValidator(k, parsedValue);\n                });\n            }, function (p) { return (patches = p); });\n            var hasExistingPatches = modelPatchesMap.has(source);\n            if (patches.length || hasExistingPatches) {\n                if (hasExistingPatches) {\n                    var _a = __read(modelPatchesMap.get(source), 2), existingPatches = _a[0], existingSource = _a[1];\n                    var mergedPatches = mergePatches(existingSource, existingPatches, patches);\n                    modelPatchesMap.set(model, [mergedPatches, existingSource]);\n                    checkReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);\n                }\n                else {\n                    modelPatchesMap.set(model, [patches, source]);\n                    checkReadOnlyPropertyOnUpdate(patches, modelDefinition);\n                }\n            }\n            return model;\n        };\n        // \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n        // to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n        Model.fromJSON = function (json) {\n            var _this = this;\n            if (Array.isArray(json)) {\n                return json.map(function (init) { return _this.fromJSON(init); });\n            }\n            var instance = modelInstanceCreator(clazz, json);\n            var modelValidator = validateModelFields(modelDefinition);\n            Object.entries(instance).forEach(function (_a) {\n                var _b = __read(_a, 2), k = _b[0], v = _b[1];\n                modelValidator(k, v);\n            });\n            return instance;\n        };\n        return Model;\n    }());\n    clazz[immerable] = true;\n    Object.defineProperty(clazz, 'name', { value: modelDefinition.name });\n    return clazz;\n};\nvar checkReadOnlyPropertyOnCreate = function (draft, modelDefinition) {\n    var modelKeys = Object.keys(draft);\n    var fields = modelDefinition.fields;\n    modelKeys.forEach(function (key) {\n        if (fields[key] && fields[key].isReadOnly) {\n            throw new Error(key + \" is read-only.\");\n        }\n    });\n};\nvar checkReadOnlyPropertyOnUpdate = function (patches, modelDefinition) {\n    var patchArray = patches.map(function (p) { return [p.path[0], p.value]; });\n    var fields = modelDefinition.fields;\n    patchArray.forEach(function (_a) {\n        var _b = __read(_a, 2), key = _b[0], val = _b[1];\n        if (!val || !fields[key])\n            return;\n        if (fields[key].isReadOnly) {\n            throw new Error(key + \" is read-only.\");\n        }\n    });\n};\nvar createNonModelClass = function (typeDefinition) {\n    var clazz = /** @class */ (function () {\n        function Model(init) {\n            var instance = produce(this, function (draft) {\n                initializeInstance(init, typeDefinition, draft);\n            });\n            return instance;\n        }\n        return Model;\n    }());\n    clazz[immerable] = true;\n    Object.defineProperty(clazz, 'name', { value: typeDefinition.name });\n    registerNonModelClass(clazz);\n    return clazz;\n};\nfunction isQueryOne(obj) {\n    return typeof obj === 'string';\n}\nfunction defaultConflictHandler(conflictData) {\n    var localModel = conflictData.localModel, modelConstructor = conflictData.modelConstructor, remoteModel = conflictData.remoteModel;\n    var _version = remoteModel._version;\n    return modelInstanceCreator(modelConstructor, __assign(__assign({}, localModel), { _version: _version }));\n}\nfunction defaultErrorHandler(error) {\n    logger.warn(error);\n}\nfunction getModelConstructorByModelName(namespaceName, modelName) {\n    var result;\n    switch (namespaceName) {\n        case DATASTORE:\n            result = dataStoreClasses[modelName];\n            break;\n        case USER:\n            result = userClasses[modelName];\n            break;\n        case SYNC:\n            result = syncClasses[modelName];\n            break;\n        case STORAGE:\n            result = storageClasses[modelName];\n            break;\n        default:\n            exhaustiveCheck(namespaceName);\n            break;\n    }\n    if (isValidModelConstructor(result)) {\n        return result;\n    }\n    else {\n        var msg = \"Model name is not valid for namespace. modelName: \" + modelName + \", namespace: \" + namespaceName;\n        logger.error(msg);\n        throw new Error(msg);\n    }\n}\n/**\n * Queries the DataStore metadata tables to see if they are the expected\n * version. If not, clobbers the whole DB. If so, leaves them alone.\n * Otherwise, simply writes the schema version.\n *\n * SIDE EFFECT:\n * 1. Creates a transaction\n * 1. Updates data.\n *\n * @param storage Storage adapter containing the metadata.\n * @param version The expected schema version.\n */\nfunction checkSchemaVersion(storage, version) {\n    return __awaiter(this, void 0, void 0, function () {\n        var Setting, modelDefinition;\n        var _this = this;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    Setting = dataStoreClasses.Setting;\n                    modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n                    return [4 /*yield*/, storage.runExclusive(function (s) { return __awaiter(_this, void 0, void 0, function () {\n                            var _a, schemaVersionSetting, storedValue;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0: return [4 /*yield*/, s.query(Setting, ModelPredicateCreator.createFromExisting(modelDefinition, function (c) {\n                                            return c.key('eq', SETTING_SCHEMA_VERSION);\n                                        }), { page: 0, limit: 1 })];\n                                    case 1:\n                                        _a = __read.apply(void 0, [_b.sent(), 1]), schemaVersionSetting = _a[0];\n                                        if (!(schemaVersionSetting !== undefined &&\n                                            schemaVersionSetting.value !== undefined)) return [3 /*break*/, 4];\n                                        storedValue = JSON.parse(schemaVersionSetting.value);\n                                        if (!(storedValue !== version)) return [3 /*break*/, 3];\n                                        return [4 /*yield*/, s.clear(false)];\n                                    case 2:\n                                        _b.sent();\n                                        _b.label = 3;\n                                    case 3: return [3 /*break*/, 6];\n                                    case 4: return [4 /*yield*/, s.save(modelInstanceCreator(Setting, {\n                                            key: SETTING_SCHEMA_VERSION,\n                                            value: JSON.stringify(version),\n                                        }))];\n                                    case 5:\n                                        _b.sent();\n                                        _b.label = 6;\n                                    case 6: return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                case 1:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nvar syncSubscription;\nfunction getNamespace() {\n    var namespace = {\n        name: DATASTORE,\n        relationships: {},\n        enums: {},\n        nonModels: {},\n        models: {\n            Setting: {\n                name: 'Setting',\n                pluralName: 'Settings',\n                syncable: false,\n                fields: {\n                    id: {\n                        name: 'id',\n                        type: 'ID',\n                        isRequired: true,\n                        isArray: false,\n                    },\n                    key: {\n                        name: 'key',\n                        type: 'String',\n                        isRequired: true,\n                        isArray: false,\n                    },\n                    value: {\n                        name: 'value',\n                        type: 'String',\n                        isRequired: true,\n                        isArray: false,\n                    },\n                },\n            },\n        },\n    };\n    return namespace;\n}\nvar DataStoreState;\n(function (DataStoreState) {\n    DataStoreState[\"NotRunning\"] = \"Not Running\";\n    DataStoreState[\"Starting\"] = \"Starting\";\n    DataStoreState[\"Running\"] = \"Running\";\n    DataStoreState[\"Stopping\"] = \"Stopping\";\n    DataStoreState[\"Clearing\"] = \"Clearing\";\n})(DataStoreState || (DataStoreState = {}));\nvar DataStore = /** @class */ (function () {\n    function DataStore() {\n        var _this = this;\n        // reference to configured category instances. Used for preserving SSR context\n        this.Auth = Auth;\n        this.API = API;\n        this.Cache = Cache;\n        this.amplifyConfig = {};\n        this.syncPredicates = new WeakMap();\n        // object that gets passed to descendent classes. Allows us to pass these down by reference\n        this.amplifyContext = {\n            Auth: this.Auth,\n            API: this.API,\n            Cache: this.Cache,\n        };\n        /**\n         * **IMPORTANT!**\n         *\n         * Accumulator for background things that can **and MUST** be called when\n         * DataStore stops.\n         *\n         * These jobs **MUST** be *idempotent promises* that resolve ONLY\n         * once the intended jobs are completely finished and/or otherwise destroyed\n         * and cleaned up with ZERO outstanding:\n         *\n         * 1. side effects (e.g., state changes)\n         * 1. callbacks\n         * 1. subscriptions\n         * 1. calls to storage\n         * 1. *etc.*\n         *\n         * Methods that create pending promises, subscriptions, callbacks, or any\n         * type of side effect **MUST** be registered with the manager. And, a new\n         * manager must be created after each `exit()`.\n         *\n         * Failure to comply will put DataStore into a highly unpredictable state\n         * when it needs to stop or clear -- which occurs when restarting with new\n         * sync expressions, during testing, and potentially during app code\n         * recovery handling, etc..\n         *\n         * It is up to the discretion of each disposer whether to wait for job\n         * completion or to cancel operations and issue failures *as long as the\n         * disposer returns in a reasonable amount of time.*\n         *\n         * (Reasonable = *seconds*, not minutes.)\n         */\n        this.runningProcesses = new BackgroundProcessManager();\n        /**\n         * Indicates what state DataStore is in.\n         *\n         * Not [yet?] used for actual state management; but for messaging\n         * when errors occur, to help troubleshoot.\n         */\n        this.state = DataStoreState.NotRunning;\n        /**\n         * If not already done:\n         * 1. Attaches and initializes storage.\n         * 1. Loads the schema and records metadata.\n         * 1. If `this.amplifyConfig.aws_appsync_graphqlEndpoint` contains a URL,\n         * attaches a sync engine, starts it, and subscribes.\n         */\n        this.start = function () { return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runningProcesses\n                        .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                        var aws_appsync_graphqlEndpoint, _a, fullSyncIntervalInMilliseconds;\n                        var _this = this;\n                        return __generator(this, function (_b) {\n                            switch (_b.label) {\n                                case 0:\n                                    this.state = DataStoreState.Starting;\n                                    if (!(this.initialized === undefined)) return [3 /*break*/, 1];\n                                    logger.debug('Starting DataStore');\n                                    this.initialized = new Promise(function (res, rej) {\n                                        _this.initResolve = res;\n                                        _this.initReject = rej;\n                                    });\n                                    return [3 /*break*/, 3];\n                                case 1: return [4 /*yield*/, this.initialized];\n                                case 2:\n                                    _b.sent();\n                                    return [2 /*return*/];\n                                case 3:\n                                    this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n                                    return [4 /*yield*/, this.storage.init()];\n                                case 4:\n                                    _b.sent();\n                                    checkSchemaInitialized();\n                                    return [4 /*yield*/, checkSchemaVersion(this.storage, schema.version)];\n                                case 5:\n                                    _b.sent();\n                                    aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n                                    if (!aws_appsync_graphqlEndpoint) return [3 /*break*/, 7];\n                                    logger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n                                    _a = this;\n                                    return [4 /*yield*/, this.processSyncExpressions()];\n                                case 6:\n                                    _a.syncPredicates = _b.sent();\n                                    this.sync = new SyncEngine(schema, namespaceResolver, syncClasses, userClasses, this.storage, modelInstanceCreator, this.conflictHandler, this.errorHandler, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, this.amplifyContext, this.connectivityMonitor);\n                                    fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60;\n                                    syncSubscription = this.sync\n                                        .start({ fullSyncInterval: fullSyncIntervalInMilliseconds })\n                                        .subscribe({\n                                        next: function (_a) {\n                                            var type = _a.type, data = _a.data;\n                                            // In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n                                            // In the Browser, we can begin returning data once subscriptions are in place.\n                                            var readyType = isNode\n                                                ? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY\n                                                : ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n                                            if (type === readyType) {\n                                                _this.initResolve();\n                                            }\n                                            Hub.dispatch('datastore', {\n                                                event: type,\n                                                data: data,\n                                            });\n                                        },\n                                        error: function (err) {\n                                            logger.warn('Sync error', err);\n                                            _this.initReject();\n                                        },\n                                    });\n                                    return [3 /*break*/, 8];\n                                case 7:\n                                    logger.warn(\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\", {\n                                        config: this.amplifyConfig,\n                                    });\n                                    this.initResolve();\n                                    _b.label = 8;\n                                case 8: return [4 /*yield*/, this.initialized];\n                                case 9:\n                                    _b.sent();\n                                    this.state = DataStoreState.Running;\n                                    return [2 /*return*/];\n                            }\n                        });\n                    }); }, 'datastore start')\n                        .catch(this.handleAddProcError('DataStore.start()'))];\n            });\n        }); };\n        this.query = function (modelConstructor, identifierOrCriteria, paginationProducer) { return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runningProcesses\n                        .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                        var msg, modelDefinition, keyFields, predicate, msg, pagination, result, returnOne;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, this.start()];\n                                case 1:\n                                    _a.sent();\n                                    //#region Input validation\n                                    if (!isValidModelConstructor(modelConstructor)) {\n                                        msg = 'Constructor is not for a valid model';\n                                        logger.error(msg, { modelConstructor: modelConstructor });\n                                        throw new Error(msg);\n                                    }\n                                    if (typeof identifierOrCriteria === 'string') {\n                                        if (paginationProducer !== undefined) {\n                                            logger.warn('Pagination is ignored when querying by id');\n                                        }\n                                    }\n                                    modelDefinition = getModelDefinition(modelConstructor);\n                                    keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                    if (isQueryOne(identifierOrCriteria)) {\n                                        if (keyFields.length > 1) {\n                                            msg = errorMessages.queryByPkWithCompositeKeyPresent;\n                                            logger.error(msg, { keyFields: keyFields });\n                                            throw new Error(msg);\n                                        }\n                                        predicate = ModelPredicateCreator.createForSingleField(modelDefinition, keyFields[0], identifierOrCriteria);\n                                    }\n                                    else {\n                                        // Object is being queried using object literal syntax\n                                        if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                                            predicate = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                                        }\n                                        else if (isPredicatesAll(identifierOrCriteria)) {\n                                            // Predicates.ALL means \"all records\", so no predicate (undefined)\n                                            predicate = undefined;\n                                        }\n                                        else {\n                                            predicate = ModelPredicateCreator.createFromExisting(modelDefinition, identifierOrCriteria);\n                                        }\n                                    }\n                                    pagination = this.processPagination(modelDefinition, paginationProducer);\n                                    //#endregion\n                                    logger.debug('params ready', {\n                                        modelConstructor: modelConstructor,\n                                        predicate: ModelPredicateCreator.getPredicates(predicate, false),\n                                        pagination: __assign(__assign({}, pagination), { sort: ModelSortPredicateCreator.getPredicates(pagination && pagination.sort, false) }),\n                                    });\n                                    return [4 /*yield*/, this.storage.query(modelConstructor, predicate, pagination)];\n                                case 2:\n                                    result = _a.sent();\n                                    returnOne = isQueryOne(identifierOrCriteria) ||\n                                        isIdentifierObject(identifierOrCriteria, modelDefinition);\n                                    return [2 /*return*/, returnOne ? result[0] : result];\n                            }\n                        });\n                    }); }, 'datastore query')\n                        .catch(this.handleAddProcError('DataStore.query()'))];\n            });\n        }); };\n        this.save = function (model, condition) { return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runningProcesses\n                        .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                        var patchesTuple, modelConstructor, msg, modelDefinition, producedCondition, _a, savedModel;\n                        var _this = this;\n                        return __generator(this, function (_b) {\n                            switch (_b.label) {\n                                case 0: return [4 /*yield*/, this.start()];\n                                case 1:\n                                    _b.sent();\n                                    patchesTuple = modelPatchesMap.get(model);\n                                    modelConstructor = model ? model.constructor : undefined;\n                                    if (!isValidModelConstructor(modelConstructor)) {\n                                        msg = 'Object is not an instance of a valid model';\n                                        logger.error(msg, { model: model });\n                                        throw new Error(msg);\n                                    }\n                                    modelDefinition = getModelDefinition(modelConstructor);\n                                    producedCondition = ModelPredicateCreator.createFromExisting(modelDefinition, condition);\n                                    return [4 /*yield*/, this.storage.runExclusive(function (s) { return __awaiter(_this, void 0, void 0, function () {\n                                            return __generator(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0: return [4 /*yield*/, s.save(model, producedCondition, undefined, patchesTuple)];\n                                                    case 1:\n                                                        _a.sent();\n                                                        return [2 /*return*/, s.query(modelConstructor, ModelPredicateCreator.createForPk(modelDefinition, model))];\n                                                }\n                                            });\n                                        }); })];\n                                case 2:\n                                    _a = __read.apply(void 0, [_b.sent(), 1]), savedModel = _a[0];\n                                    return [2 /*return*/, savedModel];\n                            }\n                        });\n                    }); }, 'datastore save')\n                        .catch(this.handleAddProcError('DataStore.save()'))];\n            });\n        }); };\n        this.setConflictHandler = function (config) {\n            var configDataStore = config.DataStore;\n            var conflictHandlerIsDefault = function () {\n                return _this.conflictHandler === defaultConflictHandler;\n            };\n            if (configDataStore && configDataStore.conflictHandler) {\n                return configDataStore.conflictHandler;\n            }\n            if (conflictHandlerIsDefault() && config.conflictHandler) {\n                return config.conflictHandler;\n            }\n            return _this.conflictHandler || defaultConflictHandler;\n        };\n        this.setErrorHandler = function (config) {\n            var configDataStore = config.DataStore;\n            var errorHandlerIsDefault = function () {\n                return _this.errorHandler === defaultErrorHandler;\n            };\n            if (configDataStore && configDataStore.errorHandler) {\n                return configDataStore.errorHandler;\n            }\n            if (errorHandlerIsDefault() && config.errorHandler) {\n                return config.errorHandler;\n            }\n            return _this.errorHandler || defaultErrorHandler;\n        };\n        this.delete = function (modelOrConstructor, identifierOrCriteria) { return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runningProcesses\n                        .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                        var condition, msg, modelConstructor, msg, modelDefinition, keyFields, msg, msg, _a, deleted, model, modelConstructor, msg, modelDefinition, pkPredicate, msg, _b, _c, deleted;\n                        return __generator(this, function (_d) {\n                            switch (_d.label) {\n                                case 0: return [4 /*yield*/, this.start()];\n                                case 1:\n                                    _d.sent();\n                                    if (!modelOrConstructor) {\n                                        msg = 'Model or Model Constructor required';\n                                        logger.error(msg, { modelOrConstructor: modelOrConstructor });\n                                        throw new Error(msg);\n                                    }\n                                    if (!isValidModelConstructor(modelOrConstructor)) return [3 /*break*/, 3];\n                                    modelConstructor = modelOrConstructor;\n                                    if (!identifierOrCriteria) {\n                                        msg = 'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n                                        logger.error(msg, { identifierOrCriteria: identifierOrCriteria });\n                                        throw new Error(msg);\n                                    }\n                                    modelDefinition = getModelDefinition(modelConstructor);\n                                    if (typeof identifierOrCriteria === 'string') {\n                                        keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                        if (keyFields.length > 1) {\n                                            msg = errorMessages.deleteByPkWithCompositeKeyPresent;\n                                            logger.error(msg, { keyFields: keyFields });\n                                            throw new Error(msg);\n                                        }\n                                        condition = ModelPredicateCreator.createForSingleField(getModelDefinition(modelConstructor), keyFields[0], identifierOrCriteria);\n                                    }\n                                    else {\n                                        if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                                            condition = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                                        }\n                                        else {\n                                            condition = ModelPredicateCreator.createFromExisting(modelDefinition, \n                                            /**\n                                             * idOrCriteria is always a ProducerModelPredicate<T>, never a symbol.\n                                             * The symbol is used only for typing purposes. e.g. see Predicates.ALL\n                                             */\n                                            identifierOrCriteria);\n                                        }\n                                        if (!condition ||\n                                            !ModelPredicateCreator.isValidPredicate(condition)) {\n                                            msg = 'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n                                            logger.error(msg, { condition: condition });\n                                            throw new Error(msg);\n                                        }\n                                    }\n                                    return [4 /*yield*/, this.storage.delete(modelConstructor, condition)];\n                                case 2:\n                                    _a = __read.apply(void 0, [_d.sent(), 1]), deleted = _a[0];\n                                    return [2 /*return*/, deleted];\n                                case 3:\n                                    model = modelOrConstructor;\n                                    modelConstructor = Object.getPrototypeOf(model || {})\n                                        .constructor;\n                                    if (!isValidModelConstructor(modelConstructor)) {\n                                        msg = 'Object is not an instance of a valid model';\n                                        logger.error(msg, { model: model });\n                                        throw new Error(msg);\n                                    }\n                                    modelDefinition = getModelDefinition(modelConstructor);\n                                    pkPredicate = ModelPredicateCreator.createForPk(modelDefinition, model);\n                                    if (identifierOrCriteria) {\n                                        if (typeof identifierOrCriteria !== 'function') {\n                                            msg = 'Invalid criteria';\n                                            logger.error(msg, { identifierOrCriteria: identifierOrCriteria });\n                                            throw new Error(msg);\n                                        }\n                                        condition = identifierOrCriteria(pkPredicate);\n                                    }\n                                    else {\n                                        condition = pkPredicate;\n                                    }\n                                    return [4 /*yield*/, this.storage.delete(model, condition)];\n                                case 4:\n                                    _b = __read.apply(void 0, [_d.sent(), 1]), _c = __read(_b[0], 1), deleted = _c[0];\n                                    return [2 /*return*/, deleted];\n                            }\n                        });\n                    }); }, 'datastore delete')\n                        .catch(this.handleAddProcError('DataStore.delete()'))];\n            });\n        }); };\n        this.observe = function (modelOrConstructor, identifierOrCriteria) {\n            var predicate;\n            var modelConstructor = modelOrConstructor && isValidModelConstructor(modelOrConstructor)\n                ? modelOrConstructor\n                : undefined;\n            if (modelOrConstructor && modelConstructor === undefined) {\n                var model = modelOrConstructor;\n                var modelConstructor_1 = model && Object.getPrototypeOf(model).constructor;\n                if (isValidModelConstructor(modelConstructor_1)) {\n                    if (identifierOrCriteria) {\n                        logger.warn('idOrCriteria is ignored when using a model instance', {\n                            model: model,\n                            identifierOrCriteria: identifierOrCriteria,\n                        });\n                    }\n                    return _this.observe(modelConstructor_1, model.id);\n                }\n                else {\n                    var msg = 'The model is not an instance of a PersistentModelConstructor';\n                    logger.error(msg, { model: model });\n                    throw new Error(msg);\n                }\n            }\n            // observe should not accept object literal syntax\n            if (identifierOrCriteria &&\n                modelConstructor &&\n                isIdentifierObject(identifierOrCriteria, getModelDefinition(modelConstructor))) {\n                var msg = errorMessages.observeWithObjectLiteral;\n                logger.error(msg, { objectLiteral: identifierOrCriteria });\n                throw new Error(msg);\n            }\n            if (identifierOrCriteria !== undefined && modelConstructor === undefined) {\n                var msg = 'Cannot provide criteria without a modelConstructor';\n                logger.error(msg, identifierOrCriteria);\n                throw new Error(msg);\n            }\n            if (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n                var msg = 'Constructor is not for a valid model';\n                logger.error(msg, { modelConstructor: modelConstructor });\n                throw new Error(msg);\n            }\n            if (typeof identifierOrCriteria === 'string') {\n                var modelDefinition = getModelDefinition(modelConstructor);\n                var _a = __read(extractPrimaryKeyFieldNames(modelDefinition), 1), keyField = _a[0];\n                predicate = ModelPredicateCreator.createForSingleField(getModelDefinition(modelConstructor), keyField, identifierOrCriteria);\n            }\n            else {\n                if (isPredicatesAll(identifierOrCriteria)) {\n                    predicate = undefined;\n                }\n                else {\n                    predicate =\n                        modelConstructor &&\n                            ModelPredicateCreator.createFromExisting(getModelDefinition(modelConstructor), identifierOrCriteria);\n                }\n            }\n            return new Observable(function (observer) {\n                var handle;\n                _this.runningProcesses\n                    .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                    var _this = this;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.start()];\n                            case 1:\n                                _a.sent();\n                                // Filter the events returned by Storage according to namespace,\n                                // append original element data, and subscribe to the observable\n                                handle = this.storage\n                                    .observe(modelConstructor, predicate)\n                                    .filter(function (_a) {\n                                    var model = _a.model;\n                                    return namespaceResolver(model) === USER;\n                                })\n                                    .subscribe({\n                                    next: function (item) {\n                                        return _this.runningProcesses.isOpen &&\n                                            _this.runningProcesses.add(function () { return __awaiter(_this, void 0, void 0, function () {\n                                                var message, modelDefinition, keyFields, primaryKeysAndValues, freshElement;\n                                                return __generator(this, function (_a) {\n                                                    switch (_a.label) {\n                                                        case 0:\n                                                            message = item;\n                                                            if (!(item.opType !== 'DELETE')) return [3 /*break*/, 2];\n                                                            modelDefinition = getModelDefinition(item.model);\n                                                            keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                                            primaryKeysAndValues = extractPrimaryKeysAndValues(item.element, keyFields);\n                                                            return [4 /*yield*/, this.query(item.model, primaryKeysAndValues)];\n                                                        case 1:\n                                                            freshElement = _a.sent();\n                                                            message = __assign(__assign({}, message), { element: freshElement });\n                                                            _a.label = 2;\n                                                        case 2:\n                                                            observer.next(message);\n                                                            return [2 /*return*/];\n                                                    }\n                                                });\n                                            }); }, 'datastore observe message handler');\n                                    },\n                                    error: function (err) { return observer.error(err); },\n                                    complete: function () { return observer.complete(); },\n                                });\n                                return [2 /*return*/];\n                        }\n                    });\n                }); }, 'datastore observe observable initialization')\n                    .catch(_this.handleAddProcError('DataStore.observe()'))\n                    .catch(function (error) {\n                    observer.error(error);\n                });\n                // better than no cleaner, but if the subscriber is handling the\n                // complete() message async and not registering with the context,\n                // this will still be problematic.\n                return _this.runningProcesses.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        if (handle) {\n                            handle.unsubscribe();\n                        }\n                        return [2 /*return*/];\n                    });\n                }); }, 'DataStore.observe() cleanup');\n            });\n        };\n        this.observeQuery = function (model, criteria, options) {\n            return new Observable(function (observer) {\n                var items = new Map();\n                var itemsChanged = new Map();\n                var deletedItemIds = [];\n                var handle;\n                var predicate;\n                /**\n                 * As the name suggests, this geneates a snapshot in the form of\n                 * \t`{items: T[], isSynced: boolean}`\n                 * and sends it to the observer.\n                 *\n                 * SIDE EFFECT: The underlying generation and emission methods may touch:\n                 * `items`, `itemsChanged`, and `deletedItemIds`.\n                 *\n                 * Refer to `generateSnapshot` and `emitSnapshot` for more details.\n                 */\n                var generateAndEmitSnapshot = function () {\n                    var snapshot = generateSnapshot();\n                    emitSnapshot(snapshot);\n                };\n                // a mechanism to return data after X amount of seconds OR after the\n                // \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n                var limitTimerRace = new DeferredCallbackResolver({\n                    callback: generateAndEmitSnapshot,\n                    errorHandler: observer.error,\n                    maxInterval: 2000,\n                });\n                var sort = (options || {}).sort;\n                var sortOptions = sort ? { sort: sort } : undefined;\n                var modelDefinition = getModelDefinition(model);\n                var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                if (isQueryOne(criteria)) {\n                    predicate = ModelPredicateCreator.createForSingleField(modelDefinition, keyFields[0], criteria);\n                }\n                else {\n                    if (isPredicatesAll(criteria)) {\n                        // Predicates.ALL means \"all records\", so no predicate (undefined)\n                        predicate = undefined;\n                    }\n                    else {\n                        predicate = ModelPredicateCreator.createFromExisting(modelDefinition, criteria);\n                    }\n                }\n                var _a = ModelPredicateCreator.getPredicates(predicate, false) || {}, predicates = _a.predicates, predicateGroupType = _a.type;\n                var hasPredicate = !!predicates;\n                _this.runningProcesses\n                    .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                    var err_1;\n                    var _this = this;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                _a.trys.push([0, 2, , 3]);\n                                return [4 /*yield*/, this.query(model, criteria, sortOptions)];\n                            case 1:\n                                // first, query and return any locally-available records\n                                (_a.sent()).forEach(function (item) {\n                                    var itemModelDefinition = getModelDefinition(model);\n                                    var idOrPk = getIdentifierValue(itemModelDefinition, item);\n                                    items.set(idOrPk, item);\n                                });\n                                // Observe the model and send a stream of updates (debounced).\n                                // We need to post-filter results instead of passing criteria through\n                                // to have visibility into items that move from in-set to out-of-set.\n                                // We need to explicitly remove those items from the existing snapshot.\n                                handle = this.observe(model).subscribe(function (_a) {\n                                    var element = _a.element, model = _a.model, opType = _a.opType;\n                                    var _b, _c;\n                                    var itemModelDefinition = getModelDefinition(model);\n                                    var idOrPk = getIdentifierValue(itemModelDefinition, element);\n                                    if (hasPredicate &&\n                                        !validatePredicate(element, predicateGroupType, predicates)) {\n                                        if (opType === 'UPDATE' &&\n                                            (items.has(idOrPk) || itemsChanged.has(idOrPk))) {\n                                            // tracking as a \"deleted item\" will include the item in\n                                            // page limit calculations and ensure it is removed from the\n                                            // final items collection, regardless of which collection(s)\n                                            // it is currently in. (I mean, it could be in both, right!?)\n                                            deletedItemIds.push(idOrPk);\n                                        }\n                                        else {\n                                            // ignore updates for irrelevant/filtered items.\n                                            return;\n                                        }\n                                    }\n                                    // Flag items which have been recently deleted\n                                    // NOTE: Merging of separate operations to the same model instance is handled upstream\n                                    // in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n                                    // depends on the LATEST record (for a given id).\n                                    if (opType === 'DELETE') {\n                                        deletedItemIds.push(idOrPk);\n                                    }\n                                    else {\n                                        itemsChanged.set(idOrPk, element);\n                                    }\n                                    var isSynced = (_c = (_b = _this.sync) === null || _b === void 0 ? void 0 : _b.getModelSyncedStatus(model)) !== null && _c !== void 0 ? _c : false;\n                                    var limit = itemsChanged.size - deletedItemIds.length >=\n                                        _this.syncPageSize;\n                                    if (limit || isSynced) {\n                                        limitTimerRace.resolve();\n                                    }\n                                    // kicks off every subsequent race as results sync down\n                                    limitTimerRace.start();\n                                });\n                                // returns a set of initial/locally-available results\n                                generateAndEmitSnapshot();\n                                return [3 /*break*/, 3];\n                            case 2:\n                                err_1 = _a.sent();\n                                observer.error(err_1);\n                                return [3 /*break*/, 3];\n                            case 3: return [2 /*return*/];\n                        }\n                    });\n                }); }, 'datastore observequery startup')\n                    .catch(_this.handleAddProcError('DataStore.observeQuery()'))\n                    .catch(function (error) {\n                    observer.error(error);\n                });\n                /**\n                 * Combines the `items`, `itemsChanged`, and `deletedItemIds` collections into\n                 * a snapshot in the form of `{ items: T[], isSynced: boolean}`.\n                 *\n                 * SIDE EFFECT: The shared `items` collection is recreated.\n                 */\n                var generateSnapshot = function () {\n                    var _a, _b;\n                    var isSynced = (_b = (_a = _this.sync) === null || _a === void 0 ? void 0 : _a.getModelSyncedStatus(model)) !== null && _b !== void 0 ? _b : false;\n                    var itemsArray = __spread(Array.from(items.values()), Array.from(itemsChanged.values()));\n                    if (options === null || options === void 0 ? void 0 : options.sort) {\n                        sortItems(itemsArray);\n                    }\n                    items.clear();\n                    itemsArray.forEach(function (item) {\n                        var itemModelDefinition = getModelDefinition(model);\n                        var idOrPk = getIdentifierValue(itemModelDefinition, item);\n                        items.set(idOrPk, item);\n                    });\n                    // remove deleted items from the final result set\n                    deletedItemIds.forEach(function (idOrPk) { return items.delete(idOrPk); });\n                    return {\n                        items: Array.from(items.values()),\n                        isSynced: isSynced,\n                    };\n                };\n                /**\n                 * Emits the list of items to the observer.\n                 *\n                 * SIDE EFFECT: `itemsChanged` and `deletedItemIds` are cleared to prepare\n                 * for the next snapshot.\n                 *\n                 * @param snapshot The generated items data to emit.\n                 */\n                var emitSnapshot = function (snapshot) {\n                    // send the generated snapshot to the primary subscription.\n                    // NOTE: This observer's handler *could* be async ...\n                    observer.next(snapshot);\n                    // reset the changed items sets\n                    itemsChanged.clear();\n                    deletedItemIds = [];\n                };\n                /**\n                 * Sorts an `Array` of `T` according to the sort instructions given in the\n                 * original  `observeQuery()` call.\n                 *\n                 * @param itemsToSort A array of model type.\n                 */\n                var sortItems = function (itemsToSort) {\n                    var modelDefinition = getModelDefinition(model);\n                    var pagination = _this.processPagination(modelDefinition, options);\n                    var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n                    if (sortPredicates.length) {\n                        var compareFn = sortCompareFunction(sortPredicates);\n                        itemsToSort.sort(compareFn);\n                    }\n                };\n                /**\n                 * Force one last snapshot when the model is fully synced.\n                 *\n                 * This reduces latency for that last snapshot, which will otherwise\n                 * wait for the configured timeout.\n                 *\n                 * @param payload The payload from the Hub event.\n                 */\n                var hubCallback = function (_a) {\n                    var payload = _a.payload;\n                    var _b;\n                    var event = payload.event, data = payload.data;\n                    if (event === ControlMessage.SYNC_ENGINE_MODEL_SYNCED &&\n                        ((_b = data === null || data === void 0 ? void 0 : data.model) === null || _b === void 0 ? void 0 : _b.name) === model.name) {\n                        generateAndEmitSnapshot();\n                        Hub.remove('datastore', hubCallback);\n                    }\n                };\n                Hub.listen('datastore', hubCallback);\n                return _this.runningProcesses.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        if (handle) {\n                            handle.unsubscribe();\n                        }\n                        return [2 /*return*/];\n                    });\n                }); }, 'datastore observequery cleaner');\n            });\n        };\n        this.configure = function (config) {\n            if (config === void 0) { config = {}; }\n            _this.amplifyContext.Auth = _this.Auth;\n            _this.amplifyContext.API = _this.API;\n            _this.amplifyContext.Cache = _this.Cache;\n            var configDataStore = config.DataStore, configAuthModeStrategyType = config.authModeStrategyType, configConflictHandler = config.conflictHandler, configErrorHandler = config.errorHandler, configMaxRecordsToSync = config.maxRecordsToSync, configSyncPageSize = config.syncPageSize, configFullSyncInterval = config.fullSyncInterval, configSyncExpressions = config.syncExpressions, configAuthProviders = config.authProviders, configStorageAdapter = config.storageAdapter, configFromAmplify = __rest(config, [\"DataStore\", \"authModeStrategyType\", \"conflictHandler\", \"errorHandler\", \"maxRecordsToSync\", \"syncPageSize\", \"fullSyncInterval\", \"syncExpressions\", \"authProviders\", \"storageAdapter\"]);\n            _this.amplifyConfig = __assign(__assign({}, configFromAmplify), _this.amplifyConfig);\n            _this.conflictHandler = _this.setConflictHandler(config);\n            _this.errorHandler = _this.setErrorHandler(config);\n            var authModeStrategyType = (configDataStore && configDataStore.authModeStrategyType) ||\n                configAuthModeStrategyType ||\n                AuthModeStrategyType.DEFAULT;\n            switch (authModeStrategyType) {\n                case AuthModeStrategyType.MULTI_AUTH:\n                    _this.authModeStrategy = multiAuthStrategy(_this.amplifyContext);\n                    break;\n                case AuthModeStrategyType.DEFAULT:\n                    _this.authModeStrategy = defaultAuthStrategy;\n                    break;\n                default:\n                    _this.authModeStrategy = defaultAuthStrategy;\n                    break;\n            }\n            // store on config object, so that Sync, Subscription, and Mutation processors can have access\n            _this.amplifyConfig.authProviders =\n                (configDataStore && configDataStore.authProviders) || configAuthProviders;\n            _this.syncExpressions =\n                (configDataStore && configDataStore.syncExpressions) ||\n                    configSyncExpressions ||\n                    _this.syncExpressions;\n            _this.maxRecordsToSync =\n                (configDataStore && configDataStore.maxRecordsToSync) ||\n                    configMaxRecordsToSync ||\n                    _this.maxRecordsToSync ||\n                    10000;\n            // store on config object, so that Sync, Subscription, and Mutation processors can have access\n            _this.amplifyConfig.maxRecordsToSync = _this.maxRecordsToSync;\n            _this.syncPageSize =\n                (configDataStore && configDataStore.syncPageSize) ||\n                    configSyncPageSize ||\n                    _this.syncPageSize ||\n                    1000;\n            // store on config object, so that Sync, Subscription, and Mutation processors can have access\n            _this.amplifyConfig.syncPageSize = _this.syncPageSize;\n            _this.fullSyncInterval =\n                (configDataStore && configDataStore.fullSyncInterval) ||\n                    configFullSyncInterval ||\n                    _this.fullSyncInterval ||\n                    24 * 60; // 1 day\n            _this.storageAdapter =\n                (configDataStore && configDataStore.storageAdapter) ||\n                    configStorageAdapter ||\n                    _this.storageAdapter ||\n                    undefined;\n            _this.sessionId = _this.retrieveSessionId();\n        };\n    }\n    DataStore.prototype.getModuleName = function () {\n        return 'DataStore';\n    };\n    /**\n     * Builds a function to capture `BackgroundManagerNotOpenError`'s to produce friendlier,\n     * more instructive errors for customers.\n     *\n     * @param operation The name of the operation (usually a Datastore method) the customer\n     * tried to call.\n     */\n    DataStore.prototype.handleAddProcError = function (operation) {\n        var _this = this;\n        /**\n         * If the tested error is a `BackgroundManagerNotOpenError`, it will be captured\n         * and replaced with a friendlier message that instructs the App Developer.\n         *\n         * @param err An error to test.\n         */\n        var handler = function (err) {\n            if (err.message.startsWith('BackgroundManagerNotOpenError')) {\n                throw new Error([\n                    \"DataStoreStateError: Tried to execute `\" + operation + \"` while DataStore was \\\"\" + _this.state + \"\\\".\",\n                    \"This can only be done while DataStore is \\\"Started\\\" or \\\"Stopped\\\". To remedy:\",\n                    'Ensure all calls to `stop()` and `clear()` have completed first.',\n                    'If this is not possible, retry the operation until it succeeds.',\n                ].join('\\n'));\n            }\n            else {\n                throw err;\n            }\n        };\n        return handler;\n    };\n    /**\n     * Clears all data from storage and removes all data, schema info, other\n     * initialization details, and then stops DataStore.\n     *\n     * That said, reinitialization is required after clearing. This can be done\n     * by explicitiliy calling `start()` or any method that implicitly starts\n     * DataStore, such as `query()`, `save()`, or `delete()`.\n     */\n    DataStore.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        checkSchemaInitialized();\n                        this.state = DataStoreState.Clearing;\n                        return [4 /*yield*/, this.runningProcesses.close()];\n                    case 1:\n                        _a.sent();\n                        if (!(this.storage === undefined)) return [3 /*break*/, 3];\n                        // connect to storage so that it can be cleared without fully starting DataStore\n                        this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n                        return [4 /*yield*/, this.storage.init()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        if (syncSubscription && !syncSubscription.closed) {\n                            syncSubscription.unsubscribe();\n                        }\n                        if (!this.sync) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.sync.stop()];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [4 /*yield*/, this.storage.clear()];\n                    case 6:\n                        _a.sent();\n                        this.initialized = undefined; // Should re-initialize when start() is called.\n                        this.storage = undefined;\n                        this.sync = undefined;\n                        this.syncPredicates = new WeakMap();\n                        return [4 /*yield*/, this.runningProcesses.open()];\n                    case 7:\n                        _a.sent();\n                        this.state = DataStoreState.NotRunning;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Stops all DataStore sync activities.\n     *\n     * TODO: \"Waits for graceful termination of\n     * running queries and terminates subscriptions.\"\n     */\n    DataStore.prototype.stop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.state = DataStoreState.Stopping;\n                        return [4 /*yield*/, this.runningProcesses.close()];\n                    case 1:\n                        _a.sent();\n                        if (syncSubscription && !syncSubscription.closed) {\n                            syncSubscription.unsubscribe();\n                        }\n                        if (!this.sync) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.sync.stop()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        this.initialized = undefined; // Should re-initialize when start() is called.\n                        this.sync = undefined;\n                        return [4 /*yield*/, this.runningProcesses.open()];\n                    case 4:\n                        _a.sent();\n                        this.state = DataStoreState.NotRunning;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Validates given pagination input from a query and creates a pagination\n     * argument for use against the storage layer.\n     *\n     * @param modelDefinition\n     * @param paginationProducer\n     */\n    DataStore.prototype.processPagination = function (modelDefinition, paginationProducer) {\n        var sortPredicate;\n        var _a = paginationProducer || {}, limit = _a.limit, page = _a.page, sort = _a.sort;\n        if (limit === undefined && page === undefined && sort === undefined) {\n            return undefined;\n        }\n        if (page !== undefined && limit === undefined) {\n            throw new Error('Limit is required when requesting a page');\n        }\n        if (page !== undefined) {\n            if (typeof page !== 'number') {\n                throw new Error('Page should be a number');\n            }\n            if (page < 0) {\n                throw new Error(\"Page can't be negative\");\n            }\n        }\n        if (limit !== undefined) {\n            if (typeof limit !== 'number') {\n                throw new Error('Limit should be a number');\n            }\n            if (limit < 0) {\n                throw new Error(\"Limit can't be negative\");\n            }\n        }\n        if (sort) {\n            sortPredicate = ModelSortPredicateCreator.createFromExisting(modelDefinition, paginationProducer.sort);\n        }\n        return {\n            limit: limit,\n            page: page,\n            sort: sortPredicate,\n        };\n    };\n    /**\n     * Examines the configured `syncExpressions` and produces a WeakMap of\n     * SchemaModel -> predicate to use during sync.\n     */\n    DataStore.prototype.processSyncExpressions = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var syncPredicates;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.syncExpressions || !this.syncExpressions.length) {\n                            return [2 /*return*/, new WeakMap()];\n                        }\n                        return [4 /*yield*/, Promise.all(this.syncExpressions.map(function (syncExpression) { return __awaiter(_this, void 0, void 0, function () {\n                                var _a, modelConstructor, conditionProducer, modelDefinition, condition, predicate;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0: return [4 /*yield*/, syncExpression];\n                                        case 1:\n                                            _a = _b.sent(), modelConstructor = _a.modelConstructor, conditionProducer = _a.conditionProducer;\n                                            modelDefinition = getModelDefinition(modelConstructor);\n                                            return [4 /*yield*/, this.unwrapPromise(conditionProducer)];\n                                        case 2:\n                                            condition = _b.sent();\n                                            if (isPredicatesAll(condition)) {\n                                                return [2 /*return*/, [modelDefinition, null]];\n                                            }\n                                            predicate = this.createFromCondition(modelDefinition, condition);\n                                            return [2 /*return*/, [modelDefinition, predicate]];\n                                    }\n                                });\n                            }); }))];\n                    case 1:\n                        syncPredicates = _a.sent();\n                        return [2 /*return*/, this.weakMapFromEntries(syncPredicates)];\n                }\n            });\n        });\n    };\n    DataStore.prototype.createFromCondition = function (modelDefinition, condition) {\n        try {\n            return ModelPredicateCreator.createFromExisting(modelDefinition, condition);\n        }\n        catch (error) {\n            logger.error('Error creating Sync Predicate');\n            throw error;\n        }\n    };\n    DataStore.prototype.unwrapPromise = function (conditionProducer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var condition, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, conditionProducer()];\n                    case 1:\n                        condition = _a.sent();\n                        return [2 /*return*/, condition];\n                    case 2:\n                        error_1 = _a.sent();\n                        if (error_1 instanceof TypeError) {\n                            return [2 /*return*/, conditionProducer];\n                        }\n                        throw error_1;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    DataStore.prototype.weakMapFromEntries = function (entries) {\n        return entries.reduce(function (map, _a) {\n            var _b = __read(_a, 2), modelDefinition = _b[0], predicate = _b[1];\n            if (map.has(modelDefinition)) {\n                var name_2 = modelDefinition.name;\n                logger.warn(\"You can only utilize one Sync Expression per model.\\n          Subsequent sync expressions for the \" + name_2 + \" model will be ignored.\");\n                return map;\n            }\n            if (predicate) {\n                map.set(modelDefinition, predicate);\n            }\n            return map;\n        }, new WeakMap());\n    };\n    /**\n     * A session ID to allow CMS to open databases against multiple apps.\n     * This session ID is only expected be set by AWS Amplify Studio.\n     */\n    DataStore.prototype.retrieveSessionId = function () {\n        try {\n            var sessionId = sessionStorage.getItem('datastoreSessionId');\n            if (sessionId) {\n                var aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n                var appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n                var _a = __read(appSyncUrl.split('.'), 1), appSyncId = _a[0];\n                return sessionId + \"-\" + appSyncId;\n            }\n        }\n        catch (_b) { }\n        return undefined;\n    };\n    return DataStore;\n}());\nvar instance = new DataStore();\nAmplify.register(instance);\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };\n//# sourceMappingURL=datastore.js.map"]},"metadata":{},"sourceType":"module"}