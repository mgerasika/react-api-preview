{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n  return ar;\n};\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { MqttOverWSProvider } from './MqttOverWSProvider';\nvar logger = new Logger('AWSAppSyncProvider');\n/**\n * @deprecated Unused, all usecases have migrated to AWSAppSyncRealtimeProvider\n */\nvar AWSAppSyncProvider = /** @class */function (_super) {\n  __extends(AWSAppSyncProvider, _super);\n  function AWSAppSyncProvider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._topicClient = new Map();\n    _this._topicAlias = new Map();\n    return _this;\n  }\n  Object.defineProperty(AWSAppSyncProvider.prototype, \"endpoint\", {\n    get: function get() {\n      throw new Error('Not supported');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSAppSyncProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncProvider';\n  };\n  AWSAppSyncProvider.prototype.publish = function (topics, msg, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n  AWSAppSyncProvider.prototype._cleanUp = function (clientId) {\n    var _this = this;\n    var topicsForClient = Array.from(this._topicClient.entries()).filter(function (_a) {\n      var _b = __read(_a, 2),\n        c = _b[1];\n      return c.clientId === clientId;\n    }).map(function (_a) {\n      var _b = __read(_a, 1),\n        t = _b[0];\n      return t;\n    });\n    topicsForClient.forEach(function (t) {\n      return _this._cleanUpForTopic(t);\n    });\n  };\n  AWSAppSyncProvider.prototype._cleanUpForTopic = function (topic) {\n    this._topicClient.delete(topic);\n    this._topicAlias.delete(topic);\n  };\n  AWSAppSyncProvider.prototype.onDisconnect = function (_a) {\n    var _this = this;\n    var clientId = _a.clientId,\n      errorCode = _a.errorCode,\n      args = __rest(_a, [\"clientId\", \"errorCode\"]);\n    if (errorCode !== 0) {\n      var topicsForClient = Array.from(this._topicClient.entries()).filter(function (_a) {\n        var _b = __read(_a, 2),\n          c = _b[1];\n        return c.clientId === clientId;\n      }).map(function (_a) {\n        var _b = __read(_a, 1),\n          t = _b[0];\n        return t;\n      });\n      topicsForClient.forEach(function (topic) {\n        if (_this._topicObservers.has(topic)) {\n          _this._topicObservers.get(topic).forEach(function (obs) {\n            if (!obs.closed) {\n              obs.error(args);\n            }\n          });\n          _this._topicObservers.delete(topic);\n        }\n      });\n      this._cleanUp(clientId);\n    }\n  };\n  AWSAppSyncProvider.prototype.disconnect = function (clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.clientsQueue.get(clientId, function () {\n              return null;\n            })];\n          case 1:\n            client = _a.sent();\n            return [4 /*yield*/, _super.prototype.disconnect.call(this, clientId)];\n          case 2:\n            _a.sent();\n            this._cleanUp(clientId);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncProvider.prototype.subscribe = function (topics, options) {\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    var result = new Observable(function (observer) {\n      var targetTopics = [].concat(topics);\n      logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, mqttConnections, newSubscriptions, newAliases, map;\n          var _this = this;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                // Add these topics to map\n                targetTopics.forEach(function (t) {\n                  if (!_this._topicObservers.has(t)) {\n                    _this._topicObservers.set(t, new Set());\n                  }\n                  _this._topicObservers.get(t).add(observer);\n                });\n                _a = options.mqttConnections, mqttConnections = _a === void 0 ? [] : _a, newSubscriptions = options.newSubscriptions;\n                newAliases = Object.entries(newSubscriptions).map(function (_a) {\n                  var _b = __read(_a, 2),\n                    alias = _b[0],\n                    v = _b[1];\n                  return [v.topic, alias];\n                });\n                // Merge new aliases with old ones\n                this._topicAlias = new Map(__spread(Array.from(this._topicAlias.entries()), newAliases));\n                map = Object.entries(targetTopics.reduce(function (acc, elem) {\n                  var connectionInfoForTopic = mqttConnections.find(function (c) {\n                    return c.topics.indexOf(elem) > -1;\n                  });\n                  if (connectionInfoForTopic) {\n                    var clientId = connectionInfoForTopic.client,\n                      url = connectionInfoForTopic.url;\n                    if (!acc[clientId]) {\n                      acc[clientId] = {\n                        url: url,\n                        topics: new Set()\n                      };\n                    }\n                    acc[clientId].topics.add(elem);\n                  }\n                  return acc;\n                }, {}));\n                // reconnect everything we have in the map\n                return [4 /*yield*/, Promise.all(map.map(function (_a) {\n                  var _b = __read(_a, 2),\n                    clientId = _b[0],\n                    _c = _b[1],\n                    url = _c.url,\n                    topics = _c.topics;\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var client, err_1;\n                    var _this = this;\n                    return __generator(this, function (_d) {\n                      switch (_d.label) {\n                        case 0:\n                          client = null;\n                          _d.label = 1;\n                        case 1:\n                          _d.trys.push([1, 3,, 4]);\n                          return [4 /*yield*/, this.connect(clientId, {\n                            clientId: clientId,\n                            url: url\n                          })];\n                        case 2:\n                          client = _d.sent();\n                          return [3 /*break*/, 4];\n                        case 3:\n                          err_1 = _d.sent();\n                          observer.error({\n                            message: 'Failed to connect',\n                            error: err_1\n                          });\n                          observer.complete();\n                          return [2 /*return*/, undefined];\n                        case 4:\n                          // subscribe to all topics for this client\n                          // store topic-client mapping\n                          topics.forEach(function (topic) {\n                            if (client.isConnected()) {\n                              client.subscribe(topic);\n                              _this._topicClient.set(topic, client);\n                            }\n                          });\n                          return [2 /*return*/, client];\n                      }\n                    });\n                  });\n                }))];\n              case 1:\n                // reconnect everything we have in the map\n                _b.sent();\n                return [2 /*return*/];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        logger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n        targetTopics.forEach(function (t) {\n          var client = _this._topicClient.get(t);\n          if (client && client.isConnected()) {\n            client.unsubscribe(t);\n            _this._topicClient.delete(t);\n            if (!Array.from(_this._topicClient.values()).some(function (c) {\n              return c === client;\n            })) {\n              _this.disconnect(client.clientId);\n            }\n          }\n          _this._topicObservers.delete(t);\n        });\n      };\n    });\n    return Observable.from(result).map(function (value) {\n      var topic = _this.getTopicForValue(value);\n      var alias = _this._topicAlias.get(topic);\n      value.data = Object.entries(value.data).reduce(function (obj, _a) {\n        var _b = __read(_a, 2),\n          origKey = _b[0],\n          val = _b[1];\n        return obj[alias || origKey] = val, obj;\n      }, {});\n      return value;\n    });\n  };\n  return AWSAppSyncProvider;\n}(MqttOverWSProvider);\nexport { AWSAppSyncProvider };","map":{"version":3,"sources":["../../src/Providers/AWSAppSyncProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,OAAO,UAAU,MAAM,mBAAmB;AAC1C,SAAS,aAAa,IAAI,MAAM,QAAQ,mBAAmB;AAE3D,SAAS,kBAAkB,QAAQ,sBAAsB;AAEzD,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,oBAAoB,CAAC;AAE/C;;AAEG;AACH,IAAA,kBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAwC,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;EAAxC,SAAA,kBAAA,GAAA;IAAA,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;IAgDS,KAAA,CAAA,YAAY,GAAwB,IAAI,GAAG,EAAE;IAE7C,KAAA,CAAA,WAAW,GAAwB,IAAI,GAAG,EAAE;;EAkIrD;EAnLC,MAAA,CAAA,cAAA,CAAc,kBAAA,CAAA,SAAA,EAAA,UAAQ,EAAA;SAAtB,eAAA;MACC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC;IACjC,CAAC;;;IAAA;EAED,kBAAA,CAAA,SAAA,CAAA,eAAe,GAAf,YAAA;IACC,OAAO,oBAAoB;EAC5B,CAAC;EAEY,kBAAA,CAAA,SAAA,CAAA,OAAO,GAApB,UAAqB,MAAyB,EAAE,GAAQ,EAAE,OAAa,EAAA;;;QACtE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC;;;GAC1C;EAEO,kBAAA,CAAA,SAAA,CAAA,QAAQ,GAAhB,UAAiB,QAAgB,EAAA;IAAjC,IAAA,KAAA,GAAA,IAAA;IACC,IAAM,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAC7D,MAAM,CAAC,UAAC,EAAK,EAAA;UAAL,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAAK;QAAF,CAAA,GAAA,EAAA,CAAA,CAAA,CAAC;MAAM,OAAA,CAAC,CAAC,QAAQ,KAAK,QAAQ;IAAvB,CAAuB,CAAC,CAC1C,GAAG,CAAC,UAAC,EAAG,EAAA;UAAH,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAAG;QAAF,CAAA,GAAA,EAAA,CAAA,CAAA,CAAC;MAAM,OAAA,CAAC;IAAD,CAAC,CAAC;IAEjB,eAAe,CAAC,OAAO,CAAC,UAAA,CAAC,EAAA;MAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAAxB,CAAwB,CAAC;EACvD,CAAC;EAEO,kBAAA,CAAA,SAAA,CAAA,gBAAgB,GAAxB,UAAyB,KAAK,EAAA;IAC7B,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC;IAC/B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC;EAC/B,CAAC;EAEM,kBAAA,CAAA,SAAA,CAAA,YAAY,GAAnB,UAAoB,EAAgC,EAAA;IAApD,IAAA,KAAA,GAAA,IAAA;IAAsB,IAAA,QAAA,GAAA,EAAA,CAAA,QAAQ;MAAE,SAAA,GAAA,EAAA,CAAA,SAAS;MAAE,IAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,UAAA,EAAA,WAAA,CAAA,CAAO;IACjD,IAAI,SAAS,KAAK,CAAC,EAAE;MACpB,IAAM,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAC7D,MAAM,CAAC,UAAC,EAAK,EAAA;YAAL,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAAK;UAAF,CAAA,GAAA,EAAA,CAAA,CAAA,CAAC;QAAM,OAAA,CAAC,CAAC,QAAQ,KAAK,QAAQ;MAAvB,CAAuB,CAAC,CAC1C,GAAG,CAAC,UAAC,EAAG,EAAA;YAAH,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAAG;UAAF,CAAA,GAAA,EAAA,CAAA,CAAA,CAAC;QAAM,OAAA,CAAC;MAAD,CAAC,CAAC;MAEjB,eAAe,CAAC,OAAO,CAAC,UAAA,KAAK,EAAA;QAC5B,IAAI,KAAI,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;UACpC,KAAI,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAA;YAC1C,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;cAChB,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC;YACf;UACF,CAAC,CAAC;UAEF,KAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC;QAClC;MACF,CAAC,CAAC;MAEF,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;IACvB;EACF,CAAC;EAMe,kBAAA,CAAA,SAAA,CAAA,UAAU,GAA1B,UAA2B,QAAgB,EAAA;;;;;;YAC3B,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,YAAA;cAAM,OAAA,IAAI;YAAJ,CAAI,CAAC,CAAA;;YAA1D,MAAM,GAAG,EAAA,CAAA,IAAA,EAAiD;YAEhE,OAAA,CAAA,CAAA,CAAA,WAAM,MAAA,CAAA,SAAA,CAAM,UAAU,CAAA,IAAA,CAAA,IAAA,EAAC,QAAQ,CAAC,CAAA;;YAAhC,EAAA,CAAA,IAAA,EAAgC;YAEhC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;;;;;GACvB;;EAED,kBAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,MAAyB,EAAE,OAAiB,EAAA;IAAtD,IAAA,KAAA,GAAA,IAAA;IAAqC,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAAA,OAAA,GAAA,CAAA,CAAiB;IAAA;IACrD,IAAM,MAAM,GAAG,IAAI,UAAU,CAAM,UAAA,QAAQ,EAAA;MAC1C,IAAM,YAAY,GAAI,EAAe,CAAC,MAAM,CAAC,MAAM,CAAC;MACpD,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;MAE/D,CAAC,YAAA;QAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;gBACA;gBACA,YAAY,CAAC,OAAO,CAAC,UAAA,CAAC,EAAA;kBACrB,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;oBACjC,KAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC;kBACtC;kBAED,KAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC;gBAC1C,CAAC,CAAC;gBAEM,EAAA,GAA2C,OAAO,CAAA,eAA9B,EAApB,eAAe,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAE,GAAA,EAAA,EAAE,gBAAgB,GAAK,OAAO,CAAA,gBAAZ;gBAGxC,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,GAAG,CACtD,UAAC,EAAuC,EAAA;sBAAvC,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAAuC;oBAAtC,KAAA,GAAA,EAAA,CAAA,CAAA,CAAK;oBAAE,CAAA,GAAA,EAAA,CAAA,CAAA,CAAC;kBAAmC,OAAA,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC;gBAAhB,CAAgB,CAC7D;gBAED;gBACA,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,CAAA,QAAA,CACtB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,EACrC,UAAiC,CAAA,CACpC;gBAGI,GAAG,GACR,MAAM,CAAC,OAAO,CACb,YAAY,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,IAAI,EAAA;kBAC7B,IAAM,sBAAsB,GAAG,eAAe,CAAC,IAAI,CAClD,UAAA,CAAC,EAAA;oBAAI,OAAA,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;kBAA3B,CAA2B,CAChC;kBAED,IAAI,sBAAsB,EAAE;oBACnB,IAAA,QAAA,GAAA,sBAAA,CAAA,MAAgB;sBAAE,GAAA,GAAA,sBAAA,CAAA,GAAG;oBAE7B,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;sBACnB,GAAG,CAAC,QAAQ,CAAC,GAAG;wBACf,GAAG,EAAA,GAAA;wBACH,MAAM,EAAE,IAAI,GAAG;uBACf;oBACD;oBAED,GAAG,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;kBAC9B;kBAED,OAAO,GAAG;gBACX,CAAC,EAAE,CAAA,CAAE,CAAC,CACN;gBAEF;gBACA,OAAA,CAAA,CAAA,CAAA,WAAM,OAAO,CAAC,GAAG,CAChB,GAAG,CAAC,GAAG,CAAC,UAAO,EAA2B,EAAA;sBAA3B,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAA2B;oBAA1B,QAAA,GAAA,EAAA,CAAA,CAAA,CAAQ;oBAAE,EAAA,GAAA,EAAA,CAAA,CAAA,CAAe;oBAAb,GAAA,GAAA,EAAA,CAAA,GAAG;oBAAE,MAAA,GAAA,EAAA,CAAA,MAAM;;;;;;;0BAElC,MAAM,GAAG,IAAI;;;;0BAEP,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;4BACrC,QAAQ,EAAA,QAAA;4BACR,GAAG,EAAA;2BACH,CAAC,CAAA;;0BAHF,MAAM,GAAG,EAAA,CAAA,IAAA,EAGP;;;;0BAEF,QAAQ,CAAC,KAAK,CAAC;4BAAE,OAAO,EAAE,mBAAmB;4BAAE,KAAK,EAAE;0BAAG,CAAE,CAAC;0BAC5D,QAAQ,CAAC,QAAQ,EAAE;0BACnB,OAAA,CAAA,CAAA,CAAA,YAAO,SAAS,CAAA;;0BAGjB;0BACA;0BACA,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK,EAAA;4BACnB,IAAI,MAAM,CAAC,WAAW,EAAE,EAAE;8BACzB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;8BAEvB,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;4BACpC;0BACF,CAAC,CAAC;0BAEF,OAAA,CAAA,CAAA,CAAA,YAAO,MAAM,CAAA;sBAAC;;;iBACd,CAAC,CACF,CAAA;;gBA5BD;gBACA,EAAA,CAAA,IAAA,EA2BC;;;;;OACD,GAAG;;MAEJ,OAAO,YAAA;QACN,MAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEnE,YAAY,CAAC,OAAO,CAAC,UAAA,CAAC,EAAA;UACrB,IAAM,MAAM,GAAG,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;UAEvC,IAAI,MAAM,IAAI,MAAM,CAAC,WAAW,EAAE,EAAE;YACnC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YAE3B,IACC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,EAAA;cAAI,OAAA,CAAC,KAAK,MAAM;YAAZ,CAAY,CAAC,EAC9D;cACD,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC;YAChC;UACD;UAED,KAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC;MACH,CAAC;IACF,CAAC,CAAC;IAEF,OAAO,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAA,KAAK,EAAA;MACvC,IAAM,KAAK,GAAG,KAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;MAC1C,IAAM,KAAK,GAAG,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC;MAEzC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAC7C,UAAC,GAAG,EAAE,EAAc,EAAA;YAAd,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAAc;UAAb,OAAA,GAAA,EAAA,CAAA,CAAA,CAAO;UAAE,GAAA,GAAA,EAAA,CAAA,CAAA,CAAG;QAAM,OACvB,GAAG,CAAE,KAAK,IAAI,OAAO,CAAY,GAAG,GAAG,EAAG,GAAG;MADtB,CAExB,EACD,CAAA,CAAE,CACF;MAED,OAAO,KAAK;IACb,CAAC,CAAC;EACH,CAAC;EACF,OAAA,kBAAC;AAAD,CAAC,CApLuC,kBAAkB,CAAA","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { MqttOverWSProvider } from './MqttOverWSProvider';\nvar logger = new Logger('AWSAppSyncProvider');\n/**\n * @deprecated Unused, all usecases have migrated to AWSAppSyncRealtimeProvider\n */\nvar AWSAppSyncProvider = /** @class */ (function (_super) {\n    __extends(AWSAppSyncProvider, _super);\n    function AWSAppSyncProvider() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._topicClient = new Map();\n        _this._topicAlias = new Map();\n        return _this;\n    }\n    Object.defineProperty(AWSAppSyncProvider.prototype, \"endpoint\", {\n        get: function () {\n            throw new Error('Not supported');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AWSAppSyncProvider.prototype.getProviderName = function () {\n        return 'AWSAppSyncProvider';\n    };\n    AWSAppSyncProvider.prototype.publish = function (topics, msg, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                throw new Error('Operation not supported');\n            });\n        });\n    };\n    AWSAppSyncProvider.prototype._cleanUp = function (clientId) {\n        var _this = this;\n        var topicsForClient = Array.from(this._topicClient.entries())\n            .filter(function (_a) {\n            var _b = __read(_a, 2), c = _b[1];\n            return c.clientId === clientId;\n        })\n            .map(function (_a) {\n            var _b = __read(_a, 1), t = _b[0];\n            return t;\n        });\n        topicsForClient.forEach(function (t) { return _this._cleanUpForTopic(t); });\n    };\n    AWSAppSyncProvider.prototype._cleanUpForTopic = function (topic) {\n        this._topicClient.delete(topic);\n        this._topicAlias.delete(topic);\n    };\n    AWSAppSyncProvider.prototype.onDisconnect = function (_a) {\n        var _this = this;\n        var clientId = _a.clientId, errorCode = _a.errorCode, args = __rest(_a, [\"clientId\", \"errorCode\"]);\n        if (errorCode !== 0) {\n            var topicsForClient = Array.from(this._topicClient.entries())\n                .filter(function (_a) {\n                var _b = __read(_a, 2), c = _b[1];\n                return c.clientId === clientId;\n            })\n                .map(function (_a) {\n                var _b = __read(_a, 1), t = _b[0];\n                return t;\n            });\n            topicsForClient.forEach(function (topic) {\n                if (_this._topicObservers.has(topic)) {\n                    _this._topicObservers.get(topic).forEach(function (obs) {\n                        if (!obs.closed) {\n                            obs.error(args);\n                        }\n                    });\n                    _this._topicObservers.delete(topic);\n                }\n            });\n            this._cleanUp(clientId);\n        }\n    };\n    AWSAppSyncProvider.prototype.disconnect = function (clientId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var client;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.clientsQueue.get(clientId, function () { return null; })];\n                    case 1:\n                        client = _a.sent();\n                        return [4 /*yield*/, _super.prototype.disconnect.call(this, clientId)];\n                    case 2:\n                        _a.sent();\n                        this._cleanUp(clientId);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSAppSyncProvider.prototype.subscribe = function (topics, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var result = new Observable(function (observer) {\n            var targetTopics = [].concat(topics);\n            logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n            (function () { return __awaiter(_this, void 0, void 0, function () {\n                var _a, mqttConnections, newSubscriptions, newAliases, map;\n                var _this = this;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // Add these topics to map\n                            targetTopics.forEach(function (t) {\n                                if (!_this._topicObservers.has(t)) {\n                                    _this._topicObservers.set(t, new Set());\n                                }\n                                _this._topicObservers.get(t).add(observer);\n                            });\n                            _a = options.mqttConnections, mqttConnections = _a === void 0 ? [] : _a, newSubscriptions = options.newSubscriptions;\n                            newAliases = Object.entries(newSubscriptions).map(function (_a) {\n                                var _b = __read(_a, 2), alias = _b[0], v = _b[1];\n                                return [v.topic, alias];\n                            });\n                            // Merge new aliases with old ones\n                            this._topicAlias = new Map(__spread(Array.from(this._topicAlias.entries()), newAliases));\n                            map = Object.entries(targetTopics.reduce(function (acc, elem) {\n                                var connectionInfoForTopic = mqttConnections.find(function (c) { return c.topics.indexOf(elem) > -1; });\n                                if (connectionInfoForTopic) {\n                                    var clientId = connectionInfoForTopic.client, url = connectionInfoForTopic.url;\n                                    if (!acc[clientId]) {\n                                        acc[clientId] = {\n                                            url: url,\n                                            topics: new Set(),\n                                        };\n                                    }\n                                    acc[clientId].topics.add(elem);\n                                }\n                                return acc;\n                            }, {}));\n                            // reconnect everything we have in the map\n                            return [4 /*yield*/, Promise.all(map.map(function (_a) {\n                                    var _b = __read(_a, 2), clientId = _b[0], _c = _b[1], url = _c.url, topics = _c.topics;\n                                    return __awaiter(_this, void 0, void 0, function () {\n                                        var client, err_1;\n                                        var _this = this;\n                                        return __generator(this, function (_d) {\n                                            switch (_d.label) {\n                                                case 0:\n                                                    client = null;\n                                                    _d.label = 1;\n                                                case 1:\n                                                    _d.trys.push([1, 3, , 4]);\n                                                    return [4 /*yield*/, this.connect(clientId, {\n                                                            clientId: clientId,\n                                                            url: url,\n                                                        })];\n                                                case 2:\n                                                    client = _d.sent();\n                                                    return [3 /*break*/, 4];\n                                                case 3:\n                                                    err_1 = _d.sent();\n                                                    observer.error({ message: 'Failed to connect', error: err_1 });\n                                                    observer.complete();\n                                                    return [2 /*return*/, undefined];\n                                                case 4:\n                                                    // subscribe to all topics for this client\n                                                    // store topic-client mapping\n                                                    topics.forEach(function (topic) {\n                                                        if (client.isConnected()) {\n                                                            client.subscribe(topic);\n                                                            _this._topicClient.set(topic, client);\n                                                        }\n                                                    });\n                                                    return [2 /*return*/, client];\n                                            }\n                                        });\n                                    });\n                                }))];\n                        case 1:\n                            // reconnect everything we have in the map\n                            _b.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            }); })();\n            return function () {\n                logger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n                targetTopics.forEach(function (t) {\n                    var client = _this._topicClient.get(t);\n                    if (client && client.isConnected()) {\n                        client.unsubscribe(t);\n                        _this._topicClient.delete(t);\n                        if (!Array.from(_this._topicClient.values()).some(function (c) { return c === client; })) {\n                            _this.disconnect(client.clientId);\n                        }\n                    }\n                    _this._topicObservers.delete(t);\n                });\n            };\n        });\n        return Observable.from(result).map(function (value) {\n            var topic = _this.getTopicForValue(value);\n            var alias = _this._topicAlias.get(topic);\n            value.data = Object.entries(value.data).reduce(function (obj, _a) {\n                var _b = __read(_a, 2), origKey = _b[0], val = _b[1];\n                return ((obj[(alias || origKey)] = val), obj);\n            }, {});\n            return value;\n        });\n    };\n    return AWSAppSyncProvider;\n}(MqttOverWSProvider));\nexport { AWSAppSyncProvider };\n//# sourceMappingURL=AWSAppSyncProvider.js.map"]},"metadata":{},"sourceType":"module"}