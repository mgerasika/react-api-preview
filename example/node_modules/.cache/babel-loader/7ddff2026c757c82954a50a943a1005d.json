{"ast":null,"code":"import { __asyncGenerator, __await, __awaiter, __generator } from \"tslib\";\n/**\n * A util function converting ReadableStream into an async iterable.\n * Reference: https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n */\nexport var readableStreamtoIterable = function (readableStream) {\n  var _a;\n  return _a = {}, _a[Symbol.asyncIterator] = function () {\n    return __asyncGenerator(this, arguments, function () {\n      var reader, _a, done, value;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            reader = readableStream.getReader();\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1,, 9, 10]);\n            _b.label = 2;\n          case 2:\n            if (!true) return [3 /*break*/, 8];\n            return [4 /*yield*/, __await(reader.read())];\n          case 3:\n            _a = _b.sent(), done = _a.done, value = _a.value;\n            if (!done) return [3 /*break*/, 5];\n            return [4 /*yield*/, __await(void 0)];\n          case 4:\n            return [2 /*return*/, _b.sent()];\n          case 5:\n            return [4 /*yield*/, __await(value)];\n          case 6:\n            return [4 /*yield*/, _b.sent()];\n          case 7:\n            _b.sent();\n            return [3 /*break*/, 2];\n          case 8:\n            return [3 /*break*/, 10];\n          case 9:\n            reader.releaseLock();\n            return [7 /*endfinally*/];\n          case 10:\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, _a;\n};\n/**\n * A util function converting async iterable to a ReadableStream.\n */\nexport var iterableToReadableStream = function (asyncIterable) {\n  var iterator = asyncIterable[Symbol.asyncIterator]();\n  return new ReadableStream({\n    pull: function (controller) {\n      return __awaiter(this, void 0, void 0, function () {\n        var _a, done, value;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              return [4 /*yield*/, iterator.next()];\n            case 1:\n              _a = _b.sent(), done = _a.done, value = _a.value;\n              if (done) {\n                return [2 /*return*/, controller.close()];\n              }\n              controller.enqueue(value);\n              return [2 /*return*/];\n          }\n        });\n      });\n    }\n  });\n};","map":{"version":3,"sources":["../../src/utils.ts"],"names":[],"mappings":";AAAA;;;AAGG;AACH,OAAO,IAAM,wBAAwB,GAAG,UAAI,cAAiC,EAAA;;EAAuB,OAAA,EAAA,GAAA,CAAA,CAAA,EAClG,EAAA,CAAC,MAAM,CAAC,aAAa,CAAA,GAAG,YAAA;;;;;;YAChB,MAAM,GAAG,cAAc,CAAC,SAAS,EAAE;;;;;;iBAEhC,IAAI,EAAA,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;YACe,OAAA,CAAA,CAAA,CAAA,WAAA,OAAA,CAAM,MAAM,CAAC,IAAI,EAAE,CAAA,CAAA;;YAArC,EAAA,GAAkB,EAAA,CAAA,IAAA,EAAmB,EAAnC,IAAI,GAAA,EAAA,CAAA,IAAA,EAAE,KAAK,GAAA,EAAA,CAAA,KAAA;iBACf,IAAI,EAAJ,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;;;YAAM,OAAA,CAAA,CAAA,CAAA,YAAA,EAAA,CAAA,IAAA,EAAA,CAAA;;yCACJ,KAAU,CAAA,CAAA;;YAAhB,OAAA,CAAA,CAAA,CAAA,WAAA,EAAA,CAAA,IAAA,EAAA,CAAA;;YAAA,EAAA,CAAA,IAAA,EAAgB;;;;;YAGlB,MAAM,CAAC,WAAW,EAAE;;;;;;;GAEvB,E,EACD;AAbkG,CAalG;AAEF;;AAEG;AACH,OAAO,IAAM,wBAAwB,GAAG,UAAI,aAA+B,EAAA;EACzE,IAAM,QAAQ,GAAG,aAAa,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE;EACtD,OAAO,IAAI,cAAc,CAAC;IAClB,IAAI,EAAA,UAAC,UAAU,EAAA;;;;;;cACK,OAAA,CAAA,CAAA,CAAA,WAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;;cAAvC,EAAA,GAAkB,EAAA,CAAA,IAAA,EAAqB,EAArC,IAAI,GAAA,EAAA,CAAA,IAAA,EAAE,KAAK,GAAA,EAAA,CAAA,KAAA;cACnB,IAAI,IAAI,EAAE;gBACR,OAAA,CAAA,CAAA,CAAA,YAAO,UAAU,CAAC,KAAK,EAAE,CAAA;cAC1B;cACD,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC;;;;;IAC1B;GACF,CAAC;AACJ,CAAC","sourcesContent":["/**\n * A util function converting ReadableStream into an async iterable.\n * Reference: https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n */\nexport const readableStreamtoIterable = <T>(readableStream: ReadableStream<T>): AsyncIterable<T> => ({\n  [Symbol.asyncIterator]: async function* () {\n    const reader = readableStream.getReader();\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) return;\n        yield value as T;\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  },\n});\n\n/**\n * A util function converting async iterable to a ReadableStream.\n */\nexport const iterableToReadableStream = <T>(asyncIterable: AsyncIterable<T>): ReadableStream<T> => {\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  return new ReadableStream({\n    async pull(controller) {\n      const { done, value } = await iterator.next();\n      if (done) {\n        return controller.close();\n      }\n      controller.enqueue(value);\n    },\n  });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}