{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExplorerSync = void 0;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _ExplorerBase = require(\"./ExplorerBase\");\nvar _readFile = require(\"./readFile\");\nvar _cacheWrapper = require(\"./cacheWrapper\");\nvar _getDirectory = require(\"./getDirectory\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass ExplorerSync extends _ExplorerBase.ExplorerBase {\n  constructor(options) {\n    super(options);\n  }\n  searchSync() {\n    let searchFrom = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();\n    const startDirectory = (0, _getDirectory.getDirectorySync)(searchFrom);\n    const result = this.searchFromDirectorySync(startDirectory);\n    return result;\n  }\n  searchFromDirectorySync(dir) {\n    const absoluteDir = _path.default.resolve(process.cwd(), dir);\n    const run = () => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n      const transformResult = this.config.transform(result);\n      return transformResult;\n    };\n    if (this.searchCache) {\n      return (0, _cacheWrapper.cacheWrapperSync)(this.searchCache, absoluteDir, run);\n    }\n    return run();\n  }\n  searchDirectorySync(dir) {\n    for (const place of this.config.searchPlaces) {\n      const placeResult = this.loadSearchPlaceSync(dir, place);\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    } // config not found\n\n    return null;\n  }\n  loadSearchPlaceSync(dir, place) {\n    const filepath = _path.default.join(dir, place);\n    const content = (0, _readFile.readFileSync)(filepath);\n    const result = this.createCosmiconfigResultSync(filepath, content);\n    return result;\n  }\n  loadFileContentSync(filepath, content) {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = loader(filepath, content);\n    return loaderResult;\n  }\n  createCosmiconfigResultSync(filepath, content) {\n    const fileContent = this.loadFileContentSync(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n    return result;\n  }\n  loadSync(filepath) {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = _path.default.resolve(process.cwd(), filepath);\n    const runLoadSync = () => {\n      const content = (0, _readFile.readFileSync)(absoluteFilePath, {\n        throwNotFound: true\n      });\n      const cosmiconfigResult = this.createCosmiconfigResultSync(absoluteFilePath, content);\n      const transformResult = this.config.transform(cosmiconfigResult);\n      return transformResult;\n    };\n    if (this.loadCache) {\n      return (0, _cacheWrapper.cacheWrapperSync)(this.loadCache, absoluteFilePath, runLoadSync);\n    }\n    return runLoadSync();\n  }\n}\nexports.ExplorerSync = ExplorerSync;","map":{"version":3,"sources":["../src/ExplorerSync.ts"],"names":["ExplorerSync","ExplorerBase","constructor","options","searchSync","searchFrom","process","cwd","startDirectory","result","searchFromDirectorySync","dir","absoluteDir","path","resolve","run","searchDirectorySync","nextDir","nextDirectoryToSearch","transformResult","config","transform","searchCache","place","searchPlaces","placeResult","loadSearchPlaceSync","shouldSearchStopWithResult","filepath","join","content","createCosmiconfigResultSync","loadFileContentSync","trim","undefined","loader","getLoaderEntryForFile","loaderResult","fileContent","loadedContentToCosmiconfigResult","loadSync","validateFilePath","absoluteFilePath","runLoadSync","throwNotFound","cosmiconfigResult","loadCache"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { ExplorerBase } from './ExplorerBase';\nimport { readFileSync } from './readFile';\nimport { cacheWrapperSync } from './cacheWrapper';\nimport { getDirectorySync } from './getDirectory';\nimport {\n  CosmiconfigResult,\n  ExplorerOptionsSync,\n  LoadedFileContent,\n} from './types';\n\nclass ExplorerSync extends ExplorerBase<ExplorerOptionsSync> {\n  public constructor(options: ExplorerOptionsSync) {\n    super(options);\n  }\n\n  public searchSync(searchFrom: string = process.cwd()): CosmiconfigResult {\n    const startDirectory = getDirectorySync(searchFrom);\n    const result = this.searchFromDirectorySync(startDirectory);\n\n    return result;\n  }\n\n  private searchFromDirectorySync(dir: string): CosmiconfigResult {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = (): CosmiconfigResult => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n\n      const transformResult = this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return cacheWrapperSync(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  private searchDirectorySync(dir: string): CosmiconfigResult {\n    for (const place of this.config.searchPlaces) {\n      const placeResult = this.loadSearchPlaceSync(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    }\n\n    // config not found\n    return null;\n  }\n\n  private loadSearchPlaceSync(dir: string, place: string): CosmiconfigResult {\n    const filepath = path.join(dir, place);\n    const content = readFileSync(filepath);\n\n    const result = this.createCosmiconfigResultSync(filepath, content);\n\n    return result;\n  }\n\n  private loadFileContentSync(\n    filepath: string,\n    content: string | null,\n  ): LoadedFileContent {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = loader(filepath, content);\n\n    return loaderResult;\n  }\n\n  private createCosmiconfigResultSync(\n    filepath: string,\n    content: string | null,\n  ): CosmiconfigResult {\n    const fileContent = this.loadFileContentSync(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n\n    return result;\n  }\n\n  public loadSync(filepath: string): CosmiconfigResult {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n\n    const runLoadSync = (): CosmiconfigResult => {\n      const content = readFileSync(absoluteFilePath, { throwNotFound: true });\n      const cosmiconfigResult = this.createCosmiconfigResultSync(\n        absoluteFilePath,\n        content,\n      );\n\n      const transformResult = this.config.transform(cosmiconfigResult);\n\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return cacheWrapperSync(this.loadCache, absoluteFilePath, runLoadSync);\n    }\n\n    return runLoadSync();\n  }\n}\n\nexport { ExplorerSync };\n"]},"metadata":{},"sourceType":"script"}