{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cosmiconfig = cosmiconfig;\nexports.cosmiconfigSync = cosmiconfigSync;\nexports.defaultLoaders = void 0;\nvar _os = _interopRequireDefault(require(\"os\"));\nvar _Explorer = require(\"./Explorer\");\nvar _ExplorerSync = require(\"./ExplorerSync\");\nvar _loaders = require(\"./loaders\");\nvar _types = require(\"./types\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction cosmiconfig(moduleName) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const normalizedOptions = normalizeOptions(moduleName, options);\n  const explorer = new _Explorer.Explorer(normalizedOptions);\n  return {\n    search: explorer.search.bind(explorer),\n    load: explorer.load.bind(explorer),\n    clearLoadCache: explorer.clearLoadCache.bind(explorer),\n    clearSearchCache: explorer.clearSearchCache.bind(explorer),\n    clearCaches: explorer.clearCaches.bind(explorer)\n  };\n} // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\nfunction cosmiconfigSync(moduleName) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const normalizedOptions = normalizeOptions(moduleName, options);\n  const explorerSync = new _ExplorerSync.ExplorerSync(normalizedOptions);\n  return {\n    search: explorerSync.searchSync.bind(explorerSync),\n    load: explorerSync.loadSync.bind(explorerSync),\n    clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),\n    clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),\n    clearCaches: explorerSync.clearCaches.bind(explorerSync)\n  };\n} // do not allow mutation of default loaders. Make sure it is set inside options\n\nconst defaultLoaders = Object.freeze({\n  '.js': _loaders.loaders.loadJs,\n  '.json': _loaders.loaders.loadJson,\n  '.yaml': _loaders.loaders.loadYaml,\n  '.yml': _loaders.loaders.loadYaml,\n  noExt: _loaders.loaders.loadYaml\n});\nexports.defaultLoaders = defaultLoaders;\nfunction normalizeOptions(moduleName, options) {\n  const defaults = {\n    packageProp: moduleName,\n    searchPlaces: ['package.json', `.${moduleName}rc`, `.${moduleName}rc.json`, `.${moduleName}rc.yaml`, `.${moduleName}rc.yml`, `.${moduleName}rc.js`, `${moduleName}.config.js`],\n    ignoreEmptySearchPlaces: true,\n    stopDir: _os.default.homedir(),\n    cache: true,\n    transform: identity,\n    loaders: defaultLoaders\n  };\n  const normalizedOptions = {\n    ...defaults,\n    ...options,\n    loaders: {\n      ...defaults.loaders,\n      ...options.loaders\n    }\n  };\n  return normalizedOptions;\n}\nconst identity = function identity(x) {\n  return x;\n};","map":{"version":3,"sources":["../src/index.ts"],"names":["cosmiconfig","moduleName","options","normalizedOptions","normalizeOptions","explorer","Explorer","search","bind","load","clearLoadCache","clearSearchCache","clearCaches","cosmiconfigSync","explorerSync","ExplorerSync","searchSync","loadSync","defaultLoaders","freeze","loaders","loadJs","loadJson","loadYaml","noExt","defaults","packageProp","searchPlaces","ignoreEmptySearchPlaces","stopDir","os","homedir","cache","transform","identity","x"],"mappings":"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","sourcesContent":["import os from 'os';\nimport { Explorer } from './Explorer';\nimport { ExplorerSync } from './ExplorerSync';\nimport { loaders } from './loaders';\nimport {\n  Config,\n  CosmiconfigResult,\n  ExplorerOptions,\n  ExplorerOptionsSync,\n  Loaders,\n  LoadersSync,\n} from './types';\n\ntype LoaderResult = Config | null;\nexport type Loader =\n  | ((filepath: string, content: string) => Promise<LoaderResult>)\n  | LoaderSync;\nexport type LoaderSync = (filepath: string, content: string) => LoaderResult;\n\nexport type Transform =\n  | ((CosmiconfigResult: CosmiconfigResult) => Promise<CosmiconfigResult>)\n  | TransformSync;\n\nexport type TransformSync = (\n  CosmiconfigResult: CosmiconfigResult,\n) => CosmiconfigResult;\n\ninterface OptionsBase {\n  packageProp?: string;\n  searchPlaces?: Array<string>;\n  ignoreEmptySearchPlaces?: boolean;\n  stopDir?: string;\n  cache?: boolean;\n}\n\nexport interface Options extends OptionsBase {\n  loaders?: Loaders;\n  transform?: Transform;\n}\n\nexport interface OptionsSync extends OptionsBase {\n  loaders?: LoadersSync;\n  transform?: TransformSync;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction cosmiconfig(moduleName: string, options: Options = {}) {\n  const normalizedOptions: ExplorerOptions = normalizeOptions(\n    moduleName,\n    options,\n  );\n\n  const explorer = new Explorer(normalizedOptions);\n\n  return {\n    search: explorer.search.bind(explorer),\n    load: explorer.load.bind(explorer),\n    clearLoadCache: explorer.clearLoadCache.bind(explorer),\n    clearSearchCache: explorer.clearSearchCache.bind(explorer),\n    clearCaches: explorer.clearCaches.bind(explorer),\n  } as const;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction cosmiconfigSync(moduleName: string, options: OptionsSync = {}) {\n  const normalizedOptions: ExplorerOptionsSync = normalizeOptions(\n    moduleName,\n    options,\n  );\n\n  const explorerSync = new ExplorerSync(normalizedOptions);\n\n  return {\n    search: explorerSync.searchSync.bind(explorerSync),\n    load: explorerSync.loadSync.bind(explorerSync),\n    clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),\n    clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),\n    clearCaches: explorerSync.clearCaches.bind(explorerSync),\n  } as const;\n}\n\n// do not allow mutation of default loaders. Make sure it is set inside options\nconst defaultLoaders = Object.freeze({\n  '.js': loaders.loadJs,\n  '.json': loaders.loadJson,\n  '.yaml': loaders.loadYaml,\n  '.yml': loaders.loadYaml,\n  noExt: loaders.loadYaml,\n} as const);\n\nfunction normalizeOptions(\n  moduleName: string,\n  options: OptionsSync,\n): ExplorerOptionsSync;\nfunction normalizeOptions(\n  moduleName: string,\n  options: Options,\n): ExplorerOptions;\nfunction normalizeOptions(\n  moduleName: string,\n  options: Options | OptionsSync,\n): ExplorerOptions | ExplorerOptionsSync {\n  const defaults: ExplorerOptions | ExplorerOptionsSync = {\n    packageProp: moduleName,\n    searchPlaces: [\n      'package.json',\n      `.${moduleName}rc`,\n      `.${moduleName}rc.json`,\n      `.${moduleName}rc.yaml`,\n      `.${moduleName}rc.yml`,\n      `.${moduleName}rc.js`,\n      `${moduleName}.config.js`,\n    ],\n    ignoreEmptySearchPlaces: true,\n    stopDir: os.homedir(),\n    cache: true,\n    transform: identity,\n    loaders: defaultLoaders,\n  };\n\n  const normalizedOptions: ExplorerOptions | ExplorerOptionsSync = {\n    ...defaults,\n    ...options,\n    loaders: {\n      ...defaults.loaders,\n      ...options.loaders,\n    },\n  };\n\n  return normalizedOptions;\n}\n\nconst identity: TransformSync = function identity(x) {\n  return x;\n};\n\nexport { cosmiconfig, cosmiconfigSync, defaultLoaders };\n"]},"metadata":{},"sourceType":"script"}