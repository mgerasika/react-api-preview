{"ast":null,"code":"import { __values } from \"tslib\";\nimport { escapeAttribute } from \"./escape-attribute\";\n/**\n * Represents an XML node.\n */\nvar XmlNode = /** @class */function () {\n  function XmlNode(name, children) {\n    if (children === void 0) {\n      children = [];\n    }\n    this.name = name;\n    this.children = children;\n    this.attributes = {};\n  }\n  XmlNode.prototype.withName = function (name) {\n    this.name = name;\n    return this;\n  };\n  XmlNode.prototype.addAttribute = function (name, value) {\n    this.attributes[name] = value;\n    return this;\n  };\n  XmlNode.prototype.addChildNode = function (child) {\n    this.children.push(child);\n    return this;\n  };\n  XmlNode.prototype.removeAttribute = function (name) {\n    delete this.attributes[name];\n    return this;\n  };\n  XmlNode.prototype.toString = function () {\n    var e_1, _a;\n    var hasChildren = Boolean(this.children.length);\n    var xmlText = \"<\" + this.name;\n    // add attributes\n    var attributes = this.attributes;\n    try {\n      for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var attributeName = _c.value;\n        var attribute = attributes[attributeName];\n        if (typeof attribute !== \"undefined\" && attribute !== null) {\n          xmlText += \" \" + attributeName + \"=\\\"\" + escapeAttribute(\"\" + attribute) + \"\\\"\";\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return xmlText += !hasChildren ? \"/>\" : \">\" + this.children.map(function (c) {\n      return c.toString();\n    }).join(\"\") + \"</\" + this.name + \">\";\n  };\n  return XmlNode;\n}();\nexport { XmlNode };","map":{"version":3,"sources":["../../src/XmlNode.ts"],"names":[],"mappings":";AAAA,SAAS,eAAe,QAAQ,oBAAoB;AAGpD;;AAEG;AACH,IAAA,OAAA,GAAA,aAAA,YAAA;EAGE,SAAA,OAAA,CAAoB,IAAY,EAAkB,QAA2B,EAAA;IAA3B,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA;MAAA,QAAA,GAAA,EAA2B;IAAA;IAAzD,IAAA,CAAA,IAAI,GAAJ,IAAI;IAA0B,IAAA,CAAA,QAAQ,GAAR,QAAQ;IAFlD,IAAA,CAAA,UAAU,GAA4B,CAAA,CAAE;EAEgC;EAEhF,OAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAS,IAAY,EAAA;IACnB,IAAI,CAAC,IAAI,GAAG,IAAI;IAChB,OAAO,IAAI;EACb,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,IAAY,EAAE,KAAU,EAAA;IACnC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK;IAC7B,OAAO,IAAI;EACb,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,KAAiB,EAAA;IAC5B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;IACzB,OAAO,IAAI;EACb,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,IAAY,EAAA;IAC1B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;IAC5B,OAAO,IAAI;EACb,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;;IACE,IAAM,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IACjD,IAAI,OAAO,GAAG,GAAA,GAAI,IAAI,CAAC,IAAM;IAC7B;IACA,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU;;MAClC,KAA4B,IAAA,EAAA,GAAA,QAAA,CAAA,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE;QAAhD,IAAM,aAAa,GAAA,EAAA,CAAA,KAAA;QACtB,IAAM,SAAS,GAAG,UAAU,CAAC,aAAa,CAAC;QAC3C,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,KAAK,IAAI,EAAE;UAC1D,OAAO,IAAI,GAAA,GAAI,aAAa,GAAA,KAAA,GAAK,eAAe,CAAC,EAAE,GAAG,SAAS,CAAC,GAAA,IAAG;QACpE;MACF;;;;;;;;;;;;IAED,OAAQ,OAAO,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,GAAA,GAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAC,CAAC,EAAA;MAAK,OAAA,CAAC,CAAC,QAAQ,EAAE;IAAZ,CAAY,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAA,IAAA,GAAK,IAAI,CAAC,IAAI,GAAA,GAAG;EAC/G,CAAC;EACH,OAAA,OAAC;AAAD,CAAC,EAAA","sourcesContent":["import { escapeAttribute } from \"./escape-attribute\";\nimport { Stringable } from \"./stringable\";\n\n/**\n * Represents an XML node.\n */\nexport class XmlNode {\n  private attributes: { [name: string]: any } = {};\n\n  constructor(private name: string, public readonly children: Stringable[] = []) {}\n\n  withName(name: string): XmlNode {\n    this.name = name;\n    return this;\n  }\n\n  addAttribute(name: string, value: any): XmlNode {\n    this.attributes[name] = value;\n    return this;\n  }\n\n  addChildNode(child: Stringable): XmlNode {\n    this.children.push(child);\n    return this;\n  }\n\n  removeAttribute(name: string): XmlNode {\n    delete this.attributes[name];\n    return this;\n  }\n\n  toString(): string {\n    const hasChildren = Boolean(this.children.length);\n    let xmlText = `<${this.name}`;\n    // add attributes\n    const attributes = this.attributes;\n    for (const attributeName of Object.keys(attributes)) {\n      const attribute = attributes[attributeName];\n      if (typeof attribute !== \"undefined\" && attribute !== null) {\n        xmlText += ` ${attributeName}=\"${escapeAttribute(\"\" + attribute)}\"`;\n      }\n    }\n\n    return (xmlText += !hasChildren ? \"/>\" : `>${this.children.map((c) => c.toString()).join(\"\")}</${this.name}>`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}