{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n  return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForSuggestionsCommand, SearchPlaceIndexForPositionCommand, BatchPutGeofenceCommand, GetPlaceCommand, GetGeofenceCommand, ListGeofencesCommand, BatchDeleteGeofenceCommand } from '@aws-sdk/client-location';\nimport { mapSearchOptions, validateGeofenceId, validateGeofencesInput } from '../util';\nvar logger = new Logger('AmazonLocationServiceProvider');\nvar AmazonLocationServiceProvider = /** @class */function () {\n  /**\n   * Initialize Geo with AWS configurations\n   * @param {Object} config - Configuration object for Geo\n   */\n  function AmazonLocationServiceProvider(config) {\n    this._config = config ? config : {};\n    logger.debug('Geo Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   * @returns {string} name of the category\n   */\n  AmazonLocationServiceProvider.prototype.getCategory = function () {\n    return AmazonLocationServiceProvider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n  AmazonLocationServiceProvider.prototype.getProviderName = function () {\n    return AmazonLocationServiceProvider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Geo part with aws configuration\n   * @param {Object} config - Configuration of the Geo\n   * @return {Object} - Current configuration\n   */\n  AmazonLocationServiceProvider.prototype.configure = function (config) {\n    logger.debug('configure Amazon Location Service Provider', config);\n    if (!config) return this._config;\n    this._config = Object.assign({}, this._config, config);\n    return this._config;\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n   */\n  AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n    this._verifyMapResources();\n    var mapStyles = [];\n    var availableMaps = this._config.maps.items;\n    var region = this._config.region;\n    for (var mapName in availableMaps) {\n      var style = availableMaps[mapName].style;\n      mapStyles.push({\n        mapName: mapName,\n        style: style,\n        region: region\n      });\n    }\n    return mapStyles;\n  };\n  /**\n   * Get the map resource set as default in amplify config\n   * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n   */\n  AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n    this._verifyMapResources();\n    var mapName = this._config.maps.default;\n    var style = this._config.maps.items[mapName].style;\n    var region = this._config.region;\n    return {\n      mapName: mapName,\n      style: style,\n      region: region\n    };\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n  AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n            if (options) {\n              locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n            }\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_1 = _a.sent();\n            logger.debug(error_1);\n            throw error_1;\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults, {\n              deep: true\n            });\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * Search for suggestions based on the input text\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n   */\n  AmazonLocationServiceProvider.prototype.searchForSuggestions = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_2, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n            if (options) {\n              locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n            }\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForSuggestionsCommand(locationServiceInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_2 = _a.sent();\n            logger.debug(error_2);\n            throw error_2;\n          case 5:\n            results = response.Results.map(function (result) {\n              return {\n                text: result.Text,\n                placeId: result.PlaceId\n              };\n            });\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  AmazonLocationServiceProvider.prototype._verifyPlaceId = function (placeId) {\n    if (placeId.length === 0) {\n      var errorString = 'PlaceId cannot be an empty string.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n  AmazonLocationServiceProvider.prototype.searchByPlaceId = function (placeId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, searchByPlaceIdInput, command, response, error_3, place;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n            this._verifyPlaceId(placeId);\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            searchByPlaceIdInput = {\n              PlaceId: placeId,\n              IndexName: (options === null || options === void 0 ? void 0 : options.searchIndexName) || this._config.search_indices.default\n            };\n            command = new GetPlaceCommand(searchByPlaceIdInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_3 = _a.sent();\n            logger.debug(error_3);\n            throw error_3;\n          case 5:\n            place = response.Place;\n            if (place) {\n              return [2 /*return*/, camelcaseKeys(place, {\n                deep: true\n              })];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n  AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_4, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n            locationServiceInput = {\n              Position: coordinates,\n              IndexName: this._config.search_indices.default\n            };\n            if (options) {\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n              locationServiceInput.MaxResults = options.maxResults;\n            }\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_4 = _a.sent();\n            logger.debug(error_4);\n            throw error_4;\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults[0], {\n              deep: true\n            });\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * Create geofences inside of a geofence collection\n   * @param geofences - Array of geofence objects to create\n   * @param options? - Optional parameters for creating geofences\n   * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n   *   successes: list of geofences successfully created\n   *   errors: list of geofences that failed to create\n   */\n  AmazonLocationServiceProvider.prototype.saveGeofences = function (geofences, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, PascalGeofences, results, geofenceBatches, apiLimit;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofences.length < 1) {\n              throw new Error('Geofence input array is empty');\n            }\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            // Verify geofence collection exists in aws-config.js\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n            validateGeofencesInput(geofences);\n            PascalGeofences = geofences.map(function (_a) {\n              var geofenceId = _a.geofenceId,\n                polygon = _a.geometry.polygon;\n              return {\n                GeofenceId: geofenceId,\n                Geometry: {\n                  Polygon: polygon\n                }\n              };\n            });\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceBatches = [];\n            while (PascalGeofences.length > 0) {\n              apiLimit = 10;\n              geofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n            }\n            return [4 /*yield*/, Promise.all(geofenceBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_5;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n                      return [4 /*yield*/, this._AmazonLocationServiceBatchPutGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n                    case 1:\n                      response = _a.sent();\n                      return [3 /*break*/, 3];\n                    case 2:\n                      error_5 = _a.sent();\n                      // If the API call fails, add the geofences to the errors array and move to next batch\n                      batch.forEach(function (geofence) {\n                        results.errors.push({\n                          geofenceId: geofence.GeofenceId,\n                          error: {\n                            code: 'APIConnectionError',\n                            message: error_5.message\n                          }\n                        });\n                      });\n                      return [2 /*return*/];\n                    case 3:\n                      // Push all successes to results\n                      response.Successes.forEach(function (success) {\n                        var GeofenceId = success.GeofenceId,\n                          CreateTime = success.CreateTime,\n                          UpdateTime = success.UpdateTime;\n                        results.successes.push({\n                          geofenceId: GeofenceId,\n                          createTime: CreateTime,\n                          updateTime: UpdateTime\n                        });\n                      });\n                      // Push all errors to results\n                      response.Errors.forEach(function (error) {\n                        var _a = error.Error,\n                          Code = _a.Code,\n                          Message = _a.Message,\n                          GeofenceId = error.GeofenceId;\n                        results.errors.push({\n                          error: {\n                            code: Code,\n                            message: Message\n                          },\n                          geofenceId: GeofenceId\n                        });\n                      });\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * Get geofence from a geofence collection\n   * @param geofenceId:string\n   * @param options?: Optional parameters for getGeofence\n   * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n   */\n  AmazonLocationServiceProvider.prototype.getGeofence = function (geofenceId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, commandInput, command, response, error_6, GeofenceId, CreateTime, UpdateTime, Status, Geometry, geofence;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            // Verify geofence collection exists in aws-config.js\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n            validateGeofenceId(geofenceId);\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            commandInput = {\n              GeofenceId: geofenceId,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new GetGeofenceCommand(commandInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_6 = _a.sent();\n            logger.debug(error_6);\n            throw error_6;\n          case 5:\n            GeofenceId = response.GeofenceId, CreateTime = response.CreateTime, UpdateTime = response.UpdateTime, Status = response.Status, Geometry = response.Geometry;\n            geofence = {\n              createTime: CreateTime,\n              geofenceId: GeofenceId,\n              geometry: {\n                polygon: Geometry.Polygon\n              },\n              status: Status,\n              updateTime: UpdateTime\n            };\n            return [2 /*return*/, geofence];\n        }\n      });\n    });\n  };\n  /**\n   * List geofences from a geofence collection\n   * @param  options?: ListGeofenceOptions\n   * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n   *   entries: list of geofences - 100 geofences are listed per page\n   *   nextToken: token for next page of geofences\n   */\n  AmazonLocationServiceProvider.prototype.listGeofences = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, listGeofencesInput, command, response, error_7, NextToken, Entries, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            // Verify geofence collection exists in aws-config.js\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            listGeofencesInput = {\n              NextToken: options === null || options === void 0 ? void 0 : options.nextToken,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new ListGeofencesCommand(listGeofencesInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_7 = _a.sent();\n            logger.debug(error_7);\n            throw error_7;\n          case 5:\n            NextToken = response.NextToken, Entries = response.Entries;\n            results = {\n              entries: Entries.map(function (_a) {\n                var GeofenceId = _a.GeofenceId,\n                  CreateTime = _a.CreateTime,\n                  UpdateTime = _a.UpdateTime,\n                  Status = _a.Status,\n                  Polygon = _a.Geometry.Polygon;\n                return {\n                  geofenceId: GeofenceId,\n                  createTime: CreateTime,\n                  updateTime: UpdateTime,\n                  status: Status,\n                  geometry: {\n                    polygon: Polygon\n                  }\n                };\n              }),\n              nextToken: NextToken\n            };\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * Delete geofences from a geofence collection\n   * @param geofenceIds: string|string[]\n   * @param options?: GeofenceOptions\n   * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n   *  successes: list of geofences successfully deleted\n   *  errors: list of geofences that failed to delete\n   */\n  AmazonLocationServiceProvider.prototype.deleteGeofences = function (geofenceIds, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, badGeofenceIds, results, geofenceIdBatches, count;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofenceIds.length < 1) {\n              throw new Error('GeofenceId input array is empty');\n            }\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            badGeofenceIds = geofenceIds.filter(function (geofenceId) {\n              try {\n                validateGeofenceId(geofenceId);\n              } catch (error) {\n                return true;\n              }\n            });\n            if (badGeofenceIds.length > 0) {\n              throw new Error(\"Invalid geofence ids: \" + badGeofenceIds.join(', '));\n            }\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceIdBatches = [];\n            count = 0;\n            while (count < geofenceIds.length) {\n              geofenceIdBatches.push(geofenceIds.slice(count, count += 10));\n            }\n            return [4 /*yield*/, Promise.all(geofenceIdBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_8, badGeofenceIds;\n                var _a;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _b.trys.push([0, 2,, 3]);\n                      return [4 /*yield*/, this._AmazonLocationServiceBatchDeleteGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n                    case 1:\n                      response = _b.sent();\n                      return [3 /*break*/, 3];\n                    case 2:\n                      error_8 = _b.sent();\n                      // If the API call fails, add the geofences to the errors array and move to next batch\n                      batch.forEach(function (geofenceId) {\n                        var errorObject = {\n                          geofenceId: geofenceId,\n                          error: {\n                            code: error_8.message,\n                            message: error_8.message\n                          }\n                        };\n                        results.errors.push(errorObject);\n                      });\n                      return [2 /*return*/];\n                    case 3:\n                      badGeofenceIds = response.Errors.map(function (_a) {\n                        var geofenceId = _a.geofenceId;\n                        return geofenceId;\n                      });\n                      (_a = results.successes).push.apply(_a, __spread(batch.filter(function (Id) {\n                        return !badGeofenceIds.includes(Id);\n                      })));\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n  AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_9;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2 /*return*/, false];\n            cred = Credentials.shear(credentials);\n            logger.debug('Set credentials for storage. Credentials are:', cred);\n            this._config.credentials = cred;\n            return [2 /*return*/, true];\n          case 2:\n            error_9 = _a.sent();\n            logger.debug('Ensure credentials error. Credentials are:', error_9);\n            return [2 /*return*/, false];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n    if (!this._config.maps) {\n      var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n    if (!this._config.maps.default) {\n      var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n  AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n    if ((!this._config.search_indices || !this._config.search_indices.default) && !optionalSearchIndex) {\n      var errorString = 'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n  AmazonLocationServiceProvider.prototype._verifyGeofenceCollections = function (optionalGeofenceCollectionName) {\n    if ((!this._config.geofenceCollections || !this._config.geofenceCollections.default) && !optionalGeofenceCollectionName) {\n      var errorString = 'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchPutGeofenceCall = function (PascalGeofences, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var geofenceInput, client, command, response, error_10;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            geofenceInput = {\n              Entries: PascalGeofences,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new BatchPutGeofenceCommand(geofenceInput);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, client.send(command)];\n          case 2:\n            response = _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_10 = _a.sent();\n            throw error_10;\n          case 4:\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchDeleteGeofenceCall = function (geofenceIds, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteGeofencesInput, client, command, response, error_11;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            deleteGeofencesInput = {\n              GeofenceIds: geofenceIds,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, client.send(command)];\n          case 2:\n            response = _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_11 = _a.sent();\n            throw error_11;\n          case 4:\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  AmazonLocationServiceProvider.CATEGORY = 'Geo';\n  AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n  return AmazonLocationServiceProvider;\n}();\nexport { AmazonLocationServiceProvider };","map":{"version":3,"sources":["../../src/Providers/AmazonLocationServiceProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent, } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForSuggestionsCommand, SearchPlaceIndexForPositionCommand, BatchPutGeofenceCommand, GetPlaceCommand, GetGeofenceCommand, ListGeofencesCommand, BatchDeleteGeofenceCommand, } from '@aws-sdk/client-location';\nimport { mapSearchOptions, validateGeofenceId, validateGeofencesInput, } from '../util';\nvar logger = new Logger('AmazonLocationServiceProvider');\nvar AmazonLocationServiceProvider = /** @class */ (function () {\n    /**\n     * Initialize Geo with AWS configurations\n     * @param {Object} config - Configuration object for Geo\n     */\n    function AmazonLocationServiceProvider(config) {\n        this._config = config ? config : {};\n        logger.debug('Geo Options', this._config);\n    }\n    /**\n     * get the category of the plugin\n     * @returns {string} name of the category\n     */\n    AmazonLocationServiceProvider.prototype.getCategory = function () {\n        return AmazonLocationServiceProvider.CATEGORY;\n    };\n    /**\n     * get provider name of the plugin\n     * @returns {string} name of the provider\n     */\n    AmazonLocationServiceProvider.prototype.getProviderName = function () {\n        return AmazonLocationServiceProvider.PROVIDER_NAME;\n    };\n    /**\n     * Configure Geo part with aws configuration\n     * @param {Object} config - Configuration of the Geo\n     * @return {Object} - Current configuration\n     */\n    AmazonLocationServiceProvider.prototype.configure = function (config) {\n        logger.debug('configure Amazon Location Service Provider', config);\n        if (!config)\n            return this._config;\n        this._config = Object.assign({}, this._config, config);\n        return this._config;\n    };\n    /**\n     * Get the map resources that are currently available through the provider\n     * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n     */\n    AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n        this._verifyMapResources();\n        var mapStyles = [];\n        var availableMaps = this._config.maps.items;\n        var region = this._config.region;\n        for (var mapName in availableMaps) {\n            var style = availableMaps[mapName].style;\n            mapStyles.push({ mapName: mapName, style: style, region: region });\n        }\n        return mapStyles;\n    };\n    /**\n     * Get the map resource set as default in amplify config\n     * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n     */\n    AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n        this._verifyMapResources();\n        var mapName = this._config.maps.default;\n        var style = this._config.maps.items[mapName].style;\n        var region = this._config.region;\n        return { mapName: mapName, style: style, region: region };\n    };\n    /**\n     * Search by text input with optional parameters\n     * @param  {string} text - The text string that is to be searched for\n     * @param  {SearchByTextOptions} options? - Optional parameters to the search\n     * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n     */\n    AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        locationServiceInput = {\n                            Text: text,\n                            IndexName: this._config.search_indices.default,\n                        };\n                        /**\n                         * Map search options to Amazon Location Service input object\n                         */\n                        if (options) {\n                            locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        logger.debug(error_1);\n                        throw error_1;\n                    case 5:\n                        PascalResults = response.Results.map(function (result) { return result.Place; });\n                        results = camelcaseKeys(PascalResults, {\n                            deep: true,\n                        });\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Search for suggestions based on the input text\n     * @param  {string} text - The text string that is to be searched for\n     * @param  {SearchByTextOptions} options? - Optional parameters to the search\n     * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n     */\n    AmazonLocationServiceProvider.prototype.searchForSuggestions = function (text, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, locationServiceInput, client, command, response, error_2, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        locationServiceInput = {\n                            Text: text,\n                            IndexName: this._config.search_indices.default,\n                        };\n                        /**\n                         * Map search options to Amazon Location Service input object\n                         */\n                        if (options) {\n                            locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        command = new SearchPlaceIndexForSuggestionsCommand(locationServiceInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_2 = _a.sent();\n                        logger.debug(error_2);\n                        throw error_2;\n                    case 5:\n                        results = response.Results.map(function (result) { return ({\n                            text: result.Text,\n                            placeId: result.PlaceId,\n                        }); });\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    AmazonLocationServiceProvider.prototype._verifyPlaceId = function (placeId) {\n        if (placeId.length === 0) {\n            var errorString = 'PlaceId cannot be an empty string.';\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.prototype.searchByPlaceId = function (placeId, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, client, searchByPlaceIdInput, command, response, error_3, place;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        this._verifyPlaceId(placeId);\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        searchByPlaceIdInput = {\n                            PlaceId: placeId,\n                            IndexName: (options === null || options === void 0 ? void 0 : options.searchIndexName) || this._config.search_indices.default,\n                        };\n                        command = new GetPlaceCommand(searchByPlaceIdInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_3 = _a.sent();\n                        logger.debug(error_3);\n                        throw error_3;\n                    case 5:\n                        place = response.Place;\n                        if (place) {\n                            return [2 /*return*/, camelcaseKeys(place, { deep: true })];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Reverse geocoding search via a coordinate point on the map\n     * @param coordinates - Coordinates array for the search input\n     * @param options - Options parameters for the search\n     * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n     */\n    AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, locationServiceInput, client, command, response, error_4, PascalResults, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        locationServiceInput = {\n                            Position: coordinates,\n                            IndexName: this._config.search_indices.default,\n                        };\n                        if (options) {\n                            if (options.searchIndexName) {\n                                locationServiceInput.IndexName = options.searchIndexName;\n                            }\n                            locationServiceInput.MaxResults = options.maxResults;\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_4 = _a.sent();\n                        logger.debug(error_4);\n                        throw error_4;\n                    case 5:\n                        PascalResults = response.Results.map(function (result) { return result.Place; });\n                        results = camelcaseKeys(PascalResults[0], {\n                            deep: true,\n                        });\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Create geofences inside of a geofence collection\n     * @param geofences - Array of geofence objects to create\n     * @param options? - Optional parameters for creating geofences\n     * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n     *   successes: list of geofences successfully created\n     *   errors: list of geofences that failed to create\n     */\n    AmazonLocationServiceProvider.prototype.saveGeofences = function (geofences, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, PascalGeofences, results, geofenceBatches, apiLimit;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (geofences.length < 1) {\n                            throw new Error('Geofence input array is empty');\n                        }\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        // Verify geofence collection exists in aws-config.js\n                        try {\n                            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n                        }\n                        catch (error) {\n                            logger.debug(error);\n                            throw error;\n                        }\n                        validateGeofencesInput(geofences);\n                        PascalGeofences = geofences.map(function (_a) {\n                            var geofenceId = _a.geofenceId, polygon = _a.geometry.polygon;\n                            return {\n                                GeofenceId: geofenceId,\n                                Geometry: {\n                                    Polygon: polygon,\n                                },\n                            };\n                        });\n                        results = {\n                            successes: [],\n                            errors: [],\n                        };\n                        geofenceBatches = [];\n                        while (PascalGeofences.length > 0) {\n                            apiLimit = 10;\n                            geofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n                        }\n                        return [4 /*yield*/, Promise.all(geofenceBatches.map(function (batch) { return __awaiter(_this, void 0, void 0, function () {\n                                var response, error_5;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            _a.trys.push([0, 2, , 3]);\n                                            return [4 /*yield*/, this._AmazonLocationServiceBatchPutGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n                                        case 1:\n                                            response = _a.sent();\n                                            return [3 /*break*/, 3];\n                                        case 2:\n                                            error_5 = _a.sent();\n                                            // If the API call fails, add the geofences to the errors array and move to next batch\n                                            batch.forEach(function (geofence) {\n                                                results.errors.push({\n                                                    geofenceId: geofence.GeofenceId,\n                                                    error: {\n                                                        code: 'APIConnectionError',\n                                                        message: error_5.message,\n                                                    },\n                                                });\n                                            });\n                                            return [2 /*return*/];\n                                        case 3:\n                                            // Push all successes to results\n                                            response.Successes.forEach(function (success) {\n                                                var GeofenceId = success.GeofenceId, CreateTime = success.CreateTime, UpdateTime = success.UpdateTime;\n                                                results.successes.push({\n                                                    geofenceId: GeofenceId,\n                                                    createTime: CreateTime,\n                                                    updateTime: UpdateTime,\n                                                });\n                                            });\n                                            // Push all errors to results\n                                            response.Errors.forEach(function (error) {\n                                                var _a = error.Error, Code = _a.Code, Message = _a.Message, GeofenceId = error.GeofenceId;\n                                                results.errors.push({\n                                                    error: {\n                                                        code: Code,\n                                                        message: Message,\n                                                    },\n                                                    geofenceId: GeofenceId,\n                                                });\n                                            });\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); }))];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Get geofence from a geofence collection\n     * @param geofenceId:string\n     * @param options?: Optional parameters for getGeofence\n     * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n     */\n    AmazonLocationServiceProvider.prototype.getGeofence = function (geofenceId, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, client, commandInput, command, response, error_6, GeofenceId, CreateTime, UpdateTime, Status, Geometry, geofence;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        // Verify geofence collection exists in aws-config.js\n                        try {\n                            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n                        }\n                        catch (error) {\n                            logger.debug(error);\n                            throw error;\n                        }\n                        validateGeofenceId(geofenceId);\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        commandInput = {\n                            GeofenceId: geofenceId,\n                            CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default,\n                        };\n                        command = new GetGeofenceCommand(commandInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_6 = _a.sent();\n                        logger.debug(error_6);\n                        throw error_6;\n                    case 5:\n                        GeofenceId = response.GeofenceId, CreateTime = response.CreateTime, UpdateTime = response.UpdateTime, Status = response.Status, Geometry = response.Geometry;\n                        geofence = {\n                            createTime: CreateTime,\n                            geofenceId: GeofenceId,\n                            geometry: {\n                                polygon: Geometry.Polygon,\n                            },\n                            status: Status,\n                            updateTime: UpdateTime,\n                        };\n                        return [2 /*return*/, geofence];\n                }\n            });\n        });\n    };\n    /**\n     * List geofences from a geofence collection\n     * @param  options?: ListGeofenceOptions\n     * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n     *   entries: list of geofences - 100 geofences are listed per page\n     *   nextToken: token for next page of geofences\n     */\n    AmazonLocationServiceProvider.prototype.listGeofences = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, client, listGeofencesInput, command, response, error_7, NextToken, Entries, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        // Verify geofence collection exists in aws-config.js\n                        try {\n                            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n                        }\n                        catch (error) {\n                            logger.debug(error);\n                            throw error;\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        listGeofencesInput = {\n                            NextToken: options === null || options === void 0 ? void 0 : options.nextToken,\n                            CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default,\n                        };\n                        command = new ListGeofencesCommand(listGeofencesInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_7 = _a.sent();\n                        logger.debug(error_7);\n                        throw error_7;\n                    case 5:\n                        NextToken = response.NextToken, Entries = response.Entries;\n                        results = {\n                            entries: Entries.map(function (_a) {\n                                var GeofenceId = _a.GeofenceId, CreateTime = _a.CreateTime, UpdateTime = _a.UpdateTime, Status = _a.Status, Polygon = _a.Geometry.Polygon;\n                                return {\n                                    geofenceId: GeofenceId,\n                                    createTime: CreateTime,\n                                    updateTime: UpdateTime,\n                                    status: Status,\n                                    geometry: {\n                                        polygon: Polygon,\n                                    },\n                                };\n                            }),\n                            nextToken: NextToken,\n                        };\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Delete geofences from a geofence collection\n     * @param geofenceIds: string|string[]\n     * @param options?: GeofenceOptions\n     * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n     *  successes: list of geofences successfully deleted\n     *  errors: list of geofences that failed to delete\n     */\n    AmazonLocationServiceProvider.prototype.deleteGeofences = function (geofenceIds, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, badGeofenceIds, results, geofenceIdBatches, count;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (geofenceIds.length < 1) {\n                            throw new Error('GeofenceId input array is empty');\n                        }\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n                        badGeofenceIds = geofenceIds.filter(function (geofenceId) {\n                            try {\n                                validateGeofenceId(geofenceId);\n                            }\n                            catch (error) {\n                                return true;\n                            }\n                        });\n                        if (badGeofenceIds.length > 0) {\n                            throw new Error(\"Invalid geofence ids: \" + badGeofenceIds.join(', '));\n                        }\n                        results = {\n                            successes: [],\n                            errors: [],\n                        };\n                        geofenceIdBatches = [];\n                        count = 0;\n                        while (count < geofenceIds.length) {\n                            geofenceIdBatches.push(geofenceIds.slice(count, (count += 10)));\n                        }\n                        return [4 /*yield*/, Promise.all(geofenceIdBatches.map(function (batch) { return __awaiter(_this, void 0, void 0, function () {\n                                var response, error_8, badGeofenceIds;\n                                var _a;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            _b.trys.push([0, 2, , 3]);\n                                            return [4 /*yield*/, this._AmazonLocationServiceBatchDeleteGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n                                        case 1:\n                                            response = _b.sent();\n                                            return [3 /*break*/, 3];\n                                        case 2:\n                                            error_8 = _b.sent();\n                                            // If the API call fails, add the geofences to the errors array and move to next batch\n                                            batch.forEach(function (geofenceId) {\n                                                var errorObject = {\n                                                    geofenceId: geofenceId,\n                                                    error: {\n                                                        code: error_8.message,\n                                                        message: error_8.message,\n                                                    },\n                                                };\n                                                results.errors.push(errorObject);\n                                            });\n                                            return [2 /*return*/];\n                                        case 3:\n                                            badGeofenceIds = response.Errors.map(function (_a) {\n                                                var geofenceId = _a.geofenceId;\n                                                return geofenceId;\n                                            });\n                                            (_a = results.successes).push.apply(_a, __spread(batch.filter(function (Id) { return !badGeofenceIds.includes(Id); })));\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); }))];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, cred, error_9;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _a.sent();\n                        if (!credentials)\n                            return [2 /*return*/, false];\n                        cred = Credentials.shear(credentials);\n                        logger.debug('Set credentials for storage. Credentials are:', cred);\n                        this._config.credentials = cred;\n                        return [2 /*return*/, true];\n                    case 2:\n                        error_9 = _a.sent();\n                        logger.debug('Ensure credentials error. Credentials are:', error_9);\n                        return [2 /*return*/, false];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n        if (!this._config.maps) {\n            var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n        if (!this._config.maps.default) {\n            var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n        if ((!this._config.search_indices || !this._config.search_indices.default) &&\n            !optionalSearchIndex) {\n            var errorString = 'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.prototype._verifyGeofenceCollections = function (optionalGeofenceCollectionName) {\n        if ((!this._config.geofenceCollections ||\n            !this._config.geofenceCollections.default) &&\n            !optionalGeofenceCollectionName) {\n            var errorString = 'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchPutGeofenceCall = function (PascalGeofences, collectionName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var geofenceInput, client, command, response, error_10;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        geofenceInput = {\n                            Entries: PascalGeofences,\n                            CollectionName: collectionName || this._config.geofenceCollections.default,\n                        };\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        command = new BatchPutGeofenceCommand(geofenceInput);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 2:\n                        response = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_10 = _a.sent();\n                        throw error_10;\n                    case 4: return [2 /*return*/, response];\n                }\n            });\n        });\n    };\n    AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchDeleteGeofenceCall = function (geofenceIds, collectionName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var deleteGeofencesInput, client, command, response, error_11;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        deleteGeofencesInput = {\n                            GeofenceIds: geofenceIds,\n                            CollectionName: collectionName || this._config.geofenceCollections.default,\n                        };\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 2:\n                        response = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_11 = _a.sent();\n                        throw error_11;\n                    case 4: return [2 /*return*/, response];\n                }\n            });\n        });\n    };\n    AmazonLocationServiceProvider.CATEGORY = 'Geo';\n    AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n    return AmazonLocationServiceProvider;\n}());\nexport { AmazonLocationServiceProvider };\n//# sourceMappingURL=AmazonLocationServiceProvider.js.map"]},"metadata":{},"sourceType":"module"}