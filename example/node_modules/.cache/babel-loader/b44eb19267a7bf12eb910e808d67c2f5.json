{"ast":null,"code":"var ModelSortPredicateCreator = /** @class */function () {\n  function ModelSortPredicateCreator() {}\n  ModelSortPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function get(_target, propertyKey, receiver) {\n        var field = propertyKey;\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n        var result = function result(sortDirection) {\n          ModelSortPredicateCreator.sortPredicateGroupsMap.get(receiver).push({\n            field: field,\n            sortDirection: sortDirection\n          });\n          return receiver;\n        };\n        return result;\n      }\n    });\n    ModelSortPredicateCreator.sortPredicateGroupsMap.set(predicate, []);\n    return predicate;\n  };\n  ModelSortPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelSortPredicateCreator.sortPredicateGroupsMap.has(predicate);\n  };\n  ModelSortPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n    if (throwOnInvalid && !ModelSortPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n    return ModelSortPredicateCreator.sortPredicateGroupsMap.get(predicate);\n  };\n  // transforms cb-style predicate into Proxy\n  ModelSortPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n    return existing(ModelSortPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n  ModelSortPredicateCreator.sortPredicateGroupsMap = new WeakMap();\n  return ModelSortPredicateCreator;\n}();\nexport { ModelSortPredicateCreator };","map":{"version":3,"sources":["../../src/predicates/sort.ts"],"names":[],"mappings":"AASA,IAAA,yBAAA,GAAA,aAAA,YAAA;EAAA,SAAA,yBAAA,GAAA,CA2EA;EArEgB,yBAAA,CAAA,sBAAsB,GAArC,UACC,eAA4B,EAAA;IAEpB,IAAA,SAAA,GAAA,eAAA,CAAA,IAAe;IACvB,IAAM,UAAU,GAAG,IAAI,GAAG,CAAU,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;IAExE,IAAI,OAAuC;IAC3C,IAAM,SAAS,GAAG,IAAI,KAAK,CAC1B,CAAA,CAAsB,EACrB,OAAO,GAAG;MACV,GAAG,EAAH,aAAI,OAAO,EAAE,WAAW,EAAE,QAA0B,EAAA;QACnD,IAAM,KAAK,GAAG,WAAsB;QAEpC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;UAC3B,MAAM,IAAI,KAAK,CACd,kCAAA,GAAmC,KAAK,GAAA,WAAA,GAAY,SAAW,CAC/D;QACD;QAED,IAAM,MAAM,GAAG,SAAT,MAAM,CAAI,aAA4B,EAAA;UAC3C,yBAAyB,CAAC,sBAAsB,CAC9C,GAAG,CAAC,QAAQ,CAAC,CACb,IAAI,CAAC;YAAE,KAAK,EAAA,KAAA;YAAE,aAAa,EAAA;UAAA,CAAE,CAAC;UAEhC,OAAO,QAAQ;QAChB,CAAC;QACD,OAAO,MAAM;MACd;KACA,CACD;IAED,yBAAyB,CAAC,sBAAsB,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC;IAEnE,OAAO,SAAS;EACjB,CAAC;EAEM,yBAAA,CAAA,gBAAgB,GAAvB,UACC,SAAc,EAAA;IAEd,OAAO,yBAAyB,CAAC,sBAAsB,CAAC,GAAG,CAAC,SAAS,CAAC;EACvE,CAAC;EAEM,yBAAA,CAAA,aAAa,GAApB,UACC,SAA2B,EAC3B,cAA8B,EAAA;IAA9B,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;MAAA,cAAA,GAAA,IAA8B;IAAA;IAE9B,IACC,cAAc,IACd,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,SAAS,CAAC,EACrD;MACD,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;IAC7C;IAED,OAAO,yBAAyB,CAAC,sBAAsB,CAAC,GAAG,CAAC,SAAS,CAAC;EACvE,CAAC;EAED;EACO,yBAAA,CAAA,kBAAkB,GAAzB,UACC,eAA4B,EAC5B,QAAkC,EAAA;IAElC,IAAI,CAAC,QAAQ,IAAI,CAAC,eAAe,EAAE;MAClC,OAAO,SAAS;IAChB;IAED,OAAO,QAAQ,CACd,yBAAyB,CAAC,sBAAsB,CAAC,eAAe,CAAC,CACjE;EACF,CAAC;EAzEc,yBAAA,CAAA,sBAAsB,GAAG,IAAI,OAAO,EAGhD;EAuEJ,OAAA,yBAAC;CAAA,EAAA;SA3EY,yBAAyB","sourceRoot":"","sourcesContent":["var ModelSortPredicateCreator = /** @class */ (function () {\n    function ModelSortPredicateCreator() {\n    }\n    ModelSortPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n        var modelName = modelDefinition.name;\n        var fieldNames = new Set(Object.keys(modelDefinition.fields));\n        var handler;\n        var predicate = new Proxy({}, (handler = {\n            get: function (_target, propertyKey, receiver) {\n                var field = propertyKey;\n                if (!fieldNames.has(field)) {\n                    throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n                }\n                var result = function (sortDirection) {\n                    ModelSortPredicateCreator.sortPredicateGroupsMap\n                        .get(receiver)\n                        .push({ field: field, sortDirection: sortDirection });\n                    return receiver;\n                };\n                return result;\n            },\n        }));\n        ModelSortPredicateCreator.sortPredicateGroupsMap.set(predicate, []);\n        return predicate;\n    };\n    ModelSortPredicateCreator.isValidPredicate = function (predicate) {\n        return ModelSortPredicateCreator.sortPredicateGroupsMap.has(predicate);\n    };\n    ModelSortPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n        if (throwOnInvalid === void 0) { throwOnInvalid = true; }\n        if (throwOnInvalid &&\n            !ModelSortPredicateCreator.isValidPredicate(predicate)) {\n            throw new Error('The predicate is not valid');\n        }\n        return ModelSortPredicateCreator.sortPredicateGroupsMap.get(predicate);\n    };\n    // transforms cb-style predicate into Proxy\n    ModelSortPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n        if (!existing || !modelDefinition) {\n            return undefined;\n        }\n        return existing(ModelSortPredicateCreator.createPredicateBuilder(modelDefinition));\n    };\n    ModelSortPredicateCreator.sortPredicateGroupsMap = new WeakMap();\n    return ModelSortPredicateCreator;\n}());\nexport { ModelSortPredicateCreator };\n//# sourceMappingURL=sort.js.map"]},"metadata":{},"sourceType":"module"}