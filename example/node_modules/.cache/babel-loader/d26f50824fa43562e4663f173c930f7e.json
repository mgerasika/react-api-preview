{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartContentModerationRequest, StartContentModerationResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartContentModerationCommand, serializeAws_json1_1StartContentModerationCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p> Starts asynchronous detection of unsafe content in a stored video.</p>\n *          <p>Amazon Rekognition Video can moderate content in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n *       and the filename of the video. <code>StartContentModeration</code>\n *         returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis.\n *         When unsafe content analysis is finished, Amazon Rekognition Video publishes a completion status\n *         to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p>\n *         <p>To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n *         topic is <code>SUCCEEDED</code>. If so, call <a>GetContentModeration</a> and pass the job identifier\n *         (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n *\n *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n */\nvar StartContentModerationCommand = /** @class */function (_super) {\n  __extends(StartContentModerationCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function StartContentModerationCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  StartContentModerationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"StartContentModerationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartContentModerationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartContentModerationResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  StartContentModerationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartContentModerationCommand(input, context);\n  };\n  StartContentModerationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartContentModerationCommand(output, context);\n  };\n  return StartContentModerationCommand;\n}($Command);\nexport { StartContentModerationCommand };","map":{"version":3,"sources":["../../../commands/StartContentModerationCommand.ts"],"names":[],"mappings":";AACA,SAAS,6BAA6B,EAAE,8BAA8B,QAAQ,oBAAoB;AAClG,SACE,mDAAmD,EACnD,iDAAiD,QAC5C,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;AAYG;AACH,IAAA,6BAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAmD,SAAA,CAAA,6BAAA,EAAA,MAAA,CAAA;EAKjD;EACA;EAEA,SAAA,6BAAA,CAAqB,KAAyC,EAAA;IAA9D,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,6BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA8C,EAC9C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,mBAAmB;IACtC,IAAM,WAAW,GAAG,+BAA+B;IACnD,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,6BAA6B,CAAC,kBAAkB;MACzE,wBAAwB,EAAE,8BAA8B,CAAC;KAC1D;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,6BAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAAyC,EAAE,OAAuB,EAAA;IAClF,OAAO,iDAAiD,CAAC,KAAK,EAAE,OAAO,CAAC;EAC1E,CAAC;EAEO,6BAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,mDAAmD,CAAC,MAAM,EAAE,OAAO,CAAC;EAC7E,CAAC;EAIH,OAAA,6BAAC;AAAD,CAAC,CAtDkD,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { StartContentModerationRequest, StartContentModerationResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartContentModerationCommand, serializeAws_json1_1StartContentModerationCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p> Starts asynchronous detection of unsafe content in a stored video.</p>\n *          <p>Amazon Rekognition Video can moderate content in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n *       and the filename of the video. <code>StartContentModeration</code>\n *         returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis.\n *         When unsafe content analysis is finished, Amazon Rekognition Video publishes a completion status\n *         to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p>\n *         <p>To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n *         topic is <code>SUCCEEDED</code>. If so, call <a>GetContentModeration</a> and pass the job identifier\n *         (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n *\n *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n */\nvar StartContentModerationCommand = /** @class */ (function (_super) {\n    __extends(StartContentModerationCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function StartContentModerationCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    StartContentModerationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"StartContentModerationCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: StartContentModerationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: StartContentModerationResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    StartContentModerationCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1StartContentModerationCommand(input, context);\n    };\n    StartContentModerationCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1StartContentModerationCommand(output, context);\n    };\n    return StartContentModerationCommand;\n}($Command));\nexport { StartContentModerationCommand };\n//# sourceMappingURL=StartContentModerationCommand.js.map"]},"metadata":{},"sourceType":"module"}