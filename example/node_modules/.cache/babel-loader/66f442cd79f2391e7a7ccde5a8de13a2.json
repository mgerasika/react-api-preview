{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nclass LinkItem {\n  name = '';\n  formattedName = '';\n  parent = undefined;\n  _canFormatRouteName = true;\n  toJSON() {\n    return this.toString();\n  }\n  constructor(name, parent,\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  routes, canFormatRouteName) {\n    this.name = name;\n    this.formattedName = canFormatRouteName ? formatRouteName(name) : name;\n    this.parent = parent;\n    this._canFormatRouteName = canFormatRouteName;\n    if (routes && typeof routes === 'object') {\n      const keys = Object.keys(routes);\n      keys.forEach(key => {\n        const value = routes[key];\n        const self = this;\n        if (typeof value === 'function' && key.startsWith('external_')) {\n          self[key] = (arg1, arg2, arg3) => {\n            return value(arg1, arg2, arg3);\n          };\n        } else if (typeof value === 'function') {\n          const subRoutes = value();\n          self[key] = arg => {\n            //if argument not passed into function - then add ':' symbol before key.\n            return new LinkItem(arg || ':' + key, this, subRoutes, false);\n          };\n        } else if (value instanceof LinkItem) {\n          self[key] = value.name;\n        } else {\n          self[key] = new LinkItem(key, this, value, true);\n        }\n      });\n    }\n  }\n  toString() {\n    const name = this._canFormatRouteName ? formatRouteName(this.name) : this.name;\n    return this.parent ? this.parent + '/' + name : name;\n  }\n}\nconst formatRouteName = str => {\n  if (str === 'index') {\n    return '';\n  }\n  return str.toString().replace(/([A-Z])/g, str => '-' + str.toLowerCase());\n};\nfunction makeLinks(routes) {\n  return new LinkItem('', undefined, routes, true);\n}\nconst EMPTY_LINK_ITEM = {};\nexports.EMPTY_LINK_ITEM = EMPTY_LINK_ITEM;\nexports.LinkItem = LinkItem;\nexports.makeLinks = makeLinks;","map":{"version":3,"sources":["../../../src/utils/make-links.util.ts"],"names":["LinkItem","name","formattedName","parent","undefined","_canFormatRouteName","toJSON","toString","constructor","routes","canFormatRouteName","formatRouteName","keys","Object","forEach","key","value","self","startsWith","arg1","arg2","arg3","subRoutes","arg","str","replace","toLowerCase","makeLinks","EMPTY_LINK_ITEM"],"mappings":";;;;;AAOO,MAAMA,QAAQ,CAAsB;EAChCC,IAAI,GAAG,EAAE;EACTC,aAAa,GAAG,EAAE;EAClBC,MAAM,GAAyBC,SAAS;EACvCC,mBAAmB,GAAI,IAAI;EAEnCC,MAAM,GAAW;IACb,OAAO,IAAI,CAACC,QAAQ,EAAE;EAC1B;EAEAC,WAAW,CACPP,IAAY,EACZE,MAA6B;EAC7B;EACAM,MAAgB,EAChBC,kBAA4B,EAC9B;IACE,IAAI,CAACT,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,aAAa,GAAGQ,kBAAkB,GAAGC,eAAe,CAACV,IAAI,CAAC,GAAGA,IAAI;IAEtE,IAAI,CAACE,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,mBAAmB,GAAGK,kBAAkB;IAC7C,IAAID,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MACtC,MAAMG,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACH,MAAM,CAAC;MAChCG,IAAI,CAACE,OAAO,CAAEC,GAAG,IAAK;QAClB,MAAMC,KAAK,GAAGP,MAAM,CAACM,GAAG,CAAC;QACzB,MAAME,IAAI,GAAG,IAA8B;QAC3C,IAAI,OAAOD,KAAK,KAAK,UAAU,IAAID,GAAG,CAACG,UAAU,CAAC,WAAW,CAAC,EAAE;UAC5DD,IAAI,CAACF,GAAG,CAAC,GAAG,CAACI,IAAY,EAAEC,IAAY,EAAEC,IAAY,KAAe;YAChE,OAAOL,KAAK,CAACG,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC;WACjC;QACL,CAAC,MAAM,IAAI,OAAOL,KAAK,KAAK,UAAU,EAAE;UACpC,MAAMM,SAAS,GAAGN,KAAK,EAAE;UACzBC,IAAI,CAACF,GAAG,CAAC,GAAIQ,GAAW,IAAe;YACnC;YACA,OAAO,IAAIvB,QAAQ,CAACuB,GAAG,IAAI,GAAG,GAAGR,GAAG,EAAE,IAAI,EAAEO,SAAS,EAAE,KAAK,CAAC;WAChE;QACL,CAAC,MAAM,IAAIN,KAAK,YAAYhB,QAAQ,EAAE;UAClCiB,IAAI,CAACF,GAAG,CAAC,GAAGC,KAAK,CAACf,IAAI;QAC1B,CAAC,MAAM;UACHgB,IAAI,CAACF,GAAG,CAAC,GAAG,IAAIf,QAAQ,CAACe,GAAG,EAAE,IAAI,EAAEC,KAAK,EAAE,IAAI,CAAC;QACpD;MACJ,CAAC,CAAC;IACN;EACJ;EAEAT,QAAQ,GAAW;IACf,MAAMN,IAAI,GAAG,IAAI,CAACI,mBAAmB,GAAGM,eAAe,CAAC,IAAI,CAACV,IAAI,CAAC,GAAG,IAAI,CAACA,IAAI;IAC9E,OAAO,IAAI,CAACE,MAAM,GAAG,IAAI,CAACA,MAAM,GAAG,GAAG,GAAGF,IAAI,GAAGA,IAAI;EACxD;AACJ;AAEA,MAAMU,eAAe,GAAIa,GAAW,IAAa;EAC7C,IAAIA,GAAG,KAAK,OAAO,EAAE;IACjB,OAAO,EAAE;EACb;EACA,OAAOA,GAAG,CAACjB,QAAQ,EAAE,CAACkB,OAAO,CAAC,UAAU,EAAGD,GAAG,IAAK,GAAG,GAAGA,GAAG,CAACE,WAAW,EAAE,CAAC;AAC/E,CAAC;AAEM,SAASC,SAAS,CAAIlB,MAAS,EAAK;EACvC,OAAO,IAAIT,QAAQ,CAAC,EAAE,EAAEI,SAAS,EAAEK,MAAM,EAAE,IAAI,CAAC;AACpD;AAEamB,MAAAA,eAA0B,GAAG,CAAA,CAAA","sourcesContent":["import { IDictionary } from '@common/interfaces/dictionary.interface';\n\nexport interface ILinkItem {\n    toString: () => string;\n    formattedName?: string;\n}\n\nexport class LinkItem implements ILinkItem {\n    public name = '';\n    public formattedName = '';\n    public parent: LinkItem | undefined = undefined;\n    private _canFormatRouteName? = true;\n\n    toJSON(): string {\n        return this.toString();\n    }\n\n    constructor(\n        name: string,\n        parent?: LinkItem | undefined,\n        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n        routes?: unknown,\n        canFormatRouteName?: boolean,\n    ) {\n        this.name = name;\n        this.formattedName = canFormatRouteName ? formatRouteName(name) : name;\n\n        this.parent = parent;\n        this._canFormatRouteName = canFormatRouteName;\n        if (routes && typeof routes === 'object') {\n            const keys = Object.keys(routes);\n            keys.forEach((key) => {\n                const value = routes[key];\n                const self = this as unknown as IDictionary;\n                if (typeof value === 'function' && key.startsWith('external_')) {\n                    self[key] = (arg1: string, arg2: string, arg3: string): LinkItem => {\n                        return value(arg1, arg2, arg3);\n                    };\n                } else if (typeof value === 'function') {\n                    const subRoutes = value();\n                    self[key] = (arg: string): LinkItem => {\n                        //if argument not passed into function - then add ':' symbol before key.\n                        return new LinkItem(arg || ':' + key, this, subRoutes, false);\n                    };\n                } else if (value instanceof LinkItem) {\n                    self[key] = value.name;\n                } else {\n                    self[key] = new LinkItem(key, this, value, true);\n                }\n            });\n        }\n    }\n\n    toString(): string {\n        const name = this._canFormatRouteName ? formatRouteName(this.name) : this.name;\n        return this.parent ? this.parent + '/' + name : name;\n    }\n}\n\nconst formatRouteName = (str: string): string => {\n    if (str === 'index') {\n        return '';\n    }\n    return str.toString().replace(/([A-Z])/g, (str) => '-' + str.toLowerCase());\n};\n\nexport function makeLinks<T>(routes: T): T {\n    return new LinkItem('', undefined, routes, true) as unknown as T;\n}\n\nexport const EMPTY_LINK_ITEM: ILinkItem = {} as unknown as ILinkItem;\n"]},"metadata":{},"sourceType":"script"}