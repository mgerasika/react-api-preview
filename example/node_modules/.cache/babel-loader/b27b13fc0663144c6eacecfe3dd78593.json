{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IncreaseStreamRetentionPeriodInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand, serializeAws_json1_1IncreaseStreamRetentionPeriodCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Increases the Kinesis data stream's retention period, which is the length of time\n *             data records are accessible after they are added to the stream. The maximum value of a\n *             stream's retention period is 168 hours (7 days).</p>\n *         <p>If you choose a longer stream retention period, this operation increases the time\n *             period during which records that have not yet expired are accessible. However, it does\n *             not make previous, expired data (older than the stream's previous retention period)\n *             accessible after the operation has been called. For example, if a stream's retention\n *             period is set to 24 hours and is increased to 168 hours, any data that is older than 24\n *             hours remains inaccessible to consumer applications.</p>\n */\nvar IncreaseStreamRetentionPeriodCommand = /** @class */function (_super) {\n  __extends(IncreaseStreamRetentionPeriodCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function IncreaseStreamRetentionPeriodCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  IncreaseStreamRetentionPeriodCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"IncreaseStreamRetentionPeriodCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: IncreaseStreamRetentionPeriodInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  IncreaseStreamRetentionPeriodCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1IncreaseStreamRetentionPeriodCommand(input, context);\n  };\n  IncreaseStreamRetentionPeriodCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand(output, context);\n  };\n  return IncreaseStreamRetentionPeriodCommand;\n}($Command);\nexport { IncreaseStreamRetentionPeriodCommand };","map":{"version":3,"sources":["../../../commands/IncreaseStreamRetentionPeriodCommand.ts"],"names":[],"mappings":";AACA,SAAS,kCAAkC,QAAQ,oBAAoB;AACvE,SACE,0DAA0D,EAC1D,wDAAwD,QACnD,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;AAUG;AACH,IAAA,oCAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA0D,SAAA,CAAA,oCAAA,EAAA,MAAA,CAAA;EAKxD;EACA;EAEA,SAAA,oCAAA,CAAqB,KAAgD,EAAA;IAArE,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,oCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA0C,EAC1C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,eAAe;IAClC,IAAM,WAAW,GAAG,sCAAsC;IAC1D,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,kCAAkC,CAAC,kBAAkB;MAC9E,wBAAwB,EAAE,kCAAC,MAAW,EAAA;QAAK,OAAA,MAAM;MAAN;KAC5C;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,oCAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAAgD,EAAE,OAAuB,EAAA;IACzF,OAAO,wDAAwD,CAAC,KAAK,EAAE,OAAO,CAAC;EACjF,CAAC;EAEO,oCAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UACE,MAAsB,EACtB,OAAuB,EAAA;IAEvB,OAAO,0DAA0D,CAAC,MAAM,EAAE,OAAO,CAAC;EACpF,CAAC;EAIH,OAAA,oCAAC;AAAD,CAAC,CAzDyD,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { IncreaseStreamRetentionPeriodInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand, serializeAws_json1_1IncreaseStreamRetentionPeriodCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Increases the Kinesis data stream's retention period, which is the length of time\n *             data records are accessible after they are added to the stream. The maximum value of a\n *             stream's retention period is 168 hours (7 days).</p>\n *         <p>If you choose a longer stream retention period, this operation increases the time\n *             period during which records that have not yet expired are accessible. However, it does\n *             not make previous, expired data (older than the stream's previous retention period)\n *             accessible after the operation has been called. For example, if a stream's retention\n *             period is set to 24 hours and is increased to 168 hours, any data that is older than 24\n *             hours remains inaccessible to consumer applications.</p>\n */\nvar IncreaseStreamRetentionPeriodCommand = /** @class */ (function (_super) {\n    __extends(IncreaseStreamRetentionPeriodCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function IncreaseStreamRetentionPeriodCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    IncreaseStreamRetentionPeriodCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"KinesisClient\";\n        var commandName = \"IncreaseStreamRetentionPeriodCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: IncreaseStreamRetentionPeriodInput.filterSensitiveLog,\n            outputFilterSensitiveLog: function (output) { return output; },\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    IncreaseStreamRetentionPeriodCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1IncreaseStreamRetentionPeriodCommand(input, context);\n    };\n    IncreaseStreamRetentionPeriodCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand(output, context);\n    };\n    return IncreaseStreamRetentionPeriodCommand;\n}($Command));\nexport { IncreaseStreamRetentionPeriodCommand };\n//# sourceMappingURL=IncreaseStreamRetentionPeriodCommand.js.map"]},"metadata":{},"sourceType":"module"}