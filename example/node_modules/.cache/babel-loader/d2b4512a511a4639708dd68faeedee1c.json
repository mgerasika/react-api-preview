{"ast":null,"code":"import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { css, jsx, Global } from '@emotion/react';\nimport { THEME } from '@common/constants/theme.constant';\nimport { Field } from '@common/general-ui/field/field.component';\nimport { Readonly } from '@common/general-ui/readonly.component';\nimport { css as css$1 } from '@emotion/css';\nimport { TreeSelect as TreeSelect$1 } from 'antd';\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n  return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\nconst {\n  TreeNode\n} = TreeSelect$1;\nconst TreeSelectOption = Option;\nvar _ref = process.env.NODE_ENV === \"production\" ? {\n  name: \"1ggwbny\",\n  styles: \".ant-select-dropdown{box-shadow:none;}\"\n} : {\n  name: \"r87mrj-TreeSelect\",\n  styles: \".ant-select-dropdown{box-shadow:none;};label:TreeSelect;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref2 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bjn8wh\",\n  styles: \"position:relative\"\n} : {\n  name: \"55xurb-TreeSelect\",\n  styles: \"position:relative;label:TreeSelect;\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref3 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bjn8wh\",\n  styles: \"position:relative\"\n} : {\n  name: \"55xurb-TreeSelect\",\n  styles: \"position:relative;label:TreeSelect;\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nfunction TreeSelect(props) {\n  const {\n    onChange,\n    onBlur,\n    onSearch,\n    allowCustomValue,\n    options = [],\n    defaultValue,\n    value,\n    name,\n    showSearch = false\n  } = props;\n  const [internalOptions, setInternalOptions] = useState(options || []);\n  useEffect(() => {\n    if (options !== undefined) {\n      setInternalOptions(options);\n    }\n  }, [options]);\n  const renderTreeNode = useCallback(o => {\n    return o.subOptions && o.subOptions.length ? jsx(TreeNode, {\n      \"data-parent-testid\": 'field-' + props.name,\n      key: o.value,\n      value: o.value,\n      disabled: o.disabled,\n      selectable: false,\n      title: o.label\n    }, o.subOptions.map(option => renderTreeNode(option))) : jsx(TreeNode, {\n      \"data-parent-testid\": 'field-' + props.name,\n      key: o.value,\n      value: o.value,\n      disabled: o.disabled,\n      title: o.label\n    });\n  }, [props.name]);\n  const handleChange = useCallback(value => {\n    onChange && onChange({\n      name,\n      value\n    });\n  }, [onChange, name]);\n  const handleBlur = useCallback(e => {\n    onBlur && onBlur(e);\n  }, [onBlur]);\n  const handleFocus = useCallback(() => {\n    // consoleService.log('focus');\n  }, []);\n  const handleSearch = useCallback(str => {\n    onSearch && onSearch(str);\n    setInternalOptions([{\n      label: str,\n      value: str,\n      data: str,\n      isVisible: true\n    }, ...(options || [])]);\n  }, [onSearch, options]);\n  const handleDropDownVisibilityChange = useCallback(open => {\n    if (allowCustomValue && open) {\n      setInternalOptions([...options]);\n    }\n  }, [allowCustomValue, options]);\n  const optionsCache = useMemo(() => {\n    const res = (props?.options || []).reduce((acc, el) => {\n      acc[el.value] = el.label;\n      return acc;\n    }, {});\n    return res;\n  }, [props.options]);\n  const handleFilter = useCallback(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (input, option) => {\n    return optionsCache[option.value]?.toLowerCase().indexOf(input.toLowerCase()) >= 0 || option.value == input;\n  }, [optionsCache]);\n  return jsx(Field, _extends({}, props, {\n    css: _ref2\n  }), jsx(Global, {\n    styles: _ref\n  }), jsx(\"div\", {\n    css: _ref3\n  }, props.readOnly && jsx(Readonly, null), jsx(TreeSelect$1\n  // {...removeUndefined({ onSearch: props.readOnly && !showSearch ? undefined : handleSearch })}\n  , {\n    css: styles.root(!!props.readOnly),\n    allowClear: props.allowClear,\n    tabIndex: props.readOnly ? -1 : 0,\n    dropdownClassName: styles.dropDown,\n    showSearch: !props.readOnly && showSearch,\n    style: {\n      width: '100%'\n    },\n    placeholder: props.placeholder || '',\n    onDropdownVisibleChange: handleDropDownVisibilityChange,\n    defaultValue: defaultValue,\n    value: value,\n    optionFilterProp: \"children\",\n    onSearch: allowCustomValue ? handleSearch : undefined,\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    dropdownRender: prev => props.readOnly ? jsx(React.Fragment, null) : prev,\n    filterTreeNode: handleFilter,\n    treeDefaultExpandAll: true\n  }, internalOptions.map(o => {\n    return props.renderTreeSelectionOption ? jsx(React.Fragment, {\n      key: o.value\n    }, props.renderTreeSelectionOption(o)) : renderTreeNode(o);\n  }))));\n}\nconst styles = {\n  root: readOnly => [/*#__PURE__*/\n  /*#__PURE__*/\n  css(\"display:block;&& .ant-select-selector{height:34px;border:1px solid \", THEME.GRAY, \";border-radius:4px;font-weight:400;display:block;width:100%;transition:border-color ease-in-out 0.15s,box-shadow ease-in-out 0.15s;overflow:hidden;}&.ant-select-focused{&& .ant-select-selector{border:1px solid \", THEME.GREEN, \";outline-color:transparent;outline-style:none;\", THEME.BOX_SHADOW_GREEN, \";}}&& .ant-select-selection-placeholder{margin-top:2px;display:block;}&& .ant-select-selection-item{text-overflow:ellipsis;display:block;line-height:34px;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), readOnly && /*#__PURE__*/\n  /*#__PURE__*/\n  css(\"&& .ant-select-selector,&& .ant-select-selector:hover{border:1px solid \", THEME.READONLY_COLOR, \";}&.ant-select-focused{&& .ant-select-selection-search-input,&& .ant-select-selection-item{color:\", THEME.BLACK, \";}&& .ant-select-selector{border:1px solid \", THEME.READONLY_COLOR, \";outline-color:transparent;outline-style:none;box-shadow:none;}}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyZWUtc2VsZWN0LmNvbXBvbmVudC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBME5lIiwiZmlsZSI6InRyZWUtc2VsZWN0LmNvbXBvbmVudC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUSEVNRSB9IGZyb20gJ0Bjb21tb24vY29uc3RhbnRzL3RoZW1lLmNvbnN0YW50JztcbmltcG9ydCB7IEZpZWxkLCBJRmllbGRQcm9wcyB9IGZyb20gJ0Bjb21tb24vZ2VuZXJhbC11aS9maWVsZC9maWVsZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmVhZG9ubHkgfSBmcm9tICdAY29tbW9uL2dlbmVyYWwtdWkvcmVhZG9ubHkuY29tcG9uZW50JztcbmltcG9ydCB7IElEaWN0aW9uYXJ5IH0gZnJvbSAnQGNvbW1vbi9pbnRlcmZhY2VzL2RpY3Rpb25hcnkuaW50ZXJmYWNlJztcbmltcG9ydCB7IGNzcyBhcyBlbW90aW9uQ1NTIH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCB7IEdsb2JhbCwgU2VyaWFsaXplZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IFRyZWVTZWxlY3QgYXMgQW50ZFRyZWVTZWxlY3QgfSBmcm9tICdhbnRkJztcbmltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAndHdpbi5tYWNybyc7XG5cbmNvbnN0IHsgVHJlZU5vZGUgfSA9IEFudGRUcmVlU2VsZWN0O1xuXG5leHBvcnQgY29uc3QgVHJlZVNlbGVjdE9wdGlvbiA9IE9wdGlvbjtcbmV4cG9ydCB0eXBlIElUcmVlU2VsZWN0Q2hhbmdlSGFuZGxlciA9IChlOiB7IHZhbHVlOiBzdHJpbmc7IG5hbWU6IHN0cmluZyB9KSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIElUcmVlU2VsZWN0UHJvcHM8VE5hbWUgPSBzdHJpbmcsIFRPcHRpb24gPSB1bmtub3duPiBleHRlbmRzIElGaWVsZFByb3BzPHN0cmluZywgVE5hbWU+IHtcbiAgICBvcHRpb25zPzogSVRyZWVTZWxlY3RPcHRpb248VE9wdGlvbj5bXTtcbiAgICBvbkNoYW5nZT86IElUcmVlU2VsZWN0Q2hhbmdlSGFuZGxlcjtcbiAgICBvbkJsdXI/OiAoZTogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgcmVuZGVyVHJlZVNlbGVjdGlvbk9wdGlvbj86IChkYXRhOiBJVHJlZVNlbGVjdE9wdGlvbjxUT3B0aW9uPikgPT4gUmVhY3ROb2RlO1xuICAgIG9uU2VhcmNoPzogKGRhdGE6IHN0cmluZykgPT4gdm9pZDtcbiAgICBzaG93U2VhcmNoPzogYm9vbGVhbjtcbiAgICBhbGxvd0NsZWFyPzogYm9vbGVhbjtcbiAgICBhbGxvd0N1c3RvbVZhbHVlPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVHJlZVNlbGVjdE9wdGlvbjxUID0gdW5rbm93bj4ge1xuICAgIGxhYmVsOiBSZWFjdE5vZGU7XG4gICAgdmFsdWU6IHN0cmluZyB8IG51bWJlcjtcbiAgICBpc1Zpc2libGU/OiBib29sZWFuO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICBkYXRhPzogVDtcbiAgICBzdWJPcHRpb25zPzogSVRyZWVTZWxlY3RPcHRpb248VD5bXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRyZWVTZWxlY3Q8VCA9IHVua25vd24+KHByb3BzOiBJVHJlZVNlbGVjdFByb3BzPHN0cmluZywgVD4pOiBKU1guRWxlbWVudCB7XG4gICAgY29uc3Qge1xuICAgICAgICBvbkNoYW5nZSxcbiAgICAgICAgb25CbHVyLFxuICAgICAgICBvblNlYXJjaCxcbiAgICAgICAgYWxsb3dDdXN0b21WYWx1ZSxcbiAgICAgICAgb3B0aW9ucyA9IFtdLFxuICAgICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBuYW1lLFxuICAgICAgICBzaG93U2VhcmNoID0gZmFsc2UsXG4gICAgfSA9IHByb3BzO1xuICAgIGNvbnN0IFtpbnRlcm5hbE9wdGlvbnMsIHNldEludGVybmFsT3B0aW9uc10gPSB1c2VTdGF0ZTxJVHJlZVNlbGVjdE9wdGlvbjxUPltdPihvcHRpb25zIHx8IFtdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNldEludGVybmFsT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH0sIFtvcHRpb25zXSk7XG5cbiAgICBjb25zdCByZW5kZXJUcmVlTm9kZSA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAobzogSVRyZWVTZWxlY3RPcHRpb248VD4pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBvLnN1Yk9wdGlvbnMgJiYgby5zdWJPcHRpb25zLmxlbmd0aCA/IChcbiAgICAgICAgICAgICAgICA8VHJlZU5vZGVcbiAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJlbnQtdGVzdGlkPXsnZmllbGQtJyArIHByb3BzLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgIGtleT17by52YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e28udmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtvLmRpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RhYmxlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9e28ubGFiZWx9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7by5zdWJPcHRpb25zLm1hcCgob3B0aW9uKSA9PiByZW5kZXJUcmVlTm9kZShvcHRpb24pKX1cbiAgICAgICAgICAgICAgICA8L1RyZWVOb2RlPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8VHJlZU5vZGVcbiAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJlbnQtdGVzdGlkPXsnZmllbGQtJyArIHByb3BzLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgIGtleT17by52YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e28udmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtvLmRpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17by5sYWJlbH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgW3Byb3BzLm5hbWVdLFxuICAgICk7XG5cbiAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIG9uQ2hhbmdlICYmIG9uQ2hhbmdlKHsgbmFtZSwgdmFsdWUgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFtvbkNoYW5nZSwgbmFtZV0sXG4gICAgKTtcblxuICAgIGNvbnN0IGhhbmRsZUJsdXIgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGU6IFJlYWN0LkZvY3VzRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICAgICAgICAgIG9uQmx1ciAmJiBvbkJsdXIoZSk7XG4gICAgICAgIH0sXG4gICAgICAgIFtvbkJsdXJdLFxuICAgICk7XG5cbiAgICBjb25zdCBoYW5kbGVGb2N1cyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgLy8gY29uc29sZVNlcnZpY2UubG9nKCdmb2N1cycpO1xuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGhhbmRsZVNlYXJjaCA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoc3RyOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIG9uU2VhcmNoICYmIG9uU2VhcmNoKHN0cik7XG4gICAgICAgICAgICBzZXRJbnRlcm5hbE9wdGlvbnMoW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogc3RyIGFzIHVua25vd24gYXMgVCxcbiAgICAgICAgICAgICAgICAgICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLi4uKG9wdGlvbnMgfHwgW10pLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0sXG4gICAgICAgIFtvblNlYXJjaCwgb3B0aW9uc10sXG4gICAgKTtcblxuICAgIGNvbnN0IGhhbmRsZURyb3BEb3duVmlzaWJpbGl0eUNoYW5nZSA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAob3BlbjogYm9vbGVhbikgPT4ge1xuICAgICAgICAgICAgaWYgKGFsbG93Q3VzdG9tVmFsdWUgJiYgb3Blbikge1xuICAgICAgICAgICAgICAgIHNldEludGVybmFsT3B0aW9ucyhbLi4ub3B0aW9uc10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbYWxsb3dDdXN0b21WYWx1ZSwgb3B0aW9uc10sXG4gICAgKTtcblxuICAgIGNvbnN0IG9wdGlvbnNDYWNoZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCByZXMgPSAocHJvcHM/Lm9wdGlvbnMgfHwgW10pLnJlZHVjZSgoYWNjOiBJRGljdGlvbmFyeSwgZWw6IElUcmVlU2VsZWN0T3B0aW9uKSA9PiB7XG4gICAgICAgICAgICBhY2NbZWwudmFsdWVdID0gZWwubGFiZWw7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfSwgW3Byb3BzLm9wdGlvbnNdKTtcblxuICAgIGNvbnN0IGhhbmRsZUZpbHRlciA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAoaW5wdXQ6IHN0cmluZywgb3B0aW9uOiBhbnkpOiBib29sZWFuID0+IHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zQ2FjaGVbb3B0aW9uLnZhbHVlXT8udG9Mb3dlckNhc2UoKS5pbmRleE9mKGlucHV0LnRvTG93ZXJDYXNlKCkpID49IDAgfHwgb3B0aW9uLnZhbHVlID09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBbb3B0aW9uc0NhY2hlXSxcbiAgICApO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxGaWVsZCB7Li4ucHJvcHN9IHR3PVwicmVsYXRpdmVcIj5cbiAgICAgICAgICAgIDxHbG9iYWxcbiAgICAgICAgICAgICAgICBzdHlsZXM9e2Nzc2BcbiAgICAgICAgICAgICAgICAgICAgLmFudC1zZWxlY3QtZHJvcGRvd24ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGRpdiB0dz1cInJlbGF0aXZlXCI+XG4gICAgICAgICAgICAgICAge3Byb3BzLnJlYWRPbmx5ICYmIDxSZWFkb25seSAvPn1cbiAgICAgICAgICAgICAgICA8QW50ZFRyZWVTZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgLy8gey4uLnJlbW92ZVVuZGVmaW5lZCh7IG9uU2VhcmNoOiBwcm9wcy5yZWFkT25seSAmJiAhc2hvd1NlYXJjaCA/IHVuZGVmaW5lZCA6IGhhbmRsZVNlYXJjaCB9KX1cbiAgICAgICAgICAgICAgICAgICAgY3NzPXtzdHlsZXMucm9vdCghIXByb3BzLnJlYWRPbmx5KX1cbiAgICAgICAgICAgICAgICAgICAgYWxsb3dDbGVhcj17cHJvcHMuYWxsb3dDbGVhcn1cbiAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXg9e3Byb3BzLnJlYWRPbmx5ID8gLTEgOiAwfVxuICAgICAgICAgICAgICAgICAgICBkcm9wZG93bkNsYXNzTmFtZT17c3R5bGVzLmRyb3BEb3dufVxuICAgICAgICAgICAgICAgICAgICBzaG93U2VhcmNoPXshcHJvcHMucmVhZE9ubHkgJiYgc2hvd1NlYXJjaH1cbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fVxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17cHJvcHMucGxhY2Vob2xkZXIgfHwgJyd9XG4gICAgICAgICAgICAgICAgICAgIG9uRHJvcGRvd25WaXNpYmxlQ2hhbmdlPXtoYW5kbGVEcm9wRG93blZpc2liaWxpdHlDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17ZGVmYXVsdFZhbHVlfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbkZpbHRlclByb3A9XCJjaGlsZHJlblwiXG4gICAgICAgICAgICAgICAgICAgIG9uU2VhcmNoPXthbGxvd0N1c3RvbVZhbHVlID8gaGFuZGxlU2VhcmNoIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzPXtoYW5kbGVGb2N1c31cbiAgICAgICAgICAgICAgICAgICAgb25CbHVyPXtoYW5kbGVCbHVyfVxuICAgICAgICAgICAgICAgICAgICBkcm9wZG93blJlbmRlcj17KHByZXYpOiBKU1guRWxlbWVudCA9PiAocHJvcHMucmVhZE9ubHkgPyA8PjwvPiA6IHByZXYpfVxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJUcmVlTm9kZT17aGFuZGxlRmlsdGVyfVxuICAgICAgICAgICAgICAgICAgICB0cmVlRGVmYXVsdEV4cGFuZEFsbFxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2ludGVybmFsT3B0aW9ucy5tYXAoKG86IElUcmVlU2VsZWN0T3B0aW9uPFQ+KTogSlNYLkVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzLnJlbmRlclRyZWVTZWxlY3Rpb25PcHRpb24gPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50IGtleT17by52YWx1ZX0+e3Byb3BzLnJlbmRlclRyZWVTZWxlY3Rpb25PcHRpb24obyl9PC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyVHJlZU5vZGUobylcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvQW50ZFRyZWVTZWxlY3Q+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9GaWVsZD5cbiAgICApO1xufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gICAgcm9vdDogKHJlYWRPbmx5OiBib29sZWFuKTogKFNlcmlhbGl6ZWRTdHlsZXMgfCBib29sZWFuKVtdID0+IFtcbiAgICAgICAgY3NzYFxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAmJiAuYW50LXNlbGVjdC1zZWxlY3RvciB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzNHB4O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7VEhFTUUuR1JBWX07XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIGVhc2UtaW4tb3V0IDAuMTVzLCBib3gtc2hhZG93IGVhc2UtaW4tb3V0IDAuMTVzO1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmLmFudC1zZWxlY3QtZm9jdXNlZCB7XG4gICAgICAgICAgICAgICAgJiYgLmFudC1zZWxlY3Qtc2VsZWN0b3Ige1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke1RIRU1FLkdSRUVOfTtcbiAgICAgICAgICAgICAgICAgICAgb3V0bGluZS1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIG91dGxpbmUtc3R5bGU6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICR7VEhFTUUuQk9YX1NIQURPV19HUkVFTn1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmJiAuYW50LXNlbGVjdC1zZWxlY3Rpb24tcGxhY2Vob2xkZXIge1xuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDJweDtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICYmIC5hbnQtc2VsZWN0LXNlbGVjdGlvbi1pdGVtIHtcbiAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMzRweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYCxcbiAgICAgICAgcmVhZE9ubHkgJiZcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAmJiAuYW50LXNlbGVjdC1zZWxlY3RvcixcbiAgICAgICAgICAgICAgICAmJiAuYW50LXNlbGVjdC1zZWxlY3Rvcjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7VEhFTUUuUkVBRE9OTFlfQ09MT1J9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAmLmFudC1zZWxlY3QtZm9jdXNlZCB7XG4gICAgICAgICAgICAgICAgICAgICYmIC5hbnQtc2VsZWN0LXNlbGVjdGlvbi1zZWFyY2gtaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgICYmIC5hbnQtc2VsZWN0LXNlbGVjdGlvbi1pdGVtIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke1RIRU1FLkJMQUNLfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAmJiAuYW50LXNlbGVjdC1zZWxlY3RvciB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke1RIRU1FLlJFQURPTkxZX0NPTE9SfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmUtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZS1zdHlsZTogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgLFxuICAgIF0sXG4gICAgZHJvcERvd246IGVtb3Rpb25DU1NgXG5cdFx0XHQmJiAuYW50LXNlbGVjdC1pdGVtLW9wdGlvbi1zZWxlY3RlZHtcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogI2VlZTtcblx0XHRcdFx0Y29sb3I6IGJsYWNrO1xuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG5cdFx0XHR9XG5cdFx0XHQmJiAuYW50LXNlbGVjdC1pdGVtLW9wdGlvbi1hY3RpdmUge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtUSEVNRS5HUkVFTn07XG4gICAgICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgIH1cblxuXHRcdFxuICAgIGAsXG59O1xuIl19 */\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\")],\n  dropDown: /*#__PURE__*/\n  /*#__PURE__*/\n  css$1(\"&& .ant-select-item-option-selected{background-color:#eee;color:black;font-weight:400;}&& .ant-select-item-option-active{background-color:\", THEME.GREEN, \";color:white;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:dropDown;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:dropDown;\")\n};\nexport { TreeSelect, TreeSelectOption };","map":{"version":3,"sources":["../../../../src/general-ui/tree-select/tree-select.component.tsx"],"names":["TreeNode","AntdTreeSelect","TreeSelectOption","Option","TreeSelect","props","onChange","onBlur","onSearch","allowCustomValue","options","defaultValue","value","name","showSearch","internalOptions","setInternalOptions","useState","useEffect","undefined","renderTreeNode","useCallback","o","subOptions","length","___EmotionJSX","disabled","label","map","option","handleChange","handleBlur","e","handleFocus","handleSearch","str","data","isVisible","handleDropDownVisibilityChange","open","optionsCache","useMemo","res","reduce","acc","el","handleFilter","input","toLowerCase","indexOf","readOnly","styles","root","allowClear","dropDown","width","placeholder","prev","renderTreeSelectionOption","css","THEME","GRAY","GREEN","BOX_SHADOW_GREEN","READONLY_COLOR","BLACK","emotionCSS"],"mappings":"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","sourcesContent":["import { THEME } from '@common/constants/theme.constant';\nimport { Field, IFieldProps } from '@common/general-ui/field/field.component';\nimport { Readonly } from '@common/general-ui/readonly.component';\nimport { IDictionary } from '@common/interfaces/dictionary.interface';\nimport { css as emotionCSS } from '@emotion/css';\nimport { Global, SerializedStyles } from '@emotion/react';\nimport { TreeSelect as AntdTreeSelect } from 'antd';\nimport React, { ReactNode, useCallback, useEffect, useMemo, useState } from 'react';\nimport { css } from 'twin.macro';\n\nconst { TreeNode } = AntdTreeSelect;\n\nexport const TreeSelectOption = Option;\nexport type ITreeSelectChangeHandler = (e: { value: string; name: string }) => void;\n\nexport interface ITreeSelectProps<TName = string, TOption = unknown> extends IFieldProps<string, TName> {\n    options?: ITreeSelectOption<TOption>[];\n    onChange?: ITreeSelectChangeHandler;\n    onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n    className?: string;\n    renderTreeSelectionOption?: (data: ITreeSelectOption<TOption>) => ReactNode;\n    onSearch?: (data: string) => void;\n    showSearch?: boolean;\n    allowClear?: boolean;\n    allowCustomValue?: boolean;\n}\n\nexport interface ITreeSelectOption<T = unknown> {\n    label: ReactNode;\n    value: string | number;\n    isVisible?: boolean;\n    disabled?: boolean;\n    data?: T;\n    subOptions?: ITreeSelectOption<T>[];\n}\n\nexport function TreeSelect<T = unknown>(props: ITreeSelectProps<string, T>): JSX.Element {\n    const {\n        onChange,\n        onBlur,\n        onSearch,\n        allowCustomValue,\n        options = [],\n        defaultValue,\n        value,\n        name,\n        showSearch = false,\n    } = props;\n    const [internalOptions, setInternalOptions] = useState<ITreeSelectOption<T>[]>(options || []);\n\n    useEffect(() => {\n        if (options !== undefined) {\n            setInternalOptions(options);\n        }\n    }, [options]);\n\n    const renderTreeNode = useCallback(\n        (o: ITreeSelectOption<T>) => {\n            return o.subOptions && o.subOptions.length ? (\n                <TreeNode\n                    data-parent-testid={'field-' + props.name}\n                    key={o.value}\n                    value={o.value}\n                    disabled={o.disabled}\n                    selectable={false}\n                    title={o.label}\n                >\n                    {o.subOptions.map((option) => renderTreeNode(option))}\n                </TreeNode>\n            ) : (\n                <TreeNode\n                    data-parent-testid={'field-' + props.name}\n                    key={o.value}\n                    value={o.value}\n                    disabled={o.disabled}\n                    title={o.label}\n                />\n            );\n        },\n        [props.name],\n    );\n\n    const handleChange = useCallback(\n        (value: string) => {\n            onChange && onChange({ name, value });\n        },\n        [onChange, name],\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            onBlur && onBlur(e);\n        },\n        [onBlur],\n    );\n\n    const handleFocus = useCallback(() => {\n        // consoleService.log('focus');\n    }, []);\n\n    const handleSearch = useCallback(\n        (str: string) => {\n            onSearch && onSearch(str);\n            setInternalOptions([\n                {\n                    label: str,\n                    value: str,\n                    data: str as unknown as T,\n                    isVisible: true,\n                },\n                ...(options || []),\n            ]);\n        },\n        [onSearch, options],\n    );\n\n    const handleDropDownVisibilityChange = useCallback(\n        (open: boolean) => {\n            if (allowCustomValue && open) {\n                setInternalOptions([...options]);\n            }\n        },\n        [allowCustomValue, options],\n    );\n\n    const optionsCache = useMemo(() => {\n        const res = (props?.options || []).reduce((acc: IDictionary, el: ITreeSelectOption) => {\n            acc[el.value] = el.label;\n            return acc;\n        }, {});\n        return res;\n    }, [props.options]);\n\n    const handleFilter = useCallback(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (input: string, option: any): boolean => {\n            return optionsCache[option.value]?.toLowerCase().indexOf(input.toLowerCase()) >= 0 || option.value == input;\n        },\n        [optionsCache],\n    );\n    return (\n        <Field {...props} tw=\"relative\">\n            <Global\n                styles={css`\n                    .ant-select-dropdown {\n                        box-shadow: none;\n                    }\n                `}\n            />\n            <div tw=\"relative\">\n                {props.readOnly && <Readonly />}\n                <AntdTreeSelect\n                    // {...removeUndefined({ onSearch: props.readOnly && !showSearch ? undefined : handleSearch })}\n                    css={styles.root(!!props.readOnly)}\n                    allowClear={props.allowClear}\n                    tabIndex={props.readOnly ? -1 : 0}\n                    dropdownClassName={styles.dropDown}\n                    showSearch={!props.readOnly && showSearch}\n                    style={{ width: '100%' }}\n                    placeholder={props.placeholder || ''}\n                    onDropdownVisibleChange={handleDropDownVisibilityChange}\n                    defaultValue={defaultValue}\n                    value={value}\n                    optionFilterProp=\"children\"\n                    onSearch={allowCustomValue ? handleSearch : undefined}\n                    onChange={handleChange}\n                    onFocus={handleFocus}\n                    onBlur={handleBlur}\n                    dropdownRender={(prev): JSX.Element => (props.readOnly ? <></> : prev)}\n                    filterTreeNode={handleFilter}\n                    treeDefaultExpandAll\n                >\n                    {internalOptions.map((o: ITreeSelectOption<T>): JSX.Element => {\n                        return props.renderTreeSelectionOption ? (\n                            <React.Fragment key={o.value}>{props.renderTreeSelectionOption(o)}</React.Fragment>\n                        ) : (\n                            renderTreeNode(o)\n                        );\n                    })}\n                </AntdTreeSelect>\n            </div>\n        </Field>\n    );\n}\n\nconst styles = {\n    root: (readOnly: boolean): (SerializedStyles | boolean)[] => [\n        css`\n            display: block;\n            && .ant-select-selector {\n                height: 34px;\n                border: 1px solid ${THEME.GRAY};\n                border-radius: 4px;\n                font-weight: 400;\n                display: block;\n                width: 100%;\n                transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\n                overflow: hidden;\n            }\n            &.ant-select-focused {\n                && .ant-select-selector {\n                    border: 1px solid ${THEME.GREEN};\n                    outline-color: transparent;\n                    outline-style: none;\n                    ${THEME.BOX_SHADOW_GREEN}\n                }\n            }\n            && .ant-select-selection-placeholder {\n                margin-top: 2px;\n                display: block;\n            }\n            && .ant-select-selection-item {\n                text-overflow: ellipsis;\n                display: block;\n                line-height: 34px;\n            }\n        `,\n        readOnly &&\n            css`\n                && .ant-select-selector,\n                && .ant-select-selector:hover {\n                    border: 1px solid ${THEME.READONLY_COLOR};\n                }\n                &.ant-select-focused {\n                    && .ant-select-selection-search-input,\n                    && .ant-select-selection-item {\n                        color: ${THEME.BLACK};\n                    }\n                    && .ant-select-selector {\n                        border: 1px solid ${THEME.READONLY_COLOR};\n                        outline-color: transparent;\n                        outline-style: none;\n                        box-shadow: none;\n                    }\n                }\n            `,\n    ],\n    dropDown: emotionCSS`\n\t\t\t&& .ant-select-item-option-selected{\n\t\t\t\tbackground-color: #eee;\n\t\t\t\tcolor: black;\n                font-weight: 400;\n\t\t\t}\n\t\t\t&& .ant-select-item-option-active {\n            background-color: ${THEME.GREEN};\n            color: white;\n        }\n\n\t\t\n    `,\n};\n"]},"metadata":{},"sourceType":"module"}