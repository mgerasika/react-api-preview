{"ast":null,"code":"import { IS_DEBUG } from '../../constants/is-debug.constant.js';\nimport { InlineJsonPreview } from '../json-preview/json-preview.component.js';\nimport React, { useCallback, useMemo } from 'react';\nimport { FormProvider } from 'react-hook-form';\nimport { jsx } from '@emotion/react';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst FormAdditionalContext = /*#__PURE__*/React.createContext({\n  registerBlurHandler: () => null,\n  onFieldBlur: () => null,\n  onFieldChange: () => null\n});\nfunction Form(_ref) {\n  let {\n    children,\n    form: {\n      formContext,\n      isValid,\n      props: {\n        onFieldBlur,\n        onFieldChange,\n        onSubmit\n      },\n      _onBlurHandlers\n    },\n    className\n  } = _ref;\n  const handleSubmit = useCallback(data => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onSubmit(data);\n  }, [onSubmit]);\n  const renderJsonPreview = () => {\n    const json = {\n      values: formContext.getValues(),\n      errors: formContext.formState.errors,\n      touched: formContext.formState.touchedFields,\n      formState: formContext.formState,\n      isValid\n    };\n    return jsx(InlineJsonPreview, {\n      json: json,\n      collapsed_json: false\n    });\n  };\n  const registerBlurHandler = useCallback((fieldName, handler) => {\n    _onBlurHandlers[fieldName] = handler;\n  }, [_onBlurHandlers]);\n  const onFieldBlurHandler = useCallback(fieldName => {\n    onFieldBlur && onFieldBlur(fieldName, formContext.getValues());\n  }, [onFieldBlur, formContext]);\n  const onFieldChangeHandler = useCallback(fieldName => {\n    onFieldChange && onFieldChange(fieldName, formContext.getValues());\n  }, [formContext, onFieldChange]);\n  const additionalContext = useMemo(() => {\n    return {\n      registerBlurHandler,\n      onFieldBlur: onFieldBlurHandler,\n      onFieldChange: onFieldChangeHandler\n    };\n  }, [onFieldBlurHandler, onFieldChangeHandler, registerBlurHandler]);\n  return jsx(FormProvider, formContext, jsx(FormAdditionalContext.Provider, {\n    value: additionalContext\n  }, IS_DEBUG && renderJsonPreview(), jsx(\"form\", {\n    autoComplete: \"off\",\n    className: className,\n    onSubmit: formContext.handleSubmit(handleSubmit)\n  }, children)));\n}\nexport { Form, FormAdditionalContext };","map":{"version":3,"sources":["../../../../src/general-ui/form/form.component.tsx"],"names":["FormAdditionalContext","React","createContext","registerBlurHandler","onFieldBlur","onFieldChange","Form","children","form","formContext","isValid","props","onSubmit","_onBlurHandlers","className","handleSubmit","useCallback","data","renderJsonPreview","json","values","getValues","errors","formState","touched","touchedFields","___EmotionJSX","fieldName","handler","onFieldBlurHandler","onFieldChangeHandler","additionalContext","useMemo","IS_DEBUG"],"mappings":";;;;;;AAAA;MAcaA,qBAAqB,GAAA,aAAGC,KAAK,CAACC,aAAa,CAAuC;EAC3FC,mBAAmB,EAAE,MAAM,IAAI;EAC/BC,WAAW,EAAE,MAAM,IAAI;EACvBC,aAAa,EAAE,MAAM;AACzB,CAAC,CAAA;AAQM,SAASC,IAAI,OASO;EAAA,IATH;IACpBC,QAAQ;IACRC,IAAI,EAAE;MACFC,WAAW;MACXC,OAAO;MACPC,KAAK,EAAE;QAAEP,WAAW;QAAEC,aAAa;QAAEO;OAAU;MAC/CC;KACH;IACDC;EACO,CAAC;EACR,MAAMC,YAAY,GAAGC,WAAW,CAC3BC,IAA0B,IAAK;IAC5B;IACAL,QAAQ,CAACK,IAAI,CAAQ;EACzB,CAAC,EACD,CAACL,QAAQ,CAAC,CACb;EAED,MAAMM,iBAAiB,GAAG,MAAmB;IACzC,MAAMC,IAAI,GAAG;MACTC,MAAM,EAAEX,WAAW,CAACY,SAAS,EAAE;MAC/BC,MAAM,EAAEb,WAAW,CAACc,SAAS,CAACD,MAAM;MACpCE,OAAO,EAAEf,WAAW,CAACc,SAAS,CAACE,aAAa;MAC5CF,SAAS,EAAEd,WAAW,CAACc,SAAS;MAChCb;KACH;IACD,OAAOgB,GAAAA,CAAC,iBAAiB,EAAA;MAAC,IAAI,EAAEP,IAAK;MAAC,cAAc,EAAE;KAAS,CAAA;GAClE;EAED,MAAMhB,mBAAmB,GAAGa,WAAW,CACnC,CAACW,SAAkB,EAAEC,OAA2B,KAAK;IACjDf,eAAe,CAACc,SAAS,CAAW,GAAGC,OAAO;EAClD,CAAC,EACD,CAACf,eAAe,CAAC,CACpB;EAED,MAAMgB,kBAAkB,GAAGb,WAAW,CACjCW,SAAkB,IAAK;IACpBvB,WAAW,IAAIA,WAAW,CAACuB,SAAS,EAAElB,WAAW,CAACY,SAAS,EAAE,CAAM;EACvE,CAAC,EACD,CAACjB,WAAW,EAAEK,WAAW,CAAC,CAC7B;EAED,MAAMqB,oBAAoB,GAAGd,WAAW,CACnCW,SAAkB,IAAK;IACpBtB,aAAa,IAAIA,aAAa,CAACsB,SAAS,EAAElB,WAAW,CAACY,SAAS,EAAE,CAAM;EAC3E,CAAC,EACD,CAACZ,WAAW,EAAEJ,aAAa,CAAC,CAC/B;EAED,MAAM0B,iBAAiD,GAAGC,OAAO,CAAC,MAAM;IACpE,OAAO;MACH7B,mBAAmB;MACnBC,WAAW,EAAEyB,kBAAkB;MAC/BxB,aAAa,EAAEyB;KAClB;GACJ,EAAE,CAACD,kBAAkB,EAAEC,oBAAoB,EAAE3B,mBAAmB,CAAC,CAAC;EAEnE,OACIuB,GAAAA,CAAC,YAAY,EAAMjB,WAAW,EAC1BiB,GAAC,CAAA,qBAAqB,CAAC,QAAQ,EAAA;IAAC,KAAK,EAAEK;EAAkB,CAAA,EACpDE,QAAQ,IAAIf,iBAAiB,EAAE,EAChCQ,GAAAA,CAAAA,MAAAA,EAAAA;IAAM,YAAY,EAAC,KAAK;IAAC,SAAS,EAAEZ,SAAU;IAAC,QAAQ,EAAEL,WAAW,CAACM,YAAY,CAACA,YAAY;GACzFR,EAAAA,QAAQ,CACN,CACsB,CACtB;AAEvB","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { IS_DEBUG } from '@common/constants/is-debug.constant';\nimport { InlineJsonPreview } from '@common/general-ui/json-preview/json-preview.component';\nimport { IUseCustomFormReturn } from '@common/hooks/use-form.hook';\nimport React, { ChangeEventHandler, ReactNode, useCallback, useMemo } from 'react';\nimport { FormProvider, UnpackNestedValue } from 'react-hook-form';\n\n// For some components need trigger validate event manually, so added additional context.\nexport interface IFormAdditionalContextProps<T> {\n    registerBlurHandler: (name: keyof T, handler: ChangeEventHandler) => void;\n    onFieldBlur: (name: keyof T) => void;\n    onFieldChange: (name: keyof T) => void;\n}\n\nexport const FormAdditionalContext = React.createContext<IFormAdditionalContextProps<unknown>>({\n    registerBlurHandler: () => null,\n    onFieldBlur: () => null,\n    onFieldChange: () => null,\n});\n\ninterface IProps<T> {\n    form: IUseCustomFormReturn<T>;\n    children: ReactNode;\n    className?: string;\n}\n\nexport function Form<T>({\n    children,\n    form: {\n        formContext,\n        isValid,\n        props: { onFieldBlur, onFieldChange, onSubmit },\n        _onBlurHandlers,\n    },\n    className,\n}: IProps<T>): JSX.Element {\n    const handleSubmit = useCallback(\n        (data: UnpackNestedValue<T>) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onSubmit(data as any);\n        },\n        [onSubmit],\n    );\n\n    const renderJsonPreview = (): JSX.Element => {\n        const json = {\n            values: formContext.getValues(),\n            errors: formContext.formState.errors,\n            touched: formContext.formState.touchedFields,\n            formState: formContext.formState,\n            isValid,\n        };\n        return <InlineJsonPreview json={json} collapsed_json={false} />;\n    };\n\n    const registerBlurHandler = useCallback(\n        (fieldName: keyof T, handler: ChangeEventHandler) => {\n            _onBlurHandlers[fieldName as string] = handler;\n        },\n        [_onBlurHandlers],\n    );\n\n    const onFieldBlurHandler = useCallback(\n        (fieldName: keyof T) => {\n            onFieldBlur && onFieldBlur(fieldName, formContext.getValues() as T);\n        },\n        [onFieldBlur, formContext],\n    );\n\n    const onFieldChangeHandler = useCallback(\n        (fieldName: keyof T) => {\n            onFieldChange && onFieldChange(fieldName, formContext.getValues() as T);\n        },\n        [formContext, onFieldChange],\n    );\n\n    const additionalContext: IFormAdditionalContextProps<T> = useMemo(() => {\n        return {\n            registerBlurHandler,\n            onFieldBlur: onFieldBlurHandler,\n            onFieldChange: onFieldChangeHandler,\n        };\n    }, [onFieldBlurHandler, onFieldChangeHandler, registerBlurHandler]);\n\n    return (\n        <FormProvider {...(formContext as any)}>\n            <FormAdditionalContext.Provider value={additionalContext}>\n                {IS_DEBUG && renderJsonPreview()}\n                <form autoComplete=\"off\" className={className} onSubmit={formContext.handleSubmit(handleSubmit as any)}>\n                    {children}\n                </form>\n            </FormAdditionalContext.Provider>\n        </FormProvider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}