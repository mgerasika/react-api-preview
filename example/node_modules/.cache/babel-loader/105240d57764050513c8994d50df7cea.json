{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\nvar InteractionsClass = /** @class */function () {\n  /**\n   * Initialize PubSub with AWS configurations\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n  function InteractionsClass(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this._options = options;\n    logger.debug('Interactions Options', this._options);\n    this._pluggables = {};\n  }\n  InteractionsClass.prototype.getModuleName = function () {\n    return 'Interactions';\n  };\n  /**\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   * @return {InteractionsOptions} - The current configuration\n   */\n  InteractionsClass.prototype.configure = function (options) {\n    var _this = this;\n    var opt = options ? options.Interactions || options : {};\n    logger.debug('configure Interactions', {\n      opt: opt\n    });\n    this._options = __assign(__assign({\n      bots: {}\n    }, opt), opt.Interactions);\n    var aws_bots_config = this._options.aws_bots_config;\n    var bots_config = this._options.bots;\n    if (!Object.keys(bots_config).length && aws_bots_config) {\n      // Convert aws_bots_config to bots object\n      if (Array.isArray(aws_bots_config)) {\n        aws_bots_config.forEach(function (bot) {\n          _this._options.bots[bot.name] = bot;\n        });\n      }\n    }\n    // configure bots to their specific providers\n    Object.keys(bots_config).forEach(function (botKey) {\n      var _a;\n      var bot = bots_config[botKey];\n      var providerName = bot.providerName || 'AWSLexProvider';\n      // add default provider if required\n      if (!_this._pluggables.AWSLexProvider && providerName === 'AWSLexProvider') {\n        _this._pluggables.AWSLexProvider = new AWSLexProvider();\n      }\n      // configure bot with it's respective provider\n      if (_this._pluggables[providerName]) {\n        _this._pluggables[providerName].configure((_a = {}, _a[bot.name] = bot, _a));\n      } else {\n        logger.debug(\"bot \" + bot.name + \" was not configured as \" + providerName + \" provider was not found\");\n      }\n    });\n    return this._options;\n  };\n  InteractionsClass.prototype.addPluggable = function (pluggable) {\n    var _this = this;\n    if (pluggable && pluggable.getCategory() === 'Interactions') {\n      if (!this._pluggables[pluggable.getProviderName()]) {\n        // configure bots for the new plugin\n        Object.keys(this._options.bots).filter(function (botKey) {\n          return _this._options.bots[botKey].providerName === pluggable.getProviderName();\n        }).forEach(function (botKey) {\n          var _a;\n          var bot = _this._options.bots[botKey];\n          pluggable.configure((_a = {}, _a[bot.name] = bot, _a));\n        });\n        this._pluggables[pluggable.getProviderName()] = pluggable;\n        return;\n      } else {\n        throw new Error('Pluggable ' + pluggable.getProviderName() + ' already plugged');\n      }\n    }\n  };\n  InteractionsClass.prototype.send = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var botProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._options.bots || !this._options.bots[botname]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n            botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n            if (!this._pluggables[botProvider]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?')];\n            }\n            return [4 /*yield*/, this._pluggables[botProvider].sendMessage(botname, message)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  InteractionsClass.prototype.onComplete = function (botname, callback) {\n    if (!this._options.bots || !this._options.bots[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n    var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n    if (!this._pluggables[botProvider]) {\n      throw new Error('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?');\n    }\n    this._pluggables[botProvider].onComplete(botname, callback);\n  };\n  return InteractionsClass;\n}();\nexport { InteractionsClass };\nexport var Interactions = new InteractionsClass();\nAmplify.register(Interactions);","map":{"version":3,"sources":["../src/Interactions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\nvar InteractionsClass = /** @class */ (function () {\n    /**\n     * Initialize PubSub with AWS configurations\n     *\n     * @param {InteractionsOptions} options - Configuration object for Interactions\n     */\n    function InteractionsClass(options) {\n        if (options === void 0) { options = {}; }\n        this._options = options;\n        logger.debug('Interactions Options', this._options);\n        this._pluggables = {};\n    }\n    InteractionsClass.prototype.getModuleName = function () {\n        return 'Interactions';\n    };\n    /**\n     *\n     * @param {InteractionsOptions} options - Configuration object for Interactions\n     * @return {InteractionsOptions} - The current configuration\n     */\n    InteractionsClass.prototype.configure = function (options) {\n        var _this = this;\n        var opt = options ? options.Interactions || options : {};\n        logger.debug('configure Interactions', { opt: opt });\n        this._options = __assign(__assign({ bots: {} }, opt), opt.Interactions);\n        var aws_bots_config = this._options.aws_bots_config;\n        var bots_config = this._options.bots;\n        if (!Object.keys(bots_config).length && aws_bots_config) {\n            // Convert aws_bots_config to bots object\n            if (Array.isArray(aws_bots_config)) {\n                aws_bots_config.forEach(function (bot) {\n                    _this._options.bots[bot.name] = bot;\n                });\n            }\n        }\n        // configure bots to their specific providers\n        Object.keys(bots_config).forEach(function (botKey) {\n            var _a;\n            var bot = bots_config[botKey];\n            var providerName = bot.providerName || 'AWSLexProvider';\n            // add default provider if required\n            if (!_this._pluggables.AWSLexProvider &&\n                providerName === 'AWSLexProvider') {\n                _this._pluggables.AWSLexProvider = new AWSLexProvider();\n            }\n            // configure bot with it's respective provider\n            if (_this._pluggables[providerName]) {\n                _this._pluggables[providerName].configure((_a = {}, _a[bot.name] = bot, _a));\n            }\n            else {\n                logger.debug(\"bot \" + bot.name + \" was not configured as \" + providerName + \" provider was not found\");\n            }\n        });\n        return this._options;\n    };\n    InteractionsClass.prototype.addPluggable = function (pluggable) {\n        var _this = this;\n        if (pluggable && pluggable.getCategory() === 'Interactions') {\n            if (!this._pluggables[pluggable.getProviderName()]) {\n                // configure bots for the new plugin\n                Object.keys(this._options.bots)\n                    .filter(function (botKey) {\n                    return _this._options.bots[botKey].providerName ===\n                        pluggable.getProviderName();\n                })\n                    .forEach(function (botKey) {\n                    var _a;\n                    var bot = _this._options.bots[botKey];\n                    pluggable.configure((_a = {}, _a[bot.name] = bot, _a));\n                });\n                this._pluggables[pluggable.getProviderName()] = pluggable;\n                return;\n            }\n            else {\n                throw new Error('Pluggable ' + pluggable.getProviderName() + ' already plugged');\n            }\n        }\n    };\n    InteractionsClass.prototype.send = function (botname, message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var botProvider;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._options.bots || !this._options.bots[botname]) {\n                            return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n                        }\n                        botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n                        if (!this._pluggables[botProvider]) {\n                            return [2 /*return*/, Promise.reject('Bot ' +\n                                    botProvider +\n                                    ' does not have valid pluggin did you try addPluggable first?')];\n                        }\n                        return [4 /*yield*/, this._pluggables[botProvider].sendMessage(botname, message)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    InteractionsClass.prototype.onComplete = function (botname, callback) {\n        if (!this._options.bots || !this._options.bots[botname]) {\n            throw new Error('Bot ' + botname + ' does not exist');\n        }\n        var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n        if (!this._pluggables[botProvider]) {\n            throw new Error('Bot ' +\n                botProvider +\n                ' does not have valid pluggin did you try addPluggable first?');\n        }\n        this._pluggables[botProvider].onComplete(botname, callback);\n    };\n    return InteractionsClass;\n}());\nexport { InteractionsClass };\nexport var Interactions = new InteractionsClass();\nAmplify.register(Interactions);\n//# sourceMappingURL=Interactions.js.map"]},"metadata":{},"sourceType":"module"}