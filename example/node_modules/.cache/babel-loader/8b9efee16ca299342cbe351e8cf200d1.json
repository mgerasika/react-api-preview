{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _generated = require(\"../generated\");\nvar _default = createTypeAnnotationBasedOnTypeof;\nexports.default = _default;\nfunction createTypeAnnotationBasedOnTypeof(type) {\n  switch (type) {\n    case \"string\":\n      return (0, _generated.stringTypeAnnotation)();\n    case \"number\":\n      return (0, _generated.numberTypeAnnotation)();\n    case \"undefined\":\n      return (0, _generated.voidTypeAnnotation)();\n    case \"boolean\":\n      return (0, _generated.booleanTypeAnnotation)();\n    case \"function\":\n      return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)(\"Function\"));\n    case \"object\":\n      return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)(\"Object\"));\n    case \"symbol\":\n      return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)(\"Symbol\"));\n    case \"bigint\":\n      return (0, _generated.anyTypeAnnotation)();\n  }\n  throw new Error(\"Invalid typeof value: \" + type);\n}","map":{"version":3,"sources":["../../../src/builders/flow/createTypeAnnotationBasedOnTypeof.ts"],"names":["createTypeAnnotationBasedOnTypeof","type","Error"],"mappings":";;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;eAWeA,iC;;AAcf,SAASA,iCAAT,CAA2CC,IAA3C,EAAqE;EACnE,QAAQA,IAAR;IACE,KAAK,QAAL;MACE,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,oBAAA,GAAP;IACF,KAAK,QAAL;MACE,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,oBAAA,GAAP;IACF,KAAK,WAAL;MACE,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,kBAAA,GAAP;IACF,KAAK,SAAL;MACE,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,qBAAA,GAAP;IACF,KAAK,UAAL;MACE,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,qBAAA,EAAsB,CAAA,CAAA,EAAA,UAAA,CAAA,UAAA,EAAW,UAAX,CAAtB,CAAP;IACF,KAAK,QAAL;MACE,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,qBAAA,EAAsB,CAAA,CAAA,EAAA,UAAA,CAAA,UAAA,EAAW,QAAX,CAAtB,CAAP;IACF,KAAK,QAAL;MACE,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,qBAAA,EAAsB,CAAA,CAAA,EAAA,UAAA,CAAA,UAAA,EAAW,QAAX,CAAtB,CAAP;IACF,KAAK,QAAL;MAGE,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,iBAAA,GAAP;EAAA;EAEJ,MAAM,IAAIC,KAAJ,CAAU,wBAAA,GAA2BD,IAArC,CAAN;AACD","sourcesContent":["import {\n  anyTypeAnnotation,\n  stringTypeAnnotation,\n  numberTypeAnnotation,\n  voidTypeAnnotation,\n  booleanTypeAnnotation,\n  genericTypeAnnotation,\n  identifier,\n} from \"../generated\";\nimport type * as t from \"../..\";\n\nexport default createTypeAnnotationBasedOnTypeof as {\n  (type: \"string\"): t.StringTypeAnnotation;\n  (type: \"number\"): t.NumberTypeAnnotation;\n  (type: \"undefined\"): t.VoidTypeAnnotation;\n  (type: \"boolean\"): t.BooleanTypeAnnotation;\n  (type: \"function\"): t.GenericTypeAnnotation;\n  (type: \"object\"): t.GenericTypeAnnotation;\n  (type: \"symbol\"): t.GenericTypeAnnotation;\n  (type: \"bigint\"): t.AnyTypeAnnotation;\n};\n\n/**\n * Create a type annotation based on typeof expression.\n */\nfunction createTypeAnnotationBasedOnTypeof(type: string): t.FlowType {\n  switch (type) {\n    case \"string\":\n      return stringTypeAnnotation();\n    case \"number\":\n      return numberTypeAnnotation();\n    case \"undefined\":\n      return voidTypeAnnotation();\n    case \"boolean\":\n      return booleanTypeAnnotation();\n    case \"function\":\n      return genericTypeAnnotation(identifier(\"Function\"));\n    case \"object\":\n      return genericTypeAnnotation(identifier(\"Object\"));\n    case \"symbol\":\n      return genericTypeAnnotation(identifier(\"Symbol\"));\n    case \"bigint\":\n      // todo: use BigInt annotation when Flow supports BigInt\n      // https://github.com/facebook/flow/issues/6639\n      return anyTypeAnnotation();\n  }\n  throw new Error(\"Invalid typeof value: \" + type);\n}\n"]},"metadata":{},"sourceType":"script"}