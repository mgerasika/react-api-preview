{"ast":null,"code":"function t(t) {\n  return \"object\" == typeof t && null != t && 1 === t.nodeType;\n}\nfunction e(t, e) {\n  return (!e || \"hidden\" !== t) && \"visible\" !== t && \"clip\" !== t;\n}\nfunction n(t, n) {\n  if (t.clientHeight < t.scrollHeight || t.clientWidth < t.scrollWidth) {\n    var r = getComputedStyle(t, null);\n    return e(r.overflowY, n) || e(r.overflowX, n) || function (t) {\n      var e = function (t) {\n        if (!t.ownerDocument || !t.ownerDocument.defaultView) return null;\n        try {\n          return t.ownerDocument.defaultView.frameElement;\n        } catch (t) {\n          return null;\n        }\n      }(t);\n      return !!e && (e.clientHeight < t.scrollHeight || e.clientWidth < t.scrollWidth);\n    }(t);\n  }\n  return !1;\n}\nfunction r(t, e, n, r, i, o, l, d) {\n  return o < t && l > e || o > t && l < e ? 0 : o <= t && d <= n || l >= e && d >= n ? o - t - r : l > e && d < n || o < t && d > n ? l - e + i : 0;\n}\nexport default function (e, i) {\n  var o = window,\n    l = i.scrollMode,\n    d = i.block,\n    u = i.inline,\n    h = i.boundary,\n    a = i.skipOverflowHiddenElements,\n    c = \"function\" == typeof h ? h : function (t) {\n      return t !== h;\n    };\n  if (!t(e)) throw new TypeError(\"Invalid target\");\n  for (var f = document.scrollingElement || document.documentElement, s = [], p = e; t(p) && c(p);) {\n    if ((p = p.parentElement) === f) {\n      s.push(p);\n      break;\n    }\n    null != p && p === document.body && n(p) && !n(document.documentElement) || null != p && n(p, a) && s.push(p);\n  }\n  for (var m = o.visualViewport ? o.visualViewport.width : innerWidth, g = o.visualViewport ? o.visualViewport.height : innerHeight, w = window.scrollX || pageXOffset, v = window.scrollY || pageYOffset, W = e.getBoundingClientRect(), b = W.height, H = W.width, y = W.top, E = W.right, M = W.bottom, V = W.left, x = \"start\" === d || \"nearest\" === d ? y : \"end\" === d ? M : y + b / 2, I = \"center\" === u ? V + H / 2 : \"end\" === u ? E : V, C = [], T = 0; T < s.length; T++) {\n    var k = s[T],\n      B = k.getBoundingClientRect(),\n      D = B.height,\n      O = B.width,\n      R = B.top,\n      X = B.right,\n      Y = B.bottom,\n      L = B.left;\n    if (\"if-needed\" === l && y >= 0 && V >= 0 && M <= g && E <= m && y >= R && M <= Y && V >= L && E <= X) return C;\n    var S = getComputedStyle(k),\n      j = parseInt(S.borderLeftWidth, 10),\n      q = parseInt(S.borderTopWidth, 10),\n      z = parseInt(S.borderRightWidth, 10),\n      A = parseInt(S.borderBottomWidth, 10),\n      F = 0,\n      G = 0,\n      J = \"offsetWidth\" in k ? k.offsetWidth - k.clientWidth - j - z : 0,\n      K = \"offsetHeight\" in k ? k.offsetHeight - k.clientHeight - q - A : 0;\n    if (f === k) F = \"start\" === d ? x : \"end\" === d ? x - g : \"nearest\" === d ? r(v, v + g, g, q, A, v + x, v + x + b, b) : x - g / 2, G = \"start\" === u ? I : \"center\" === u ? I - m / 2 : \"end\" === u ? I - m : r(w, w + m, m, j, z, w + I, w + I + H, H), F = Math.max(0, F + v), G = Math.max(0, G + w);else {\n      F = \"start\" === d ? x - R - q : \"end\" === d ? x - Y + A + K : \"nearest\" === d ? r(R, Y, D, q, A + K, x, x + b, b) : x - (R + D / 2) + K / 2, G = \"start\" === u ? I - L - j : \"center\" === u ? I - (L + O / 2) + J / 2 : \"end\" === u ? I - X + z + J : r(L, X, O, j, z + J, I, I + H, H);\n      var N = k.scrollLeft,\n        P = k.scrollTop;\n      x += P - (F = Math.max(0, Math.min(P + F, k.scrollHeight - D + K))), I += N - (G = Math.max(0, Math.min(N + G, k.scrollWidth - O + J)));\n    }\n    C.push({\n      el: k,\n      top: F,\n      left: G\n    });\n  }\n  return C;\n}","map":{"version":3,"sources":["../src/index.ts"],"names":["isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","ownerDocument","defaultView","frameElement","e","frame","getFrameElement","clientHeight","scrollHeight","clientWidth","scrollWidth","isScrollable","style","getComputedStyle","overflowY","overflowX","isHiddenByFrame","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","target","options","windowWithViewport","window","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","document","documentElement","frames","cursor","parentElement","push","body","viewportWidth","visualViewport","width","innerWidth","viewportHeight","height","innerHeight","viewportX","scrollX","pageXOffset","viewportY","scrollY","pageYOffset","targetHeight","targetWidth","top","targetTop","right","targetRight","bottom","targetBottom","left","targetLeft","getBoundingClientRect","targetBlock","targetInline","computations","index","length","frameStyle","borderLeft","parseInt","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","Math","max","scrollLeft","scrollTop","min"],"mappings":"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","sourcesContent":["// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n// add support for visualViewport object currently implemented in chrome\ninterface visualViewport {\n  height: number\n  width: number\n}\n\ntype ScrollLogicalPosition = 'start' | 'center' | 'end' | 'nearest'\n// This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\ntype ScrollMode = 'always' | 'if-needed'\n// New option that skips auto-scrolling all nodes with overflow: hidden set\n// See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\ntype SkipOverflowHiddenElements = boolean\n\ninterface Options {\n  block?: ScrollLogicalPosition\n  inline?: ScrollLogicalPosition\n  scrollMode?: ScrollMode\n  boundary?: CustomScrollBoundary\n  skipOverflowHiddenElements?: SkipOverflowHiddenElements\n}\n\n// Custom behavior, not in any spec\ntype CustomScrollBoundaryCallback = (parent: Element) => boolean\ntype CustomScrollBoundary = Element | CustomScrollBoundaryCallback | null\ninterface CustomScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nfunction isElement(el: any): el is Element {\n  return typeof el === 'object' && el != null && el.nodeType === 1\n}\n\nfunction canOverflow(\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nfunction getFrameElement(el: Element) {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nfunction isHiddenByFrame(el: Element): boolean {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nfunction isScrollable(el: Element, skipOverflowHiddenElements?: boolean) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nfunction alignNearest(\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nexport default (target: Element, options: Options): CustomScrollAction[] => {\n  //TODO: remove this hack when microbundle will support typescript >= 4.0\n  const windowWithViewport = (window as unknown) as Window & {\n    visualViewport: visualViewport\n  }\n\n  const {\n    scrollMode,\n    block,\n    inline,\n    boundary,\n    skipOverflowHiddenElements,\n  } = options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = cursor.parentElement\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.width\n    : innerWidth\n  const viewportHeight = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.height\n    : innerHeight\n\n  // Newer browsers supports scroll[X|Y], page[X|Y]Offset is\n  const viewportX = window.scrollX || pageXOffset\n  const viewportY = window.scrollY || pageYOffset\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop\n      : block === 'end'\n      ? targetBottom\n      : targetTop + targetHeight / 2 // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2\n      : inline === 'end'\n      ? targetRight\n      : targetLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: CustomScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const {\n      height,\n      width,\n      top,\n      right,\n      bottom,\n      left,\n    } = frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          viewportY,\n          viewportY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          viewportY + targetBlock,\n          viewportY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          viewportX,\n          viewportX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          viewportX + targetInline,\n          viewportX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + viewportY)\n      inlineScroll = Math.max(0, inlineScroll + viewportX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll = Math.max(\n        0,\n        Math.min(\n          scrollTop + blockScroll,\n          frame.scrollHeight - height + scrollbarHeight\n        )\n      )\n      inlineScroll = Math.max(\n        0,\n        Math.min(\n          scrollLeft + inlineScroll,\n          frame.scrollWidth - width + scrollbarWidth\n        )\n      )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n"]},"metadata":{},"sourceType":"module"}