{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { useRef, useCallback } from 'react';\nimport { ModalProvider, useModal } from 'react-modal-hook';\nvar ModalProviderEx = ModalProvider;\nfunction useModalEx(callback,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n_deps) {\n  var propsRef = useRef();\n  var _useModal = useModal(function () {\n      return callback(propsRef.current, hideModalInternal);\n    }, [callback]),\n    _useModal2 = _slicedToArray(_useModal, 2),\n    showModalInternal = _useModal2[0],\n    hideModalInternal = _useModal2[1];\n  return [useCallback(function (props) {\n    propsRef.current = props;\n    showModalInternal();\n  }, [showModalInternal]), useCallback(function () {\n    hideModalInternal();\n  }, [hideModalInternal])];\n}\nexport { ModalProviderEx, useModalEx };","map":{"version":3,"sources":["../../../src/hooks/use-modal-ex.hook.ts"],"names":["ModalProviderEx","ModalProvider","useModalEx","callback","_deps","propsRef","useRef","showModalInternal","hideModalInternal","useModal","current","useCallback","props"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKO,IAAMA,eAAe,GAAGC,aAAa;AAErC,SAASC,UAAU,CACtBC,QAA+D;AAC/D;AACAC,KAAa,EACE;EACf,IAAMC,QAAQ,GAAGC,MAAM,EAAU;EAEjC,IAAA,SAAA,GAA+CG,QAAQ,CAAC,YAAM;MAC1D,OAAON,QAAQ,CAACE,QAAQ,CAACK,OAAO,EAAYF,iBAAiB,CAAC;IAClE,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;IAFPI,iBAAiB,GAAA,UAAA,CAAA,CAAA,CAAA;IAAEC,iBAAiB,GAAA,UAAA,CAAA,CAAA,CAAA;EAG3C,OAAO,CACHG,WAAW,CACNC,UAAAA,KAAa,EAAK;IACfP,QAAQ,CAACK,OAAO,GAAGE,KAAK;IACxBL,iBAAiB,EAAE;EACtB,CAAA,EACD,CAACA,iBAAiB,CAAC,CACtB,EACDI,WAAW,CAAC,YAAM;IACdH,iBAAiB,EAAE;EACvB,CAAC,EAAE,CAACA,iBAAiB,CAAC,CAAC,CAC1B;AACL","sourcesContent":["import { useCallback, useRef } from 'react';\nimport { ModalProvider, useModal } from 'react-modal-hook';\n\ntype IReturn<TProps> = [(props: TProps) => void, () => void];\n\nexport const ModalProviderEx = ModalProvider;\n\nexport function useModalEx<TProps>(\n    callback: (props: TProps, hideModal: () => void) => JSX.Element,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _deps?: any[],\n): IReturn<TProps> {\n    const propsRef = useRef<TProps>();\n\n    const [showModalInternal, hideModalInternal] = useModal(() => {\n        return callback(propsRef.current as TProps, hideModalInternal);\n    }, [callback]);\n    return [\n        useCallback(\n            (props: TProps) => {\n                propsRef.current = props;\n                showModalInternal();\n            },\n            [showModalInternal],\n        ),\n        useCallback(() => {\n            hideModalInternal();\n        }, [hideModalInternal]),\n    ];\n}\n"]},"metadata":{},"sourceType":"module"}