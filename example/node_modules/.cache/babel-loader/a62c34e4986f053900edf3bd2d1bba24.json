{"ast":null,"code":"/*\n * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { HttpResponse } from '@aws-sdk/protocol-http';\nimport { buildQueryString } from '@aws-sdk/querystring-builder';\nimport axios from 'axios';\nimport { ConsoleLogger as Logger, Platform } from '@aws-amplify/core';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nvar logger = new Logger('axios-http-handler');\nexport var SEND_UPLOAD_PROGRESS_EVENT = 'sendUploadProgress';\nexport var SEND_DOWNLOAD_PROGRESS_EVENT = 'sendDownloadProgress';\nfunction isBlob(body) {\n  return typeof Blob !== 'undefined' && body instanceof Blob;\n}\nfunction hasErrorResponse(error) {\n  return typeof error !== 'undefined' && Object.prototype.hasOwnProperty.call(error, 'response') && typeof error.response !== 'undefined' && Object.prototype.hasOwnProperty.call(error.response, 'status') && typeof error.response.status === 'number';\n}\nvar normalizeHeaders = function normalizeHeaders(headers, normalizedName) {\n  var e_1, _a;\n  try {\n    for (var _b = __values(Object.entries(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read(_c.value, 2),\n        k = _d[0],\n        v = _d[1];\n      if (k !== normalizedName && k.toUpperCase() === normalizedName.toUpperCase()) {\n        headers[normalizedName] = v;\n        delete headers[k];\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n};\nexport var reactNativeRequestTransformer = [function (data, headers) {\n  if (isBlob(data)) {\n    normalizeHeaders(headers, 'Content-Type');\n    normalizeHeaders(headers, 'Accept');\n    return data;\n  }\n  // Axios' default transformRequest is an array\n  return axios.defaults.transformRequest[0].call(null, data, headers);\n}];\nvar AxiosHttpHandler = /** @class */function () {\n  function AxiosHttpHandler(httpOptions, emitter, cancelTokenSource) {\n    if (httpOptions === void 0) {\n      httpOptions = {};\n    }\n    this.httpOptions = httpOptions;\n    this.emitter = emitter;\n    this.cancelTokenSource = cancelTokenSource;\n  }\n  AxiosHttpHandler.prototype.destroy = function () {\n    // Do nothing. TLS and HTTP/2 connection pooling is handled by the\n    // browser.\n  };\n  AxiosHttpHandler.prototype.handle = function (request, options) {\n    var requestTimeoutInMs = this.httpOptions.requestTimeout;\n    // prioritize the call specific event emitter, this is useful for multipart upload as each individual parts has\n    // their own event emitter, without having to create s3client for every individual calls.\n    var emitter = options.emitter || this.emitter;\n    var path = request.path;\n    if (request.query) {\n      var queryString = buildQueryString(request.query);\n      if (queryString) {\n        path += \"?\" + queryString;\n      }\n    }\n    var port = request.port;\n    var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : '') + path;\n    var axiosRequest = {};\n    axiosRequest.url = url;\n    axiosRequest.method = request.method;\n    axiosRequest.headers = request.headers;\n    // The host header is automatically added by the browser and adding it explicitly in the\n    // axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376\n    // This is because the host header is a forbidden header for the http client to set\n    // see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and\n    // https://fetch.spec.whatwg.org/#forbidden-header-name\n    // The reason we are removing this header here instead of in the aws-sdk's client\n    // middleware is that the host header is required to be in the request signature and if\n    // we remove it from the middlewares, then the request fails because the header is added\n    // by the browser but is absent from the signature.\n    delete axiosRequest.headers['host'];\n    if (request.body) {\n      axiosRequest.data = request.body;\n    } else {\n      // Fix for https://github.com/aws-amplify/amplify-js/issues/5432\n      // If the POST request body is empty but content-type header is set, axios is forcibly removing it\n      // See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755\n      // This change is a workaround to set the data as null (instead of undefined) to prevent axios from\n      // removing the content-type header. Link for the source code\n      // https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123\n      if (axiosRequest.headers[Object.keys(axiosRequest.headers).find(function (key) {\n        return key.toLowerCase() === 'content-type';\n      })]) {\n        axiosRequest.data = null;\n      }\n    }\n    if (emitter) {\n      // TODO: Unify linting rules across JS repo\n      axiosRequest.onUploadProgress = function (event) {\n        emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, event);\n        logger.debug(event);\n      };\n      // TODO: Unify linting rules across JS repo\n      axiosRequest.onDownloadProgress = function (event) {\n        emitter.emit(SEND_DOWNLOAD_PROGRESS_EVENT, event);\n        logger.debug(event);\n      };\n    }\n    // If a cancel token source is passed down from the provider, allows cancellation of in-flight requests\n    if (this.cancelTokenSource) {\n      axiosRequest.cancelToken = this.cancelTokenSource.token;\n    }\n    if (options.cancelTokenSource) {\n      axiosRequest.cancelToken = options.cancelTokenSource.token;\n    }\n    // From gamma release, aws-sdk now expects all response type to be of blob or streams\n    axiosRequest.responseType = 'blob';\n    // In Axios, Blobs are identified by calling Object.prototype.toString on the object. However, on React Native,\n    // calling Object.prototype.toString on a Blob returns '[object Object]' instead of '[object Blob]', which causes\n    // Axios to treat Blobs as generic Javascript objects. Therefore we need a to use a custom request transformer\n    // to correctly handle Blob in React Native.\n    if (Platform.isReactNative) {\n      axiosRequest.transformRequest = reactNativeRequestTransformer;\n    }\n    var raceOfPromises = [axios.request(axiosRequest).then(function (response) {\n      return {\n        response: new HttpResponse({\n          headers: response.headers,\n          statusCode: response.status,\n          body: response.data\n        })\n      };\n    }).catch(function (error) {\n      var _a, _b;\n      // Error\n      if (error.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE) {\n        logger.error(error.message);\n      }\n      // for axios' cancel error, we should re-throw it back so it's not considered an s3client error\n      // if we return empty, or an abitrary error HttpResponse, it will be hard to debug down the line.\n      //\n      // for errors that does not have a 'response' object, it's very likely that it is an unexpected error for\n      // example a disconnect. Without it we cannot meaningfully reconstruct a HttpResponse, and the AWS SDK might\n      // consider the request successful by mistake. In this case we should also re-throw the error.\n      if (axios.isCancel(error) || !hasErrorResponse(error)) {\n        throw error;\n      }\n      // otherwise, we should re-construct an HttpResponse from the error, so that it can be passed down to other\n      // aws sdk middleware (e.g retry, clock skew correction, error message serializing)\n      return {\n        response: new HttpResponse({\n          statusCode: error.response.status,\n          body: (_a = error.response) === null || _a === void 0 ? void 0 : _a.data,\n          headers: (_b = error.response) === null || _b === void 0 ? void 0 : _b.headers\n        })\n      };\n    }), requestTimeout(requestTimeoutInMs)];\n    return Promise.race(raceOfPromises);\n  };\n  return AxiosHttpHandler;\n}();\nexport { AxiosHttpHandler };\nfunction requestTimeout(timeoutInMs) {\n  if (timeoutInMs === void 0) {\n    timeoutInMs = 0;\n  }\n  return new Promise(function (resolve, reject) {\n    if (timeoutInMs) {\n      setTimeout(function () {\n        var timeoutError = new Error(\"Request did not complete within \" + timeoutInMs + \" ms\");\n        timeoutError.name = 'TimeoutError';\n        reject(timeoutError);\n      }, timeoutInMs);\n    }\n  });\n}","map":{"version":3,"sources":["../../src/providers/axios-http-handler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { HttpResponse } from '@aws-sdk/protocol-http';\nimport { buildQueryString } from '@aws-sdk/querystring-builder';\nimport axios from 'axios';\nimport { ConsoleLogger as Logger, Platform } from '@aws-amplify/core';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nvar logger = new Logger('axios-http-handler');\nexport var SEND_UPLOAD_PROGRESS_EVENT = 'sendUploadProgress';\nexport var SEND_DOWNLOAD_PROGRESS_EVENT = 'sendDownloadProgress';\nfunction isBlob(body) {\n    return typeof Blob !== 'undefined' && body instanceof Blob;\n}\nfunction hasErrorResponse(error) {\n    return (typeof error !== 'undefined' &&\n        Object.prototype.hasOwnProperty.call(error, 'response') &&\n        typeof error.response !== 'undefined' &&\n        Object.prototype.hasOwnProperty.call(error.response, 'status') &&\n        typeof error.response.status === 'number');\n}\nvar normalizeHeaders = function (headers, normalizedName) {\n    var e_1, _a;\n    try {\n        for (var _b = __values(Object.entries(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var _d = __read(_c.value, 2), k = _d[0], v = _d[1];\n            if (k !== normalizedName &&\n                k.toUpperCase() === normalizedName.toUpperCase()) {\n                headers[normalizedName] = v;\n                delete headers[k];\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n};\nexport var reactNativeRequestTransformer = [\n    function (data, headers) {\n        if (isBlob(data)) {\n            normalizeHeaders(headers, 'Content-Type');\n            normalizeHeaders(headers, 'Accept');\n            return data;\n        }\n        // Axios' default transformRequest is an array\n        return axios.defaults.transformRequest[0].call(null, data, headers);\n    },\n];\nvar AxiosHttpHandler = /** @class */ (function () {\n    function AxiosHttpHandler(httpOptions, emitter, cancelTokenSource) {\n        if (httpOptions === void 0) { httpOptions = {}; }\n        this.httpOptions = httpOptions;\n        this.emitter = emitter;\n        this.cancelTokenSource = cancelTokenSource;\n    }\n    AxiosHttpHandler.prototype.destroy = function () {\n        // Do nothing. TLS and HTTP/2 connection pooling is handled by the\n        // browser.\n    };\n    AxiosHttpHandler.prototype.handle = function (request, options) {\n        var requestTimeoutInMs = this.httpOptions.requestTimeout;\n        // prioritize the call specific event emitter, this is useful for multipart upload as each individual parts has\n        // their own event emitter, without having to create s3client for every individual calls.\n        var emitter = options.emitter || this.emitter;\n        var path = request.path;\n        if (request.query) {\n            var queryString = buildQueryString(request.query);\n            if (queryString) {\n                path += \"?\" + queryString;\n            }\n        }\n        var port = request.port;\n        var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : '') + path;\n        var axiosRequest = {};\n        axiosRequest.url = url;\n        axiosRequest.method = request.method;\n        axiosRequest.headers = request.headers;\n        // The host header is automatically added by the browser and adding it explicitly in the\n        // axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376\n        // This is because the host header is a forbidden header for the http client to set\n        // see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and\n        // https://fetch.spec.whatwg.org/#forbidden-header-name\n        // The reason we are removing this header here instead of in the aws-sdk's client\n        // middleware is that the host header is required to be in the request signature and if\n        // we remove it from the middlewares, then the request fails because the header is added\n        // by the browser but is absent from the signature.\n        delete axiosRequest.headers['host'];\n        if (request.body) {\n            axiosRequest.data = request.body;\n        }\n        else {\n            // Fix for https://github.com/aws-amplify/amplify-js/issues/5432\n            // If the POST request body is empty but content-type header is set, axios is forcibly removing it\n            // See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755\n            // This change is a workaround to set the data as null (instead of undefined) to prevent axios from\n            // removing the content-type header. Link for the source code\n            // https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123\n            if (axiosRequest.headers[Object.keys(axiosRequest.headers).find(function (key) { return key.toLowerCase() === 'content-type'; })]) {\n                axiosRequest.data = null;\n            }\n        }\n        if (emitter) {\n            // TODO: Unify linting rules across JS repo\n            axiosRequest.onUploadProgress = function (event) {\n                emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, event);\n                logger.debug(event);\n            };\n            // TODO: Unify linting rules across JS repo\n            axiosRequest.onDownloadProgress = function (event) {\n                emitter.emit(SEND_DOWNLOAD_PROGRESS_EVENT, event);\n                logger.debug(event);\n            };\n        }\n        // If a cancel token source is passed down from the provider, allows cancellation of in-flight requests\n        if (this.cancelTokenSource) {\n            axiosRequest.cancelToken = this.cancelTokenSource.token;\n        }\n        if (options.cancelTokenSource) {\n            axiosRequest.cancelToken = options.cancelTokenSource.token;\n        }\n        // From gamma release, aws-sdk now expects all response type to be of blob or streams\n        axiosRequest.responseType = 'blob';\n        // In Axios, Blobs are identified by calling Object.prototype.toString on the object. However, on React Native,\n        // calling Object.prototype.toString on a Blob returns '[object Object]' instead of '[object Blob]', which causes\n        // Axios to treat Blobs as generic Javascript objects. Therefore we need a to use a custom request transformer\n        // to correctly handle Blob in React Native.\n        if (Platform.isReactNative) {\n            axiosRequest.transformRequest = reactNativeRequestTransformer;\n        }\n        var raceOfPromises = [\n            axios\n                .request(axiosRequest)\n                .then(function (response) {\n                return {\n                    response: new HttpResponse({\n                        headers: response.headers,\n                        statusCode: response.status,\n                        body: response.data,\n                    }),\n                };\n            })\n                .catch(function (error) {\n                var _a, _b;\n                // Error\n                if (error.message !==\n                    AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE) {\n                    logger.error(error.message);\n                }\n                // for axios' cancel error, we should re-throw it back so it's not considered an s3client error\n                // if we return empty, or an abitrary error HttpResponse, it will be hard to debug down the line.\n                //\n                // for errors that does not have a 'response' object, it's very likely that it is an unexpected error for\n                // example a disconnect. Without it we cannot meaningfully reconstruct a HttpResponse, and the AWS SDK might\n                // consider the request successful by mistake. In this case we should also re-throw the error.\n                if (axios.isCancel(error) || !hasErrorResponse(error)) {\n                    throw error;\n                }\n                // otherwise, we should re-construct an HttpResponse from the error, so that it can be passed down to other\n                // aws sdk middleware (e.g retry, clock skew correction, error message serializing)\n                return {\n                    response: new HttpResponse({\n                        statusCode: error.response.status,\n                        body: (_a = error.response) === null || _a === void 0 ? void 0 : _a.data,\n                        headers: (_b = error.response) === null || _b === void 0 ? void 0 : _b.headers,\n                    }),\n                };\n            }),\n            requestTimeout(requestTimeoutInMs),\n        ];\n        return Promise.race(raceOfPromises);\n    };\n    return AxiosHttpHandler;\n}());\nexport { AxiosHttpHandler };\nfunction requestTimeout(timeoutInMs) {\n    if (timeoutInMs === void 0) { timeoutInMs = 0; }\n    return new Promise(function (resolve, reject) {\n        if (timeoutInMs) {\n            setTimeout(function () {\n                var timeoutError = new Error(\"Request did not complete within \" + timeoutInMs + \" ms\");\n                timeoutError.name = 'TimeoutError';\n                reject(timeoutError);\n            }, timeoutInMs);\n        }\n    });\n}\n//# sourceMappingURL=axios-http-handler.js.map"]},"metadata":{},"sourceType":"module"}