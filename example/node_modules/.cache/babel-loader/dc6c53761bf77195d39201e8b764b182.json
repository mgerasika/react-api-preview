{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport Observable from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONTROL_MSG } from '../../types/PubSub';\nimport { AMPLIFY_SYMBOL, AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_INIT_TIMEOUT, DEFAULT_KEEP_ALIVE_TIMEOUT, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, MAX_DELAY_MS, MESSAGE_TYPES, NON_RETRYABLE_CODES, SOCKET_STATUS, START_ACK_TIMEOUT, SUBSCRIPTION_STATUS, CONNECTION_STATE_CHANGE } from '../constants';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../../utils/ConnectionStateMonitor';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\nvar dispatchApiEvent = function (event, data, message) {\n  Hub.dispatch('api', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com\\/graphql$/i;\nvar customDomainPath = '/realtime';\nvar AWSAppSyncRealTimeProvider = /** @class */function (_super) {\n  __extends(AWSAppSyncRealTimeProvider, _super);\n  function AWSAppSyncRealTimeProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this.socketStatus = SOCKET_STATUS.CLOSED;\n    _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    _this.subscriptionObserverMap = new Map();\n    _this.promiseArray = [];\n    _this.connectionStateMonitor = new ConnectionStateMonitor();\n    // Monitor the connection state and pass changes along to Hub\n    _this.connectionStateMonitor.connectionStateObservable.subscribe(function (ConnectionState) {\n      dispatchApiEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: ConnectionState\n      }, \"Connection state is \" + ConnectionState);\n    });\n    return _this;\n  }\n  AWSAppSyncRealTimeProvider.prototype.getNewWebSocket = function (url, protocol) {\n    return new WebSocket(url, protocol);\n  };\n  AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncRealTimeProvider';\n  };\n  AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n    throw new Error('Not used here');\n  };\n  AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n  // Check if url matches standard domain pattern\n  AWSAppSyncRealTimeProvider.prototype.isCustomDomain = function (url) {\n    return url.match(standardDomainPattern) === null;\n  };\n  AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = options === null || options === void 0 ? void 0 : options.appSyncGraphqlEndpoint;\n    return new Observable(function (observer) {\n      if (!options || !appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\"))]\n        });\n        observer.complete();\n      } else {\n        var subscriptionId_1 = uuid();\n        _this._startSubscriptionWithAWSAppSyncRealTime({\n          options: options,\n          observer: observer,\n          subscriptionId: subscriptionId_1\n        }).catch(function (err) {\n          observer.error({\n            errors: [__assign({}, new GraphQLError(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + \": \" + err))]\n          });\n          _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n          observer.complete();\n        });\n        return function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var subscriptionState, err_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2, 3, 4]);\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  return [4 /*yield*/, this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n                case 1:\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  _a.sent();\n                  subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n                  if (!subscriptionState) {\n                    // subscription already unsubscribed\n                    return [2 /*return*/];\n                  }\n\n                  if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                  } else {\n                    throw new Error('Subscription never connected');\n                  }\n                  return [3 /*break*/, 4];\n                case 2:\n                  err_1 = _a.sent();\n                  logger.debug(\"Error while unsubscribing \" + err_1);\n                  return [3 /*break*/, 4];\n                case 3:\n                  this._removeSubscriptionObserver(subscriptionId_1);\n                  return [7 /*endfinally*/];\n                case 4:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n\n  Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n    var options = _a.options,\n      observer = _a.observer,\n      subscriptionId = _a.subscriptionId;\n    var _b, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _d, graphql_headers, _e, additionalHeaders, subscriptionState, data, dataString, headerObj, _f, _g, subscriptionMessage, stringToAWSRealTime, err_2, message, subscriptionFailedCallback_1, _h, subscriptionFailedCallback, subscriptionReadyCallback;\n      var _j;\n      var _this = this;\n      return __generator(this, function (_k) {\n        switch (_k.label) {\n          case 0:\n            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _d = options.graphql_headers, graphql_headers = _d === void 0 ? function () {\n              return {};\n            } : _d, _e = options.additionalHeaders, additionalHeaders = _e === void 0 ? {} : _e;\n            subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n            data = {\n              query: query,\n              variables: variables\n            };\n            // Having a subscription id map will make it simple to forward messages received\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionState: subscriptionState,\n              startAckTimeoutId: undefined\n            });\n            dataString = JSON.stringify(data);\n            _f = [{}];\n            return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              payload: dataString,\n              canonicalUri: '',\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n          case 1:\n            _g = [__assign.apply(void 0, _f.concat([_k.sent()]))];\n            return [4 /*yield*/, graphql_headers()];\n          case 2:\n            headerObj = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), additionalHeaders]), (_j = {}, _j[USER_AGENT_HEADER] = Constants.userAgent, _j)]);\n            subscriptionMessage = {\n              id: subscriptionId,\n              payload: {\n                data: dataString,\n                extensions: {\n                  authorization: __assign({}, headerObj)\n                }\n              },\n              type: MESSAGE_TYPES.GQL_START\n            };\n            stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n            _k.label = 3;\n          case 3:\n            _k.trys.push([3, 5,, 6]);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            return [4 /*yield*/, this._initializeWebSocketConnection({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n          case 4:\n            _k.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            err_2 = _k.sent();\n            logger.debug({\n              err: err_2\n            });\n            message = (_b = err_2['message']) !== null && _b !== void 0 ? _b : '';\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            observer.error({\n              errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + message))]\n            });\n            observer.complete();\n            subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;\n            // Notify concurrent unsubscription\n            if (typeof subscriptionFailedCallback_1 === 'function') {\n              subscriptionFailedCallback_1();\n            }\n            return [2 /*return*/];\n          case 6:\n            _h = (_c = this.subscriptionObserverMap.get(subscriptionId)) !== null && _c !== void 0 ? _c : {}, subscriptionFailedCallback = _h.subscriptionFailedCallback, subscriptionReadyCallback = _h.subscriptionReadyCallback;\n            // This must be done before sending the message in order to be listening immediately\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n            });\n            if (this.awsRealTimeSocket) {\n              this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // Waiting that subscription has been connected before trying to unsubscribe\n  AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionObserver, subscriptionState;\n      var _this = this;\n      return __generator(this, function (_a) {\n        subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n        if (subscriptionObserver) {\n          subscriptionState = subscriptionObserver.subscriptionState;\n          // This in case unsubscribe is invoked before sending start subscription message\n          if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n            return [2 /*return*/, new Promise(function (res, rej) {\n              var observer = subscriptionObserver.observer,\n                subscriptionState = subscriptionObserver.subscriptionState,\n                variables = subscriptionObserver.variables,\n                query = subscriptionObserver.query;\n              _this.subscriptionObserverMap.set(subscriptionId, {\n                observer: observer,\n                subscriptionState: subscriptionState,\n                variables: variables,\n                query: query,\n                subscriptionReadyCallback: res,\n                subscriptionFailedCallback: rej\n              });\n            })];\n          }\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        var unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err: err\n      });\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId);\n    // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  };\n  AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n      if (this.keepAliveTimeoutId) {\n        clearTimeout(this.keepAliveTimeoutId);\n      }\n      if (this.keepAliveAlertTimeoutId) {\n        clearTimeout(this.keepAliveAlertTimeoutId);\n      }\n      var tempSocket = this.awsRealTimeSocket;\n      // Cleaning callbacks to avoid race condition, socket still exists\n      tempSocket.onclose = null;\n      tempSocket.onerror = null;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = undefined;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n    var _this = this;\n    logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n    var _a = JSON.parse(message.data),\n      _b = _a.id,\n      id = _b === void 0 ? '' : _b,\n      payload = _a.payload,\n      type = _a.type;\n    var _c = this.subscriptionObserverMap.get(id) || {},\n      _d = _c.observer,\n      observer = _d === void 0 ? null : _d,\n      _e = _c.query,\n      query = _e === void 0 ? '' : _e,\n      _f = _c.variables,\n      variables = _f === void 0 ? {} : _f,\n      startAckTimeoutId = _c.startAckTimeoutId,\n      subscriptionReadyCallback = _c.subscriptionReadyCallback,\n      subscriptionFailedCallback = _c.subscriptionFailedCallback;\n    logger.debug({\n      id: id,\n      observer: observer,\n      query: query,\n      variables: variables\n    });\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \" + id);\n      }\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \" + JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n      if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n      dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, {\n        query: query,\n        variables: variables\n      }, 'Connection established for subscription');\n      var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: undefined,\n          subscriptionState: subscriptionState,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback\n        });\n      }\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      if (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n      if (this.keepAliveAlertTimeoutId) clearTimeout(this.keepAliveAlertTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(function () {\n        return _this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT);\n      }, this.keepAliveTimeout);\n      this.keepAliveAlertTimeoutId = setTimeout(function () {\n        _this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n      }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: startAckTimeoutId,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback,\n          subscriptionState: subscriptionState\n        });\n        observer.error({\n          errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload)))]\n        });\n        if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n        observer.complete();\n        if (typeof subscriptionFailedCallback === 'function') {\n          subscriptionFailedCallback();\n        }\n      }\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n    logger.debug(\"Disconnect error: \" + msg);\n    this.subscriptionObserverMap.forEach(function (_a) {\n      var observer = _a.observer;\n      if (observer && !observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(msg))]\n        });\n      }\n    });\n    this.subscriptionObserverMap.clear();\n    if (this.awsRealTimeSocket) {\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      this.awsRealTimeSocket.close();\n    }\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  };\n  AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n    var subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n    if (subscriptionObserver) {\n      var observer = subscriptionObserver.observer,\n        query = subscriptionObserver.query,\n        variables = subscriptionObserver.variables;\n      if (!observer) {\n        return;\n      }\n      this.subscriptionObserverMap.set(subscriptionId, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        subscriptionState: SUBSCRIPTION_STATUS.FAILED\n      });\n      if (observer && !observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscription timeout \" + JSON.stringify({\n            query: query,\n            variables: variables\n          })))]\n        });\n        // Cleanup will be automatically executed\n        observer.complete();\n      }\n      logger.debug('timeoutStartSubscription', JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      authenticationType = _a.authenticationType,\n      apiKey = _a.apiKey,\n      region = _a.region,\n      additionalHeaders = _a.additionalHeaders;\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var payloadString, headerString, _a, _b, headerQs, payloadQs, discoverableEndpoint, protocol, awsRealTimeUrl, err_3;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              this.promiseArray.push({\n                res: res,\n                rej: rej\n              });\n              if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3 /*break*/, 5];\n              _c.label = 1;\n            case 1:\n              _c.trys.push([1, 4,, 5]);\n              this.socketStatus = SOCKET_STATUS.CONNECTING;\n              payloadString = '{}';\n              _b = (_a = JSON).stringify;\n              return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                authenticationType: authenticationType,\n                payload: payloadString,\n                canonicalUri: '/connect',\n                apiKey: apiKey,\n                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                region: region,\n                additionalHeaders: additionalHeaders\n              })];\n            case 2:\n              headerString = _b.apply(_a, [_c.sent()]);\n              headerQs = Buffer.from(headerString).toString('base64');\n              payloadQs = Buffer.from(payloadString).toString('base64');\n              discoverableEndpoint = appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '';\n              if (this.isCustomDomain(discoverableEndpoint)) {\n                discoverableEndpoint = discoverableEndpoint.concat(customDomainPath);\n              } else {\n                discoverableEndpoint = discoverableEndpoint.replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n              }\n              protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n              discoverableEndpoint = discoverableEndpoint.replace('https://', protocol).replace('http://', protocol);\n              awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n              return [4 /*yield*/, this._initializeRetryableHandshake(awsRealTimeUrl)];\n            case 3:\n              _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var res = _a.res;\n                logger.debug('Notifying connection successful');\n                res();\n              });\n              this.socketStatus = SOCKET_STATUS.READY;\n              this.promiseArray = [];\n              return [3 /*break*/, 5];\n            case 4:\n              err_3 = _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var rej = _a.rej;\n                return rej(err_3);\n              });\n              this.promiseArray = [];\n              if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                this.awsRealTimeSocket.close(3001);\n              }\n              this.awsRealTimeSocket = undefined;\n              this.socketStatus = SOCKET_STATUS.CLOSED;\n              return [3 /*break*/, 5];\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug(\"Initializaling retryable Handshake\");\n            return [4 /*yield*/, jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl], MAX_DELAY_MS)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4, _a, errorType, errorCode;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                var newSocket = _this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n                newSocket.onerror = function () {\n                  logger.debug(\"WebSocket connection error\");\n                };\n                newSocket.onclose = function () {\n                  _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                  rej(new Error('Connection handshake error'));\n                };\n                newSocket.onopen = function () {\n                  _this.awsRealTimeSocket = newSocket;\n                  return res();\n                };\n              });\n            }()];\n          case 2:\n            _b.sent();\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                if (_this.awsRealTimeSocket) {\n                  var ackOk_1 = false;\n                  _this.awsRealTimeSocket.onerror = function (error) {\n                    logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                  };\n                  _this.awsRealTimeSocket.onclose = function (event) {\n                    logger.debug(\"WebSocket closed \" + event.reason);\n                    rej(new Error(JSON.stringify(event)));\n                  };\n                  _this.awsRealTimeSocket.onmessage = function (message) {\n                    logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                    var data = JSON.parse(message.data);\n                    var type = data.type,\n                      _a = data.payload,\n                      _b = (_a === void 0 ? {} : _a).connectionTimeoutMs,\n                      connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                      ackOk_1 = true;\n                      if (_this.awsRealTimeSocket) {\n                        _this.keepAliveTimeout = connectionTimeoutMs;\n                        _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n                        _this.awsRealTimeSocket.onerror = function (err) {\n                          logger.debug(err);\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                        _this.awsRealTimeSocket.onclose = function (event) {\n                          logger.debug(\"WebSocket closed \" + event.reason);\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                      }\n                      res('Cool, connected to AWS AppSyncRealTime');\n                      return;\n                    }\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                      var _c = data.payload,\n                        _d = (_c === void 0 ? {} : _c).errors,\n                        _e = __read(_d === void 0 ? [] : _d, 1),\n                        _f = _e[0],\n                        _g = _f === void 0 ? {} : _f,\n                        _h = _g.errorType,\n                        errorType = _h === void 0 ? '' : _h,\n                        _j = _g.errorCode,\n                        errorCode = _j === void 0 ? 0 : _j;\n                      rej({\n                        errorType: errorType,\n                        errorCode: errorCode\n                      });\n                    }\n                  };\n                  var gqlInit = {\n                    type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n                  };\n                  _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n                  var checkAckOk_1 = function (ackOk) {\n                    if (!ackOk) {\n                      _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                      rej(new Error(\"Connection timeout: ack from AWSAppSyncRealTime was not received after \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                    }\n                  };\n                  setTimeout(function () {\n                    return checkAckOk_1(ackOk_1);\n                  }, CONNECTION_INIT_TIMEOUT);\n                }\n              });\n            }()];\n          case 3:\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            _b.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            err_4 = _b.sent();\n            _a = err_4, errorType = _a.errorType, errorCode = _a.errorCode;\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n              throw new NonRetryableError(errorType);\n            } else if (errorType) {\n              throw new Error(errorType);\n            } else {\n              throw err_4;\n            }\n            return [3 /*break*/, 5];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n    var authenticationType = _a.authenticationType,\n      payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      apiKey = _a.apiKey,\n      region = _a.region,\n      additionalHeaders = _a.additionalHeaders;\n    return __awaiter(this, void 0, void 0, function () {\n      var headerHandler, handler, host, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headerHandler = {\n              API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n              AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n              OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n              AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n              AWS_LAMBDA: this._customAuthHeader\n            };\n            if (!(!authenticationType || !headerHandler[authenticationType])) return [3 /*break*/, 1];\n            logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n            return [2 /*return*/, ''];\n          case 1:\n            handler = headerHandler[authenticationType];\n            host = url.parse(appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '').host;\n            logger.debug(\"Authenticating with \" + authenticationType);\n            return [4 /*yield*/, handler({\n              payload: payload,\n              canonicalUri: canonicalUri,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              apiKey: apiKey,\n              region: region,\n              host: host,\n              additionalHeaders: additionalHeaders\n            })];\n          case 2:\n            result = _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var session;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Auth.currentSession()];\n          case 1:\n            session = _b.sent();\n            return [2 /*return*/, {\n              Authorization: session.getAccessToken().getJwtToken(),\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var token, federatedInfo, currentUser;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Cache.getItem('federatedInfo')];\n          case 1:\n            federatedInfo = _b.sent();\n            if (!federatedInfo) return [3 /*break*/, 2];\n            token = federatedInfo.token;\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, Auth.currentAuthenticatedUser()];\n          case 3:\n            currentUser = _b.sent();\n            if (currentUser) {\n              token = currentUser.token;\n            }\n            _b.label = 4;\n          case 4:\n            if (!token) {\n              throw new Error('No federated jwt');\n            }\n            return [2 /*return*/, {\n              Authorization: token,\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n    var apiKey = _a.apiKey,\n      host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var dt, dtStr;\n      return __generator(this, function (_b) {\n        dt = new Date();\n        dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return [2 /*return*/, {\n          host: host,\n          'x-amz-date': dtStr,\n          'x-api-key': apiKey\n        }];\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n    var payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointInfo, credentialsOK, creds, request, signed_params;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            endpointInfo = {\n              region: region,\n              service: 'appsync'\n            };\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _b.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            return [4 /*yield*/, Credentials.get().then(function (credentials) {\n              var _a = credentials,\n                secretAccessKey = _a.secretAccessKey,\n                accessKeyId = _a.accessKeyId,\n                sessionToken = _a.sessionToken;\n              return {\n                secret_key: secretAccessKey,\n                access_key: accessKeyId,\n                session_token: sessionToken\n              };\n            })];\n          case 2:\n            creds = _b.sent();\n            request = {\n              url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n              data: payload,\n              method: 'POST',\n              headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS)\n            };\n            signed_params = Signer.sign(request, creds, endpointInfo);\n            return [2 /*return*/, signed_params.headers];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._customAuthHeader = function (_a) {\n    var host = _a.host,\n      additionalHeaders = _a.additionalHeaders;\n    if (!additionalHeaders || !additionalHeaders['Authorization']) {\n      throw new Error('No auth token specified');\n    }\n    return {\n      Authorization: additionalHeaders.Authorization,\n      host: host\n    };\n  };\n  /**\n   * @private\n   */\n  AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n  return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider);\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"sources":["../../../src/Providers/AWSAppSyncRealTimeProvider/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport Observable from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError, } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONTROL_MSG } from '../../types/PubSub';\nimport { AMPLIFY_SYMBOL, AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_INIT_TIMEOUT, DEFAULT_KEEP_ALIVE_TIMEOUT, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, MAX_DELAY_MS, MESSAGE_TYPES, NON_RETRYABLE_CODES, SOCKET_STATUS, START_ACK_TIMEOUT, SUBSCRIPTION_STATUS, CONNECTION_STATE_CHANGE, } from '../constants';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE, } from '../../utils/ConnectionStateMonitor';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\nvar dispatchApiEvent = function (event, data, message) {\n    Hub.dispatch('api', { event: event, data: data, message: message }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com\\/graphql$/i;\nvar customDomainPath = '/realtime';\nvar AWSAppSyncRealTimeProvider = /** @class */ (function (_super) {\n    __extends(AWSAppSyncRealTimeProvider, _super);\n    function AWSAppSyncRealTimeProvider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this.socketStatus = SOCKET_STATUS.CLOSED;\n        _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n        _this.subscriptionObserverMap = new Map();\n        _this.promiseArray = [];\n        _this.connectionStateMonitor = new ConnectionStateMonitor();\n        // Monitor the connection state and pass changes along to Hub\n        _this.connectionStateMonitor.connectionStateObservable.subscribe(function (ConnectionState) {\n            dispatchApiEvent(CONNECTION_STATE_CHANGE, {\n                provider: _this,\n                connectionState: ConnectionState,\n            }, \"Connection state is \" + ConnectionState);\n        });\n        return _this;\n    }\n    AWSAppSyncRealTimeProvider.prototype.getNewWebSocket = function (url, protocol) {\n        return new WebSocket(url, protocol);\n    };\n    AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n        return 'AWSAppSyncRealTimeProvider';\n    };\n    AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n        throw new Error('Not used here');\n    };\n    AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                throw new Error('Operation not supported');\n            });\n        });\n    };\n    // Check if url matches standard domain pattern\n    AWSAppSyncRealTimeProvider.prototype.isCustomDomain = function (url) {\n        return url.match(standardDomainPattern) === null;\n    };\n    AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n        var _this = this;\n        var appSyncGraphqlEndpoint = options === null || options === void 0 ? void 0 : options.appSyncGraphqlEndpoint;\n        return new Observable(function (observer) {\n            if (!options || !appSyncGraphqlEndpoint) {\n                observer.error({\n                    errors: [\n                        __assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\")),\n                    ],\n                });\n                observer.complete();\n            }\n            else {\n                var subscriptionId_1 = uuid();\n                _this._startSubscriptionWithAWSAppSyncRealTime({\n                    options: options,\n                    observer: observer,\n                    subscriptionId: subscriptionId_1,\n                }).catch(function (err) {\n                    observer.error({\n                        errors: [\n                            __assign({}, new GraphQLError(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + \": \" + err)),\n                        ],\n                    });\n                    _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n                    observer.complete();\n                });\n                return function () { return __awaiter(_this, void 0, void 0, function () {\n                    var subscriptionState, err_1;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                _a.trys.push([0, 2, 3, 4]);\n                                // Waiting that subscription has been connected before trying to unsubscribe\n                                return [4 /*yield*/, this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n                            case 1:\n                                // Waiting that subscription has been connected before trying to unsubscribe\n                                _a.sent();\n                                subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n                                if (!subscriptionState) {\n                                    // subscription already unsubscribed\n                                    return [2 /*return*/];\n                                }\n                                if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                                }\n                                else {\n                                    throw new Error('Subscription never connected');\n                                }\n                                return [3 /*break*/, 4];\n                            case 2:\n                                err_1 = _a.sent();\n                                logger.debug(\"Error while unsubscribing \" + err_1);\n                                return [3 /*break*/, 4];\n                            case 3:\n                                this._removeSubscriptionObserver(subscriptionId_1);\n                                return [7 /*endfinally*/];\n                            case 4: return [2 /*return*/];\n                        }\n                    });\n                }); };\n            }\n        });\n    };\n    Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, \"isSSLEnabled\", {\n        get: function () {\n            return !this.options\n                .aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n        var options = _a.options, observer = _a.observer, subscriptionId = _a.subscriptionId;\n        var _b, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _d, graphql_headers, _e, additionalHeaders, subscriptionState, data, dataString, headerObj, _f, _g, subscriptionMessage, stringToAWSRealTime, err_2, message, subscriptionFailedCallback_1, _h, subscriptionFailedCallback, subscriptionReadyCallback;\n            var _j;\n            var _this = this;\n            return __generator(this, function (_k) {\n                switch (_k.label) {\n                    case 0:\n                        appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _d = options.graphql_headers, graphql_headers = _d === void 0 ? function () { return ({}); } : _d, _e = options.additionalHeaders, additionalHeaders = _e === void 0 ? {} : _e;\n                        subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n                        data = {\n                            query: query,\n                            variables: variables,\n                        };\n                        // Having a subscription id map will make it simple to forward messages received\n                        this.subscriptionObserverMap.set(subscriptionId, {\n                            observer: observer,\n                            query: query !== null && query !== void 0 ? query : '',\n                            variables: variables !== null && variables !== void 0 ? variables : {},\n                            subscriptionState: subscriptionState,\n                            startAckTimeoutId: undefined,\n                        });\n                        dataString = JSON.stringify(data);\n                        _f = [{}];\n                        return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                                apiKey: apiKey,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                authenticationType: authenticationType,\n                                payload: dataString,\n                                canonicalUri: '',\n                                region: region,\n                                additionalHeaders: additionalHeaders,\n                            })];\n                    case 1:\n                        _g = [__assign.apply(void 0, _f.concat([(_k.sent())]))];\n                        return [4 /*yield*/, graphql_headers()];\n                    case 2:\n                        headerObj = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), additionalHeaders]), (_j = {}, _j[USER_AGENT_HEADER] = Constants.userAgent, _j)]);\n                        subscriptionMessage = {\n                            id: subscriptionId,\n                            payload: {\n                                data: dataString,\n                                extensions: {\n                                    authorization: __assign({}, headerObj),\n                                },\n                            },\n                            type: MESSAGE_TYPES.GQL_START,\n                        };\n                        stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n                        _k.label = 3;\n                    case 3:\n                        _k.trys.push([3, 5, , 6]);\n                        this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n                        return [4 /*yield*/, this._initializeWebSocketConnection({\n                                apiKey: apiKey,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                authenticationType: authenticationType,\n                                region: region,\n                                additionalHeaders: additionalHeaders,\n                            })];\n                    case 4:\n                        _k.sent();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        err_2 = _k.sent();\n                        logger.debug({ err: err_2 });\n                        message = (_b = err_2['message']) !== null && _b !== void 0 ? _b : '';\n                        this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n                        observer.error({\n                            errors: [\n                                __assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + message)),\n                            ],\n                        });\n                        observer.complete();\n                        subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;\n                        // Notify concurrent unsubscription\n                        if (typeof subscriptionFailedCallback_1 === 'function') {\n                            subscriptionFailedCallback_1();\n                        }\n                        return [2 /*return*/];\n                    case 6:\n                        _h = (_c = this.subscriptionObserverMap.get(subscriptionId)) !== null && _c !== void 0 ? _c : {}, subscriptionFailedCallback = _h.subscriptionFailedCallback, subscriptionReadyCallback = _h.subscriptionReadyCallback;\n                        // This must be done before sending the message in order to be listening immediately\n                        this.subscriptionObserverMap.set(subscriptionId, {\n                            observer: observer,\n                            subscriptionState: subscriptionState,\n                            query: query !== null && query !== void 0 ? query : '',\n                            variables: variables !== null && variables !== void 0 ? variables : {},\n                            subscriptionReadyCallback: subscriptionReadyCallback,\n                            subscriptionFailedCallback: subscriptionFailedCallback,\n                            startAckTimeoutId: setTimeout(function () {\n                                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n                            }, START_ACK_TIMEOUT),\n                        });\n                        if (this.awsRealTimeSocket) {\n                            this.awsRealTimeSocket.send(stringToAWSRealTime);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Waiting that subscription has been connected before trying to unsubscribe\n    AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var subscriptionObserver, subscriptionState;\n            var _this = this;\n            return __generator(this, function (_a) {\n                subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n                if (subscriptionObserver) {\n                    subscriptionState = subscriptionObserver.subscriptionState;\n                    // This in case unsubscribe is invoked before sending start subscription message\n                    if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                var observer = subscriptionObserver.observer, subscriptionState = subscriptionObserver.subscriptionState, variables = subscriptionObserver.variables, query = subscriptionObserver.query;\n                                _this.subscriptionObserverMap.set(subscriptionId, {\n                                    observer: observer,\n                                    subscriptionState: subscriptionState,\n                                    variables: variables,\n                                    query: query,\n                                    subscriptionReadyCallback: res,\n                                    subscriptionFailedCallback: rej,\n                                });\n                            })];\n                    }\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n        try {\n            if (this.awsRealTimeSocket &&\n                this.awsRealTimeSocket.readyState === WebSocket.OPEN &&\n                this.socketStatus === SOCKET_STATUS.READY) {\n                // Preparing unsubscribe message to stop receiving messages for that subscription\n                var unsubscribeMessage = {\n                    id: subscriptionId,\n                    type: MESSAGE_TYPES.GQL_STOP,\n                };\n                var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n                this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n        }\n        catch (err) {\n            // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n            logger.debug({ err: err });\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n        this.subscriptionObserverMap.delete(subscriptionId);\n        // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n        setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    };\n    AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n        if (this.subscriptionObserverMap.size > 0) {\n            // Active subscriptions on the WebSocket\n            return;\n        }\n        if (!this.awsRealTimeSocket) {\n            this.socketStatus = SOCKET_STATUS.CLOSED;\n            return;\n        }\n        this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n        if (this.awsRealTimeSocket.bufferedAmount > 0) {\n            // Still data on the WebSocket\n            setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n        }\n        else {\n            logger.debug('closing WebSocket...');\n            if (this.keepAliveTimeoutId) {\n                clearTimeout(this.keepAliveTimeoutId);\n            }\n            if (this.keepAliveAlertTimeoutId) {\n                clearTimeout(this.keepAliveAlertTimeoutId);\n            }\n            var tempSocket = this.awsRealTimeSocket;\n            // Cleaning callbacks to avoid race condition, socket still exists\n            tempSocket.onclose = null;\n            tempSocket.onerror = null;\n            tempSocket.close(1000);\n            this.awsRealTimeSocket = undefined;\n            this.socketStatus = SOCKET_STATUS.CLOSED;\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n        var _this = this;\n        logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n        var _a = JSON.parse(message.data), _b = _a.id, id = _b === void 0 ? '' : _b, payload = _a.payload, type = _a.type;\n        var _c = this.subscriptionObserverMap.get(id) || {}, _d = _c.observer, observer = _d === void 0 ? null : _d, _e = _c.query, query = _e === void 0 ? '' : _e, _f = _c.variables, variables = _f === void 0 ? {} : _f, startAckTimeoutId = _c.startAckTimeoutId, subscriptionReadyCallback = _c.subscriptionReadyCallback, subscriptionFailedCallback = _c.subscriptionFailedCallback;\n        logger.debug({ id: id, observer: observer, query: query, variables: variables });\n        if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n            if (observer) {\n                observer.next(payload);\n            }\n            else {\n                logger.debug(\"observer not found for id: \" + id);\n            }\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_START_ACK) {\n            logger.debug(\"subscription ready for \" + JSON.stringify({ query: query, variables: variables }));\n            if (typeof subscriptionReadyCallback === 'function') {\n                subscriptionReadyCallback();\n            }\n            if (startAckTimeoutId)\n                clearTimeout(startAckTimeoutId);\n            dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, { query: query, variables: variables }, 'Connection established for subscription');\n            var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n            if (observer) {\n                this.subscriptionObserverMap.set(id, {\n                    observer: observer,\n                    query: query,\n                    variables: variables,\n                    startAckTimeoutId: undefined,\n                    subscriptionState: subscriptionState,\n                    subscriptionReadyCallback: subscriptionReadyCallback,\n                    subscriptionFailedCallback: subscriptionFailedCallback,\n                });\n            }\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n            if (this.keepAliveTimeoutId)\n                clearTimeout(this.keepAliveTimeoutId);\n            if (this.keepAliveAlertTimeoutId)\n                clearTimeout(this.keepAliveAlertTimeoutId);\n            this.keepAliveTimeoutId = setTimeout(function () { return _this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT); }, this.keepAliveTimeout);\n            this.keepAliveAlertTimeoutId = setTimeout(function () {\n                _this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n            }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_ERROR) {\n            var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n            if (observer) {\n                this.subscriptionObserverMap.set(id, {\n                    observer: observer,\n                    query: query,\n                    variables: variables,\n                    startAckTimeoutId: startAckTimeoutId,\n                    subscriptionReadyCallback: subscriptionReadyCallback,\n                    subscriptionFailedCallback: subscriptionFailedCallback,\n                    subscriptionState: subscriptionState,\n                });\n                observer.error({\n                    errors: [\n                        __assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload))),\n                    ],\n                });\n                if (startAckTimeoutId)\n                    clearTimeout(startAckTimeoutId);\n                observer.complete();\n                if (typeof subscriptionFailedCallback === 'function') {\n                    subscriptionFailedCallback();\n                }\n            }\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n        logger.debug(\"Disconnect error: \" + msg);\n        this.subscriptionObserverMap.forEach(function (_a) {\n            var observer = _a.observer;\n            if (observer && !observer.closed) {\n                observer.error({\n                    errors: [__assign({}, new GraphQLError(msg))],\n                });\n            }\n        });\n        this.subscriptionObserverMap.clear();\n        if (this.awsRealTimeSocket) {\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            this.awsRealTimeSocket.close();\n        }\n        this.socketStatus = SOCKET_STATUS.CLOSED;\n    };\n    AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n        var subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n        if (subscriptionObserver) {\n            var observer = subscriptionObserver.observer, query = subscriptionObserver.query, variables = subscriptionObserver.variables;\n            if (!observer) {\n                return;\n            }\n            this.subscriptionObserverMap.set(subscriptionId, {\n                observer: observer,\n                query: query,\n                variables: variables,\n                subscriptionState: SUBSCRIPTION_STATUS.FAILED,\n            });\n            if (observer && !observer.closed) {\n                observer.error({\n                    errors: [\n                        __assign({}, new GraphQLError(\"Subscription timeout \" + JSON.stringify({\n                            query: query,\n                            variables: variables,\n                        }))),\n                    ],\n                });\n                // Cleanup will be automatically executed\n                observer.complete();\n            }\n            logger.debug('timeoutStartSubscription', JSON.stringify({ query: query, variables: variables }));\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n        var _this = this;\n        var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, authenticationType = _a.authenticationType, apiKey = _a.apiKey, region = _a.region, additionalHeaders = _a.additionalHeaders;\n        if (this.socketStatus === SOCKET_STATUS.READY) {\n            return;\n        }\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var payloadString, headerString, _a, _b, headerQs, payloadQs, discoverableEndpoint, protocol, awsRealTimeUrl, err_3;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        this.promiseArray.push({ res: res, rej: rej });\n                        if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3 /*break*/, 5];\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 4, , 5]);\n                        this.socketStatus = SOCKET_STATUS.CONNECTING;\n                        payloadString = '{}';\n                        _b = (_a = JSON).stringify;\n                        return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                                authenticationType: authenticationType,\n                                payload: payloadString,\n                                canonicalUri: '/connect',\n                                apiKey: apiKey,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                region: region,\n                                additionalHeaders: additionalHeaders,\n                            })];\n                    case 2:\n                        headerString = _b.apply(_a, [_c.sent()]);\n                        headerQs = Buffer.from(headerString).toString('base64');\n                        payloadQs = Buffer.from(payloadString).toString('base64');\n                        discoverableEndpoint = appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '';\n                        if (this.isCustomDomain(discoverableEndpoint)) {\n                            discoverableEndpoint =\n                                discoverableEndpoint.concat(customDomainPath);\n                        }\n                        else {\n                            discoverableEndpoint = discoverableEndpoint\n                                .replace('appsync-api', 'appsync-realtime-api')\n                                .replace('gogi-beta', 'grt-beta');\n                        }\n                        protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n                        discoverableEndpoint = discoverableEndpoint\n                            .replace('https://', protocol)\n                            .replace('http://', protocol);\n                        awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n                        return [4 /*yield*/, this._initializeRetryableHandshake(awsRealTimeUrl)];\n                    case 3:\n                        _c.sent();\n                        this.promiseArray.forEach(function (_a) {\n                            var res = _a.res;\n                            logger.debug('Notifying connection successful');\n                            res();\n                        });\n                        this.socketStatus = SOCKET_STATUS.READY;\n                        this.promiseArray = [];\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_3 = _c.sent();\n                        this.promiseArray.forEach(function (_a) {\n                            var rej = _a.rej;\n                            return rej(err_3);\n                        });\n                        this.promiseArray = [];\n                        if (this.awsRealTimeSocket &&\n                            this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                            this.awsRealTimeSocket.close(3001);\n                        }\n                        this.awsRealTimeSocket = undefined;\n                        this.socketStatus = SOCKET_STATUS.CLOSED;\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (awsRealTimeUrl) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug(\"Initializaling retryable Handshake\");\n                        return [4 /*yield*/, jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl], MAX_DELAY_MS)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (awsRealTimeUrl) {\n        return __awaiter(this, void 0, void 0, function () {\n            var err_4, _a, errorType, errorCode;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, (function () {\n                                return new Promise(function (res, rej) {\n                                    var newSocket = _this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n                                    newSocket.onerror = function () {\n                                        logger.debug(\"WebSocket connection error\");\n                                    };\n                                    newSocket.onclose = function () {\n                                        _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                                        rej(new Error('Connection handshake error'));\n                                    };\n                                    newSocket.onopen = function () {\n                                        _this.awsRealTimeSocket = newSocket;\n                                        return res();\n                                    };\n                                });\n                            })()];\n                    case 2:\n                        _b.sent();\n                        // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n                        return [4 /*yield*/, (function () {\n                                return new Promise(function (res, rej) {\n                                    if (_this.awsRealTimeSocket) {\n                                        var ackOk_1 = false;\n                                        _this.awsRealTimeSocket.onerror = function (error) {\n                                            logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                                        };\n                                        _this.awsRealTimeSocket.onclose = function (event) {\n                                            logger.debug(\"WebSocket closed \" + event.reason);\n                                            rej(new Error(JSON.stringify(event)));\n                                        };\n                                        _this.awsRealTimeSocket.onmessage = function (message) {\n                                            logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                                            var data = JSON.parse(message.data);\n                                            var type = data.type, _a = data.payload, _b = (_a === void 0 ? {} : _a).connectionTimeoutMs, connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n                                            if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                                                ackOk_1 = true;\n                                                if (_this.awsRealTimeSocket) {\n                                                    _this.keepAliveTimeout = connectionTimeoutMs;\n                                                    _this.awsRealTimeSocket.onmessage =\n                                                        _this._handleIncomingSubscriptionMessage.bind(_this);\n                                                    _this.awsRealTimeSocket.onerror = function (err) {\n                                                        logger.debug(err);\n                                                        _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                                                    };\n                                                    _this.awsRealTimeSocket.onclose = function (event) {\n                                                        logger.debug(\"WebSocket closed \" + event.reason);\n                                                        _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                                                    };\n                                                }\n                                                res('Cool, connected to AWS AppSyncRealTime');\n                                                return;\n                                            }\n                                            if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                                                var _c = data.payload, _d = (_c === void 0 ? {} : _c).errors, _e = __read(_d === void 0 ? [] : _d, 1), _f = _e[0], _g = _f === void 0 ? {} : _f, _h = _g.errorType, errorType = _h === void 0 ? '' : _h, _j = _g.errorCode, errorCode = _j === void 0 ? 0 : _j;\n                                                rej({ errorType: errorType, errorCode: errorCode });\n                                            }\n                                        };\n                                        var gqlInit = {\n                                            type: MESSAGE_TYPES.GQL_CONNECTION_INIT,\n                                        };\n                                        _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n                                        var checkAckOk_1 = function (ackOk) {\n                                            if (!ackOk) {\n                                                _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                                                rej(new Error(\"Connection timeout: ack from AWSAppSyncRealTime was not received after \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                                            }\n                                        };\n                                        setTimeout(function () { return checkAckOk_1(ackOk_1); }, CONNECTION_INIT_TIMEOUT);\n                                    }\n                                });\n                            })()];\n                    case 3:\n                        // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n                        _b.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_4 = _b.sent();\n                        _a = err_4, errorType = _a.errorType, errorCode = _a.errorCode;\n                        if (NON_RETRYABLE_CODES.includes(errorCode)) {\n                            throw new NonRetryableError(errorType);\n                        }\n                        else if (errorType) {\n                            throw new Error(errorType);\n                        }\n                        else {\n                            throw err_4;\n                        }\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n        var authenticationType = _a.authenticationType, payload = _a.payload, canonicalUri = _a.canonicalUri, appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, apiKey = _a.apiKey, region = _a.region, additionalHeaders = _a.additionalHeaders;\n        return __awaiter(this, void 0, void 0, function () {\n            var headerHandler, handler, host, result;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        headerHandler = {\n                            API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n                            AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n                            OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n                            AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n                            AWS_LAMBDA: this._customAuthHeader,\n                        };\n                        if (!(!authenticationType || !headerHandler[authenticationType])) return [3 /*break*/, 1];\n                        logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n                        return [2 /*return*/, ''];\n                    case 1:\n                        handler = headerHandler[authenticationType];\n                        host = url.parse(appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '').host;\n                        logger.debug(\"Authenticating with \" + authenticationType);\n                        return [4 /*yield*/, handler({\n                                payload: payload,\n                                canonicalUri: canonicalUri,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                apiKey: apiKey,\n                                region: region,\n                                host: host,\n                                additionalHeaders: additionalHeaders,\n                            })];\n                    case 2:\n                        result = _b.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n        var host = _a.host;\n        return __awaiter(this, void 0, void 0, function () {\n            var session;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, Auth.currentSession()];\n                    case 1:\n                        session = _b.sent();\n                        return [2 /*return*/, {\n                                Authorization: session.getAccessToken().getJwtToken(),\n                                host: host,\n                            }];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n        var host = _a.host;\n        return __awaiter(this, void 0, void 0, function () {\n            var token, federatedInfo, currentUser;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, Cache.getItem('federatedInfo')];\n                    case 1:\n                        federatedInfo = _b.sent();\n                        if (!federatedInfo) return [3 /*break*/, 2];\n                        token = federatedInfo.token;\n                        return [3 /*break*/, 4];\n                    case 2: return [4 /*yield*/, Auth.currentAuthenticatedUser()];\n                    case 3:\n                        currentUser = _b.sent();\n                        if (currentUser) {\n                            token = currentUser.token;\n                        }\n                        _b.label = 4;\n                    case 4:\n                        if (!token) {\n                            throw new Error('No federated jwt');\n                        }\n                        return [2 /*return*/, {\n                                Authorization: token,\n                                host: host,\n                            }];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n        var apiKey = _a.apiKey, host = _a.host;\n        return __awaiter(this, void 0, void 0, function () {\n            var dt, dtStr;\n            return __generator(this, function (_b) {\n                dt = new Date();\n                dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n                return [2 /*return*/, {\n                        host: host,\n                        'x-amz-date': dtStr,\n                        'x-api-key': apiKey,\n                    }];\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n        var payload = _a.payload, canonicalUri = _a.canonicalUri, appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, region = _a.region;\n        return __awaiter(this, void 0, void 0, function () {\n            var endpointInfo, credentialsOK, creds, request, signed_params;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        endpointInfo = {\n                            region: region,\n                            service: 'appsync',\n                        };\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _b.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        return [4 /*yield*/, Credentials.get().then(function (credentials) {\n                                var _a = credentials, secretAccessKey = _a.secretAccessKey, accessKeyId = _a.accessKeyId, sessionToken = _a.sessionToken;\n                                return {\n                                    secret_key: secretAccessKey,\n                                    access_key: accessKeyId,\n                                    session_token: sessionToken,\n                                };\n                            })];\n                    case 2:\n                        creds = _b.sent();\n                        request = {\n                            url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n                            data: payload,\n                            method: 'POST',\n                            headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS),\n                        };\n                        signed_params = Signer.sign(request, creds, endpointInfo);\n                        return [2 /*return*/, signed_params.headers];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._customAuthHeader = function (_a) {\n        var host = _a.host, additionalHeaders = _a.additionalHeaders;\n        if (!additionalHeaders || !additionalHeaders['Authorization']) {\n            throw new Error('No auth token specified');\n        }\n        return {\n            Authorization: additionalHeaders.Authorization,\n            host: host,\n        };\n    };\n    /**\n     * @private\n     */\n    AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n        return Credentials.get()\n            .then(function (credentials) {\n            if (!credentials)\n                return false;\n            var cred = Credentials.shear(credentials);\n            logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n            return true;\n        })\n            .catch(function (err) {\n            logger.warn('ensure credentials error', err);\n            return false;\n        });\n    };\n    return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider));\nexport { AWSAppSyncRealTimeProvider };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}