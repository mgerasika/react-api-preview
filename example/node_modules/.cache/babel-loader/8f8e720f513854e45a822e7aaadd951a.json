{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { CONST } from '../../constants/const.constant.js';\nimport { useField } from '../../hooks/use-field.hook.js';\nimport { useTimeout } from '../../hooks/use-timeout.hook.js';\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport { PhoneNumber } from './phone-number.component.js';\nfunction FormPhoneNumber(props) {\n  var onChange = props.onChange,\n    onBlur = props.onBlur,\n    getCustomErrorMessage = props.getCustomErrorMessage;\n  var _useField = useField(_objectSpread(_objectSpread({}, props), {}, {\n      getCustomErrorMessage: getCustomErrorMessage\n    })),\n    setFieldValue = _useField.setFieldValue,\n    setFieldTouched = _useField.setFieldTouched,\n    triggerValidate = _useField.triggerValidate,\n    value = _useField.value,\n    errorMessage = _useField.errorMessage;\n  var refValue = useRef(value);\n  useEffect(function () {\n    refValue.current = value;\n  }, [value]);\n  var _useTimeout = useTimeout(useCallback(function (newValue) {\n      refValue.current = newValue;\n      setFieldValue(newValue);\n      triggerValidate();\n    }, [setFieldValue, triggerValidate]), CONST.DEBOUNCE),\n    updateValueWithDelay = _useTimeout.start;\n  var handleChange = useCallback(function (e) {\n    refValue.current = e.target.value;\n    onChange && onChange(e);\n    updateValueWithDelay(e.target.value);\n  }, [onChange, updateValueWithDelay]);\n  var handleBlur = useCallback(function (e) {\n    setFieldValue(refValue.current);\n    onBlur && onBlur(e);\n    setFieldTouched();\n  }, [onBlur, setFieldTouched, setFieldValue]);\n  var newProps = _objectSpread(_objectSpread({\n    errorMessage: errorMessage\n  }, props), {}, {\n    onChange: handleChange,\n    onBlur: handleBlur,\n    onPaste: handleBlur,\n    name: props.name,\n    value: value\n  });\n  return /*#__PURE__*/React.createElement(PhoneNumber, newProps);\n}\nexport { FormPhoneNumber };","map":{"version":3,"sources":["../../../../src/general-ui/phone-number/form-phone-number.component.tsx"],"names":["FormPhoneNumber","props","onChange","onBlur","getCustomErrorMessage","setFieldValue","setFieldTouched","triggerValidate","value","errorMessage","useField","refValue","useRef","useEffect","current","start","updateValueWithDelay","useTimeout","useCallback","newValue","CONST","DEBOUNCE","handleChange","e","target","handleBlur","newProps","onPaste","name","React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASO,SAASA,eAAe,CAAcC,KAAmC,EAAe;EAC3F,IAAQC,QAAQ,GAAoCD,KAAK,CAAjDC,QAAQ;IAAEC,MAAM,GAA4BF,KAAK,CAAvCE,MAAM;IAAEC,qBAAAA,GAA0BH,KAAK,CAA/BG,qBAAAA;EAC1B,IAAA,SAAA,GAAiFM,QAAQ,CAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EAClFT,KAAK,CAAA,EAAA,CAAA,CAAA,EAAA;MACRG,qBAAAA,EAAAA;IAAAA,CAAAA,CAAAA,CACF;IAHMC,aAAa,GAAA,SAAA,CAAbA,aAAa;IAAEC,eAAe,GAAA,SAAA,CAAfA,eAAe;IAAEC,eAAe,GAAA,SAAA,CAAfA,eAAe;IAAEC,KAAK,GAAA,SAAA,CAALA,KAAK;IAAEC,YAAAA,GAAAA,SAAAA,CAAAA,YAAAA;EAIhE,IAAME,QAAQ,GAAGC,MAAM,CAACJ,KAAK,CAAC;EAC9BK,SAAS,CAAC,YAAM;IACZF,QAAQ,CAACG,OAAO,GAAGN,KAAK;EAC5B,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,IAAA,WAAA,GAAwCS,UAAU,CAC9CC,WAAW,CACNC,UAAAA,QAAgB,EAAK;MAClBR,QAAQ,CAACG,OAAO,GAAGK,QAAQ;MAC3Bd,aAAa,CAACc,QAAQ,CAAC;MACvBZ,eAAe,EAAE;KACpB,EACD,CAACF,aAAa,EAAEE,eAAe,CAAC,CACnC,EACDa,KAAK,CAACC,QAAQ,CACjB;IAVcL,oBAAAA,GAAAA,WAAAA,CAAPD,KAAK;EAYb,IAAMO,YAAY,GAAGJ,WAAW,CAC3BK,UAAAA,CAAsC,EAAK;IACxCZ,QAAQ,CAACG,OAAO,GAAGS,CAAC,CAACC,MAAM,CAAChB,KAAK;IACjCN,QAAQ,IAAIA,QAAQ,CAACqB,CAAC,CAAC;IACvBP,oBAAoB,CAACO,CAAC,CAACC,MAAM,CAAChB,KAAK,CAAC;EACxC,CAAC,EACD,CAACN,QAAQ,EAAEc,oBAAoB,CAAC,CACnC;EAED,IAAMS,UAAU,GAAGP,WAAW,CACzBK,UAAAA,CAAqC,EAAK;IACvClB,aAAa,CAACM,QAAQ,CAACG,OAAO,CAAC;IAC/BX,MAAM,IAAIA,MAAM,CAACoB,CAAC,CAAC;IACnBjB,eAAe,EAAE;EACpB,CAAA,EACD,CAACH,MAAM,EAAEG,eAAe,EAAED,aAAa,CAAC,CAC3C;EAED,IAAMqB,QAAqB,GAAA,aAAA,CAAA,aAAA,CAAA;IACvBjB,YAAY,EAAZA;EAAY,CAAA,EACTR,KAAK,CAAA,EAAA,CAAA,CAAA,EAAA;IAERC,QAAQ,EAAEoB,YAAY;IACtBnB,MAAM,EAAEsB,UAAU;IAClBE,OAAO,EAAEF,UAAoD;IAC7DG,IAAI,EAAE3B,KAAK,CAAC2B,IAAc;IAC1BpB,KAAAA,EAAAA;EAAAA,CAAAA,CACH;EAED,OAAA,aAAOqB,KAAC,CAAA,aAAA,CAAA,WAAW,EAAKH,QAAQ,CAAI;AACxC","sourcesContent":["import { CONST } from '@common/constants/const.constant';\nimport { IInputChangeHandler, IInputProps } from '@common/general-ui/input/input.component';\nimport { useField } from '@common/hooks/use-field.hook';\nimport { useTimeout } from '@common/hooks/use-timeout.hook';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { PhoneNumber } from './phone-number.component';\n\ntype IFormInputProps<TFormValues> = Omit<IInputProps<string, keyof TFormValues>, 'value' | 'defaultValue'>;\n\nexport function FormPhoneNumber<TFormValues>(props: IFormInputProps<TFormValues>): JSX.Element {\n    const { onChange, onBlur, getCustomErrorMessage } = props;\n    const { setFieldValue, setFieldTouched, triggerValidate, value, errorMessage } = useField<string>({\n        ...props,\n        getCustomErrorMessage,\n    });\n    const refValue = useRef(value);\n    useEffect(() => {\n        refValue.current = value;\n    }, [value]);\n\n    const { start: updateValueWithDelay } = useTimeout<string>(\n        useCallback(\n            (newValue: string) => {\n                refValue.current = newValue;\n                setFieldValue(newValue);\n                triggerValidate();\n            },\n            [setFieldValue, triggerValidate],\n        ),\n        CONST.DEBOUNCE,\n    );\n\n    const handleChange = useCallback<IInputChangeHandler>(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            refValue.current = e.target.value;\n            onChange && onChange(e);\n            updateValueWithDelay(e.target.value);\n        },\n        [onChange, updateValueWithDelay],\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            setFieldValue(refValue.current);\n            onBlur && onBlur(e);\n            setFieldTouched();\n        },\n        [onBlur, setFieldTouched, setFieldValue],\n    );\n\n    const newProps: IInputProps = {\n        errorMessage,\n        ...props,\n\n        onChange: handleChange,\n        onBlur: handleBlur,\n        onPaste: handleBlur as unknown as React.ClipboardEventHandler,\n        name: props.name as string,\n        value,\n    };\n\n    return <PhoneNumber {...newProps} />;\n}\n"]},"metadata":{},"sourceType":"module"}