{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { localStorageService } from '../services/local-storage.service.js';\nimport { useState, useMemo } from 'react';\nvar KEY = \"ui-settings\";\nfunction useTableUISettings(_ref) {\n  var name = _ref.name,\n    _ref$initial = _ref.initial,\n    initial = _ref$initial === void 0 ? {\n      chooserColumns: []\n    } : _ref$initial;\n  var fromStorage = localStorageService.load(KEY, {\n    chooserColumns: []\n  });\n  var _useState = useState(fromStorage && fromStorage[name] ? fromStorage[name] : initial),\n    _useState2 = _slicedToArray(_useState, 2),\n    ui = _useState2[0],\n    setUI = _useState2[1];\n  return useMemo(function () {\n    return {\n      tableUISettings: ui,\n      saveTableUISettings: function saveTableUISettings(data) {\n        var prev = localStorageService.load(KEY, {});\n        setUI(data);\n        localStorageService.save(KEY, _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, name, data)));\n      }\n    };\n  }, [name, ui]);\n}\nexport { useTableUISettings };","map":{"version":3,"sources":["../../../src/hooks/use-ui-settings.hook.ts"],"names":["KEY","useTableUISettings","name","initial","chooserColumns","fromStorage","localStorageService","load","ui","setUI","useState","useMemo","tableUISettings","saveTableUISettings","data","prev","save"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAMA,GAAG,GAAA,aAAgB;AAElB,SAASC,kBAAkB,CAAA,IAAA,EAA8D;EAAA,IAA3DC,IAAI,GAAA,IAAA,CAAJA,IAAI;IAAA,YAAA,GAAA,IAAA,CAAEC,OAAO;IAAPA,OAAO,GAAA,YAAA,KAAA,KAAA,CAAA,GAAG;MAAEC,cAAc,EAAE;IAAG,CAAA,GAAA,YAAA;EACtE,IAAMC,WAAW,GAAGC,mBAAmB,CAACC,IAAI,CAAmBP,GAAG,EAAE;IAAEI,cAAc,EAAE;EAAG,CAAC,CAAC;EAC3F,IAAA,SAAA,GAAoBM,QAAQ,CAAmBL,WAAW,IAAIA,WAAW,CAACH,IAAI,CAAC,GAAGG,WAAW,CAACH,IAAI,CAAC,GAAGC,OAAO,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;IAAvGK,EAAE,GAAA,UAAA,CAAA,CAAA,CAAA;IAAEC,KAAK,GAAA,UAAA,CAAA,CAAA,CAAA;EAEhB,OAAOE,OAAO,CAAC,YAAe;IAC1B,OAAO;MACHC,eAAe,EAAEJ,EAAE;MACnBK,mBAAmB,EAAGC,SAAAA,mBAAAA,CAAAA,IAAsB,EAAW;QACnD,IAAMC,IAAI,GAAGT,mBAAmB,CAACC,IAAI,CAACP,GAAG,EAAE,CAAE,CAAA,CAAC;QAE9CS,KAAK,CAACK,IAAI,CAAC;QACXR,mBAAmB,CAACU,IAAI,CAAChB,GAAG,EAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACrBe,IAAI,CAAA,EAAA,CAAA,CAAA,EAAA,eAAA,CAAA,CAAA,CAAA,EACNb,IAAI,EAAGY,IAAAA,CAAAA,CAAAA,CACV;MACN;KACH;EACL,CAAC,EAAE,CAACZ,IAAI,EAAEM,EAAE,CAAC,CAAC;AAClB","sourcesContent":["import { ITableUISettings } from '@common/interfaces/ui-settings.interface';\nimport { localStorageService } from '@common/services/local-storage.service';\nimport { useMemo, useState } from 'react';\n\ninterface IProps {\n    initial?: ITableUISettings;\n    name: string;\n}\n\ninterface IResult {\n    tableUISettings: ITableUISettings;\n    saveTableUISettings: (data: ITableUISettings) => void;\n}\n\nconst KEY = `ui-settings`;\n\nexport function useTableUISettings({ name, initial = { chooserColumns: [] } }: IProps): IResult {\n    const fromStorage = localStorageService.load<ITableUISettings>(KEY, { chooserColumns: [] });\n    const [ui, setUI] = useState<ITableUISettings>(fromStorage && fromStorage[name] ? fromStorage[name] : initial);\n\n    return useMemo((): IResult => {\n        return {\n            tableUISettings: ui,\n            saveTableUISettings: (data: ITableUISettings): void => {\n                const prev = localStorageService.load(KEY, {});\n\n                setUI(data);\n                localStorageService.save(KEY, {\n                    ...prev,\n                    [name]: data,\n                });\n            },\n        };\n    }, [name, ui]);\n}\n"]},"metadata":{},"sourceType":"module"}