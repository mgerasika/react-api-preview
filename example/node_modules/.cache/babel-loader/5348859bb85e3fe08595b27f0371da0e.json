{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nvar getSectorFromPostCode = function getSectorFromPostCode(postCode) {\n  var _postCode$split = postCode.split(' '),\n    _postCode$split2 = _slicedToArray(_postCode$split, 2),\n    outcode = _postCode$split2[0],\n    incode = _postCode$split2[1];\n  var sector = postCode ? \"\".concat(outcode, \" \").concat(incode[0]) : '';\n  return sector;\n};\nexport { getSectorFromPostCode };","map":{"version":3,"sources":["../../../src/utils/get-sector-from-post-code.util.ts"],"names":["getSectorFromPostCode","postCode","outcode","incode","split","sector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAaA,IAAAA,qBAAqB,GAAIC,SAAzBD,qBAAqB,CAAIC,QAAgB,EAAa;EAC/D,IAAA,eAAA,GAA0BA,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC;IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;IAAtCF,OAAO,GAAA,gBAAA,CAAA,CAAA,CAAA;IAAEC,MAAM,GAAA,gBAAA,CAAA,CAAA,CAAA;EACtB,IAAME,MAAM,GAAGJ,QAAQ,GAAA,EAAA,CAAA,MAAA,CAAMC,OAAQ,EAAA,GAAA,CAAA,CAAA,MAAA,CAAGC,MAAM,CAAC,CAAC,CAAE,CAAA,GAAI,EAAE;EACxD,OAAOE,MAAM;AACjB,CAAA","sourcesContent":["export const getSectorFromPostCode = (postCode: string): string => {\n    const [outcode, incode] = postCode.split(' ');\n    const sector = postCode ? `${outcode} ${incode[0]}` : '';\n    return sector;\n};\n"]},"metadata":{},"sourceType":"module"}