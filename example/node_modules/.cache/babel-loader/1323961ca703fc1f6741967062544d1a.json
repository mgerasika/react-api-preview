{"ast":null,"code":"import { objectWithoutProperties as _objectWithoutProperties, objectSpread2 as _objectSpread2 } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport dayjs from 'dayjs';\nimport { useRef, useEffect, useCallback, useMemo } from 'react';\nimport { useForm as useForm$1 } from 'react-hook-form';\nvar _excluded = [\"onSubmit\", \"onFieldBlur\", \"onFieldChange\", \"enableReinitialize\", \"isDirty\", \"defaultValues\"];\n// 1 validate first time when no any data (in formik in the box)\n// 2 enableReinitialize -> feature of reinitialize when default properties changes (in formik in the box)\n// 3 manually trigger onBlur event for validation\n// 4 isDirty feature - when form already have populated data - trigger validate for those fields.\n// 5 added onFieldBlur and onFieldChange handlers (need context for those fields)\n// note: register by 'ref' not possible with antd - written custom useField hook (or investigate more).\n// antd form: (rc-form-field) - don't have feature isValid flag.\nvar useForm = function useForm(props) {\n  var _onBlurHandlersRef = useRef({});\n  var onSubmit = props.onSubmit;\n  props.onFieldBlur;\n  props.onFieldChange;\n  var enableReinitialize = props.enableReinitialize,\n    isDirty = props.isDirty,\n    defaultValues = props.defaultValues,\n    rest = _objectWithoutProperties(props, _excluded);\n  var result = useForm$1(_objectSpread2(_objectSpread2({}, rest), {}, {\n    defaultValues: defaultValues,\n    mode: 'all'\n  }));\n  var trigger = result.trigger,\n    getValues = result.getValues,\n    handleSubmit = result.handleSubmit;\n  useEffect(function () {\n    // trigger once validation\n    trigger();\n  }, [trigger]);\n  var prevDefaultValues = useRef(defaultValues);\n  var setValue = result.setValue;\n  useEffect(function () {\n    // Reinitialize & validate if any changes from default values.\n    // TODO Investigate more react - hook - form, maybe such functionality already exist.\n    if (enableReinitialize && defaultValues) {\n      var hasChanges = false;\n      Object.keys(defaultValues).forEach(function (key) {\n        var prevValue = prevDefaultValues.current[key];\n        var newValue = defaultValues[key];\n        if (prevValue !== null && prevValue !== void 0 && prevValue.getTime && newValue !== null && newValue !== void 0 && newValue.getTime) {\n          if (Math.abs(dayjs(prevValue).diff(newValue, 'minutes')) > 0) {\n            hasChanges = true;\n            prevDefaultValues.current[key] = newValue;\n            setValue(key, newValue);\n          }\n        } else if (JSON.stringify(prevValue || 0) !== JSON.stringify(newValue || 0)) {\n          hasChanges = true;\n          prevDefaultValues.current[key] = newValue;\n          setValue(key, newValue);\n        }\n      });\n      if (hasChanges) {\n        trigger();\n      }\n    }\n  }, [defaultValues, enableReinitialize, setValue, trigger]);\n  var setBlur = useCallback(function (name) {\n    var handler = _onBlurHandlersRef === null || _onBlurHandlersRef === void 0 ? void 0 : _onBlurHandlersRef.current[name];\n    if (handler) {\n      handler({\n        type: 'blur',\n        target: {\n          name: name,\n          value: getValues()[name]\n        }\n      });\n    }\n  }, [getValues]);\n  var customSetValue = useCallback(function (name, value) {\n    setValue(name, value);\n  }, [setValue]);\n  var submit = useCallback(function () {\n    handleSubmit(onSubmit)();\n  }, [handleSubmit, onSubmit]);\n  var setBlurForAllFields = useCallback(function () {\n    var keys = Object.keys(_onBlurHandlersRef.current);\n    keys.forEach(function (key) {\n      setBlur(key);\n    });\n  }, [setBlur]);\n  useEffect(function () {\n    if (isDirty) {\n      setBlurForAllFields();\n    }\n  }, [isDirty, setBlurForAllFields]);\n\n  // Warning don't move to useMemo - errors field have same ref!!!\n  var isValid = Object.keys(result.formState.errors).length === 0;\n  return useMemo(function () {\n    return {\n      setBlur: setBlur,\n      setValue: customSetValue,\n      setBlurForAllFields: setBlurForAllFields,\n      submit: submit,\n      isValid: isValid,\n      formContext: result,\n      defaultValues: prevDefaultValues.current,\n      props: {\n        onSubmit: props.onSubmit,\n        onFieldBlur: props.onFieldBlur,\n        onFieldChange: props.onFieldChange\n      },\n      _onBlurHandlers: _onBlurHandlersRef.current\n    };\n  }, [customSetValue, isValid, props.onFieldBlur, props.onFieldChange, props.onSubmit, result, setBlur, setBlurForAllFields, submit]);\n};\nexport { useForm };","map":{"version":3,"sources":["../../../src/hooks/use-form.hook.ts"],"names":["useForm","props","_onBlurHandlersRef","useRef","onSubmit","onFieldBlur","onFieldChange","enableReinitialize","isDirty","defaultValues","rest","result","useReactHookForm","mode","trigger","getValues","handleSubmit","useEffect","prevDefaultValues","setValue","hasChanges","Object","keys","forEach","key","prevValue","current","newValue","getTime","Math","abs","dayjs","diff","JSON","stringify","setBlur","useCallback","name","handler","type","target","value","customSetValue","submit","setBlurForAllFields","isValid","formState","errors","length","useMemo","formContext","_onBlurHandlers"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { IDictionary } from '@common/interfaces/dictionary.interface';\nimport dayjs from 'dayjs';\nimport React, { ChangeEventHandler, useCallback, useEffect, useMemo, useRef } from 'react';\nimport {\n    DeepPartial,\n    Path,\n    RegisterOptions,\n    SubmitHandler,\n    UnpackNestedValue,\n    useForm as useReactHookForm,\n    UseFormProps,\n    UseFormReturn,\n} from 'react-hook-form';\n\nexport type RegisterOptionsEx = RegisterOptions;\nexport declare type FieldChangeHandler<TFieldValues> = (name: keyof TFieldValues, data: TFieldValues) => void;\nexport declare type FieldBlurHandler<TFieldValues> = (name: keyof TFieldValues, data: TFieldValues) => void;\ninterface ICustomFormProps<T> {\n    enableReinitialize: boolean;\n    isDirty?: boolean;\n    onSubmit: SubmitHandler<T>;\n    onFieldBlur?: FieldBlurHandler<T>;\n    onFieldChange?: FieldChangeHandler<T>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface IUseCustomFormReturn<T = any> {\n    submit: () => void;\n    formContext: UseFormReturn<T>;\n    isValid: boolean;\n    setBlur: (name: keyof T) => void;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setValue: (name: keyof T, value: any) => void;\n    setBlurForAllFields: () => void;\n    props: Pick<ICustomFormProps<T>, 'onFieldBlur' | 'onFieldChange' | 'onSubmit'>;\n    _onBlurHandlers: IDictionary<ChangeEventHandler>;\n    defaultValues?: UnpackNestedValue<DeepPartial<T>>;\n}\n\ninterface IProps<T> extends UseFormProps<T>, ICustomFormProps<T> {}\n\n// 1 validate first time when no any data (in formik in the box)\n// 2 enableReinitialize -> feature of reinitialize when default properties changes (in formik in the box)\n// 3 manually trigger onBlur event for validation\n// 4 isDirty feature - when form already have populated data - trigger validate for those fields.\n// 5 added onFieldBlur and onFieldChange handlers (need context for those fields)\n// note: register by 'ref' not possible with antd - written custom useField hook (or investigate more).\n// antd form: (rc-form-field) - don't have feature isValid flag.\nexport const useForm = <TValues = any>(props: IProps<TValues>): IUseCustomFormReturn<TValues> => {\n    const _onBlurHandlersRef = useRef<IDictionary<ChangeEventHandler>>({});\n\n    const { onSubmit, onFieldBlur, onFieldChange, enableReinitialize, isDirty, defaultValues, ...rest } = props;\n    const result = useReactHookForm<TValues>({ ...rest, defaultValues, mode: 'all' });\n    const { trigger, getValues, handleSubmit } = result;\n\n    useEffect(() => {\n        // trigger once validation\n        trigger();\n    }, [trigger]);\n\n    const prevDefaultValues = useRef<any>(defaultValues);\n    const setValue = result.setValue;\n    useEffect(() => {\n        // Reinitialize & validate if any changes from default values.\n        // TODO Investigate more react - hook - form, maybe such functionality already exist.\n        if (enableReinitialize && defaultValues) {\n            let hasChanges = false;\n            Object.keys(defaultValues).forEach((key) => {\n                const prevValue: any = prevDefaultValues.current[key];\n                const newValue: any = (defaultValues as IDictionary<any>)[key];\n                if (prevValue?.getTime && newValue?.getTime) {\n                    if (Math.abs(dayjs(prevValue).diff(newValue, 'minutes')) > 0) {\n                        hasChanges = true;\n                        prevDefaultValues.current[key] = newValue;\n                        setValue(key as Path<TValues>, newValue);\n                    }\n                } else if (JSON.stringify(prevValue || 0) !== JSON.stringify(newValue || 0)) {\n                    hasChanges = true;\n                    prevDefaultValues.current[key] = newValue;\n                    setValue(key as Path<TValues>, newValue);\n                }\n            });\n            if (hasChanges) {\n                trigger();\n            }\n        }\n    }, [defaultValues, enableReinitialize, setValue, trigger]);\n\n    const setBlur = useCallback(\n        (name) => {\n            const handler: React.ChangeEventHandler<unknown> = _onBlurHandlersRef?.current[name as unknown as string];\n            if (handler) {\n                handler({\n                    type: 'blur',\n                    target: { name, value: getValues()[name as string] },\n                } as React.ChangeEvent<any>);\n            }\n        },\n        [getValues],\n    );\n\n    const customSetValue = useCallback(\n        (name: any, value: any) => {\n            setValue(name, value);\n        },\n        [setValue],\n    );\n\n    const submit = useCallback(() => {\n        handleSubmit(onSubmit)();\n    }, [handleSubmit, onSubmit]);\n\n    const setBlurForAllFields = useCallback(() => {\n        const keys = Object.keys(_onBlurHandlersRef.current);\n        keys.forEach((key) => {\n            setBlur(key);\n        });\n    }, [setBlur]);\n\n    useEffect(() => {\n        if (isDirty) {\n            setBlurForAllFields();\n        }\n    }, [isDirty, setBlurForAllFields]);\n\n    // Warning don't move to useMemo - errors field have same ref!!!\n    const isValid = Object.keys(result.formState.errors).length === 0;\n\n    return useMemo(() => {\n        return {\n            setBlur,\n            setValue: customSetValue,\n            setBlurForAllFields,\n            submit,\n            isValid,\n            formContext: result,\n            defaultValues: prevDefaultValues.current,\n            props: {\n                onSubmit: props.onSubmit,\n                onFieldBlur: props.onFieldBlur,\n                onFieldChange: props.onFieldChange,\n            },\n            _onBlurHandlers: _onBlurHandlersRef.current,\n        };\n    }, [\n        customSetValue,\n        isValid,\n        props.onFieldBlur,\n        props.onFieldChange,\n        props.onSubmit,\n        result,\n        setBlur,\n        setBlurForAllFields,\n        submit,\n    ]);\n};\n"]},"metadata":{},"sourceType":"module"}