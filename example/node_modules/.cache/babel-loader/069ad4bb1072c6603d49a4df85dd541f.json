{"ast":null,"code":"var _excluded = [\"children\", \"i18nKey\"];\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { getCurrentLocaleTranslationPrefix, getTranslationPrefix } from '../utils/get-translation-prefix.util.js';\nimport i18n from 'i18next';\nimport React from 'react';\nimport { Trans } from 'react-i18next';\nimport { jsx } from '@emotion/react';\n\n// export const useT = (): IReturn => {\n//     const { t } = useTranslation();\n//     return {\n//         t: (translation, _description, options): string => {\n//             const localePrefix = i18n.exists(translation) ? getCurrentLocaleTranslationPrefix() : '';\n//             return `${getTranslationPrefix()}${localePrefix}${t(translation, options)}`;\n//         },\n//     };\n// };\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction t(i18nKey, _description, options) {\n  var localePrefix = i18n.exists(i18nKey) ? getCurrentLocaleTranslationPrefix() : '';\n  return \"\".concat(getTranslationPrefix()).concat(localePrefix).concat(i18n.t(i18nKey, options) || i18nKey);\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction T(_ref) {\n  var children = _ref.children,\n    i18nKey = _ref.i18nKey,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var localePrefix = i18nKey && i18n.exists(i18nKey) ? getCurrentLocaleTranslationPrefix() : '';\n  return jsx(React.Fragment, null, getTranslationPrefix(), localePrefix, jsx(Trans, _extends({\n    i18nKey: i18nKey\n  }, rest), children));\n}\nexport { T, t };","map":{"version":3,"sources":["../../../src/hooks/use-t.hook.tsx"],"names":["t","i18nKey","_description","options","localePrefix","i18n","exists","getCurrentLocaleTranslationPrefix","getTranslationPrefix","T","children","rest","___EmotionJSX","Trans"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO,SAASA,CAAC,CAACC,OAAe,EAAEC,YAAmC,EAAEC,OAAiC,EAAU;EAC/G,IAAMC,YAAY,GAAGC,IAAI,CAACC,MAAM,CAACL,OAAO,CAAC,GAAGM,iCAAiC,EAAE,GAAG,EAAE;EACpF,OAAA,EAAA,CAAA,MAAA,CAAUC,oBAAoB,EAAG,CAAA,CAAA,MAAA,CAAEJ,YAAa,CAAA,CAAA,MAAA,CAAEC,IAAI,CAACL,CAAC,CAACC,OAAO,EAAEE,OAAO,CAAC,IAAIF,OAAQ,CAAA;AAC1F;AAOA;AACO,SAASQ,CAAC,CAAA,IAAA,EAA4D;EAAA,IAAzDC,QAAQ,GAAA,IAAA,CAARA,QAAQ;IAAET,OAAO,GAAA,IAAA,CAAPA,OAAO;IAAKU,IAAAA,GAAAA,wBAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA;EACtC,IAAMP,YAAY,GAAGH,OAAO,IAAII,IAAI,CAACC,MAAM,CAACL,OAAO,CAAC,GAAGM,iCAAiC,EAAE,GAAG,EAAE;EAC/F,OACIK,GAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EACKJ,oBAAoB,EAAE,EACtBJ,YAAY,EACbQ,GAAAA,CAACC,KAAK,EAAA,QAAA,CAAA;IAACZ,OAAO,EAAEA;EAAQ,CAAA,EAAKU,IAAI,CAAA,EAC5BD,QAAQ,CACL,CACT;AAEX","sourcesContent":["import { getCurrentLocaleTranslationPrefix, getTranslationPrefix } from '@common/utils/get-translation-prefix.util';\nimport i18n, { TOptions } from 'i18next';\nimport React, { ReactNode } from 'react';\nimport { Trans } from 'react-i18next';\n\n// interface IReturn {\n//     t: (i18nKey: string, description?: TTranslationCategory, options?: any) => any;\n// }\n\ntype TTranslationCategory = string;\n// export const useT = (): IReturn => {\n//     const { t } = useTranslation();\n//     return {\n//         t: (translation, _description, options): string => {\n//             const localePrefix = i18n.exists(translation) ? getCurrentLocaleTranslationPrefix() : '';\n//             return `${getTranslationPrefix()}${localePrefix}${t(translation, options)}`;\n//         },\n//     };\n// };\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function t(i18nKey: string, _description?: TTranslationCategory, options?: string | TOptions | any): string {\n    const localePrefix = i18n.exists(i18nKey) ? getCurrentLocaleTranslationPrefix() : '';\n    return `${getTranslationPrefix()}${localePrefix}${i18n.t(i18nKey, options) || i18nKey}`;\n}\n\ninterface IProps {\n    i18nKey?: string;\n    children: JSX.Element | JSX.Element[] | ReactNode;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function T({ children, i18nKey, ...rest }: IProps & any): JSX.Element {\n    const localePrefix = i18nKey && i18n.exists(i18nKey) ? getCurrentLocaleTranslationPrefix() : '';\n    return (\n        <>\n            {getTranslationPrefix()}\n            {localePrefix}\n            <Trans i18nKey={i18nKey} {...rest}>\n                {children}\n            </Trans>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}