{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { DescribeStreamCommand } from \"../commands/DescribeStreamCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\nvar checkState = function checkState(client, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var result_1, returnComparator, exception_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n          return [4 /*yield*/, client.send(new DescribeStreamCommand(input))];\n        case 1:\n          result_1 = _a.sent();\n          try {\n            returnComparator = function returnComparator() {\n              return result_1.StreamDescription.StreamStatus;\n            };\n            if (returnComparator() === \"ACTIVE\") {\n              return [2 /*return*/, {\n                state: WaiterState.SUCCESS\n              }];\n            }\n          } catch (e) {}\n          return [3 /*break*/, 3];\n        case 2:\n          exception_1 = _a.sent();\n          return [3 /*break*/, 3];\n        case 3:\n          return [2 /*return*/, {\n            state: WaiterState.RETRY\n          }];\n      }\n    });\n  });\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeStreamCommand for polling.\n */\nexport var waitForStreamExists = function waitForStreamExists(params, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n      serviceDefaults = {\n        minDelay: 10,\n        maxDelay: 120\n      };\n      return [2 /*return*/, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n  });\n};","map":{"version":3,"sources":["../../../waiters/waitForStreamExists.ts"],"names":[],"mappings":";AACA,SAAS,qBAAqB,QAAoC,mCAAmC;AACrG,SAA4C,WAAW,EAAE,YAAY,QAAQ,sBAAsB;AAEnG,IAAM,UAAU,GAAG,SAAb,UAAU,CAAU,MAAqB,EAAE,KAAiC,EAAA;EAAA,OAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;UAE5D,OAAA,CAAA,CAAA,CAAA,WAAM,MAAM,CAAC,IAAI,CAAC,IAAI,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAA;;UAAjE,QAAA,GAAc,EAAA,CAAA,IAAA,EAAmD;UACrE,IAAI;YACE,gBAAgB,GAAG,4BAAA;cACrB,OAAO,QAAM,CAAC,iBAAiB,CAAC,YAAY;YAC9C,CAAC;YACD,IAAI,gBAAgB,EAAE,KAAK,QAAQ,EAAE;cACnC,OAAA,CAAA,CAAA,CAAA,YAAO;gBAAE,KAAK,EAAE,WAAW,CAAC;cAAO,CAAE,CAAA;YACtC;WACF,CAAC,OAAO,CAAC,EAAE,CAAA;;;;;;UAEd,OAAA,CAAA,CAAA,CAAA,YAAO;YAAE,KAAK,EAAE,WAAW,CAAC;UAAK,CAAE,CAAA;MAAC;;;CACrC;AACD;;;;AAIG;AACH,OAAO,IAAM,mBAAmB,GAAG,SAAtB,mBAAmB,CAC9B,MAA0C,EAC1C,KAAiC,EAAA;EAAA,OAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;MAE3B,eAAe,GAAG;QAAE,QAAQ,EAAE,EAAE;QAAE,QAAQ,EAAE;MAAG,CAAE;MACvD,OAAA,CAAA,CAAA,CAAA,YAAO,YAAY,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAM,eAAe,CAAA,EAAK,MAAM,CAAA,EAAI,KAAK,EAAE,UAAU,CAAC,CAAA;;;CAC1E","sourceRoot":"","sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { DescribeStreamCommand } from \"../commands/DescribeStreamCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\nvar checkState = function (client, input) { return __awaiter(void 0, void 0, void 0, function () {\n    var result_1, returnComparator, exception_1;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                _a.trys.push([0, 2, , 3]);\n                return [4 /*yield*/, client.send(new DescribeStreamCommand(input))];\n            case 1:\n                result_1 = _a.sent();\n                try {\n                    returnComparator = function () {\n                        return result_1.StreamDescription.StreamStatus;\n                    };\n                    if (returnComparator() === \"ACTIVE\") {\n                        return [2 /*return*/, { state: WaiterState.SUCCESS }];\n                    }\n                }\n                catch (e) { }\n                return [3 /*break*/, 3];\n            case 2:\n                exception_1 = _a.sent();\n                return [3 /*break*/, 3];\n            case 3: return [2 /*return*/, { state: WaiterState.RETRY }];\n        }\n    });\n}); };\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeStreamCommand for polling.\n */\nexport var waitForStreamExists = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n        serviceDefaults = { minDelay: 10, maxDelay: 120 };\n        return [2 /*return*/, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n}); };\n//# sourceMappingURL=waitForStreamExists.js.map"]},"metadata":{},"sourceType":"module"}