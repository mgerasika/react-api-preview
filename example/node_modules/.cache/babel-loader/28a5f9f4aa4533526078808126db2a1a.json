{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport AsyncStorageDatabase from './AsyncStorageDatabase';\nimport { ModelPredicateCreator, ModelSortPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, traverseModel, validatePredicate, sortCompareFunction, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, IDENTIFIER_KEY_SEPARATOR } from '../../util';\nvar logger = new Logger('DataStore');\nvar AsyncStorageAdapter = /** @class */function () {\n  function AsyncStorageAdapter() {}\n  AsyncStorageAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return getStorename(namespace, modelName);\n  };\n  // Retrieves primary key values from a model\n  AsyncStorageAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n    return extractPrimaryKeyValues(model, keys);\n  };\n  // Retrieves concatenated primary key values from a model\n  AsyncStorageAdapter.prototype.getIndexKeyValuesPath = function (model) {\n    return this.getIndexKeyValuesFromModel(model).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n  };\n  AsyncStorageAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var error_1;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.initPromise) return [3 /*break*/, 1];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3 /*break*/, 3];\n          case 1:\n            return [4 /*yield*/, this.initPromise];\n          case 2:\n            _a.sent();\n            return [2 /*return*/];\n          case 3:\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _a.label = 4;\n          case 4:\n            _a.trys.push([4, 7,, 8]);\n            if (!!this.db) return [3 /*break*/, 6];\n            this.db = new AsyncStorageDatabase();\n            return [4 /*yield*/, this.db.init()];\n          case 5:\n            _a.sent();\n            this.resolve();\n            _a.label = 6;\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            error_1 = _a.sent();\n            this.reject(error_1);\n            return [3 /*break*/, 8];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.save = function (model, condition) {\n    var e_1, _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, keyValuesPath, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, itemKeyValues, itemKeyValuesPath, fromDB_1, opType, modelKeyValues, e_1_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                item = _a.item,\n                instance = _a.instance;\n              var storeName = getStorename(namespaceName, modelName);\n              set.add(storeName);\n              var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance,\n                keys: keys\n              };\n            });\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            return [4 /*yield*/, this.db.get(keyValuesPath, storeName)];\n          case 1:\n            fromDB = _b.sent();\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              predicateObjs = predicates.predicates, type = predicates.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n            result = [];\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 9, 10, 15]);\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _b.label = 3;\n          case 3:\n            return [4 /*yield*/, connectionStoreNames_1.next()];\n          case 4:\n            if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 8];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n            itemKeyValues = keys.map(function (key) {\n              return item[key];\n            });\n            itemKeyValuesPath = itemKeyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            return [4 /*yield*/, this.db.get(itemKeyValuesPath, storeName_1)];\n          case 5:\n            fromDB_1 = _b.sent();\n            opType = fromDB_1 ? OpType.UPDATE : OpType.INSERT;\n            modelKeyValues = this.getIndexKeyValuesFromModel(model);\n            if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT)) return [3 /*break*/, 7];\n            return [4 /*yield*/, this.db.save(item, storeName_1, keys, itemKeyValuesPath)];\n          case 6:\n            _b.sent();\n            result.push([instance, opType]);\n            _b.label = 7;\n          case 7:\n            return [3 /*break*/, 3];\n          case 8:\n            return [3 /*break*/, 15];\n          case 9:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3 /*break*/, 15];\n          case 10:\n            _b.trys.push([10,, 13, 14]);\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 12];\n            return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n          case 11:\n            _b.sent();\n            _b.label = 12;\n          case 12:\n            return [3 /*break*/, 14];\n          case 13:\n            if (e_1) throw e_1.error;\n            return [7 /*endfinally*/];\n          case 14:\n            return [7 /*endfinally*/];\n          case 15:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    var records_1, records_1_1, records_2, records_2_1;\n    var e_2, _a, e_3, _b, e_4, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor, relations_1, relations_1_1, relation, fieldName, modelName, targetName, targetNames, relationType, storeName, modelConstructor_1, _d, recordItem, getByFields, allPresent, keys, connectionRecord, getByfield, key, connectionRecord, e_3_1, recordItem, allPresent, keys, connectionRecord, key, connectionRecord, e_4_1, e_2_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            namespace = this.schema.namespaces[namespaceName];\n            relations = namespace.relationships[srcModelName].relationTypes;\n            connectionStoreNames = relations.map(function (_a) {\n              var modelName = _a.modelName;\n              return getStorename(namespaceName, modelName);\n            });\n            modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n            if (connectionStoreNames.length === 0) {\n              return [2 /*return*/, records.map(function (record) {\n                return _this.modelInstanceCreator(modelConstructor, record);\n              })];\n            }\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 38, 39, 44]);\n            relations_1 = __asyncValues(relations);\n            _e.label = 2;\n          case 2:\n            return [4 /*yield*/, relations_1.next()];\n          case 3:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 37];\n            relation = relations_1_1.value;\n            fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName, targetNames = relation.targetNames, relationType = relation.relationType;\n            storeName = getStorename(namespaceName, modelName);\n            modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n            _d = relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 4];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 19];\n              case 'HAS_MANY':\n                return [3 /*break*/, 34];\n            }\n            return [3 /*break*/, 35];\n          case 4:\n            _e.trys.push([4, 12, 13, 18]);\n            records_1 = __asyncValues(records);\n            _e.label = 5;\n          case 5:\n            return [4 /*yield*/, records_1.next()];\n          case 6:\n            if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3 /*break*/, 11];\n            recordItem = records_1_1.value;\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n            getByFields = [];\n            allPresent = void 0;\n            // iterate through all targetnames to make sure they are all present in the recordItem\n            allPresent = targetNames.every(function (targetName) {\n              return recordItem[targetName] != null;\n            });\n            if (!allPresent) {\n              return [3 /*break*/, 11];\n            }\n            getByFields = targetNames;\n            keys = getByFields.map(function (getByField) {\n              return recordItem[getByField];\n            }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            return [4 /*yield*/, this.db.get(keys, storeName)];\n          case 7:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            return [3 /*break*/, 10];\n          case 8:\n            getByfield = recordItem[targetName] ? targetName : fieldName;\n            if (!recordItem[getByfield]) return [3 /*break*/, 11];\n            key = recordItem[getByfield];\n            return [4 /*yield*/, this.db.get(key, storeName)];\n          case 9:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            _e.label = 10;\n          case 10:\n            return [3 /*break*/, 5];\n          case 11:\n            return [3 /*break*/, 18];\n          case 12:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3 /*break*/, 18];\n          case 13:\n            _e.trys.push([13,, 16, 17]);\n            if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3 /*break*/, 15];\n            return [4 /*yield*/, _b.call(records_1)];\n          case 14:\n            _e.sent();\n            _e.label = 15;\n          case 15:\n            return [3 /*break*/, 17];\n          case 16:\n            if (e_3) throw e_3.error;\n            return [7 /*endfinally*/];\n          case 17:\n            return [7 /*endfinally*/];\n          case 18:\n            return [3 /*break*/, 36];\n          case 19:\n            _e.trys.push([19, 27, 28, 33]);\n            records_2 = __asyncValues(records);\n            _e.label = 20;\n          case 20:\n            return [4 /*yield*/, records_2.next()];\n          case 21:\n            if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3 /*break*/, 26];\n            recordItem = records_2_1.value;\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 23];\n            allPresent = void 0;\n            // iterate through all targetnames to make sure they are all present in the recordItem\n            allPresent = targetNames.every(function (targetName) {\n              return recordItem[targetName] != null;\n            });\n            // If not present, there is not yet a connected record\n            if (!allPresent) {\n              return [3 /*break*/, 26];\n            }\n            keys = targetNames.map(function (targetName) {\n              return recordItem[targetName];\n            }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            return [4 /*yield*/, this.db.get(keys, storeName)];\n          case 22:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            targetNames === null || targetNames === void 0 ? void 0 : targetNames.map(function (targetName) {\n              delete recordItem[targetName];\n            });\n            return [3 /*break*/, 25];\n          case 23:\n            if (!recordItem[targetName]) return [3 /*break*/, 25];\n            key = recordItem[targetName];\n            return [4 /*yield*/, this.db.get(key, storeName)];\n          case 24:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            delete recordItem[targetName];\n            _e.label = 25;\n          case 25:\n            return [3 /*break*/, 20];\n          case 26:\n            return [3 /*break*/, 33];\n          case 27:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3 /*break*/, 33];\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n            if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3 /*break*/, 30];\n            return [4 /*yield*/, _c.call(records_2)];\n          case 29:\n            _e.sent();\n            _e.label = 30;\n          case 30:\n            return [3 /*break*/, 32];\n          case 31:\n            if (e_4) throw e_4.error;\n            return [7 /*endfinally*/];\n          case 32:\n            return [7 /*endfinally*/];\n          case 33:\n            return [3 /*break*/, 36];\n          case 34:\n            // TODO: Lazy loading\n            return [3 /*break*/, 36];\n          case 35:\n            exhaustiveCheck(relationType);\n            return [3 /*break*/, 36];\n          case 36:\n            return [3 /*break*/, 2];\n          case 37:\n            return [3 /*break*/, 44];\n          case 38:\n            e_2_1 = _e.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3 /*break*/, 44];\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 41];\n            return [4 /*yield*/, _a.call(relations_1)];\n          case 40:\n            _e.sent();\n            _e.label = 41;\n          case 41:\n            return [3 /*break*/, 43];\n          case 42:\n            if (e_2) throw e_2.error;\n            return [7 /*endfinally*/];\n          case 43:\n            return [7 /*endfinally*/];\n          case 44:\n            return [2 /*return*/, records.map(function (record) {\n              return _this.modelInstanceCreator(modelConstructor, record);\n            })];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, keys, queryByKey, hasSort, hasPagination, records;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n            queryByKey = predicates && this.keyValueFromPredicate(predicates, keys);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4 /*yield*/, function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryByKey) return [3 /*break*/, 2];\n                      return [4 /*yield*/, this.getByKey(storeName, queryByKey)];\n                    case 1:\n                      record = _a.sent();\n                      return [2 /*return*/, record ? [record] : []];\n                    case 2:\n                      if (!predicates) return [3 /*break*/, 4];\n                      return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];\n                    case 3:\n                      filtered = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];\n                    case 4:\n                      if (!(hasSort || hasPagination)) return [3 /*break*/, 6];\n                      return [4 /*yield*/, this.getAll(storeName)];\n                    case 5:\n                      all = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(all, pagination)];\n                    case 6:\n                      return [2 /*return*/, this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n          case 1:\n            records = _a.sent();\n            return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.getByKey = function (storeName, keyValuePath) {\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.get(keyValuePath, storeName)];\n          case 1:\n            record = _a.sent();\n            return [2 /*return*/, record];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.keyValueFromPredicate = function (predicates, keys) {\n    var e_5, _a;\n    var predicateObjs = predicates.predicates;\n    if (predicateObjs.length !== keys.length) {\n      return;\n    }\n    var keyValues = [];\n    var _loop_1 = function _loop_1(key) {\n      var predicateObj = predicateObjs.find(function (p) {\n        return isPredicateObj(p) && p.field === key && p.operator === 'eq';\n      });\n      predicateObj && keyValues.push(predicateObj.operand);\n    };\n    try {\n      for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n        var key = keys_1_1.value;\n        _loop_1(key);\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n    return keyValues.length === keys.length ? keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR) : undefined;\n  };\n  AsyncStorageAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, all, filtered;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4 /*yield*/, this.getAll(storeName)];\n          case 1:\n            all = _a.sent();\n            filtered = predicateObjs ? all.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : all;\n            return [2 /*return*/, filtered];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    if (pagination && records.length > 1) {\n      if (pagination.sort) {\n        var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n        if (sortPredicates.length) {\n          var compareFn = sortCompareFunction(sortPredicates);\n          records.sort(compareFn);\n        }\n      }\n      var _a = pagination.page,\n        page = _a === void 0 ? 0 : _a,\n        _b = pagination.limit,\n        limit = _b === void 0 ? 0 : _b;\n      var start = Math.max(0, page * limit) || 0;\n      var end = limit > 0 ? start + limit : records.length;\n      return records.slice(start, end);\n    }\n    return records;\n  };\n  AsyncStorageAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.db.getOne(firstOrLast, storeName)];\n          case 1:\n            result = _a.sent();\n            return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, models, relations, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, keyValuePath, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 8];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            return [4 /*yield*/, this.query(modelConstructor, condition)];\n          case 1:\n            models = _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3 /*break*/, 4];\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 2:\n            _a.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 3:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 4:\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 5:\n            _a.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 6:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 7:\n            return [3 /*break*/, 15];\n          case 8:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3 /*break*/, 11];\n            keyValuePath = this.getIndexKeyValuesPath(model);\n            return [4 /*yield*/, this.db.get(keyValuePath, storeName)];\n          case 9:\n            fromDB = _a.sent();\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2 /*return*/, [[model], []]];\n            }\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            predicateObjs = predicates.predicates, type = predicates.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n          case 10:\n            _a.sent();\n            return [3 /*break*/, 13];\n          case 11:\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n          case 12:\n            _a.sent();\n            _a.label = 13;\n          case 13:\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 14:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [[model], deletedModels]];\n          case 15:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.deleteItem = function (deleteQueue) {\n    var deleteQueue_1, deleteQueue_1_1;\n    var e_6, _a, e_7, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteItem, storeName, items, items_1, items_1_1, item, keyValuesPath, e_7_1, e_6_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 17, 18, 23]);\n            deleteQueue_1 = __asyncValues(deleteQueue);\n            _c.label = 1;\n          case 1:\n            return [4 /*yield*/, deleteQueue_1.next()];\n          case 2:\n            if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3 /*break*/, 16];\n            deleteItem = deleteQueue_1_1.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            _c.label = 3;\n          case 3:\n            _c.trys.push([3, 9, 10, 15]);\n            items_1 = __asyncValues(items);\n            _c.label = 4;\n          case 4:\n            return [4 /*yield*/, items_1.next()];\n          case 5:\n            if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3 /*break*/, 8];\n            item = items_1_1.value;\n            if (!item) return [3 /*break*/, 7];\n            if (!(typeof item === 'object')) return [3 /*break*/, 7];\n            keyValuesPath = this.getIndexKeyValuesPath(item);\n            return [4 /*yield*/, this.db.delete(keyValuesPath, storeName)];\n          case 6:\n            _c.sent();\n            _c.label = 7;\n          case 7:\n            return [3 /*break*/, 4];\n          case 8:\n            return [3 /*break*/, 15];\n          case 9:\n            e_7_1 = _c.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3 /*break*/, 15];\n          case 10:\n            _c.trys.push([10,, 13, 14]);\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 12];\n            return [4 /*yield*/, _b.call(items_1)];\n          case 11:\n            _c.sent();\n            _c.label = 12;\n          case 12:\n            return [3 /*break*/, 14];\n          case 13:\n            if (e_7) throw e_7.error;\n            return [7 /*endfinally*/];\n          case 14:\n            return [7 /*endfinally*/];\n          case 15:\n            return [3 /*break*/, 1];\n          case 16:\n            return [3 /*break*/, 23];\n          case 17:\n            e_6_1 = _c.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3 /*break*/, 23];\n          case 18:\n            _c.trys.push([18,, 21, 22]);\n            if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3 /*break*/, 20];\n            return [4 /*yield*/, _a.call(deleteQueue_1)];\n          case 19:\n            _c.sent();\n            _c.label = 20;\n          case 20:\n            return [3 /*break*/, 22];\n          case 21:\n            if (e_6) throw e_6.error;\n            return [7 /*endfinally*/];\n          case 22:\n            return [7 /*endfinally*/];\n          case 23:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Populates the delete Queue with all the items to delete\n   * @param relations\n   * @param models\n   * @param srcModel\n   * @param nameSpace\n   * @param deleteQueue\n   */\n  AsyncStorageAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n    var e_8, _a, e_9, _b, e_10, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, index, _d, model, hasOneIndex_1, hasConnectedModelFields, keyValuesPath, values_1, isUnidirectionalConnection, allRecords, recordToDelete, hasOneIndex_2, hasOneCustomField, keyValuesPath, value_1, allRecords, recordToDelete, e_9_1, model, keyValues, allRecords, indices, childrenArray, e_10_1, e_8_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 38, 39, 44]);\n            relations_2 = __asyncValues(relations);\n            _e.label = 1;\n          case 1:\n            return [4 /*yield*/, relations_2.next()];\n          case 2:\n            if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3 /*break*/, 37];\n            rel = relations_2_1.value;\n            relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n            storeName = getStorename(nameSpace, modelName);\n            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) ||\n            // if we were unable to find an index via relationTypes\n            // i.e. for keyName connections, attempt to find one by the\n            // associatedWith property\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, rel.associatedWith);\n            _d = relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 3];\n              case 'HAS_MANY':\n                return [3 /*break*/, 20];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 34];\n            }\n            return [3 /*break*/, 35];\n          case 3:\n            _e.trys.push([3, 13, 14, 19]);\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n          case 4:\n            return [4 /*yield*/, models_1.next()];\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 12];\n            model = models_1_1.value;\n            if (!(targetNames && (targetNames === null || targetNames === void 0 ? void 0 : targetNames.length))) return [3 /*break*/, 8];\n            if (index) {\n              hasOneIndex_1 = index.split(IDENTIFIER_KEY_SEPARATOR);\n            } else if (associatedWith) {\n              if (Array.isArray(associatedWith)) {\n                hasOneIndex_1 = associatedWith;\n              } else {\n                hasOneIndex_1 = [associatedWith];\n              }\n            }\n            hasConnectedModelFields = targetNames.every(function (targetName) {\n              return model.hasOwnProperty(targetName);\n            });\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            isUnidirectionalConnection = hasOneIndex_1 === associatedWith;\n            if (hasConnectedModelFields && isUnidirectionalConnection) {\n              // Values will be that of the child model\n              values_1 = targetNames.map(function (targetName) {\n                return model[targetName];\n              });\n            } else {\n              // values will be that of the parent model\n              values_1 = keyValuesPath.split(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            }\n            if (values_1.length === 0) return [3 /*break*/, 12];\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 6:\n            allRecords = _e.sent();\n            recordToDelete = void 0;\n            // values === targetNames\n            if (hasConnectedModelFields) {\n              /**\n               * Retrieve record by finding the record where all\n               * targetNames are present on the connected model.\n               *\n               */\n              // recordToDelete = allRecords.filter(childItem =>\n              // \tvalues.every(value => childItem[value] != null)\n              // ) as T[];\n              recordToDelete = allRecords.filter(function (childItem) {\n                return hasOneIndex_1.every(function (index) {\n                  return values_1.includes(childItem[index]);\n                });\n              });\n            } else {\n              // values === keyValuePath\n              recordToDelete = allRecords.filter(function (childItem) {\n                return childItem[hasOneIndex_1] === values_1;\n              });\n            }\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n          case 7:\n            _e.sent();\n            return [3 /*break*/, 11];\n          case 8:\n            hasOneIndex_2 = index || associatedWith;\n            hasOneCustomField = targetName in model;\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            value_1 = hasOneCustomField ? model[targetName] : keyValuesPath;\n            if (!value_1) return [3 /*break*/, 12];\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 9:\n            allRecords = _e.sent();\n            recordToDelete = allRecords.filter(function (childItem) {\n              return childItem[hasOneIndex_2] === value_1;\n            });\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n          case 10:\n            _e.sent();\n            _e.label = 11;\n          case 11:\n            return [3 /*break*/, 4];\n          case 12:\n            return [3 /*break*/, 19];\n          case 13:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3 /*break*/, 19];\n          case 14:\n            _e.trys.push([14,, 17, 18]);\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 16];\n            return [4 /*yield*/, _b.call(models_1)];\n          case 15:\n            _e.sent();\n            _e.label = 16;\n          case 16:\n            return [3 /*break*/, 18];\n          case 17:\n            if (e_9) throw e_9.error;\n            return [7 /*endfinally*/];\n          case 18:\n            return [7 /*endfinally*/];\n          case 19:\n            return [3 /*break*/, 36];\n          case 20:\n            _e.trys.push([20, 27, 28, 33]);\n            models_2 = __asyncValues(models);\n            _e.label = 21;\n          case 21:\n            return [4 /*yield*/, models_2.next()];\n          case 22:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 26];\n            model = models_2_1.value;\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 23:\n            allRecords = _e.sent();\n            indices = index.split(IDENTIFIER_KEY_SEPARATOR);\n            childrenArray = allRecords.filter(function (childItem) {\n              return indices.every(function (index) {\n                return keyValues.includes(childItem[index]);\n              });\n            });\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n          case 24:\n            _e.sent();\n            _e.label = 25;\n          case 25:\n            return [3 /*break*/, 21];\n          case 26:\n            return [3 /*break*/, 33];\n          case 27:\n            e_10_1 = _e.sent();\n            e_10 = {\n              error: e_10_1\n            };\n            return [3 /*break*/, 33];\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 30];\n            return [4 /*yield*/, _c.call(models_2)];\n          case 29:\n            _e.sent();\n            _e.label = 30;\n          case 30:\n            return [3 /*break*/, 32];\n          case 31:\n            if (e_10) throw e_10.error;\n            return [7 /*endfinally*/];\n          case 32:\n            return [7 /*endfinally*/];\n          case 33:\n            return [3 /*break*/, 36];\n          case 34:\n            // Intentionally blank\n            return [3 /*break*/, 36];\n          case 35:\n            exhaustiveCheck(relationType);\n            return [3 /*break*/, 36];\n          case 36:\n            return [3 /*break*/, 1];\n          case 37:\n            return [3 /*break*/, 44];\n          case 38:\n            e_8_1 = _e.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3 /*break*/, 44];\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n            if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3 /*break*/, 41];\n            return [4 /*yield*/, _a.call(relations_2)];\n          case 40:\n            _e.sent();\n            _e.label = 41;\n          case 41:\n            return [3 /*break*/, 43];\n          case 42:\n            if (e_8) throw e_8.error;\n            return [7 /*endfinally*/];\n          case 43:\n            return [7 /*endfinally*/];\n          case 44:\n            deleteQueue.push({\n              storeName: getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.clear()];\n          case 1:\n            _a.sent();\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelName, namespaceName, storeName, keys, batch, _loop_2, this_1, items_2, items_2_1, item;\n      var e_11, _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            modelName = modelConstructor.name;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = getStorename(namespaceName, modelName);\n            keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);\n            batch = [];\n            _loop_2 = function _loop_2(item) {\n              var model = this_1.modelInstanceCreator(modelConstructor, item);\n              var connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n              var keyValuesPath = this_1.getIndexKeyValuesPath(model);\n              var instance = connectedModels.find(function (_a) {\n                var instance = _a.instance;\n                var instanceKeyValuesPath = _this.getIndexKeyValuesPath(instance);\n                return keysEqual([instanceKeyValuesPath], [keyValuesPath]);\n              }).instance;\n              batch.push(instance);\n            };\n            this_1 = this;\n            try {\n              for (items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {\n                item = items_2_1.value;\n                _loop_2(item);\n              }\n            } catch (e_11_1) {\n              e_11 = {\n                error: e_11_1\n              };\n            } finally {\n              try {\n                if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n              } finally {\n                if (e_11) throw e_11.error;\n              }\n            }\n            return [4 /*yield*/, this.db.batchSave(storeName, batch, keys)];\n          case 1:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  return AsyncStorageAdapter;\n}();\nexport { AsyncStorageAdapter };\nexport default new AsyncStorageAdapter();","map":{"version":3,"sources":["../../../src/storage/adapter/AsyncStorageAdapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport AsyncStorageDatabase from './AsyncStorageDatabase';\nimport { ModelPredicateCreator, ModelSortPredicateCreator, } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne, } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, traverseModel, validatePredicate, sortCompareFunction, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, IDENTIFIER_KEY_SEPARATOR, } from '../../util';\nvar logger = new Logger('DataStore');\nvar AsyncStorageAdapter = /** @class */ (function () {\n    function AsyncStorageAdapter() {\n    }\n    AsyncStorageAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n        var namespace = this.namespaceResolver(modelConstructor);\n        var modelName = modelConstructor.name;\n        return getStorename(namespace, modelName);\n    };\n    // Retrieves primary key values from a model\n    AsyncStorageAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n        var modelConstructor = Object.getPrototypeOf(model)\n            .constructor;\n        var namespaceName = this.namespaceResolver(modelConstructor);\n        var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n        return extractPrimaryKeyValues(model, keys);\n    };\n    // Retrieves concatenated primary key values from a model\n    AsyncStorageAdapter.prototype.getIndexKeyValuesPath = function (model) {\n        return this.getIndexKeyValuesFromModel(model).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n    };\n    AsyncStorageAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var error_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!this.initPromise) return [3 /*break*/, 1];\n                        this.initPromise = new Promise(function (res, rej) {\n                            _this.resolve = res;\n                            _this.reject = rej;\n                        });\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.initPromise];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                    case 3:\n                        this.schema = theSchema;\n                        this.namespaceResolver = namespaceResolver;\n                        this.modelInstanceCreator = modelInstanceCreator;\n                        this.getModelConstructorByModelName = getModelConstructorByModelName;\n                        _a.label = 4;\n                    case 4:\n                        _a.trys.push([4, 7, , 8]);\n                        if (!!this.db) return [3 /*break*/, 6];\n                        this.db = new AsyncStorageDatabase();\n                        return [4 /*yield*/, this.db.init()];\n                    case 5:\n                        _a.sent();\n                        this.resolve();\n                        _a.label = 6;\n                    case 6: return [3 /*break*/, 8];\n                    case 7:\n                        error_1 = _a.sent();\n                        this.reject(error_1);\n                        return [3 /*break*/, 8];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.save = function (model, condition) {\n        var e_1, _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, keyValuesPath, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, itemKeyValues, itemKeyValuesPath, fromDB_1, opType, modelKeyValues, e_1_1;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        modelConstructor = Object.getPrototypeOf(model)\n                            .constructor;\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n                        set = new Set();\n                        connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n                            var modelName = _a.modelName, item = _a.item, instance = _a.instance;\n                            var storeName = getStorename(namespaceName, modelName);\n                            set.add(storeName);\n                            var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n                            return { storeName: storeName, item: item, instance: instance, keys: keys };\n                        });\n                        keyValuesPath = this.getIndexKeyValuesPath(model);\n                        return [4 /*yield*/, this.db.get(keyValuesPath, storeName)];\n                    case 1:\n                        fromDB = _b.sent();\n                        if (condition && fromDB) {\n                            predicates = ModelPredicateCreator.getPredicates(condition);\n                            predicateObjs = predicates.predicates, type = predicates.type;\n                            isValid = validatePredicate(fromDB, type, predicateObjs);\n                            if (!isValid) {\n                                msg = 'Conditional update failed';\n                                logger.error(msg, { model: fromDB, condition: predicateObjs });\n                                throw new Error(msg);\n                            }\n                        }\n                        result = [];\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, 9, 10, 15]);\n                        connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n                        _b.label = 3;\n                    case 3: return [4 /*yield*/, connectionStoreNames_1.next()];\n                    case 4:\n                        if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 8];\n                        resItem = connectionStoreNames_1_1.value;\n                        storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n                        itemKeyValues = keys.map(function (key) { return item[key]; });\n                        itemKeyValuesPath = itemKeyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                        return [4 /*yield*/, this.db.get(itemKeyValuesPath, storeName_1)];\n                    case 5:\n                        fromDB_1 = _b.sent();\n                        opType = fromDB_1 ? OpType.UPDATE : OpType.INSERT;\n                        modelKeyValues = this.getIndexKeyValuesFromModel(model);\n                        if (!(keysEqual(itemKeyValues, modelKeyValues) ||\n                            opType === OpType.INSERT)) return [3 /*break*/, 7];\n                        return [4 /*yield*/, this.db.save(item, storeName_1, keys, itemKeyValuesPath)];\n                    case 6:\n                        _b.sent();\n                        result.push([instance, opType]);\n                        _b.label = 7;\n                    case 7: return [3 /*break*/, 3];\n                    case 8: return [3 /*break*/, 15];\n                    case 9:\n                        e_1_1 = _b.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 15];\n                    case 10:\n                        _b.trys.push([10, , 13, 14]);\n                        if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 12];\n                        return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n                    case 11:\n                        _b.sent();\n                        _b.label = 12;\n                    case 12: return [3 /*break*/, 14];\n                    case 13:\n                        if (e_1) throw e_1.error;\n                        return [7 /*endfinally*/];\n                    case 14: return [7 /*endfinally*/];\n                    case 15: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n        var records_1, records_1_1, records_2, records_2_1;\n        var e_2, _a, e_3, _b, e_4, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var namespace, relations, connectionStoreNames, modelConstructor, relations_1, relations_1_1, relation, fieldName, modelName, targetName, targetNames, relationType, storeName, modelConstructor_1, _d, recordItem, getByFields, allPresent, keys, connectionRecord, getByfield, key, connectionRecord, e_3_1, recordItem, allPresent, keys, connectionRecord, key, connectionRecord, e_4_1, e_2_1;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        namespace = this.schema.namespaces[namespaceName];\n                        relations = namespace.relationships[srcModelName].relationTypes;\n                        connectionStoreNames = relations.map(function (_a) {\n                            var modelName = _a.modelName;\n                            return getStorename(namespaceName, modelName);\n                        });\n                        modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n                        if (connectionStoreNames.length === 0) {\n                            return [2 /*return*/, records.map(function (record) {\n                                    return _this.modelInstanceCreator(modelConstructor, record);\n                                })];\n                        }\n                        _e.label = 1;\n                    case 1:\n                        _e.trys.push([1, 38, 39, 44]);\n                        relations_1 = __asyncValues(relations);\n                        _e.label = 2;\n                    case 2: return [4 /*yield*/, relations_1.next()];\n                    case 3:\n                        if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 37];\n                        relation = relations_1_1.value;\n                        fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName, targetNames = relation.targetNames, relationType = relation.relationType;\n                        storeName = getStorename(namespaceName, modelName);\n                        modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n                        _d = relationType;\n                        switch (_d) {\n                            case 'HAS_ONE': return [3 /*break*/, 4];\n                            case 'BELONGS_TO': return [3 /*break*/, 19];\n                            case 'HAS_MANY': return [3 /*break*/, 34];\n                        }\n                        return [3 /*break*/, 35];\n                    case 4:\n                        _e.trys.push([4, 12, 13, 18]);\n                        records_1 = __asyncValues(records);\n                        _e.label = 5;\n                    case 5: return [4 /*yield*/, records_1.next()];\n                    case 6:\n                        if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3 /*break*/, 11];\n                        recordItem = records_1_1.value;\n                        if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n                        getByFields = [];\n                        allPresent = void 0;\n                        // iterate through all targetnames to make sure they are all present in the recordItem\n                        allPresent = targetNames.every(function (targetName) {\n                            return recordItem[targetName] != null;\n                        });\n                        if (!allPresent) {\n                            return [3 /*break*/, 11];\n                        }\n                        getByFields = targetNames;\n                        keys = getByFields\n                            .map(function (getByField) { return recordItem[getByField]; })\n                            .join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                        return [4 /*yield*/, this.db.get(keys, storeName)];\n                    case 7:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        return [3 /*break*/, 10];\n                    case 8:\n                        getByfield = recordItem[targetName]\n                            ? targetName\n                            : fieldName;\n                        if (!recordItem[getByfield])\n                            return [3 /*break*/, 11];\n                        key = recordItem[getByfield];\n                        return [4 /*yield*/, this.db.get(key, storeName)];\n                    case 9:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        _e.label = 10;\n                    case 10: return [3 /*break*/, 5];\n                    case 11: return [3 /*break*/, 18];\n                    case 12:\n                        e_3_1 = _e.sent();\n                        e_3 = { error: e_3_1 };\n                        return [3 /*break*/, 18];\n                    case 13:\n                        _e.trys.push([13, , 16, 17]);\n                        if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3 /*break*/, 15];\n                        return [4 /*yield*/, _b.call(records_1)];\n                    case 14:\n                        _e.sent();\n                        _e.label = 15;\n                    case 15: return [3 /*break*/, 17];\n                    case 16:\n                        if (e_3) throw e_3.error;\n                        return [7 /*endfinally*/];\n                    case 17: return [7 /*endfinally*/];\n                    case 18: return [3 /*break*/, 36];\n                    case 19:\n                        _e.trys.push([19, 27, 28, 33]);\n                        records_2 = __asyncValues(records);\n                        _e.label = 20;\n                    case 20: return [4 /*yield*/, records_2.next()];\n                    case 21:\n                        if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3 /*break*/, 26];\n                        recordItem = records_2_1.value;\n                        if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 23];\n                        allPresent = void 0;\n                        // iterate through all targetnames to make sure they are all present in the recordItem\n                        allPresent = targetNames.every(function (targetName) {\n                            return recordItem[targetName] != null;\n                        });\n                        // If not present, there is not yet a connected record\n                        if (!allPresent) {\n                            return [3 /*break*/, 26];\n                        }\n                        keys = targetNames\n                            .map(function (targetName) { return recordItem[targetName]; })\n                            .join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                        return [4 /*yield*/, this.db.get(keys, storeName)];\n                    case 22:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        targetNames === null || targetNames === void 0 ? void 0 : targetNames.map(function (targetName) {\n                            delete recordItem[targetName];\n                        });\n                        return [3 /*break*/, 25];\n                    case 23:\n                        if (!recordItem[targetName]) return [3 /*break*/, 25];\n                        key = recordItem[targetName];\n                        return [4 /*yield*/, this.db.get(key, storeName)];\n                    case 24:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        delete recordItem[targetName];\n                        _e.label = 25;\n                    case 25: return [3 /*break*/, 20];\n                    case 26: return [3 /*break*/, 33];\n                    case 27:\n                        e_4_1 = _e.sent();\n                        e_4 = { error: e_4_1 };\n                        return [3 /*break*/, 33];\n                    case 28:\n                        _e.trys.push([28, , 31, 32]);\n                        if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3 /*break*/, 30];\n                        return [4 /*yield*/, _c.call(records_2)];\n                    case 29:\n                        _e.sent();\n                        _e.label = 30;\n                    case 30: return [3 /*break*/, 32];\n                    case 31:\n                        if (e_4) throw e_4.error;\n                        return [7 /*endfinally*/];\n                    case 32: return [7 /*endfinally*/];\n                    case 33: return [3 /*break*/, 36];\n                    case 34: \n                    // TODO: Lazy loading\n                    return [3 /*break*/, 36];\n                    case 35:\n                        exhaustiveCheck(relationType);\n                        return [3 /*break*/, 36];\n                    case 36: return [3 /*break*/, 2];\n                    case 37: return [3 /*break*/, 44];\n                    case 38:\n                        e_2_1 = _e.sent();\n                        e_2 = { error: e_2_1 };\n                        return [3 /*break*/, 44];\n                    case 39:\n                        _e.trys.push([39, , 42, 43]);\n                        if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 41];\n                        return [4 /*yield*/, _a.call(relations_1)];\n                    case 40:\n                        _e.sent();\n                        _e.label = 41;\n                    case 41: return [3 /*break*/, 43];\n                    case 42:\n                        if (e_2) throw e_2.error;\n                        return [7 /*endfinally*/];\n                    case 43: return [7 /*endfinally*/];\n                    case 44: return [2 /*return*/, records.map(function (record) {\n                            return _this.modelInstanceCreator(modelConstructor, record);\n                        })];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n        return __awaiter(this, void 0, void 0, function () {\n            var storeName, namespaceName, predicates, keys, queryByKey, hasSort, hasPagination, records;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n                        keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n                        queryByKey = predicates && this.keyValueFromPredicate(predicates, keys);\n                        hasSort = pagination && pagination.sort;\n                        hasPagination = pagination && pagination.limit;\n                        return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {\n                                var record, filtered, all;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            if (!queryByKey) return [3 /*break*/, 2];\n                                            return [4 /*yield*/, this.getByKey(storeName, queryByKey)];\n                                        case 1:\n                                            record = _a.sent();\n                                            return [2 /*return*/, record ? [record] : []];\n                                        case 2:\n                                            if (!predicates) return [3 /*break*/, 4];\n                                            return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];\n                                        case 3:\n                                            filtered = _a.sent();\n                                            return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];\n                                        case 4:\n                                            if (!(hasSort || hasPagination)) return [3 /*break*/, 6];\n                                            return [4 /*yield*/, this.getAll(storeName)];\n                                        case 5:\n                                            all = _a.sent();\n                                            return [2 /*return*/, this.inMemoryPagination(all, pagination)];\n                                        case 6: return [2 /*return*/, this.getAll(storeName)];\n                                    }\n                                });\n                            }); })()];\n                    case 1:\n                        records = _a.sent();\n                        return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];\n                    case 2: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.getByKey = function (storeName, keyValuePath) {\n        return __awaiter(this, void 0, void 0, function () {\n            var record;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.db.get(keyValuePath, storeName)];\n                    case 1:\n                        record = _a.sent();\n                        return [2 /*return*/, record];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.getAll = function (storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.keyValueFromPredicate = function (predicates, keys) {\n        var e_5, _a;\n        var predicateObjs = predicates.predicates;\n        if (predicateObjs.length !== keys.length) {\n            return;\n        }\n        var keyValues = [];\n        var _loop_1 = function (key) {\n            var predicateObj = predicateObjs.find(function (p) { return isPredicateObj(p) && p.field === key && p.operator === 'eq'; });\n            predicateObj && keyValues.push(predicateObj.operand);\n        };\n        try {\n            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n                var key = keys_1_1.value;\n                _loop_1(key);\n            }\n        }\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\n        finally {\n            try {\n                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n            }\n            finally { if (e_5) throw e_5.error; }\n        }\n        return keyValues.length === keys.length\n            ? keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)\n            : undefined;\n    };\n    AsyncStorageAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n        return __awaiter(this, void 0, void 0, function () {\n            var predicateObjs, type, all, filtered;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        predicateObjs = predicates.predicates, type = predicates.type;\n                        return [4 /*yield*/, this.getAll(storeName)];\n                    case 1:\n                        all = _a.sent();\n                        filtered = predicateObjs\n                            ? all.filter(function (m) { return validatePredicate(m, type, predicateObjs); })\n                            : all;\n                        return [2 /*return*/, filtered];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.inMemoryPagination = function (records, pagination) {\n        if (pagination && records.length > 1) {\n            if (pagination.sort) {\n                var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n                if (sortPredicates.length) {\n                    var compareFn = sortCompareFunction(sortPredicates);\n                    records.sort(compareFn);\n                }\n            }\n            var _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            var start = Math.max(0, page * limit) || 0;\n            var end = limit > 0 ? start + limit : records.length;\n            return records.slice(start, end);\n        }\n        return records;\n    };\n    AsyncStorageAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n        if (firstOrLast === void 0) { firstOrLast = QueryOne.FIRST; }\n        return __awaiter(this, void 0, void 0, function () {\n            var storeName, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        return [4 /*yield*/, this.db.getOne(firstOrLast, storeName)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n        return __awaiter(this, void 0, void 0, function () {\n            var deleteQueue, modelConstructor, nameSpace, models, relations, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, keyValuePath, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        deleteQueue = [];\n                        if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 8];\n                        modelConstructor = modelOrModelConstructor;\n                        nameSpace = this.namespaceResolver(modelConstructor);\n                        return [4 /*yield*/, this.query(modelConstructor, condition)];\n                    case 1:\n                        models = _a.sent();\n                        relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n                            .relationTypes;\n                        if (!(condition !== undefined)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, this.deleteItem(deleteQueue)];\n                    case 3:\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [models, deletedModels]];\n                    case 4: return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n                    case 5:\n                        _a.sent();\n                        return [4 /*yield*/, this.deleteItem(deleteQueue)];\n                    case 6:\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [models, deletedModels]];\n                    case 7: return [3 /*break*/, 15];\n                    case 8:\n                        model = modelOrModelConstructor;\n                        modelConstructor = Object.getPrototypeOf(model)\n                            .constructor;\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        if (!condition) return [3 /*break*/, 11];\n                        keyValuePath = this.getIndexKeyValuesPath(model);\n                        return [4 /*yield*/, this.db.get(keyValuePath, storeName)];\n                    case 9:\n                        fromDB = _a.sent();\n                        if (fromDB === undefined) {\n                            msg = 'Model instance not found in storage';\n                            logger.warn(msg, { model: model });\n                            return [2 /*return*/, [[model], []]];\n                        }\n                        predicates = ModelPredicateCreator.getPredicates(condition);\n                        predicateObjs = predicates.predicates, type = predicates.type;\n                        isValid = validatePredicate(fromDB, type, predicateObjs);\n                        if (!isValid) {\n                            msg = 'Conditional update failed';\n                            logger.error(msg, { model: fromDB, condition: predicateObjs });\n                            throw new Error(msg);\n                        }\n                        relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n                        return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n                    case 10:\n                        _a.sent();\n                        return [3 /*break*/, 13];\n                    case 11:\n                        relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n                        return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n                    case 12:\n                        _a.sent();\n                        _a.label = 13;\n                    case 13: return [4 /*yield*/, this.deleteItem(deleteQueue)];\n                    case 14:\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [[model], deletedModels]];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.deleteItem = function (deleteQueue) {\n        var deleteQueue_1, deleteQueue_1_1;\n        var e_6, _a, e_7, _b;\n        return __awaiter(this, void 0, void 0, function () {\n            var deleteItem, storeName, items, items_1, items_1_1, item, keyValuesPath, e_7_1, e_6_1;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _c.trys.push([0, 17, 18, 23]);\n                        deleteQueue_1 = __asyncValues(deleteQueue);\n                        _c.label = 1;\n                    case 1: return [4 /*yield*/, deleteQueue_1.next()];\n                    case 2:\n                        if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3 /*break*/, 16];\n                        deleteItem = deleteQueue_1_1.value;\n                        storeName = deleteItem.storeName, items = deleteItem.items;\n                        _c.label = 3;\n                    case 3:\n                        _c.trys.push([3, 9, 10, 15]);\n                        items_1 = __asyncValues(items);\n                        _c.label = 4;\n                    case 4: return [4 /*yield*/, items_1.next()];\n                    case 5:\n                        if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3 /*break*/, 8];\n                        item = items_1_1.value;\n                        if (!item) return [3 /*break*/, 7];\n                        if (!(typeof item === 'object')) return [3 /*break*/, 7];\n                        keyValuesPath = this.getIndexKeyValuesPath(item);\n                        return [4 /*yield*/, this.db.delete(keyValuesPath, storeName)];\n                    case 6:\n                        _c.sent();\n                        _c.label = 7;\n                    case 7: return [3 /*break*/, 4];\n                    case 8: return [3 /*break*/, 15];\n                    case 9:\n                        e_7_1 = _c.sent();\n                        e_7 = { error: e_7_1 };\n                        return [3 /*break*/, 15];\n                    case 10:\n                        _c.trys.push([10, , 13, 14]);\n                        if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 12];\n                        return [4 /*yield*/, _b.call(items_1)];\n                    case 11:\n                        _c.sent();\n                        _c.label = 12;\n                    case 12: return [3 /*break*/, 14];\n                    case 13:\n                        if (e_7) throw e_7.error;\n                        return [7 /*endfinally*/];\n                    case 14: return [7 /*endfinally*/];\n                    case 15: return [3 /*break*/, 1];\n                    case 16: return [3 /*break*/, 23];\n                    case 17:\n                        e_6_1 = _c.sent();\n                        e_6 = { error: e_6_1 };\n                        return [3 /*break*/, 23];\n                    case 18:\n                        _c.trys.push([18, , 21, 22]);\n                        if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3 /*break*/, 20];\n                        return [4 /*yield*/, _a.call(deleteQueue_1)];\n                    case 19:\n                        _c.sent();\n                        _c.label = 20;\n                    case 20: return [3 /*break*/, 22];\n                    case 21:\n                        if (e_6) throw e_6.error;\n                        return [7 /*endfinally*/];\n                    case 22: return [7 /*endfinally*/];\n                    case 23: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Populates the delete Queue with all the items to delete\n     * @param relations\n     * @param models\n     * @param srcModel\n     * @param nameSpace\n     * @param deleteQueue\n     */\n    AsyncStorageAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n        var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n        var e_8, _a, e_9, _b, e_10, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, index, _d, model, hasOneIndex_1, hasConnectedModelFields, keyValuesPath, values_1, isUnidirectionalConnection, allRecords, recordToDelete, hasOneIndex_2, hasOneCustomField, keyValuesPath, value_1, allRecords, recordToDelete, e_9_1, model, keyValues, allRecords, indices, childrenArray, e_10_1, e_8_1;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        _e.trys.push([0, 38, 39, 44]);\n                        relations_2 = __asyncValues(relations);\n                        _e.label = 1;\n                    case 1: return [4 /*yield*/, relations_2.next()];\n                    case 2:\n                        if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3 /*break*/, 37];\n                        rel = relations_2_1.value;\n                        relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n                        storeName = getStorename(nameSpace, modelName);\n                        index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName]\n                            .relationTypes, srcModel) ||\n                            // if we were unable to find an index via relationTypes\n                            // i.e. for keyName connections, attempt to find one by the\n                            // associatedWith property\n                            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, rel.associatedWith);\n                        _d = relationType;\n                        switch (_d) {\n                            case 'HAS_ONE': return [3 /*break*/, 3];\n                            case 'HAS_MANY': return [3 /*break*/, 20];\n                            case 'BELONGS_TO': return [3 /*break*/, 34];\n                        }\n                        return [3 /*break*/, 35];\n                    case 3:\n                        _e.trys.push([3, 13, 14, 19]);\n                        models_1 = __asyncValues(models);\n                        _e.label = 4;\n                    case 4: return [4 /*yield*/, models_1.next()];\n                    case 5:\n                        if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 12];\n                        model = models_1_1.value;\n                        if (!(targetNames && (targetNames === null || targetNames === void 0 ? void 0 : targetNames.length))) return [3 /*break*/, 8];\n                        if (index) {\n                            hasOneIndex_1 = index.split(IDENTIFIER_KEY_SEPARATOR);\n                        }\n                        else if (associatedWith) {\n                            if (Array.isArray(associatedWith)) {\n                                hasOneIndex_1 = associatedWith;\n                            }\n                            else {\n                                hasOneIndex_1 = [associatedWith];\n                            }\n                        }\n                        hasConnectedModelFields = targetNames.every(function (targetName) {\n                            return model.hasOwnProperty(targetName);\n                        });\n                        keyValuesPath = this.getIndexKeyValuesPath(model);\n                        isUnidirectionalConnection = hasOneIndex_1 === associatedWith;\n                        if (hasConnectedModelFields && isUnidirectionalConnection) {\n                            // Values will be that of the child model\n                            values_1 = targetNames.map(function (targetName) { return model[targetName]; });\n                        }\n                        else {\n                            // values will be that of the parent model\n                            values_1 = keyValuesPath.split(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                        }\n                        if (values_1.length === 0)\n                            return [3 /*break*/, 12];\n                        return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 6:\n                        allRecords = _e.sent();\n                        recordToDelete = void 0;\n                        // values === targetNames\n                        if (hasConnectedModelFields) {\n                            /**\n                             * Retrieve record by finding the record where all\n                             * targetNames are present on the connected model.\n                             *\n                             */\n                            // recordToDelete = allRecords.filter(childItem =>\n                            // \tvalues.every(value => childItem[value] != null)\n                            // ) as T[];\n                            recordToDelete = allRecords.filter(function (childItem) {\n                                return hasOneIndex_1.every(function (index) { return values_1.includes(childItem[index]); });\n                            });\n                        }\n                        else {\n                            // values === keyValuePath\n                            recordToDelete = allRecords.filter(function (childItem) { return childItem[hasOneIndex_1] === values_1; });\n                        }\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n                    case 7:\n                        _e.sent();\n                        return [3 /*break*/, 11];\n                    case 8:\n                        hasOneIndex_2 = index || associatedWith;\n                        hasOneCustomField = targetName in model;\n                        keyValuesPath = this.getIndexKeyValuesPath(model);\n                        value_1 = hasOneCustomField\n                            ? model[targetName]\n                            : keyValuesPath;\n                        if (!value_1)\n                            return [3 /*break*/, 12];\n                        return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 9:\n                        allRecords = _e.sent();\n                        recordToDelete = allRecords.filter(function (childItem) { return childItem[hasOneIndex_2] === value_1; });\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n                    case 10:\n                        _e.sent();\n                        _e.label = 11;\n                    case 11: return [3 /*break*/, 4];\n                    case 12: return [3 /*break*/, 19];\n                    case 13:\n                        e_9_1 = _e.sent();\n                        e_9 = { error: e_9_1 };\n                        return [3 /*break*/, 19];\n                    case 14:\n                        _e.trys.push([14, , 17, 18]);\n                        if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 16];\n                        return [4 /*yield*/, _b.call(models_1)];\n                    case 15:\n                        _e.sent();\n                        _e.label = 16;\n                    case 16: return [3 /*break*/, 18];\n                    case 17:\n                        if (e_9) throw e_9.error;\n                        return [7 /*endfinally*/];\n                    case 18: return [7 /*endfinally*/];\n                    case 19: return [3 /*break*/, 36];\n                    case 20:\n                        _e.trys.push([20, 27, 28, 33]);\n                        models_2 = __asyncValues(models);\n                        _e.label = 21;\n                    case 21: return [4 /*yield*/, models_2.next()];\n                    case 22:\n                        if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 26];\n                        model = models_2_1.value;\n                        keyValues = this.getIndexKeyValuesFromModel(model);\n                        return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 23:\n                        allRecords = _e.sent();\n                        indices = index.split(IDENTIFIER_KEY_SEPARATOR);\n                        childrenArray = allRecords.filter(function (childItem) {\n                            return indices.every(function (index) { return keyValues.includes(childItem[index]); });\n                        });\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n                    case 24:\n                        _e.sent();\n                        _e.label = 25;\n                    case 25: return [3 /*break*/, 21];\n                    case 26: return [3 /*break*/, 33];\n                    case 27:\n                        e_10_1 = _e.sent();\n                        e_10 = { error: e_10_1 };\n                        return [3 /*break*/, 33];\n                    case 28:\n                        _e.trys.push([28, , 31, 32]);\n                        if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 30];\n                        return [4 /*yield*/, _c.call(models_2)];\n                    case 29:\n                        _e.sent();\n                        _e.label = 30;\n                    case 30: return [3 /*break*/, 32];\n                    case 31:\n                        if (e_10) throw e_10.error;\n                        return [7 /*endfinally*/];\n                    case 32: return [7 /*endfinally*/];\n                    case 33: return [3 /*break*/, 36];\n                    case 34: \n                    // Intentionally blank\n                    return [3 /*break*/, 36];\n                    case 35:\n                        exhaustiveCheck(relationType);\n                        return [3 /*break*/, 36];\n                    case 36: return [3 /*break*/, 1];\n                    case 37: return [3 /*break*/, 44];\n                    case 38:\n                        e_8_1 = _e.sent();\n                        e_8 = { error: e_8_1 };\n                        return [3 /*break*/, 44];\n                    case 39:\n                        _e.trys.push([39, , 42, 43]);\n                        if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3 /*break*/, 41];\n                        return [4 /*yield*/, _a.call(relations_2)];\n                    case 40:\n                        _e.sent();\n                        _e.label = 41;\n                    case 41: return [3 /*break*/, 43];\n                    case 42:\n                        if (e_8) throw e_8.error;\n                        return [7 /*endfinally*/];\n                    case 43: return [7 /*endfinally*/];\n                    case 44:\n                        deleteQueue.push({\n                            storeName: getStorename(nameSpace, srcModel),\n                            items: models.map(function (record) {\n                                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n                            }),\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.db.clear()];\n                    case 1:\n                        _a.sent();\n                        this.db = undefined;\n                        this.initPromise = undefined;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.batchSave = function (modelConstructor, items) {\n        return __awaiter(this, void 0, void 0, function () {\n            var modelName, namespaceName, storeName, keys, batch, _loop_2, this_1, items_2, items_2_1, item;\n            var e_11, _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        modelName = modelConstructor.name;\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        storeName = getStorename(namespaceName, modelName);\n                        keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);\n                        batch = [];\n                        _loop_2 = function (item) {\n                            var model = this_1.modelInstanceCreator(modelConstructor, item);\n                            var connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n                            var keyValuesPath = this_1.getIndexKeyValuesPath(model);\n                            var instance = connectedModels.find(function (_a) {\n                                var instance = _a.instance;\n                                var instanceKeyValuesPath = _this.getIndexKeyValuesPath(instance);\n                                return keysEqual([instanceKeyValuesPath], [keyValuesPath]);\n                            }).instance;\n                            batch.push(instance);\n                        };\n                        this_1 = this;\n                        try {\n                            for (items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {\n                                item = items_2_1.value;\n                                _loop_2(item);\n                            }\n                        }\n                        catch (e_11_1) { e_11 = { error: e_11_1 }; }\n                        finally {\n                            try {\n                                if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n                            }\n                            finally { if (e_11) throw e_11.error; }\n                        }\n                        return [4 /*yield*/, this.db.batchSave(storeName, batch, keys)];\n                    case 1: return [2 /*return*/, _b.sent()];\n                }\n            });\n        });\n    };\n    return AsyncStorageAdapter;\n}());\nexport { AsyncStorageAdapter };\nexport default new AsyncStorageAdapter();\n//# sourceMappingURL=AsyncStorageAdapter.js.map"]},"metadata":{},"sourceType":"module"}