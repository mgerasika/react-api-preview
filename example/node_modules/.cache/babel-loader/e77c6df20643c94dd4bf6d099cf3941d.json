{"ast":null,"code":"import { Crc32 } from \"@aws-crypto/crc32\";\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\n/**\n * A marshaller that can convert binary-packed event stream messages into\n * JavaScript objects and back again into their binary format.\n */\nvar EventStreamMarshaller = /** @class */function () {\n  function EventStreamMarshaller(toUtf8, fromUtf8) {\n    this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n  }\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message.\n   */\n  EventStreamMarshaller.prototype.marshall = function (_a) {\n    var rawHeaders = _a.headers,\n      body = _a.body;\n    var headers = this.headerMarshaller.format(rawHeaders);\n    var length = headers.byteLength + body.byteLength + 16;\n    var out = new Uint8Array(length);\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    var checksum = new Crc32();\n    // Format message\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12);\n    // Write trailing message checksum\n    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n    return out;\n  };\n  /**\n   * Convert a binary event stream message into a JavaScript object with an\n   * opaque, binary body and tagged, parsed headers.\n   */\n  EventStreamMarshaller.prototype.unmarshall = function (message) {\n    var _a = splitMessage(message),\n      headers = _a.headers,\n      body = _a.body;\n    return {\n      headers: this.headerMarshaller.parse(headers),\n      body: body\n    };\n  };\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message header.\n   */\n  EventStreamMarshaller.prototype.formatHeaders = function (rawHeaders) {\n    return this.headerMarshaller.format(rawHeaders);\n  };\n  return EventStreamMarshaller;\n}();\nexport { EventStreamMarshaller };","map":{"version":3,"sources":["../../src/EventStreamMarshaller.ts"],"names":[],"mappings":"AAAA,SAAS,KAAK,QAAQ,mBAAmB;AAIzC,SAAS,gBAAgB,QAAQ,oBAAoB;AACrD,SAAS,YAAY,QAAQ,gBAAgB;AAE7C;;;AAGG;AACH,IAAA,qBAAA,GAAA,aAAA,YAAA;EAGE,SAAA,qBAAA,CAAY,MAAe,EAAE,QAAiB,EAAA;IAC5C,IAAI,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAChE;EAEA;;;AAGG;EACH,qBAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAS,EAAsC,EAAA;QAA3B,UAAU,GAAA,EAAA,CAAA,OAAA;MAAE,IAAI,GAAA,EAAA,CAAA,IAAA;IAClC,IAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,CAAC;IACxD,IAAM,MAAM,GAAG,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,EAAE;IAExD,IAAM,GAAG,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC;IAClC,IAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,UAAU,CAAC;IACrE,IAAM,QAAQ,GAAG,IAAI,KAAK,EAAE;IAE5B;IACA,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC;IAChC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC;IAC5C,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,KAAK,CAAC;IACtE,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC;IACpB,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,UAAU,GAAG,EAAE,CAAC;IAEtC;IACA,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,KAAK,CAAC;IAExF,OAAO,GAAG;EACZ,CAAC;EAED;;;AAGG;EACH,qBAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,OAAwB,EAAA;IAC3B,IAAA,EAAA,GAAoB,YAAY,CAAC,OAAO,CAAC;MAAvC,OAAO,GAAA,EAAA,CAAA,OAAA;MAAE,IAAI,GAAA,EAAA,CAAA,IAA0B;IAE/C,OAAO;MAAE,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC;MAAE,IAAI,EAAA;IAAA,CAAE;EAChE,CAAC;EAED;;;AAGG;EACH,qBAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,UAA0B,EAAA;IACtC,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,CAAC;EACjD,CAAC;EACH,OAAA,qBAAC;AAAD,CAAC,EAAA","sourcesContent":["import { Crc32 } from \"@aws-crypto/crc32\";\nimport { Message, MessageHeaders } from \"@aws-sdk/types\";\nimport { Decoder, Encoder } from \"@aws-sdk/types\";\n\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\n\n/**\n * A marshaller that can convert binary-packed event stream messages into\n * JavaScript objects and back again into their binary format.\n */\nexport class EventStreamMarshaller {\n  private readonly headerMarshaller: HeaderMarshaller;\n\n  constructor(toUtf8: Encoder, fromUtf8: Decoder) {\n    this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n  }\n\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message.\n   */\n  marshall({ headers: rawHeaders, body }: Message): Uint8Array {\n    const headers = this.headerMarshaller.format(rawHeaders);\n    const length = headers.byteLength + body.byteLength + 16;\n\n    const out = new Uint8Array(length);\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    const checksum = new Crc32();\n\n    // Format message\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12);\n\n    // Write trailing message checksum\n    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n\n    return out;\n  }\n\n  /**\n   * Convert a binary event stream message into a JavaScript object with an\n   * opaque, binary body and tagged, parsed headers.\n   */\n  unmarshall(message: ArrayBufferView): Message {\n    const { headers, body } = splitMessage(message);\n\n    return { headers: this.headerMarshaller.parse(headers), body };\n  }\n\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message header.\n   */\n  formatHeaders(rawHeaders: MessageHeaders): Uint8Array {\n    return this.headerMarshaller.format(rawHeaders);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}