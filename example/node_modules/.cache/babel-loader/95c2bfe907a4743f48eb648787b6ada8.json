{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n};\nimport { UploadPartCommand, CompleteMultipartUploadCommand, AbortMultipartUploadCommand, ListPartsCommand, CreateMultipartUploadCommand, ListObjectsV2Command } from '@aws-sdk/client-s3';\nimport axios from 'axios';\nimport { Logger } from '@aws-amplify/core';\nimport { byteLength, isFile } from '../common/StorageUtils';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nimport { SET_CONTENT_LENGTH_HEADER, UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nvar logger = new Logger('AWSS3UploadTask');\nexport var AWSS3UploadTaskState;\n(function (AWSS3UploadTaskState) {\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"INIT\"] = 0] = \"INIT\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"PAUSED\"] = 2] = \"PAUSED\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"CANCELLED\"] = 3] = \"CANCELLED\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"COMPLETED\"] = 4] = \"COMPLETED\";\n})(AWSS3UploadTaskState || (AWSS3UploadTaskState = {}));\nexport var TaskEvents;\n(function (TaskEvents) {\n  TaskEvents[\"CANCEL\"] = \"cancel\";\n  TaskEvents[\"UPLOAD_COMPLETE\"] = \"uploadComplete\";\n  TaskEvents[\"UPLOAD_PROGRESS\"] = \"uploadPartProgress\";\n  TaskEvents[\"ERROR\"] = \"error\";\n})(TaskEvents || (TaskEvents = {}));\n// maximum number of parts per upload request according the S3 spec,\n// see: https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html\nvar MAX_PARTS = 10000;\n// 5MB in bytes\nvar PART_SIZE = 5 * 1024 * 1024;\nvar DEFAULT_QUEUE_SIZE = 4;\nfunction comparePartNumber(a, b) {\n  return a.PartNumber - b.PartNumber;\n}\nvar AWSS3UploadTask = /** @class */function () {\n  function AWSS3UploadTask(_a) {\n    var s3Client = _a.s3Client,\n      file = _a.file,\n      emitter = _a.emitter,\n      storage = _a.storage,\n      params = _a.params,\n      level = _a.level,\n      prefixPromise = _a.prefixPromise;\n    this.partSize = PART_SIZE;\n    this.queueSize = DEFAULT_QUEUE_SIZE;\n    this.inProgress = [];\n    this.completedParts = [];\n    this.queued = [];\n    this.bytesUploaded = 0;\n    this.totalBytes = 0;\n    this.state = AWSS3UploadTaskState.INIT;\n    this.prefixPromise = prefixPromise;\n    this.s3client = s3Client;\n    this.s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n    this.storage = storage;\n    this.storageSync = Promise.resolve();\n    if (typeof this.storage['sync'] === 'function') {\n      this.storageSync = this.storage['sync']();\n    }\n    this.params = params;\n    this.file = file;\n    this.totalBytes = this.file.size;\n    this.bytesUploaded = 0;\n    this.emitter = emitter;\n    this.queued = [];\n    this.fileId = this._getFileId(level);\n    this._validateParams();\n    // event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op\n    // function to it unless user adds their own onError callback\n    this.emitter.on(TaskEvents.ERROR, function () {});\n  }\n  Object.defineProperty(AWSS3UploadTask.prototype, \"percent\", {\n    get: function () {\n      return this.bytesUploaded / this.totalBytes * 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AWSS3UploadTask.prototype, \"isInProgress\", {\n    get: function () {\n      return this.state === AWSS3UploadTaskState.IN_PROGRESS;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSS3UploadTask.prototype._listSingleFile = function (_a) {\n    var key = _a.key,\n      bucket = _a.bucket;\n    return __awaiter(this, void 0, void 0, function () {\n      var listObjectRes, _b, Contents, prefix, obj;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this.s3client.send(new ListObjectsV2Command({\n              Bucket: bucket,\n              Prefix: key\n            }))];\n          case 1:\n            listObjectRes = _c.sent();\n            _b = listObjectRes.Contents, Contents = _b === void 0 ? [] : _b;\n            return [4 /*yield*/, this.prefixPromise];\n          case 2:\n            prefix = _c.sent();\n            obj = Contents.find(function (o) {\n              return o.Key === \"\" + prefix + key;\n            });\n            return [2 /*return*/, obj];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._getFileId = function (level) {\n    // We should check if it's a File first because File is also instance of a Blob\n    if (isFile(this.file)) {\n      return [this.file.name, this.file.lastModified, this.file.size, this.file.type, this.params.Bucket, level, this.params.Key].join('-');\n    } else {\n      return [this.file.size, this.file.type, this.params.Bucket, level, this.params.Key].join('-');\n    }\n  };\n  AWSS3UploadTask.prototype._findCachedUploadParts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests, cachedUploadFileData, listPartsOutput;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            uploadRequests = _a.sent();\n            if (Object.keys(uploadRequests).length === 0 || !Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)) {\n              return [2 /*return*/, {\n                parts: [],\n                uploadId: null\n              }];\n            }\n            cachedUploadFileData = uploadRequests[this.fileId];\n            cachedUploadFileData.lastTouched = Date.now();\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [4 /*yield*/, this.s3client.send(new ListPartsCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: cachedUploadFileData.uploadId\n            }))];\n          case 2:\n            listPartsOutput = _a.sent();\n            return [2 /*return*/, {\n              parts: listPartsOutput.Parts || [],\n              uploadId: cachedUploadFileData.uploadId\n            }];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._emitEvent = function (event, payload) {\n    this.emitter.emit(event, payload);\n  };\n  AWSS3UploadTask.prototype._validateParams = function () {\n    if (this.file.size / this.partSize > MAX_PARTS) {\n      throw new Error(\"Too many parts. Number of parts is \" + this.file.size / this.partSize + \", maximum is \" + MAX_PARTS + \".\");\n    }\n  };\n  AWSS3UploadTask.prototype._listCachedUploadTasks = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var tasks;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.storageSync];\n          case 1:\n            _a.sent();\n            tasks = this.storage.getItem(UPLOADS_STORAGE_KEY) || '{}';\n            return [2 /*return*/, JSON.parse(tasks)];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._cache = function (fileMetadata) {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            uploadRequests = _a.sent();\n            uploadRequests[this.fileId] = fileMetadata;\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._isCached = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = (_a = Object.prototype.hasOwnProperty).call;\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            return [2 /*return*/, _b.apply(_a, [_c.sent(), this.fileId])];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._removeFromCache = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            uploadRequests = _a.sent();\n            delete uploadRequests[this.fileId];\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._onPartUploadCompletion = function (_a) {\n    var eTag = _a.eTag,\n      partNumber = _a.partNumber,\n      chunk = _a.chunk;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        this.completedParts.push({\n          ETag: eTag,\n          PartNumber: partNumber\n        });\n        this.bytesUploaded += byteLength(chunk);\n        this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n          loaded: this.bytesUploaded,\n          total: this.totalBytes\n        });\n        // Remove the completed item from the inProgress array\n        this.inProgress = this.inProgress.filter(function (job) {\n          return job.uploadPartInput.PartNumber !== partNumber;\n        });\n        if (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED) this._startNextPart();\n        if (this._isDone()) this._completeUpload();\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._completeUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.s3client.send(new CompleteMultipartUploadCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: this.uploadId,\n              MultipartUpload: {\n                // Parts are not always completed in order, we need to manually sort them\n                Parts: this.completedParts.sort(comparePartNumber)\n              }\n            }))];\n          case 1:\n            _a.sent();\n            this._verifyFileSize();\n            this._emitEvent(TaskEvents.UPLOAD_COMPLETE, {\n              key: this.params.Bucket + \"/\" + this.params.Key\n            });\n            this._removeFromCache();\n            this.state = AWSS3UploadTaskState.COMPLETED;\n            return [3 /*break*/, 3];\n          case 2:\n            err_1 = _a.sent();\n            logger.error('error completing upload', err_1);\n            this._emitEvent(TaskEvents.ERROR, err_1);\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._makeUploadPartRequest = function (input, cancelTokenSource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, this.s3client.send(new UploadPartCommand(input), {\n              cancelTokenSource: cancelTokenSource\n            })];\n          case 1:\n            res = _a.sent();\n            return [4 /*yield*/, this._onPartUploadCompletion({\n              eTag: res.ETag,\n              partNumber: input.PartNumber,\n              chunk: input.Body\n            })];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            err_2 = _a.sent();\n            if (this.state === AWSS3UploadTaskState.PAUSED) {\n              logger.log('upload paused');\n            } else if (this.state === AWSS3UploadTaskState.CANCELLED) {\n              logger.log('upload aborted');\n            } else {\n              logger.error('error starting next part of upload: ', err_2);\n            }\n            // axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an\n            // expected behavior\n            if (!axios.isCancel(err_2) && err_2.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE) {\n              this._emitEvent(TaskEvents.ERROR, err_2);\n              this.pause();\n            }\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._startNextPart = function () {\n    if (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {\n      var cancelTokenSource = axios.CancelToken.source();\n      var nextPart = this.queued.shift();\n      this.inProgress.push({\n        uploadPartInput: nextPart,\n        s3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),\n        cancel: cancelTokenSource.cancel\n      });\n    }\n  };\n  /**\n   * Verify on S3 side that the file size matches the one on the client side.\n   *\n   * @async\n   * @throws throws an error if the file size does not match between local copy of the file and the file on s3.\n   */\n  AWSS3UploadTask.prototype._verifyFileSize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var obj, valid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listSingleFile({\n              key: this.params.Key,\n              bucket: this.params.Bucket\n            })];\n          case 1:\n            obj = _a.sent();\n            valid = Boolean(obj && obj.Size === this.file.size);\n            if (!valid) {\n              throw new Error('File size does not match between local file and file on s3');\n            }\n            return [2 /*return*/, valid];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._isDone = function () {\n    return !this.queued.length && !this.inProgress.length && this.bytesUploaded === this.totalBytes;\n  };\n  AWSS3UploadTask.prototype._createParts = function () {\n    var size = this.file.size;\n    var parts = [];\n    for (var bodyStart = 0; bodyStart < size;) {\n      var bodyEnd = Math.min(bodyStart + this.partSize, size);\n      parts.push({\n        Body: this.file.slice(bodyStart, bodyEnd),\n        Key: this.params.Key,\n        Bucket: this.params.Bucket,\n        PartNumber: parts.length + 1,\n        UploadId: this.uploadId\n      });\n      bodyStart += this.partSize;\n    }\n    return parts;\n  };\n  AWSS3UploadTask.prototype._initCachedUploadParts = function (cachedParts) {\n    this.bytesUploaded += cachedParts.reduce(function (acc, part) {\n      return acc + part.Size;\n    }, 0);\n    // Find the set of part numbers that have already been uploaded\n    var uploadedPartNumSet = new Set(cachedParts.map(function (part) {\n      return part.PartNumber;\n    }));\n    this.queued = this.queued.filter(function (part) {\n      return !uploadedPartNumSet.has(part.PartNumber);\n    });\n    this.completedParts = cachedParts.map(function (part) {\n      return {\n        PartNumber: part.PartNumber,\n        ETag: part.ETag\n      };\n    });\n    this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytes\n    });\n  };\n  AWSS3UploadTask.prototype._initMultipartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.s3client.send(new CreateMultipartUploadCommand(this.params))];\n          case 1:\n            res = _a.sent();\n            this._cache({\n              uploadId: res.UploadId,\n              lastTouched: Date.now(),\n              bucket: this.params.Bucket,\n              key: this.params.Key,\n              fileName: this.file instanceof File ? this.file.name : ''\n            });\n            return [2 /*return*/, res.UploadId];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._initializeUploadTask = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, parts, uploadId, uploadId, err_3;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.state = AWSS3UploadTaskState.IN_PROGRESS;\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 7,, 8]);\n            return [4 /*yield*/, this._isCached()];\n          case 2:\n            if (!_b.sent()) return [3 /*break*/, 4];\n            return [4 /*yield*/, this._findCachedUploadParts()];\n          case 3:\n            _a = _b.sent(), parts = _a.parts, uploadId = _a.uploadId;\n            this.uploadId = uploadId;\n            this.queued = this._createParts();\n            this._initCachedUploadParts(parts);\n            this._startUpload();\n            return [3 /*break*/, 6];\n          case 4:\n            if (!!this.uploadId) return [3 /*break*/, 6];\n            return [4 /*yield*/, this._initMultipartUpload()];\n          case 5:\n            uploadId = _b.sent();\n            this.uploadId = uploadId;\n            this.queued = this._createParts();\n            this._startUpload();\n            _b.label = 6;\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            err_3 = _b.sent();\n            if (!axios.isCancel(err_3)) {\n              logger.error('Error initializing the upload task', err_3);\n            }\n            return [3 /*break*/, 8];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype.resume = function () {\n    if (this.state === AWSS3UploadTaskState.CANCELLED) {\n      logger.warn('This task has already been cancelled');\n    } else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n      logger.warn('This task has already been completed');\n    } else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) {\n      logger.warn('Upload task already in progress');\n      // first time running resume, find any cached parts on s3 or start a new multipart upload request before\n      // starting the upload\n    } else if (!this.uploadId) {\n      this._initializeUploadTask();\n    } else {\n      this._startUpload();\n    }\n  };\n  AWSS3UploadTask.prototype._startUpload = function () {\n    this.state = AWSS3UploadTaskState.IN_PROGRESS;\n    for (var i = 0; i < this.queueSize; i++) {\n      this._startNextPart();\n    }\n  };\n  AWSS3UploadTask.prototype._cancel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.state === AWSS3UploadTaskState.CANCELLED)) return [3 /*break*/, 1];\n            logger.warn('This task has already been cancelled');\n            return [2 /*return*/, false];\n          case 1:\n            if (!(this.state === AWSS3UploadTaskState.COMPLETED)) return [3 /*break*/, 2];\n            logger.warn('This task has already been completed');\n            return [2 /*return*/, false];\n          case 2:\n            this.pause();\n            this.queued = [];\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.state = AWSS3UploadTaskState.CANCELLED;\n            _a.label = 3;\n          case 3:\n            _a.trys.push([3, 6,, 7]);\n            return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: this.uploadId\n            }))];\n          case 4:\n            _a.sent();\n            return [4 /*yield*/, this._removeFromCache()];\n          case 5:\n            _a.sent();\n            return [2 /*return*/, true];\n          case 6:\n            err_4 = _a.sent();\n            logger.error('Error cancelling upload task', err_4);\n            return [2 /*return*/, false];\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * pause this particular upload task\n   **/\n  AWSS3UploadTask.prototype.pause = function () {\n    var _a;\n    if (this.state === AWSS3UploadTaskState.CANCELLED) {\n      logger.warn('This task has already been cancelled');\n    } else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n      logger.warn('This task has already been completed');\n    } else if (this.state === AWSS3UploadTaskState.PAUSED) {\n      logger.warn('This task is already paused');\n    }\n    this.state = AWSS3UploadTaskState.PAUSED;\n    // Use axios cancel token to abort the part request immediately\n    // Add the inProgress parts back to pending\n    var removedInProgressReq = this.inProgress.splice(0, this.inProgress.length);\n    removedInProgressReq.forEach(function (req) {\n      req.cancel(AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE);\n    });\n    // Put all removed in progress parts back into the queue\n    (_a = this.queued).unshift.apply(_a, __spread(removedInProgressReq.map(function (req) {\n      return req.uploadPartInput;\n    })));\n  };\n  return AWSS3UploadTask;\n}();\nexport { AWSS3UploadTask };","map":{"version":3,"sources":["../../src/providers/AWSS3UploadTask.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport { UploadPartCommand, CompleteMultipartUploadCommand, AbortMultipartUploadCommand, ListPartsCommand, CreateMultipartUploadCommand, ListObjectsV2Command, } from '@aws-sdk/client-s3';\nimport axios from 'axios';\nimport { Logger } from '@aws-amplify/core';\nimport { byteLength, isFile } from '../common/StorageUtils';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nimport { SET_CONTENT_LENGTH_HEADER, UPLOADS_STORAGE_KEY, } from '../common/StorageConstants';\nvar logger = new Logger('AWSS3UploadTask');\nexport var AWSS3UploadTaskState;\n(function (AWSS3UploadTaskState) {\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"INIT\"] = 0] = \"INIT\";\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"PAUSED\"] = 2] = \"PAUSED\";\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"CANCELLED\"] = 3] = \"CANCELLED\";\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"COMPLETED\"] = 4] = \"COMPLETED\";\n})(AWSS3UploadTaskState || (AWSS3UploadTaskState = {}));\nexport var TaskEvents;\n(function (TaskEvents) {\n    TaskEvents[\"CANCEL\"] = \"cancel\";\n    TaskEvents[\"UPLOAD_COMPLETE\"] = \"uploadComplete\";\n    TaskEvents[\"UPLOAD_PROGRESS\"] = \"uploadPartProgress\";\n    TaskEvents[\"ERROR\"] = \"error\";\n})(TaskEvents || (TaskEvents = {}));\n// maximum number of parts per upload request according the S3 spec,\n// see: https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html\nvar MAX_PARTS = 10000;\n// 5MB in bytes\nvar PART_SIZE = 5 * 1024 * 1024;\nvar DEFAULT_QUEUE_SIZE = 4;\nfunction comparePartNumber(a, b) {\n    return a.PartNumber - b.PartNumber;\n}\nvar AWSS3UploadTask = /** @class */ (function () {\n    function AWSS3UploadTask(_a) {\n        var s3Client = _a.s3Client, file = _a.file, emitter = _a.emitter, storage = _a.storage, params = _a.params, level = _a.level, prefixPromise = _a.prefixPromise;\n        this.partSize = PART_SIZE;\n        this.queueSize = DEFAULT_QUEUE_SIZE;\n        this.inProgress = [];\n        this.completedParts = [];\n        this.queued = [];\n        this.bytesUploaded = 0;\n        this.totalBytes = 0;\n        this.state = AWSS3UploadTaskState.INIT;\n        this.prefixPromise = prefixPromise;\n        this.s3client = s3Client;\n        this.s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n        this.storage = storage;\n        this.storageSync = Promise.resolve();\n        if (typeof this.storage['sync'] === 'function') {\n            this.storageSync = this.storage['sync']();\n        }\n        this.params = params;\n        this.file = file;\n        this.totalBytes = this.file.size;\n        this.bytesUploaded = 0;\n        this.emitter = emitter;\n        this.queued = [];\n        this.fileId = this._getFileId(level);\n        this._validateParams();\n        // event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op\n        // function to it unless user adds their own onError callback\n        this.emitter.on(TaskEvents.ERROR, function () { });\n    }\n    Object.defineProperty(AWSS3UploadTask.prototype, \"percent\", {\n        get: function () {\n            return (this.bytesUploaded / this.totalBytes) * 100;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AWSS3UploadTask.prototype, \"isInProgress\", {\n        get: function () {\n            return this.state === AWSS3UploadTaskState.IN_PROGRESS;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AWSS3UploadTask.prototype._listSingleFile = function (_a) {\n        var key = _a.key, bucket = _a.bucket;\n        return __awaiter(this, void 0, void 0, function () {\n            var listObjectRes, _b, Contents, prefix, obj;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this.s3client.send(new ListObjectsV2Command({\n                            Bucket: bucket,\n                            Prefix: key,\n                        }))];\n                    case 1:\n                        listObjectRes = _c.sent();\n                        _b = listObjectRes.Contents, Contents = _b === void 0 ? [] : _b;\n                        return [4 /*yield*/, this.prefixPromise];\n                    case 2:\n                        prefix = _c.sent();\n                        obj = Contents.find(function (o) { return o.Key === \"\" + prefix + key; });\n                        return [2 /*return*/, obj];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._getFileId = function (level) {\n        // We should check if it's a File first because File is also instance of a Blob\n        if (isFile(this.file)) {\n            return [\n                this.file.name,\n                this.file.lastModified,\n                this.file.size,\n                this.file.type,\n                this.params.Bucket,\n                level,\n                this.params.Key,\n            ].join('-');\n        }\n        else {\n            return [\n                this.file.size,\n                this.file.type,\n                this.params.Bucket,\n                level,\n                this.params.Key,\n            ].join('-');\n        }\n    };\n    AWSS3UploadTask.prototype._findCachedUploadParts = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var uploadRequests, cachedUploadFileData, listPartsOutput;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._listCachedUploadTasks()];\n                    case 1:\n                        uploadRequests = _a.sent();\n                        if (Object.keys(uploadRequests).length === 0 ||\n                            !Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)) {\n                            return [2 /*return*/, { parts: [], uploadId: null }];\n                        }\n                        cachedUploadFileData = uploadRequests[this.fileId];\n                        cachedUploadFileData.lastTouched = Date.now();\n                        this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n                        return [4 /*yield*/, this.s3client.send(new ListPartsCommand({\n                                Bucket: this.params.Bucket,\n                                Key: this.params.Key,\n                                UploadId: cachedUploadFileData.uploadId,\n                            }))];\n                    case 2:\n                        listPartsOutput = _a.sent();\n                        return [2 /*return*/, {\n                                parts: listPartsOutput.Parts || [],\n                                uploadId: cachedUploadFileData.uploadId,\n                            }];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._emitEvent = function (event, payload) {\n        this.emitter.emit(event, payload);\n    };\n    AWSS3UploadTask.prototype._validateParams = function () {\n        if (this.file.size / this.partSize > MAX_PARTS) {\n            throw new Error(\"Too many parts. Number of parts is \" + this.file.size /\n                this.partSize + \", maximum is \" + MAX_PARTS + \".\");\n        }\n    };\n    AWSS3UploadTask.prototype._listCachedUploadTasks = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var tasks;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.storageSync];\n                    case 1:\n                        _a.sent();\n                        tasks = this.storage.getItem(UPLOADS_STORAGE_KEY) || '{}';\n                        return [2 /*return*/, JSON.parse(tasks)];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._cache = function (fileMetadata) {\n        return __awaiter(this, void 0, void 0, function () {\n            var uploadRequests;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._listCachedUploadTasks()];\n                    case 1:\n                        uploadRequests = _a.sent();\n                        uploadRequests[this.fileId] = fileMetadata;\n                        this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._isCached = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _b = (_a = Object.prototype.hasOwnProperty).call;\n                        return [4 /*yield*/, this._listCachedUploadTasks()];\n                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(),\n                            this.fileId])];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._removeFromCache = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var uploadRequests;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._listCachedUploadTasks()];\n                    case 1:\n                        uploadRequests = _a.sent();\n                        delete uploadRequests[this.fileId];\n                        this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._onPartUploadCompletion = function (_a) {\n        var eTag = _a.eTag, partNumber = _a.partNumber, chunk = _a.chunk;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                this.completedParts.push({\n                    ETag: eTag,\n                    PartNumber: partNumber,\n                });\n                this.bytesUploaded += byteLength(chunk);\n                this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n                    loaded: this.bytesUploaded,\n                    total: this.totalBytes,\n                });\n                // Remove the completed item from the inProgress array\n                this.inProgress = this.inProgress.filter(function (job) { return job.uploadPartInput.PartNumber !== partNumber; });\n                if (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED)\n                    this._startNextPart();\n                if (this._isDone())\n                    this._completeUpload();\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._completeUpload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.s3client.send(new CompleteMultipartUploadCommand({\n                                Bucket: this.params.Bucket,\n                                Key: this.params.Key,\n                                UploadId: this.uploadId,\n                                MultipartUpload: {\n                                    // Parts are not always completed in order, we need to manually sort them\n                                    Parts: this.completedParts.sort(comparePartNumber),\n                                },\n                            }))];\n                    case 1:\n                        _a.sent();\n                        this._verifyFileSize();\n                        this._emitEvent(TaskEvents.UPLOAD_COMPLETE, {\n                            key: this.params.Bucket + \"/\" + this.params.Key,\n                        });\n                        this._removeFromCache();\n                        this.state = AWSS3UploadTaskState.COMPLETED;\n                        return [3 /*break*/, 3];\n                    case 2:\n                        err_1 = _a.sent();\n                        logger.error('error completing upload', err_1);\n                        this._emitEvent(TaskEvents.ERROR, err_1);\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._makeUploadPartRequest = function (input, cancelTokenSource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res, err_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, this.s3client.send(new UploadPartCommand(input), {\n                                cancelTokenSource: cancelTokenSource,\n                            })];\n                    case 1:\n                        res = _a.sent();\n                        return [4 /*yield*/, this._onPartUploadCompletion({\n                                eTag: res.ETag,\n                                partNumber: input.PartNumber,\n                                chunk: input.Body,\n                            })];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_2 = _a.sent();\n                        if (this.state === AWSS3UploadTaskState.PAUSED) {\n                            logger.log('upload paused');\n                        }\n                        else if (this.state === AWSS3UploadTaskState.CANCELLED) {\n                            logger.log('upload aborted');\n                        }\n                        else {\n                            logger.error('error starting next part of upload: ', err_2);\n                        }\n                        // axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an\n                        // expected behavior\n                        if (!axios.isCancel(err_2) &&\n                            err_2.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE) {\n                            this._emitEvent(TaskEvents.ERROR, err_2);\n                            this.pause();\n                        }\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._startNextPart = function () {\n        if (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {\n            var cancelTokenSource = axios.CancelToken.source();\n            var nextPart = this.queued.shift();\n            this.inProgress.push({\n                uploadPartInput: nextPart,\n                s3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),\n                cancel: cancelTokenSource.cancel,\n            });\n        }\n    };\n    /**\n     * Verify on S3 side that the file size matches the one on the client side.\n     *\n     * @async\n     * @throws throws an error if the file size does not match between local copy of the file and the file on s3.\n     */\n    AWSS3UploadTask.prototype._verifyFileSize = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var obj, valid;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._listSingleFile({\n                            key: this.params.Key,\n                            bucket: this.params.Bucket,\n                        })];\n                    case 1:\n                        obj = _a.sent();\n                        valid = Boolean(obj && obj.Size === this.file.size);\n                        if (!valid) {\n                            throw new Error('File size does not match between local file and file on s3');\n                        }\n                        return [2 /*return*/, valid];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._isDone = function () {\n        return (!this.queued.length &&\n            !this.inProgress.length &&\n            this.bytesUploaded === this.totalBytes);\n    };\n    AWSS3UploadTask.prototype._createParts = function () {\n        var size = this.file.size;\n        var parts = [];\n        for (var bodyStart = 0; bodyStart < size;) {\n            var bodyEnd = Math.min(bodyStart + this.partSize, size);\n            parts.push({\n                Body: this.file.slice(bodyStart, bodyEnd),\n                Key: this.params.Key,\n                Bucket: this.params.Bucket,\n                PartNumber: parts.length + 1,\n                UploadId: this.uploadId,\n            });\n            bodyStart += this.partSize;\n        }\n        return parts;\n    };\n    AWSS3UploadTask.prototype._initCachedUploadParts = function (cachedParts) {\n        this.bytesUploaded += cachedParts.reduce(function (acc, part) { return acc + part.Size; }, 0);\n        // Find the set of part numbers that have already been uploaded\n        var uploadedPartNumSet = new Set(cachedParts.map(function (part) { return part.PartNumber; }));\n        this.queued = this.queued.filter(function (part) { return !uploadedPartNumSet.has(part.PartNumber); });\n        this.completedParts = cachedParts.map(function (part) { return ({\n            PartNumber: part.PartNumber,\n            ETag: part.ETag,\n        }); });\n        this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n            loaded: this.bytesUploaded,\n            total: this.totalBytes,\n        });\n    };\n    AWSS3UploadTask.prototype._initMultipartUpload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.s3client.send(new CreateMultipartUploadCommand(this.params))];\n                    case 1:\n                        res = _a.sent();\n                        this._cache({\n                            uploadId: res.UploadId,\n                            lastTouched: Date.now(),\n                            bucket: this.params.Bucket,\n                            key: this.params.Key,\n                            fileName: this.file instanceof File ? this.file.name : '',\n                        });\n                        return [2 /*return*/, res.UploadId];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._initializeUploadTask = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, parts, uploadId, uploadId, err_3;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this.state = AWSS3UploadTaskState.IN_PROGRESS;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 7, , 8]);\n                        return [4 /*yield*/, this._isCached()];\n                    case 2:\n                        if (!_b.sent()) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this._findCachedUploadParts()];\n                    case 3:\n                        _a = _b.sent(), parts = _a.parts, uploadId = _a.uploadId;\n                        this.uploadId = uploadId;\n                        this.queued = this._createParts();\n                        this._initCachedUploadParts(parts);\n                        this._startUpload();\n                        return [3 /*break*/, 6];\n                    case 4:\n                        if (!!this.uploadId) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._initMultipartUpload()];\n                    case 5:\n                        uploadId = _b.sent();\n                        this.uploadId = uploadId;\n                        this.queued = this._createParts();\n                        this._startUpload();\n                        _b.label = 6;\n                    case 6: return [3 /*break*/, 8];\n                    case 7:\n                        err_3 = _b.sent();\n                        if (!axios.isCancel(err_3)) {\n                            logger.error('Error initializing the upload task', err_3);\n                        }\n                        return [3 /*break*/, 8];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype.resume = function () {\n        if (this.state === AWSS3UploadTaskState.CANCELLED) {\n            logger.warn('This task has already been cancelled');\n        }\n        else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n            logger.warn('This task has already been completed');\n        }\n        else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) {\n            logger.warn('Upload task already in progress');\n            // first time running resume, find any cached parts on s3 or start a new multipart upload request before\n            // starting the upload\n        }\n        else if (!this.uploadId) {\n            this._initializeUploadTask();\n        }\n        else {\n            this._startUpload();\n        }\n    };\n    AWSS3UploadTask.prototype._startUpload = function () {\n        this.state = AWSS3UploadTaskState.IN_PROGRESS;\n        for (var i = 0; i < this.queueSize; i++) {\n            this._startNextPart();\n        }\n    };\n    AWSS3UploadTask.prototype._cancel = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var err_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.state === AWSS3UploadTaskState.CANCELLED)) return [3 /*break*/, 1];\n                        logger.warn('This task has already been cancelled');\n                        return [2 /*return*/, false];\n                    case 1:\n                        if (!(this.state === AWSS3UploadTaskState.COMPLETED)) return [3 /*break*/, 2];\n                        logger.warn('This task has already been completed');\n                        return [2 /*return*/, false];\n                    case 2:\n                        this.pause();\n                        this.queued = [];\n                        this.completedParts = [];\n                        this.bytesUploaded = 0;\n                        this.state = AWSS3UploadTaskState.CANCELLED;\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 6, , 7]);\n                        return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand({\n                                Bucket: this.params.Bucket,\n                                Key: this.params.Key,\n                                UploadId: this.uploadId,\n                            }))];\n                    case 4:\n                        _a.sent();\n                        return [4 /*yield*/, this._removeFromCache()];\n                    case 5:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                    case 6:\n                        err_4 = _a.sent();\n                        logger.error('Error cancelling upload task', err_4);\n                        return [2 /*return*/, false];\n                    case 7: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * pause this particular upload task\n     **/\n    AWSS3UploadTask.prototype.pause = function () {\n        var _a;\n        if (this.state === AWSS3UploadTaskState.CANCELLED) {\n            logger.warn('This task has already been cancelled');\n        }\n        else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n            logger.warn('This task has already been completed');\n        }\n        else if (this.state === AWSS3UploadTaskState.PAUSED) {\n            logger.warn('This task is already paused');\n        }\n        this.state = AWSS3UploadTaskState.PAUSED;\n        // Use axios cancel token to abort the part request immediately\n        // Add the inProgress parts back to pending\n        var removedInProgressReq = this.inProgress.splice(0, this.inProgress.length);\n        removedInProgressReq.forEach(function (req) {\n            req.cancel(AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE);\n        });\n        // Put all removed in progress parts back into the queue\n        (_a = this.queued).unshift.apply(_a, __spread(removedInProgressReq.map(function (req) { return req.uploadPartInput; })));\n    };\n    return AWSS3UploadTask;\n}());\nexport { AWSS3UploadTask };\n//# sourceMappingURL=AWSS3UploadTask.js.map"]},"metadata":{},"sourceType":"module"}