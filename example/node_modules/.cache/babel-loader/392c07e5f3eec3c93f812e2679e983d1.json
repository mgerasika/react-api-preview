{"ast":null,"code":"import { __read } from \"tslib\";\n/**\n * Validate whether a string is an ARN.\n */\nexport var validate = function (str) {\n  return typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\n};\n/**\n * Parse an ARN string into structure with partition, service, region, accountId and resource values\n */\nexport var parse = function (arn) {\n  var segments = arn.split(\":\");\n  if (segments.length < 6 || segments[0] !== \"arn\") throw new Error(\"Malformed ARN\");\n  var _a = __read(segments),\n    //Skip \"arn\" literal\n    partition = _a[1],\n    service = _a[2],\n    region = _a[3],\n    accountId = _a[4],\n    resource = _a.slice(5);\n  return {\n    partition: partition,\n    service: service,\n    region: region,\n    accountId: accountId,\n    resource: resource.join(\":\")\n  };\n};\n/**\n * Build an ARN with service, partition, region, accountId, and resources strings\n */\nexport var build = function (arnObject) {\n  var _a = arnObject.partition,\n    partition = _a === void 0 ? \"aws\" : _a,\n    service = arnObject.service,\n    region = arnObject.region,\n    accountId = arnObject.accountId,\n    resource = arnObject.resource;\n  if ([service, region, accountId, resource].some(function (segment) {\n    return typeof segment !== \"string\";\n  })) {\n    throw new Error(\"Input ARN object is invalid\");\n  }\n  return \"arn:\" + partition + \":\" + service + \":\" + region + \":\" + accountId + \":\" + resource;\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";AAOA;;AAEG;AACH,OAAO,IAAM,QAAQ,GAAG,UAAC,GAAQ,EAAA;EAC/B,OAAA,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC;AAAlF,CAAkF;AAEpF;;AAEG;AACH,OAAO,IAAM,KAAK,GAAG,UAAC,GAAW,EAAA;EAC/B,IAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC;EAC/B,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC;EAC5E,IAAA,EAAA,GAAA,MAAA,CAQF,QAAQ,CAAA;IANV;IACA,SAAS,GAAA,EAAA,CAAA,CAAA,CAAA;IACT,OAAO,GAAA,EAAA,CAAA,CAAA,CAAA;IACP,MAAM,GAAA,EAAA,CAAA,CAAA,CAAA;IACN,SAAS,GAAA,EAAA,CAAA,CAAA,CAAA;IACN,QAAQ,GAAA,EAAA,CAAA,KAAA,CAAA,CAAA,CACD;EAEZ,OAAO;IACL,SAAS,EAAA,SAAA;IACT,OAAO,EAAA,OAAA;IACP,MAAM,EAAA,MAAA;IACN,SAAS,EAAA,SAAA;IACT,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,GAAG;GAC5B;AACH,CAAC;AAID;;AAEG;AACH,OAAO,IAAM,KAAK,GAAG,UAAC,SAAuB,EAAA;EACnC,IAAA,EAAA,GAA4D,SAAS,CAAA,SAApD;IAAjB,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAK,GAAA,EAAA;IAAE,OAAO,GAAkC,SAAS,CAAA,OAA3C;IAAE,MAAM,GAA0B,SAAS,CAAA,MAAnC;IAAE,SAAS,GAAe,SAAS,CAAA,SAAxB;IAAE,QAAQ,GAAK,SAAS,CAAA,QAAd;EAC/D,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAC,OAAO,EAAA;IAAK,OAAA,OAAO,OAAO,KAAK,QAAQ;EAA3B,CAA2B,CAAC,EAAE;IACzF,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC;EAC/C;EACD,OAAO,MAAA,GAAO,SAAS,GAAA,GAAA,GAAI,OAAO,GAAA,GAAA,GAAI,MAAM,GAAA,GAAA,GAAI,SAAS,GAAA,GAAA,GAAI,QAAU;AACzE,CAAC","sourcesContent":["export interface ARN {\n  partition: string;\n  service: string;\n  region: string;\n  accountId: string;\n  resource: string;\n}\n/**\n * Validate whether a string is an ARN.\n */\nexport const validate = (str: any): boolean =>\n  typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\n\n/**\n * Parse an ARN string into structure with partition, service, region, accountId and resource values\n */\nexport const parse = (arn: string): ARN => {\n  const segments = arn.split(\":\");\n  if (segments.length < 6 || segments[0] !== \"arn\") throw new Error(\"Malformed ARN\");\n  const [\n    ,\n    //Skip \"arn\" literal\n    partition,\n    service,\n    region,\n    accountId,\n    ...resource\n  ] = segments;\n\n  return {\n    partition,\n    service,\n    region,\n    accountId,\n    resource: resource.join(\":\"),\n  };\n};\n\ntype buildOptions = Omit<ARN, \"partition\"> & { partition?: string };\n\n/**\n * Build an ARN with service, partition, region, accountId, and resources strings\n */\nexport const build = (arnObject: buildOptions): string => {\n  const { partition = \"aws\", service, region, accountId, resource } = arnObject;\n  if ([service, region, accountId, resource].some((segment) => typeof segment !== \"string\")) {\n    throw new Error(\"Input ARN object is invalid\");\n  }\n  return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}