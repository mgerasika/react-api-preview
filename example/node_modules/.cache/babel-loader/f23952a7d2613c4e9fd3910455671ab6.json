{"ast":null,"code":"import { CONST } from '../constants/const.constant.js';\nimport { useRef, useCallback } from 'react';\nfunction useCollectionOptions(_ref) {\n  let {\n    limit = CONST.LIST_LIMIT,\n    queryStorage,\n    filter = {}\n  } = _ref;\n  const ref = useRef(queryStorage ? queryStorage.queryClient.getQueryData(`settings-${queryStorage.storageKey}`) || {\n    limit,\n    filter\n  } : {\n    limit,\n    filter\n  });\n  return {\n    getCollectionOptions: useCallback(() => ref.current, []),\n    setCollectionOptions: useCallback(data => {\n      ref.current = data;\n      if (queryStorage?.queryClient && queryStorage.storageKey) {\n        queryStorage.queryClient?.setQueryData(`settings-${queryStorage.storageKey}`, () => data);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [queryStorage?.storageKey])\n  };\n}\nexport { useCollectionOptions };","map":{"version":3,"sources":["../../../src/hooks/use-collection-options.hook.ts"],"names":["useCollectionOptions","limit","CONST","LIST_LIMIT","queryStorage","filter","ref","useRef","queryClient","getQueryData","storageKey","getCollectionOptions","useCallback","current","setCollectionOptions","data","setQueryData"],"mappings":";;AAgBO,SAASA,oBAAoB,OAIE;EAAA,IAJkB;IACpDC,KAAK,GAAGC,KAAK,CAACC,UAAU;IACxBC,YAAY;IACZC,MAAM,GAAG,CAAA;EACI,CAAC;EACd,MAAMC,GAAG,GAAGC,MAAM,CACdH,YAAY,GACNA,YAAY,CAACI,WAAW,CAACC,YAAY,CAAaL,YAAAA,YAAY,CAACM,UAAW,EAAC,CAAC,IAAI;IAAET,KAAK;IAAEI;EAAO,CAAC,GACjG;IAAEJ,KAAK;IAAEI;EAAO,CAAC,CAC1B;EAED,OAAO;IACHM,oBAAoB,EAAEC,WAAW,CAAC,MAA0CN,GAAG,CAACO,OAAO,EAAE,EAAE,CAAC;IAC5FC,oBAAoB,EAAEF,WAAW,CAC5BG,IAAwC,IAAW;MAChDT,GAAG,CAACO,OAAO,GAAGE,IAAI;MAClB,IAAIX,YAAY,EAAEI,WAAW,IAAIJ,YAAY,CAACM,UAAU,EAAE;QACtDN,YAAY,CAACI,WAAW,EAAEQ,YAAY,CAAE,YAAWZ,YAAY,CAACM,UAAW,EAAC,EAAE,MAAMK,IAAI,CAAC;MAC7F;KACH;IACD;IACA,CAACX,YAAY,EAAEM,UAAU,CAAC;GAEjC;AACL","sourcesContent":["import { CONST } from '@common/constants/const.constant';\nimport { ICollectionRequestOptions } from '@common/interfaces/collection-request-options.interface';\nimport { useCallback, useRef } from 'react';\nimport { QueryClient } from 'react-query';\n\ninterface IReturn<T = unknown> {\n    getCollectionOptions: () => ICollectionRequestOptions<T>;\n    setCollectionOptions: (pagination: ICollectionRequestOptions<T>) => void;\n}\n\ninterface IProps<TFilter> {\n    queryStorage?: { queryClient: QueryClient; storageKey: string };\n    limit?: number;\n\n    filter?: TFilter;\n}\nexport function useCollectionOptions<TFilter = unknown>({\n    limit = CONST.LIST_LIMIT,\n    queryStorage,\n    filter = {} as TFilter,\n}: IProps<TFilter>): IReturn<TFilter> {\n    const ref = useRef<ICollectionRequestOptions<TFilter>>(\n        queryStorage\n            ? queryStorage.queryClient.getQueryData(`settings-${queryStorage.storageKey}`) || { limit, filter }\n            : { limit, filter },\n    );\n\n    return {\n        getCollectionOptions: useCallback((): ICollectionRequestOptions<TFilter> => ref.current, []),\n        setCollectionOptions: useCallback(\n            (data: ICollectionRequestOptions<TFilter>): void => {\n                ref.current = data;\n                if (queryStorage?.queryClient && queryStorage.storageKey) {\n                    queryStorage.queryClient?.setQueryData(`settings-${queryStorage.storageKey}`, () => data);\n                }\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [queryStorage?.storageKey],\n        ),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}