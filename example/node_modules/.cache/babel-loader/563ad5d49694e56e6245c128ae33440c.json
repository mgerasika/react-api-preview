{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { Input } from '../input/input.component.js';\nimport React, { useState, useEffect, useCallback } from 'react';\nvar PhoneNumber = function PhoneNumber(props) {\n  var _useState = useState(props.defaultValue || props.value),\n    _useState2 = _slicedToArray(_useState, 2),\n    val = _useState2[0],\n    setVal = _useState2[1];\n  useEffect(function () {\n    if (props.value !== undefined) {\n      setVal(props.value);\n    }\n  }, [props.value]);\n  useEffect(function () {\n    if (props.defaultValue !== undefined) {\n      setVal(props.defaultValue);\n    }\n  }, [props.defaultValue]);\n  var handleChange = useCallback(function (e) {\n    setVal(e.target.value);\n    props.onChange && props.onChange(_objectSpread(_objectSpread({}, e), {}, {\n      target: _objectSpread(_objectSpread({}, e.target), {}, {\n        value: e.target.value\n      })\n    }));\n  }, [props]);\n  var formatValue = useCallback(function (value) {\n    var first = value !== null && value !== void 0 && value.length ? value[0] : '';\n    var newValue = first === '+' ? first + value.replaceAll(/[^0-9]/g, '') : value.replaceAll(/[^0-9]/g, '');\n    return newValue;\n  }, []);\n  return /*#__PURE__*/React.createElement(Input, _extends({}, props, {\n    type: \"text\",\n    onChange: handleChange,\n    formatValue: formatValue,\n    value: val\n  }));\n};\nexport { PhoneNumber };","map":{"version":3,"sources":["../../../../src/general-ui/phone-number/phone-number.component.tsx"],"names":["PhoneNumber","props","val","setVal","useState","defaultValue","value","useEffect","undefined","handleChange","useCallback","e","target","onChange","formatValue","first","length","newValue","replaceAll","Input","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGaA,IAAAA,WAAW,GAAIC,SAAfD,WAAW,CAAIC,KAAgC,EAAkB;EAC1E,IAAA,SAAA,GAAsBG,QAAQ,CAACH,KAAK,CAACI,YAAY,IAAIJ,KAAK,CAACK,KAAK,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;IAA1DJ,GAAG,GAAA,UAAA,CAAA,CAAA,CAAA;IAAEC,MAAM,GAAA,UAAA,CAAA,CAAA,CAAA;EAClBI,SAAS,CAAC,YAAM;IACZ,IAAIN,KAAK,CAACK,KAAK,KAAKE,SAAS,EAAE;MAC3BL,MAAM,CAACF,KAAK,CAACK,KAAK,CAAC;IACvB;EACJ,CAAC,EAAE,CAACL,KAAK,CAACK,KAAK,CAAC,CAAC;EAEjBC,SAAS,CAAC,YAAM;IACZ,IAAIN,KAAK,CAACI,YAAY,KAAKG,SAAS,EAAE;MAClCL,MAAM,CAACF,KAAK,CAACI,YAAY,CAAC;IAC9B;EACJ,CAAC,EAAE,CAACJ,KAAK,CAACI,YAAY,CAAC,CAAC;EAExB,IAAMI,YAAY,GAAGC,WAAW,CAC3BC,UAAAA,CAAsC,EAAK;IACxCR,MAAM,CAACQ,CAAC,CAACC,MAAM,CAACN,KAAK,CAAC;IACtBL,KAAK,CAACY,QAAQ,IAAIZ,KAAK,CAACY,QAAQ,CAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EAAMF,CAAC,CAAA,EAAA,CAAA,CAAA,EAAA;MAAEC,MAAM,EAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EAAOD,CAAC,CAACC,MAAM,CAAA,EAAA,CAAA,CAAA,EAAA;QAAEN,KAAK,EAAEK,CAAC,CAACC,MAAM,CAACN;MAAAA,CAAAA;IAAM,CAAA,CAAA,CAAI;EAC9F,CAAC,EACD,CAACL,KAAK,CAAC,CACV;EAED,IAAMa,WAAW,GAAGJ,WAAW,CAAEJ,UAAAA,KAAa,EAAK;IAC/C,IAAMS,KAAK,GAAGT,KAAK,KAAA,IAAA,IAALA,KAAK,KAAA,KAAA,CAAA,IAALA,KAAK,CAAEU,MAAM,GAAGV,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;IAC3C,IAAMW,QAAQ,GAAGF,KAAK,KAAK,GAAG,GAAGA,KAAK,GAAGT,KAAK,CAACY,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,GAAGZ,KAAK,CAACY,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC;IAC1G,OAAOD,QAAQ;EAClB,CAAA,EAAE,EAAE,CAAC;EAEN,OAAO,aAAA,KAAA,CAAA,aAAA,CAACE,KAAK,EAAA,QAAA,CAAA,CAAA,CAAA,EAAKlB,KAAK,EAAA;IAAEmB,IAAI,EAAC,MAAM;IAACP,QAAQ,EAAEJ,YAAa;IAACK,WAAW,EAAEA,WAAY;IAACR,KAAK,EAAEJ;EAAO,CAAA,CAAA,CAAA;AACzG,CAAA","sourcesContent":["import { IInputProps, Input } from '@common/general-ui/input/input.component';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nexport const PhoneNumber = (props: Omit<IInputProps, 'type'>): JSX.Element => {\n    const [val, setVal] = useState(props.defaultValue || props.value);\n    useEffect(() => {\n        if (props.value !== undefined) {\n            setVal(props.value);\n        }\n    }, [props.value]);\n\n    useEffect(() => {\n        if (props.defaultValue !== undefined) {\n            setVal(props.defaultValue);\n        }\n    }, [props.defaultValue]);\n\n    const handleChange = useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            setVal(e.target.value);\n            props.onChange && props.onChange({ ...e, target: { ...e.target, value: e.target.value } });\n        },\n        [props],\n    );\n\n    const formatValue = useCallback((value: string) => {\n        const first = value?.length ? value[0] : '';\n        const newValue = first === '+' ? first + value.replaceAll(/[^0-9]/g, '') : value.replaceAll(/[^0-9]/g, '');\n        return newValue;\n    }, []);\n\n    return <Input {...props} type=\"text\" onChange={handleChange} formatValue={formatValue} value={val} />;\n};\n"]},"metadata":{},"sourceType":"module"}