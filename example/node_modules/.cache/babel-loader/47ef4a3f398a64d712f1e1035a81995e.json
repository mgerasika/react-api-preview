{"ast":null,"code":"import { CONST } from '../../constants/const.constant.js';\nimport React from 'react';\nimport { useHistory, Switch, Route, Redirect } from 'react-router';\nconst RenderRoutes = _ref => {\n  let {\n    config,\n    getToken,\n    loginUrl,\n    dontHavePermissionUrl\n  } = _ref;\n  const history = useHistory();\n  return /*#__PURE__*/React.createElement(Switch, null, config.routes.map(route => {\n    const Component = route.component;\n    return /*#__PURE__*/React.createElement(Route, {\n      key: route.path.toString(),\n      exact: route.exact,\n      path: route.path.toString(),\n      render: props => {\n        if (route.isPrivate && !getToken()) {\n          sessionStorage.setItem(CONST.sessionStorageKey_redirectUrl, history.location.pathname);\n          return /*#__PURE__*/React.createElement(Redirect, {\n            to: loginUrl.toString(),\n            from: history.location.pathname\n          });\n        }\n        if (!route.hasAccess()) {\n          return /*#__PURE__*/React.createElement(Redirect, {\n            to: dontHavePermissionUrl.toString(),\n            from: history.location.pathname\n          });\n        }\n        return /*#__PURE__*/React.createElement(Component, props);\n      }\n    });\n  }), config.redirects.map(r => {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      key: r.to.toString(),\n      to: {\n        pathname: r.to.toString(),\n        state: r.state\n      },\n      from: r.from?.toString()\n    });\n  }));\n};\nexport { RenderRoutes };","map":{"version":3,"sources":["../../../../src/general-ui/render-routes/render-routes.component.tsx"],"names":["RenderRoutes","config","getToken","loginUrl","dontHavePermissionUrl","history","useHistory","routes","map","route","Component","component","path","toString","exact","props","isPrivate","sessionStorage","setItem","CONST","sessionStorageKey_redirectUrl","location","pathname","hasAccess","redirects","r","to","state","from"],"mappings":";;;AAaO,MAAMA,YAAY,GAAG,QAAgF;EAAA,IAA/E;IAAEC,MAAM;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC;EAA8B,CAAC;EACtF,MAAMC,OAAO,GAAGC,UAAU,EAAE;EAC5B,OAAA,aACI,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA,IAAA,EACFL,MAAM,CAACM,MAAM,CAACC,GAAG,CAAEC,KAAK,IAAK;IAC1B,MAAMC,SAAS,GAAGD,KAAK,CAACE,SAAS;IACjC,OAAA,aACI,KAAA,CAAA,aAAA,CAAC,KAAK,EAAA;MACF,GAAG,EAAEF,KAAK,CAACG,IAAI,CAACC,QAAQ,EAAG;MAC3B,KAAK,EAAEJ,KAAK,CAACK,KAAM;MACnB,IAAI,EAAEL,KAAK,CAACG,IAAI,CAACC,QAAQ,EAAG;MAC5B,MAAM,EAAGE,KAAK,IAAkB;QAC5B,IAAIN,KAAK,CAACO,SAAS,IAAI,CAACd,QAAQ,EAAE,EAAE;UAChCe,cAAc,CAACC,OAAO,CAACC,KAAK,CAACC,6BAA6B,EAAEf,OAAO,CAACgB,QAAQ,CAACC,QAAQ,CAAC;UACtF,OAAA,aAAO,KAAA,CAAA,aAAA,CAAC,QAAQ,EAAA;YAAC,EAAE,EAAEnB,QAAQ,CAACU,QAAQ,EAAG;YAAC,IAAI,EAAER,OAAO,CAACgB,QAAQ,CAACC;WAAY,CAAA;QACjF;QACA,IAAI,CAACb,KAAK,CAACc,SAAS,EAAE,EAAE;UACpB,OAAA,aAAO,KAAA,CAAA,aAAA,CAAC,QAAQ,EAAA;YAAC,EAAE,EAAEnB,qBAAqB,CAACS,QAAQ,EAAG;YAAC,IAAI,EAAER,OAAO,CAACgB,QAAQ,CAACC;WAAY,CAAA;QAC9F;QACA,OAAA,aAAO,KAAC,CAAA,aAAA,CAAA,SAAS,EAAKP,KAAK,CAAI;MACnC;KACF,CAAA;GAET,CAAC,EAEDd,MAAM,CAACuB,SAAS,CAAChB,GAAG,CAAEiB,CAAC,IAAK;IACzB,OAAA,aACI,KAAA,CAAA,aAAA,CAAC,QAAQ,EAAA;MACL,GAAG,EAAEA,CAAC,CAACC,EAAE,CAACb,QAAQ,EAAG;MACrB,EAAE,EAAE;QAAES,QAAQ,EAAEG,CAAC,CAACC,EAAE,CAACb,QAAQ,EAAE;QAAEc,KAAK,EAAEF,CAAC,CAACE;OAAQ;MAClD,IAAI,EAAEF,CAAC,CAACG,IAAI,EAAEf,QAAQ;KACxB,CAAA;EAEV,CAAC,CAAC,CACG;AAEjB,CAAA","sourcesContent":["import { CONST } from '@common/constants/const.constant';\nimport { IRouteConfig } from '@common/interfaces/route.interface';\nimport { ILinkItem } from '@common/utils/make-links.util';\nimport React from 'react';\nimport { Redirect, Route, Switch, useHistory } from 'react-router';\n\ninterface IProps {\n    loginUrl: ILinkItem;\n    dontHavePermissionUrl: ILinkItem;\n    config: IRouteConfig;\n    getToken: () => string | undefined;\n}\n\nexport const RenderRoutes = ({ config, getToken, loginUrl, dontHavePermissionUrl }: IProps): JSX.Element => {\n    const history = useHistory();\n    return (\n        <Switch>\n            {config.routes.map((route) => {\n                const Component = route.component;\n                return (\n                    <Route\n                        key={route.path.toString()}\n                        exact={route.exact}\n                        path={route.path.toString()}\n                        render={(props): JSX.Element => {\n                            if (route.isPrivate && !getToken()) {\n                                sessionStorage.setItem(CONST.sessionStorageKey_redirectUrl, history.location.pathname);\n                                return <Redirect to={loginUrl.toString()} from={history.location.pathname} />;\n                            }\n                            if (!route.hasAccess()) {\n                                return <Redirect to={dontHavePermissionUrl.toString()} from={history.location.pathname} />;\n                            }\n                            return <Component {...props} />;\n                        }}\n                    />\n                );\n            })}\n\n            {config.redirects.map((r) => {\n                return (\n                    <Redirect\n                        key={r.to.toString()}\n                        to={{ pathname: r.to.toString(), state: r.state }}\n                        from={r.from?.toString()}\n                    />\n                );\n            })}\n        </Switch>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}