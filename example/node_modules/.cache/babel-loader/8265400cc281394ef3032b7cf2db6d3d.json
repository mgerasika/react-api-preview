{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');\nvar react = require('@emotion/react');\nvar theme_constant = require('../../constants/theme.constant.js');\nvar field_component = require('../field/field.component.js');\nvar readonly_component = require('../readonly.component.js');\nvar css = require('@emotion/css');\nvar antd = require('antd');\nvar React = require('react');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n  return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\nconst {\n  Option\n} = antd.Select;\nconst SelectOption = Option;\nvar _ref = process.env.NODE_ENV === \"production\" ? {\n  name: \"1ggwbny\",\n  styles: \".ant-select-dropdown{box-shadow:none;}\"\n} : {\n  name: \"lvmh06-Select\",\n  styles: \".ant-select-dropdown{box-shadow:none;};label:Select;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref2 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bjn8wh\",\n  styles: \"position:relative\"\n} : {\n  name: \"tvi1yf-Select\",\n  styles: \"position:relative;label:Select;\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref3 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bjn8wh\",\n  styles: \"position:relative\"\n} : {\n  name: \"tvi1yf-Select\",\n  styles: \"position:relative;label:Select;\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n// TODO bug in select - placeholder not visible second time (after focus, check e2e , investigate how fix)\nfunction Select(props) {\n  const {\n    onChange,\n    onBlur,\n    onSearch,\n    allowCustomValue,\n    options = [],\n    defaultValue,\n    value,\n    name,\n    showSearch = false\n  } = props;\n  const [internalOptions, setInternalOptions] = React.useState(options || []);\n  React.useEffect(() => {\n    if (options !== undefined) {\n      setInternalOptions(options);\n    }\n  }, [options]);\n  const handleChange = React.useCallback(value => {\n    onChange && onChange({\n      name,\n      value\n    });\n  }, [onChange, name]);\n  const handleBlur = React.useCallback(e => {\n    onBlur && onBlur(e);\n  }, [onBlur]);\n  const handleFocus = React.useCallback(() => {\n    // consoleService.log('focus');\n  }, []);\n  const handleSearch = React.useCallback(str => {\n    onSearch && onSearch(str);\n    setInternalOptions([{\n      label: str,\n      value: str,\n      data: str,\n      isVisible: true\n    }, ...(options || [])]);\n  }, [onSearch, options]);\n  const handleDropDownVisibilityChange = React.useCallback(open => {\n    if (allowCustomValue && open) {\n      setInternalOptions([...options]);\n    }\n  }, [allowCustomValue, options]);\n  const optionsCache = React.useMemo(() => {\n    const res = (props?.options || []).reduce((acc, el) => {\n      acc[el.value] = el.label;\n      return acc;\n    }, {});\n    return res;\n  }, [props.options]);\n  const handleFilter = React.useCallback(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (input, option) => {\n    return optionsCache[option.value]?.toLowerCase().indexOf(input.toLowerCase()) >= 0 || option.value == input;\n  }, [optionsCache]);\n  return /*#__PURE__*/React__default[\"default\"].createElement(field_component.Field, _rollupPluginBabelHelpers[\"extends\"]({}, props, {\n    css: _ref2\n  }), /*#__PURE__*/React__default[\"default\"].createElement(react.Global, {\n    styles: _ref\n  }), /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n    css: _ref3\n  }, props.readOnly && /*#__PURE__*/React__default[\"default\"].createElement(readonly_component.Readonly, null), /*#__PURE__*/React__default[\"default\"].createElement(antd.Select\n  // {...removeUndefined({ onSearch: props.readOnly && !showSearch ? undefined : handleSearch })}\n  , {\n    css: styles.root(!!props.readOnly),\n    allowClear: props.allowClear,\n    tabIndex: props.readOnly ? -1 : 0,\n    dropdownClassName: styles.dropDown,\n    showSearch: !props.readOnly && showSearch,\n    style: {\n      width: '100%'\n    },\n    placeholder: props.placeholder,\n    onDropdownVisibleChange: handleDropDownVisibilityChange,\n    defaultValue: defaultValue,\n    value: value,\n    optionFilterProp: \"children\",\n    onSearch: allowCustomValue ? handleSearch : undefined,\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    dropdownRender: prev => props.readOnly ? /*#__PURE__*/React__default[\"default\"].createElement(React__default[\"default\"].Fragment, null) : prev,\n    filterOption: handleFilter\n  }, internalOptions.map(o => {\n    return props.renderSelectOption ? /*#__PURE__*/React__default[\"default\"].createElement(React__default[\"default\"].Fragment, {\n      key: o.value\n    }, props.renderSelectOption(o)) : /*#__PURE__*/React__default[\"default\"].createElement(Option, {\n      \"data-parent-testid\": 'field-' + props.name,\n      key: o.value,\n      value: o.value,\n      disabled: o.disabled\n    }, o.label);\n  }))));\n}\nconst styles = {\n  root: readOnly => [/*#__PURE__*/react.css(\"display:block;&& .ant-select-selector{height:34px;border:1px solid \", theme_constant.THEME.GRAY, \";border-radius:4px;font-weight:400;display:block;width:100%;transition:border-color ease-in-out 0.15s,box-shadow ease-in-out 0.15s;overflow:hidden;}&.ant-select-focused{&& .ant-select-selector{border:1px solid \", theme_constant.THEME.GREEN, \";outline-color:transparent;outline-style:none;\", theme_constant.THEME.BOX_SHADOW_GREEN, \";}}&& .ant-select-selection-placeholder{margin-top:2px;display:block;}&& .ant-select-selection-item{text-overflow:ellipsis;display:block;line-height:34px;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), readOnly && /*#__PURE__*/react.css(\"&& .ant-select-selector,&& .ant-select-selector:hover{border:1px solid \", theme_constant.THEME.READONLY_COLOR, \";}&.ant-select-focused{&& .ant-select-selection-search-input,&& .ant-select-selection-item{color:\", theme_constant.THEME.BLACK, \";}&& .ant-select-selector{border:1px solid \", theme_constant.THEME.READONLY_COLOR, \";outline-color:transparent;outline-style:none;box-shadow:none;}}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")],\n  dropDown: /*#__PURE__*/css.css(\"&& .ant-select-item-option-selected{background-color:#eee;color:black;font-weight:400;}&& .ant-select-item-option-active{background-color:\", theme_constant.THEME.GREEN, \";color:white;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:dropDown;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n};\nexports.Select = Select;\nexports.SelectOption = SelectOption;","map":{"version":3,"sources":["../../../../src/general-ui/select/select.component.tsx"],"names":["Option","AntdSelect","SelectOption","Select","props","onChange","onBlur","onSearch","allowCustomValue","options","defaultValue","value","name","showSearch","internalOptions","setInternalOptions","useState","useEffect","undefined","handleChange","useCallback","handleBlur","e","handleFocus","handleSearch","str","label","data","isVisible","handleDropDownVisibilityChange","open","optionsCache","useMemo","res","reduce","acc","el","handleFilter","input","option","toLowerCase","indexOf","React","Field","Global","readOnly","Readonly","styles","root","allowClear","dropDown","width","placeholder","prev","map","o","renderSelectOption","disabled","css","THEME","GRAY","GREEN","BOX_SHADOW_GREEN","READONLY_COLOR","BLACK","emotionCSS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAUA,MAAM;EAAEA;AAAO,CAAC,GAAGC,IAAAA,CAAAA,MAAU;AAEtB,MAAMC,YAAY,GAAGF,MAAAA;AAAO,IAAA,IAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA;EAAA,IAAA,EAAA,SAAA;EAAA,MAAA,EAAA;AAAA,CAAA,GAAA;EAAA,IAAA,EAAA,eAAA;EAAA,MAAA,EAAA,sDAAA;EAAA,GAAA,EAAA,q6VAAA;EAAA,QAAA,EAAA;AAAA,CAAA;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA;EAAA,IAAA,EAAA,QAAA;EAAA,MAAA,EAAA;AAAA,CAAA,GAAA;EAAA,IAAA,EAAA,eAAA;EAAA,MAAA,EAAA,iCAAA;EAAA,QAAA,EAAA;AAAA,CAAA;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA;EAAA,IAAA,EAAA,QAAA;EAAA,MAAA,EAAA;AAAA,CAAA,GAAA;EAAA,IAAA,EAAA,eAAA;EAAA,MAAA,EAAA,iCAAA;EAAA,QAAA,EAAA;AAAA,CAAA;AAuBnC;AACO,SAASG,MAAM,CAAcC,KAA8B,EAAe;EAC7E,MAAM;IACFC,QAAQ;IACRC,MAAM;IACNC,QAAQ;IACRC,gBAAgB;IAChBC,OAAO,GAAG,EAAE;IACZC,YAAY;IACZC,KAAK;IACLC,IAAI;IACJC,UAAU,GAAG;EACjB,CAAC,GAAGT,KAAK;EACT,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGC,KAAAA,CAAAA,QAAQ,CAAqBP,OAAO,IAAI,EAAE,CAAC;EAEzFQ,KAAAA,CAAAA,SAAS,CAAC,MAAM;IACZ,IAAIR,OAAO,KAAKS,SAAS,EAAE;MACvBH,kBAAkB,CAACN,OAAO,CAAC;IAC/B;EACJ,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,MAAMU,YAAY,GAAGC,KAAAA,CAAAA,WAAW,CAC3BT,KAAa,IAAK;IACfN,QAAQ,IAAIA,QAAQ,CAAC;MAAEO,IAAI;MAAED;IAAM,CAAC,CAAC;EACzC,CAAC,EACD,CAACN,QAAQ,EAAEO,IAAI,CAAC,CACnB;EAED,MAAMS,UAAU,GAAGD,KAAAA,CAAAA,WAAW,CACzBE,CAAqC,IAAK;IACvChB,MAAM,IAAIA,MAAM,CAACgB,CAAC,CAAC;EACvB,CAAC,EACD,CAAChB,MAAM,CAAC,CACX;EAED,MAAMiB,WAAW,GAAGH,KAAAA,CAAAA,WAAW,CAAC,MAAM;IAClC;EAAA,CACH,EAAE,EAAE,CAAC;EAEN,MAAMI,YAAY,GAAGJ,KAAAA,CAAAA,WAAW,CAC3BK,GAAW,IAAK;IACblB,QAAQ,IAAIA,QAAQ,CAACkB,GAAG,CAAC;IACzBV,kBAAkB,CAAC,CACf;MACIW,KAAK,EAAED,GAAG;MACVd,KAAK,EAAEc,GAAG;MACVE,IAAI,EAAEF,GAAmB;MACzBG,SAAS,EAAE;IACf,CAAC,EACD,IAAInB,OAAO,IAAI,EAAE,CAAC,CACrB,CAAC;EACN,CAAC,EACD,CAACF,QAAQ,EAAEE,OAAO,CAAC,CACtB;EAED,MAAMoB,8BAA8B,GAAGT,KAAAA,CAAAA,WAAW,CAC7CU,IAAa,IAAK;IACf,IAAItB,gBAAgB,IAAIsB,IAAI,EAAE;MAC1Bf,kBAAkB,CAAC,CAAC,GAAGN,OAAO,CAAC,CAAC;IACpC;EACJ,CAAC,EACD,CAACD,gBAAgB,EAAEC,OAAO,CAAC,CAC9B;EAED,MAAMsB,YAAY,GAAGC,KAAAA,CAAAA,OAAO,CAAC,MAAM;IAC/B,MAAMC,GAAG,GAAG,CAAC7B,KAAK,EAAEK,OAAO,IAAI,EAAE,EAAEyB,MAAM,CAAC,CAACC,GAAgB,EAAEC,EAAiB,KAAK;MAC/ED,GAAG,CAACC,EAAE,CAACzB,KAAK,CAAC,GAAGyB,EAAE,CAACV,KAAK;MACxB,OAAOS,GAAG;KACb,EAAE,CAAA,CAAE,CAAC;IACN,OAAOF,GAAG;EACd,CAAC,EAAE,CAAC7B,KAAK,CAACK,OAAO,CAAC,CAAC;EAEnB,MAAM4B,YAAY,GAAGjB,KAAAA,CAAAA,WAAW;EAC5B;EACA,CAACkB,KAAa,EAAEC,MAAW,KAAc;IACrC,OAAOR,YAAY,CAACQ,MAAM,CAAC5B,KAAK,CAAC,EAAE6B,WAAW,EAAE,CAACC,OAAO,CAACH,KAAK,CAACE,WAAW,EAAE,CAAC,IAAI,CAAC,IAAID,MAAM,CAAC5B,KAAK,IAAI2B,KAAK;EAC/G,CAAC,EACD,CAACP,YAAY,CAAC,CACjB;EACD,OAAA,aACIW,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAACC,eAAAA,CAAAA,KAAK,EAAA,yBAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,EAAKvC,KAAK,EAAA;IAAA,GAAA,EAAA;EAAA,CAAA,CAAA,EAAA,aACZsC,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAACE,KAAAA,CAAAA,MAAM,EAAA;IACH,MAAM,EAAA;EAIJ,CAAA,CACJ,EAAA,aACF,cAAA,CAAA,SAAA,CAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAA,GAAA,EAAA;GACKxC,EAAAA,KAAK,CAACyC,QAAQ,IAAA,aAAIH,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAACI,kBAAAA,CAAAA,QAAQ,EAAA,IAAA,CAAG,EAAA,aAC/BJ,cAAAA,CAAAA,SAAAA,CAAC,CAAA,aAAA,CAAA,IAAA,CAAA;EACG;EAAA,EAAA;IACA,GAAG,EAAEK,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC5C,KAAK,CAACyC,QAAQ,CAAE;IACnC,UAAU,EAAEzC,KAAK,CAAC6C,UAAW;IAC7B,QAAQ,EAAE7C,KAAK,CAACyC,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAE;IAClC,iBAAiB,EAAEE,MAAM,CAACG,QAAS;IACnC,UAAU,EAAE,CAAC9C,KAAK,CAACyC,QAAQ,IAAIhC,UAAW;IAC1C,KAAK,EAAE;MAAEsC,KAAK,EAAE;KAAS;IACzB,WAAW,EAAE/C,KAAK,CAACgD,WAAY;IAC/B,uBAAuB,EAAEvB,8BAA+B;IACxD,YAAY,EAAEnB,YAAa;IAC3B,KAAK,EAAEC,KAAM;IACb,gBAAgB,EAAC,UAAU;IAC3B,QAAQ,EAAEH,gBAAgB,GAAGgB,YAAY,GAAGN,SAAU;IACtD,QAAQ,EAAEC,YAAa;IACvB,OAAO,EAAEI,WAAY;IACrB,MAAM,EAAEF,UAAW;IACnB,cAAc,EAAGgC,IAAI,IAAmBjD,KAAK,CAACyC,QAAQ,GAAA,aAAGH,cAAAA,CAAAA,SAAAA,CAAK,CAAA,aAAA,CAAA,cAAA,CAAA,SAAA,CAAA,CAAA,QAAA,EAAA,IAAA,CAAA,GAAGW,IAAM;IACvE,YAAY,EAAEhB;EAAa,CAAA,EAE1BvB,eAAe,CAACwC,GAAG,CAAEC,CAAmB,IAAkB;IACvD,OAAOnD,KAAK,CAACoD,kBAAkB,GAAA,aAC3Bd,cAAAA,CAAAA,SAAAA,CAAC,CAAA,aAAA,CAAA,cAAA,CAAA,SAAA,CAAK,CAAC,QAAQ,EAAA;MAAC,GAAG,EAAEa,CAAC,CAAC5C;KAAQP,EAAAA,KAAK,CAACoD,kBAAkB,CAACD,CAAC,CAAC,CAAkB,GAAA,aAE5Eb,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAAC,MAAM,EAAA;MACH,oBAAA,EAAoB,QAAQ,GAAGtC,KAAK,CAACQ,IAAK;MAC1C,GAAG,EAAE2C,CAAC,CAAC5C,KAAM;MACb,KAAK,EAAE4C,CAAC,CAAC5C,KAAM;MACf,QAAQ,EAAE4C,CAAC,CAACE;KAEXF,EAAAA,CAAC,CAAC7B,KAAK,CAEf;GACJ,CAAC,CACO,CACX,CACF;AAEhB;AAEA,MAAMqB,MAAM,GAAG;EACXC,IAAI,EAAGH,QAAiB,IAAqC,CAAA,aACzDa,KAAAA,CAAAA,GAAG,CAIyBC,qEAAAA,EAAAA,cAAAA,CAAAA,KAAK,CAACC,IAAI,EAAA,oNAAA,EAUND,cAAAA,CAAAA,KAAK,CAACE,KAAK,EAAA,gDAAA,EAG7BF,cAAAA,CAAAA,KAAK,CAACG,gBAAgB,EAapCjB,6JAAAA,IAAAA,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAAA,YAAAA,GAAAA,EAAAA,GAAAA,gBAAAA,CAAAA,EAAAA,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAAA,YAAAA,GAAAA,EAAAA,GAAAA,q6VAAAA,CAAAA,EAAAA,QAAQ,IAAA,aACJa,KAAAA,CAAAA,GAAG,CAGyBC,yEAAAA,EAAAA,cAAAA,CAAAA,KAAK,CAACI,cAAc,EAAA,mGAAA,EAK3BJ,cAAAA,CAAAA,KAAK,CAACK,KAAK,EAGAL,6CAAAA,EAAAA,cAAAA,CAAAA,KAAK,CAACI,cAAc,EAAA,kEAAA,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,EAAA,GAAA,gBAAA,CAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,EAAA,GAAA,q6VAAA,CAMnD,CACR;EACDb,QAAQ,EAAA,aAAEe,GAAAA,CAAAA,GAAU,CAOQN,4IAAAA,EAAAA,cAAAA,CAAAA,KAAK,CAACE,KAAK,EAAA,gBAAA,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,EAAA,GAAA,kBAAA,CAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,EAAA,GAAA,q6VAAA;AAM3C,CAAC","sourcesContent":["import { THEME } from '@common/constants/theme.constant';\nimport { Field, IFieldProps } from '@common/general-ui/field/field.component';\nimport { Readonly } from '@common/general-ui/readonly.component';\nimport { IDictionary } from '@common/interfaces/dictionary.interface';\nimport { css as emotionCSS } from '@emotion/css';\nimport { Global, SerializedStyles } from '@emotion/react';\nimport { Select as AntdSelect } from 'antd';\nimport React, { ReactNode, useCallback, useEffect, useMemo, useState } from 'react';\nimport { css } from 'twin.macro';\n\nconst { Option } = AntdSelect;\n\nexport const SelectOption = Option;\nexport type ISelectChangeHandler = (e: { value: string; name: string }) => void;\n\nexport interface ISelectProps<TName = string, TOption = unknown> extends IFieldProps<string, TName> {\n    options?: ISelectOption<TOption>[];\n    onChange?: ISelectChangeHandler;\n    onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n    className?: string;\n    renderSelectOption?: (data: ISelectOption<TOption>) => ReactNode;\n    onSearch?: (data: string) => void;\n    showSearch?: boolean;\n    allowClear?: boolean;\n    allowCustomValue?: boolean;\n}\n\nexport interface ISelectOption<T = unknown> {\n    label: ReactNode;\n    value: string | number;\n    isVisible?: boolean;\n    disabled?: boolean;\n    data?: T;\n}\n\n// TODO bug in select - placeholder not visible second time (after focus, check e2e , investigate how fix)\nexport function Select<T = unknown>(props: ISelectProps<string, T>): JSX.Element {\n    const {\n        onChange,\n        onBlur,\n        onSearch,\n        allowCustomValue,\n        options = [],\n        defaultValue,\n        value,\n        name,\n        showSearch = false,\n    } = props;\n    const [internalOptions, setInternalOptions] = useState<ISelectOption<T>[]>(options || []);\n\n    useEffect(() => {\n        if (options !== undefined) {\n            setInternalOptions(options);\n        }\n    }, [options]);\n\n    const handleChange = useCallback(\n        (value: string) => {\n            onChange && onChange({ name, value });\n        },\n        [onChange, name],\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            onBlur && onBlur(e);\n        },\n        [onBlur],\n    );\n\n    const handleFocus = useCallback(() => {\n        // consoleService.log('focus');\n    }, []);\n\n    const handleSearch = useCallback(\n        (str: string) => {\n            onSearch && onSearch(str);\n            setInternalOptions([\n                {\n                    label: str,\n                    value: str,\n                    data: str as unknown as T,\n                    isVisible: true,\n                },\n                ...(options || []),\n            ]);\n        },\n        [onSearch, options],\n    );\n\n    const handleDropDownVisibilityChange = useCallback(\n        (open: boolean) => {\n            if (allowCustomValue && open) {\n                setInternalOptions([...options]);\n            }\n        },\n        [allowCustomValue, options],\n    );\n\n    const optionsCache = useMemo(() => {\n        const res = (props?.options || []).reduce((acc: IDictionary, el: ISelectOption) => {\n            acc[el.value] = el.label;\n            return acc;\n        }, {});\n        return res;\n    }, [props.options]);\n\n    const handleFilter = useCallback(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (input: string, option: any): boolean => {\n            return optionsCache[option.value]?.toLowerCase().indexOf(input.toLowerCase()) >= 0 || option.value == input;\n        },\n        [optionsCache],\n    );\n    return (\n        <Field {...props} tw=\"relative\">\n            <Global\n                styles={css`\n                    .ant-select-dropdown {\n                        box-shadow: none;\n                    }\n                `}\n            />\n            <div tw=\"relative\">\n                {props.readOnly && <Readonly />}\n                <AntdSelect\n                    // {...removeUndefined({ onSearch: props.readOnly && !showSearch ? undefined : handleSearch })}\n                    css={styles.root(!!props.readOnly)}\n                    allowClear={props.allowClear}\n                    tabIndex={props.readOnly ? -1 : 0}\n                    dropdownClassName={styles.dropDown}\n                    showSearch={!props.readOnly && showSearch}\n                    style={{ width: '100%' }}\n                    placeholder={props.placeholder}\n                    onDropdownVisibleChange={handleDropDownVisibilityChange}\n                    defaultValue={defaultValue}\n                    value={value}\n                    optionFilterProp=\"children\"\n                    onSearch={allowCustomValue ? handleSearch : undefined}\n                    onChange={handleChange}\n                    onFocus={handleFocus}\n                    onBlur={handleBlur}\n                    dropdownRender={(prev): JSX.Element => (props.readOnly ? <></> : prev)}\n                    filterOption={handleFilter}\n                >\n                    {internalOptions.map((o: ISelectOption<T>): JSX.Element => {\n                        return props.renderSelectOption ? (\n                            <React.Fragment key={o.value}>{props.renderSelectOption(o)}</React.Fragment>\n                        ) : (\n                            <Option\n                                data-parent-testid={'field-' + props.name}\n                                key={o.value}\n                                value={o.value}\n                                disabled={o.disabled}\n                            >\n                                {o.label}\n                            </Option>\n                        );\n                    })}\n                </AntdSelect>\n            </div>\n        </Field>\n    );\n}\n\nconst styles = {\n    root: (readOnly: boolean): (SerializedStyles | boolean)[] => [\n        css`\n            display: block;\n            && .ant-select-selector {\n                height: 34px;\n                border: 1px solid ${THEME.GRAY};\n                border-radius: 4px;\n                font-weight: 400;\n                display: block;\n                width: 100%;\n                transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\n                overflow: hidden;\n            }\n            &.ant-select-focused {\n                && .ant-select-selector {\n                    border: 1px solid ${THEME.GREEN};\n                    outline-color: transparent;\n                    outline-style: none;\n                    ${THEME.BOX_SHADOW_GREEN}\n                }\n            }\n            && .ant-select-selection-placeholder {\n                margin-top: 2px;\n                display: block;\n            }\n            && .ant-select-selection-item {\n                text-overflow: ellipsis;\n                display: block;\n                line-height: 34px;\n            }\n        `,\n        readOnly &&\n            css`\n                && .ant-select-selector,\n                && .ant-select-selector:hover {\n                    border: 1px solid ${THEME.READONLY_COLOR};\n                }\n                &.ant-select-focused {\n                    && .ant-select-selection-search-input,\n                    && .ant-select-selection-item {\n                        color: ${THEME.BLACK};\n                    }\n                    && .ant-select-selector {\n                        border: 1px solid ${THEME.READONLY_COLOR};\n                        outline-color: transparent;\n                        outline-style: none;\n                        box-shadow: none;\n                    }\n                }\n            `,\n    ],\n    dropDown: emotionCSS`\n\t\t\t&& .ant-select-item-option-selected{\n\t\t\t\tbackground-color: #eee;\n\t\t\t\tcolor: black;\n                font-weight: 400;\n\t\t\t}\n\t\t\t&& .ant-select-item-option-active {\n            background-color: ${THEME.GREEN};\n            color: white;\n        }\n\n\t\t\n    `,\n};\n"]},"metadata":{},"sourceType":"script"}