{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RegisterStreamConsumerInput, RegisterStreamConsumerOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1RegisterStreamConsumerCommand, serializeAws_json1_1RegisterStreamConsumerCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Registers a consumer with a Kinesis data stream. When you use this operation, the\n *             consumer you register can then call <a>SubscribeToShard</a> to receive data\n *             from the stream using enhanced fan-out, at a rate of up to 2 MiB per second for every\n *             shard you subscribe to. This rate is unaffected by the total number of consumers that\n *             read from the same stream.</p>\n *         <p>You can register up to 20 consumers per stream. A given consumer can only be\n *             registered with one stream at a time.</p>\n *         <p>For an example of how to use this operations, see <a href=\"/streams/latest/dev/building-enhanced-consumers-api.html\">Enhanced Fan-Out\n *                 Using the Kinesis Data Streams API</a>.</p>\n *         <p>The use of this operation has a limit of five transactions per second per account.\n *             Also, only 5 consumers can be created simultaneously. In other words, you cannot have\n *             more than 5 consumers in a <code>CREATING</code> status at the same time. Registering a\n *             6th consumer while there are 5 in a <code>CREATING</code> status results in a\n *                 <code>LimitExceededException</code>.</p>\n */\nvar RegisterStreamConsumerCommand = /** @class */function (_super) {\n  __extends(RegisterStreamConsumerCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function RegisterStreamConsumerCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  RegisterStreamConsumerCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"RegisterStreamConsumerCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: RegisterStreamConsumerInput.filterSensitiveLog,\n      outputFilterSensitiveLog: RegisterStreamConsumerOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  RegisterStreamConsumerCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1RegisterStreamConsumerCommand(input, context);\n  };\n  RegisterStreamConsumerCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1RegisterStreamConsumerCommand(output, context);\n  };\n  return RegisterStreamConsumerCommand;\n}($Command);\nexport { RegisterStreamConsumerCommand };","map":{"version":3,"sources":["../../../commands/RegisterStreamConsumerCommand.ts"],"names":[],"mappings":";AACA,SAAS,2BAA2B,EAAE,4BAA4B,QAAQ,oBAAoB;AAC9F,SACE,mDAAmD,EACnD,iDAAiD,QAC5C,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;AAeG;AACH,IAAA,6BAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAmD,SAAA,CAAA,6BAAA,EAAA,MAAA,CAAA;EAKjD;EACA;EAEA,SAAA,6BAAA,CAAqB,KAAyC,EAAA;IAA9D,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,6BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA0C,EAC1C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,eAAe;IAClC,IAAM,WAAW,GAAG,+BAA+B;IACnD,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,2BAA2B,CAAC,kBAAkB;MACvE,wBAAwB,EAAE,4BAA4B,CAAC;KACxD;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,6BAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAAyC,EAAE,OAAuB,EAAA;IAClF,OAAO,iDAAiD,CAAC,KAAK,EAAE,OAAO,CAAC;EAC1E,CAAC;EAEO,6BAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,mDAAmD,CAAC,MAAM,EAAE,OAAO,CAAC;EAC7E,CAAC;EAIH,OAAA,6BAAC;AAAD,CAAC,CAtDkD,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { RegisterStreamConsumerInput, RegisterStreamConsumerOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1RegisterStreamConsumerCommand, serializeAws_json1_1RegisterStreamConsumerCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Registers a consumer with a Kinesis data stream. When you use this operation, the\n *             consumer you register can then call <a>SubscribeToShard</a> to receive data\n *             from the stream using enhanced fan-out, at a rate of up to 2 MiB per second for every\n *             shard you subscribe to. This rate is unaffected by the total number of consumers that\n *             read from the same stream.</p>\n *         <p>You can register up to 20 consumers per stream. A given consumer can only be\n *             registered with one stream at a time.</p>\n *         <p>For an example of how to use this operations, see <a href=\"/streams/latest/dev/building-enhanced-consumers-api.html\">Enhanced Fan-Out\n *                 Using the Kinesis Data Streams API</a>.</p>\n *         <p>The use of this operation has a limit of five transactions per second per account.\n *             Also, only 5 consumers can be created simultaneously. In other words, you cannot have\n *             more than 5 consumers in a <code>CREATING</code> status at the same time. Registering a\n *             6th consumer while there are 5 in a <code>CREATING</code> status results in a\n *                 <code>LimitExceededException</code>.</p>\n */\nvar RegisterStreamConsumerCommand = /** @class */ (function (_super) {\n    __extends(RegisterStreamConsumerCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function RegisterStreamConsumerCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    RegisterStreamConsumerCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"KinesisClient\";\n        var commandName = \"RegisterStreamConsumerCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: RegisterStreamConsumerInput.filterSensitiveLog,\n            outputFilterSensitiveLog: RegisterStreamConsumerOutput.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    RegisterStreamConsumerCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1RegisterStreamConsumerCommand(input, context);\n    };\n    RegisterStreamConsumerCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1RegisterStreamConsumerCommand(output, context);\n    };\n    return RegisterStreamConsumerCommand;\n}($Command));\nexport { RegisterStreamConsumerCommand };\n//# sourceMappingURL=RegisterStreamConsumerCommand.js.map"]},"metadata":{},"sourceType":"module"}