{"ast":null,"code":"import { consoleService } from '../services/console.service.js';\nimport dayjs from 'dayjs';\nimport { getNow } from './now.util.js';\nvar EDeliveryDayCommon;\n(function (EDeliveryDayCommon) {\n  EDeliveryDayCommon[\"Mon\"] = \"Mon\";\n  EDeliveryDayCommon[\"Tue\"] = \"Tue\";\n  EDeliveryDayCommon[\"Wed\"] = \"Wed\";\n  EDeliveryDayCommon[\"Thu\"] = \"Thu\";\n  EDeliveryDayCommon[\"Fri\"] = \"Fri\";\n  EDeliveryDayCommon[\"Sat\"] = \"Sat\";\n  EDeliveryDayCommon[\"Sun\"] = \"Sun\";\n})(EDeliveryDayCommon || (EDeliveryDayCommon = {}));\nvar getDayIndexFromDeliveryDay = function getDayIndexFromDeliveryDay(day) {\n  switch (day) {\n    case EDeliveryDayCommon.Mon:\n      return 1;\n    case EDeliveryDayCommon.Tue:\n      return 2;\n    case EDeliveryDayCommon.Wed:\n      return 3;\n    case EDeliveryDayCommon.Thu:\n      return 4;\n    case EDeliveryDayCommon.Fri:\n      return 5;\n    case EDeliveryDayCommon.Sat:\n      return 6;\n    case EDeliveryDayCommon.Sun:\n      return 7;\n  }\n  consoleService.assert('not implemented', getDayIndexFromDeliveryDay + ' day = ' + day);\n  return 0;\n};\nvar getDayjsFromCutOffTimeAndFixTimezone = function getDayjsFromCutOffTimeAndFixTimezone(cutoff_time) {\n  consoleService.assert((cutoff_time === null || cutoff_time === void 0 ? void 0 : cutoff_time.length) === 5, 'Invalid cutoff_time should be in HH:mm format got =' + cutoff_time);\n  var offsetInMinutes = dayjs(getNow()).utcOffset();\n  var utsParts = (cutoff_time === null || cutoff_time === void 0 ? void 0 : cutoff_time.split(':')) || ['12', '00'];\n  var result = dayjs(getNow()).set('hours', parseInt(utsParts[0], 10)).set('minutes', parseInt(utsParts[1], 10)).add(offsetInMinutes, 'minutes');\n  return result;\n};\nvar parseTime = function parseTime(cutoff_time) {\n  consoleService.assert((cutoff_time === null || cutoff_time === void 0 ? void 0 : cutoff_time.length) === 5, 'Invalid cutoff_time should be in HH:mm format got =' + cutoff_time);\n  var utsParts = (cutoff_time === null || cutoff_time === void 0 ? void 0 : cutoff_time.split(':')) || ['12', '00'];\n  return {\n    hours: parseInt(utsParts[0], 10),\n    minutes: parseInt(utsParts[1], 10)\n  };\n};\nfunction getStartDayFromDeliveryConfig(today, config, cutOffTime) {\n  var _parseTime = parseTime(config.cutoff_time),\n    hours = _parseTime.hours,\n    minutes = _parseTime.minutes;\n  if (cutOffTime) {\n    hours = cutOffTime.getHours();\n    minutes = cutOffTime.getMinutes();\n  }\n  // const { hours, minutes } = parseTime(config.cutoff_time);\n  return dayjs(getDeliveryDayFromDeliveryConfig(today, config, cutOffTime)).subtract(Number(config.cutoff_day) || 0, 'days').set('hours', hours).set('minutes', minutes).set('seconds', 0).set('milliseconds', 0).toDate();\n}\nfunction getDeliveryDayFromDeliveryConfig(today, config, cutOffTime) {\n  var _parseTime2 = parseTime(config.cutoff_time),\n    hours = _parseTime2.hours,\n    minutes = _parseTime2.minutes;\n  if (cutOffTime) {\n    hours = cutOffTime.getHours();\n    minutes = cutOffTime.getMinutes();\n  }\n  var d = getDayIndexFromDeliveryDay(config.delivery_day);\n  var firstPossibleDay = dayjs(today).day(d);\n  var minDay = dayjs(today).add(Number(config.cutoff_day) || 0, 'days');\n\n  // const { hours, minutes } = parseTime(config.cutoff_time);\n  while (firstPossibleDay.isBefore(minDay) || firstPossibleDay.isSame(minDay, 'days') && firstPossibleDay.hour() * 60 + firstPossibleDay.minute() >= hours * 60 + minutes - 1) {\n    firstPossibleDay = firstPossibleDay.add(7, 'days');\n  }\n  return firstPossibleDay.toDate();\n}\nexport { EDeliveryDayCommon, getDayIndexFromDeliveryDay, getDayjsFromCutOffTimeAndFixTimezone, getDeliveryDayFromDeliveryConfig, getStartDayFromDeliveryConfig, parseTime };","map":{"version":3,"sources":["../../../src/utils/delivery-config.util.ts"],"names":["EDeliveryDayCommon","getDayIndexFromDeliveryDay","day","Mon","Tue","Wed","Thu","Fri","Sat","Sun","consoleService","assert","getDayjsFromCutOffTimeAndFixTimezone","cutoff_time","length","offsetInMinutes","dayjs","getNow","utcOffset","utsParts","split","result","set","parseInt","add","parseTime","hours","minutes","getStartDayFromDeliveryConfig","today","config","cutOffTime","getHours","getMinutes","getDeliveryDayFromDeliveryConfig","subtract","Number","cutoff_day","toDate","d","delivery_day","firstPossibleDay","minDay","isBefore","isSame","hour","minute"],"mappings":"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","sourcesContent":["import { consoleService } from '@common/services/console.service';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { getNow } from './now.util';\n\nexport interface IDeliveryConfigurationCommon {\n    delivery_day?: string;\n    cutoff_day?: number;\n    cutoff_time?: string;\n}\n\nexport enum EDeliveryDayCommon {\n    Mon = 'Mon',\n    Tue = 'Tue',\n    Wed = 'Wed',\n    Thu = 'Thu',\n    Fri = 'Fri',\n    Sat = 'Sat',\n    Sun = 'Sun',\n}\nexport const getDayIndexFromDeliveryDay = (day: EDeliveryDayCommon | undefined): number => {\n    switch (day) {\n        case EDeliveryDayCommon.Mon:\n            return 1;\n        case EDeliveryDayCommon.Tue:\n            return 2;\n        case EDeliveryDayCommon.Wed:\n            return 3;\n        case EDeliveryDayCommon.Thu:\n            return 4;\n        case EDeliveryDayCommon.Fri:\n            return 5;\n        case EDeliveryDayCommon.Sat:\n            return 6;\n        case EDeliveryDayCommon.Sun:\n            return 7;\n    }\n    consoleService.assert('not implemented', getDayIndexFromDeliveryDay + ' day = ' + day);\n    return 0;\n};\n\nexport const getDayjsFromCutOffTimeAndFixTimezone = (cutoff_time: string | undefined): Dayjs => {\n    consoleService.assert(cutoff_time?.length === 5, 'Invalid cutoff_time should be in HH:mm format got =' + cutoff_time);\n    const offsetInMinutes = dayjs(getNow()).utcOffset();\n    const utsParts = cutoff_time?.split(':') || ['12', '00'];\n    const result = dayjs(getNow())\n        .set('hours', parseInt(utsParts[0], 10))\n        .set('minutes', parseInt(utsParts[1], 10))\n        .add(offsetInMinutes, 'minutes');\n    return result;\n};\n\nexport const parseTime = (cutoff_time: string | undefined): { hours: number; minutes: number } => {\n    consoleService.assert(cutoff_time?.length === 5, 'Invalid cutoff_time should be in HH:mm format got =' + cutoff_time);\n    const utsParts = cutoff_time?.split(':') || ['12', '00'];\n    return {\n        hours: parseInt(utsParts[0], 10),\n        minutes: parseInt(utsParts[1], 10),\n    };\n};\n\nexport function getStartDayFromDeliveryConfig(\n    today: Date,\n    config: IDeliveryConfigurationCommon,\n    cutOffTime: Date | undefined,\n): Date {\n    let { hours, minutes } = parseTime(config.cutoff_time);\n    if (cutOffTime) {\n        hours = cutOffTime.getHours();\n        minutes = cutOffTime.getMinutes();\n    }\n    // const { hours, minutes } = parseTime(config.cutoff_time);\n    return dayjs(getDeliveryDayFromDeliveryConfig(today, config, cutOffTime))\n        .subtract(Number(config.cutoff_day) || 0, 'days')\n        .set('hours', hours)\n        .set('minutes', minutes)\n        .set('seconds', 0)\n        .set('milliseconds', 0)\n        .toDate();\n}\n\nexport function getDeliveryDayFromDeliveryConfig(\n    today: Date,\n    config: IDeliveryConfigurationCommon,\n    cutOffTime: Date | undefined,\n): Date {\n    let { hours, minutes } = parseTime(config.cutoff_time);\n    if (cutOffTime) {\n        hours = cutOffTime.getHours();\n        minutes = cutOffTime.getMinutes();\n    }\n\n    const d = getDayIndexFromDeliveryDay(config.delivery_day as EDeliveryDayCommon);\n    let firstPossibleDay = dayjs(today).day(d);\n    const minDay = dayjs(today).add(Number(config.cutoff_day) || 0, 'days');\n\n    // const { hours, minutes } = parseTime(config.cutoff_time);\n    while (\n        firstPossibleDay.isBefore(minDay) ||\n        (firstPossibleDay.isSame(minDay, 'days') &&\n            firstPossibleDay.hour() * 60 + firstPossibleDay.minute() >= hours * 60 + minutes - 1)\n    ) {\n        firstPossibleDay = firstPossibleDay.add(7, 'days');\n    }\n    return firstPossibleDay.toDate();\n}\n"]},"metadata":{},"sourceType":"module"}