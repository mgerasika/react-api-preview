{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { UpdateDestinationInput, UpdateDestinationOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1UpdateDestinationCommand, serializeAws_json1_1UpdateDestinationCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Updates the specified destination of the specified delivery stream.</p>\n *\n *          <p>Use this operation to change the destination type (for example, to replace the Amazon\n *          S3 destination with Amazon Redshift) or change the parameters associated with a destination\n *          (for example, to change the bucket name of the Amazon S3 destination). The update might not\n *          occur immediately. The target delivery stream remains active while the configurations are\n *          updated, so data writes to the delivery stream can continue during this process. The\n *          updated configurations are usually effective within a few minutes.</p>\n *          <p>Switching between Amazon ES and other services is not supported. For an Amazon ES\n *          destination, you can only update to another Amazon ES destination.</p>\n *          <p>If the destination type is the same, Kinesis Data Firehose merges the configuration\n *          parameters specified with the destination configuration that already exists on the delivery\n *          stream. If any of the parameters are not specified in the call, the existing values are\n *          retained. For example, in the Amazon S3 destination, if <a>EncryptionConfiguration</a> is not specified, then the existing\n *             <code>EncryptionConfiguration</code> is maintained on the destination.</p>\n *          <p>If the destination type is not the same, for example, changing the destination from\n *          Amazon S3 to Amazon Redshift, Kinesis Data Firehose does not merge any parameters. In this\n *          case, all parameters must be specified.</p>\n *\n *          <p>Kinesis Data Firehose uses <code>CurrentDeliveryStreamVersionId</code> to avoid race\n *          conditions and conflicting merges. This is a required field, and the service updates the\n *          configuration only if the existing configuration has a version ID that matches. After the\n *          update is applied successfully, the version ID is updated, and can be retrieved using <a>DescribeDeliveryStream</a>. Use the new version ID to set\n *             <code>CurrentDeliveryStreamVersionId</code> in the next call.</p>\n */\nvar UpdateDestinationCommand = /** @class */function (_super) {\n  __extends(UpdateDestinationCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function UpdateDestinationCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  UpdateDestinationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"FirehoseClient\";\n    var commandName = \"UpdateDestinationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: UpdateDestinationInput.filterSensitiveLog,\n      outputFilterSensitiveLog: UpdateDestinationOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  UpdateDestinationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1UpdateDestinationCommand(input, context);\n  };\n  UpdateDestinationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1UpdateDestinationCommand(output, context);\n  };\n  return UpdateDestinationCommand;\n}($Command);\nexport { UpdateDestinationCommand };","map":{"version":3,"sources":["../../../commands/UpdateDestinationCommand.ts"],"names":[],"mappings":";AACA,SAAS,sBAAsB,EAAE,uBAAuB,QAAQ,oBAAoB;AACpF,SACE,8CAA8C,EAC9C,4CAA4C,QACvC,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;AAyBG;AACH,IAAA,wBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA8C,SAAA,CAAA,wBAAA,EAAA,MAAA,CAAA;EAK5C;EACA;EAEA,SAAA,wBAAA,CAAqB,KAAoC,EAAA;IAAzD,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,wBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA2C,EAC3C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,gBAAgB;IACnC,IAAM,WAAW,GAAG,0BAA0B;IAC9C,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,sBAAsB,CAAC,kBAAkB;MAClE,wBAAwB,EAAE,uBAAuB,CAAC;KACnD;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,wBAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAAoC,EAAE,OAAuB,EAAA;IAC7E,OAAO,4CAA4C,CAAC,KAAK,EAAE,OAAO,CAAC;EACrE,CAAC;EAEO,wBAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,8CAA8C,CAAC,MAAM,EAAE,OAAO,CAAC;EACxE,CAAC;EAIH,OAAA,wBAAC;AAAD,CAAC,CAtD6C,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { UpdateDestinationInput, UpdateDestinationOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1UpdateDestinationCommand, serializeAws_json1_1UpdateDestinationCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Updates the specified destination of the specified delivery stream.</p>\n *\n *          <p>Use this operation to change the destination type (for example, to replace the Amazon\n *          S3 destination with Amazon Redshift) or change the parameters associated with a destination\n *          (for example, to change the bucket name of the Amazon S3 destination). The update might not\n *          occur immediately. The target delivery stream remains active while the configurations are\n *          updated, so data writes to the delivery stream can continue during this process. The\n *          updated configurations are usually effective within a few minutes.</p>\n *          <p>Switching between Amazon ES and other services is not supported. For an Amazon ES\n *          destination, you can only update to another Amazon ES destination.</p>\n *          <p>If the destination type is the same, Kinesis Data Firehose merges the configuration\n *          parameters specified with the destination configuration that already exists on the delivery\n *          stream. If any of the parameters are not specified in the call, the existing values are\n *          retained. For example, in the Amazon S3 destination, if <a>EncryptionConfiguration</a> is not specified, then the existing\n *             <code>EncryptionConfiguration</code> is maintained on the destination.</p>\n *          <p>If the destination type is not the same, for example, changing the destination from\n *          Amazon S3 to Amazon Redshift, Kinesis Data Firehose does not merge any parameters. In this\n *          case, all parameters must be specified.</p>\n *\n *          <p>Kinesis Data Firehose uses <code>CurrentDeliveryStreamVersionId</code> to avoid race\n *          conditions and conflicting merges. This is a required field, and the service updates the\n *          configuration only if the existing configuration has a version ID that matches. After the\n *          update is applied successfully, the version ID is updated, and can be retrieved using <a>DescribeDeliveryStream</a>. Use the new version ID to set\n *             <code>CurrentDeliveryStreamVersionId</code> in the next call.</p>\n */\nvar UpdateDestinationCommand = /** @class */ (function (_super) {\n    __extends(UpdateDestinationCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function UpdateDestinationCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    UpdateDestinationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"FirehoseClient\";\n        var commandName = \"UpdateDestinationCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: UpdateDestinationInput.filterSensitiveLog,\n            outputFilterSensitiveLog: UpdateDestinationOutput.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    UpdateDestinationCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1UpdateDestinationCommand(input, context);\n    };\n    UpdateDestinationCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1UpdateDestinationCommand(output, context);\n    };\n    return UpdateDestinationCommand;\n}($Command));\nexport { UpdateDestinationCommand };\n//# sourceMappingURL=UpdateDestinationCommand.js.map"]},"metadata":{},"sourceType":"module"}