{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar isDebug_constant = require('../constants/is-debug.constant.js');\n\n/* eslint-disable no-console */\nconst consoleService = {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  assert(expr, msg) {\n    if (!expr && isDebug_constant.IS_DEBUG) {\n      console.error(`Assert: ${msg}`);\n    }\n  },\n  log: function (message) {\n    if (isDebug_constant.IS_DEBUG) {\n      for (var _len = arguments.length, optionalParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        optionalParams[_key - 1] = arguments[_key];\n      }\n      console.log(message, ...optionalParams);\n    }\n  },\n  error: function (msg) {\n    if (isDebug_constant.IS_DEBUG) {\n      for (var _len2 = arguments.length, optionalParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        optionalParams[_key2 - 1] = arguments[_key2];\n      }\n      console.error(`Handled Error: ${msg}`, ...optionalParams);\n    }\n  },\n  warn: function (message) {\n    if (isDebug_constant.IS_DEBUG) {\n      for (var _len3 = arguments.length, optionalParams = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        optionalParams[_key3 - 1] = arguments[_key3];\n      }\n      console.warn(message, ...optionalParams);\n    }\n  }\n};\nexports.consoleService = consoleService;","map":{"version":3,"sources":["../../../src/services/console.service.ts"],"names":["consoleService","assert","expr","msg","IS_DEBUG","console","error","log","message","optionalParams","warn"],"mappings":";;;;;;;AAAA;AAGO,MAAMA,cAAc,GAAG;EAC1B;EACAC,MAAM,CAACC,IAAa,EAAEC,GAAW,EAAQ;IACrC,IAAI,CAACD,IAAI,IAAIE,gBAAAA,CAAAA,QAAQ,EAAE;MACnBC,OAAO,CAACC,KAAK,CAAYH,WAAAA,GAAI,EAAC,CAAC;IACnC;GACH;EACDI,GAAG,EAAE,UAACC,OAAiB,EAAyC;IAC5D,IAAIJ,gBAAAA,CAAAA,QAAQ,EAAE;MAAA,kCADUK,cAAyB;QAAzBA,cAAyB;MAAA;MAE7CJ,OAAO,CAACE,GAAG,CAACC,OAAO,EAAE,GAAGC,cAAc,CAAC;IAC3C;GACH;EACDH,KAAK,EAAE,UAACH,GAAa,EAAyC;IAC1D,IAAIC,gBAAAA,CAAAA,QAAQ,EAAE;MAAA,mCADQK,cAAyB;QAAzBA,cAAyB;MAAA;MAE3CJ,OAAO,CAACC,KAAK,CAAE,kBAAiBH,GAAK,EAAA,EAAE,GAAGM,cAAc,CAAC;IAC7D;GACH;EACDC,IAAI,EAAE,UAACF,OAAiB,EAAyC;IAC7D,IAAIJ,gBAAAA,CAAAA,QAAQ,EAAE;MAAA,mCADWK,cAAyB;QAAzBA,cAAyB;MAAA;MAE9CJ,OAAO,CAACK,IAAI,CAACF,OAAO,EAAE,GAAGC,cAAc,CAAC;IAC5C;EACJ;AACJ,CAAA","sourcesContent":["/* eslint-disable no-console */\nimport { IS_DEBUG } from '@common/constants/is-debug.constant';\n\nexport const consoleService = {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    assert(expr: unknown, msg: string): void {\n        if (!expr && IS_DEBUG) {\n            console.error(`Assert: ${msg}`);\n        }\n    },\n    log: (message?: unknown, ...optionalParams: unknown[]): void => {\n        if (IS_DEBUG) {\n            console.log(message, ...optionalParams);\n        }\n    },\n    error: (msg?: unknown, ...optionalParams: unknown[]): void => {\n        if (IS_DEBUG) {\n            console.error(`Handled Error: ${msg}`, ...optionalParams);\n        }\n    },\n    warn: (message?: unknown, ...optionalParams: unknown[]): void => {\n        if (IS_DEBUG) {\n            console.warn(message, ...optionalParams);\n        }\n    },\n};\n"]},"metadata":{},"sourceType":"script"}