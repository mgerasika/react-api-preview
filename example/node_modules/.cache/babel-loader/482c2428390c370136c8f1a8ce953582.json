{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDirectory = getDirectory;\nexports.getDirectorySync = getDirectorySync;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _pathType = require(\"path-type\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nasync function getDirectory(filepath) {\n  const filePathIsDirectory = await (0, _pathType.isDirectory)(filepath);\n  if (filePathIsDirectory === true) {\n    return filepath;\n  }\n  const directory = _path.default.dirname(filepath);\n  return directory;\n}\nfunction getDirectorySync(filepath) {\n  const filePathIsDirectory = (0, _pathType.isDirectorySync)(filepath);\n  if (filePathIsDirectory === true) {\n    return filepath;\n  }\n  const directory = _path.default.dirname(filepath);\n  return directory;\n}","map":{"version":3,"sources":["../src/getDirectory.ts"],"names":["getDirectory","filepath","filePathIsDirectory","directory","path","dirname","getDirectorySync"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;;;;;AAEA,eAAeA,YAAf,CAA4BC,QAA5B,EAA+D;EAC7D,MAAMC,mBAAmB,GAAG,MAAM,CAAA,CAAA,EAAA,SAAA,CAAA,WAAA,EAAYD,QAAZ,CAAlC;EAEA,IAAIC,mBAAmB,KAAK,IAA5B,EAAkC;IAChC,OAAOD,QAAP;EACD;EAED,MAAME,SAAS,GAAGC,KAAAA,CAAAA,OAAAA,CAAKC,OAALD,CAAaH,QAAbG,CAAlB;EAEA,OAAOD,SAAP;AACD;AAED,SAASG,gBAAT,CAA0BL,QAA1B,EAAoD;EAClD,MAAMC,mBAAmB,GAAG,CAAA,CAAA,EAAA,SAAA,CAAA,eAAA,EAAgBD,QAAhB,CAA5B;EAEA,IAAIC,mBAAmB,KAAK,IAA5B,EAAkC;IAChC,OAAOD,QAAP;EACD;EAED,MAAME,SAAS,GAAGC,KAAAA,CAAAA,OAAAA,CAAKC,OAALD,CAAaH,QAAbG,CAAlB;EAEA,OAAOD,SAAP;AACD","sourcesContent":["import path from 'path';\nimport { isDirectory, isDirectorySync } from 'path-type';\n\nasync function getDirectory(filepath: string): Promise<string> {\n  const filePathIsDirectory = await isDirectory(filepath);\n\n  if (filePathIsDirectory === true) {\n    return filepath;\n  }\n\n  const directory = path.dirname(filepath);\n\n  return directory;\n}\n\nfunction getDirectorySync(filepath: string): string {\n  const filePathIsDirectory = isDirectorySync(filepath);\n\n  if (filePathIsDirectory === true) {\n    return filepath;\n  }\n\n  const directory = path.dirname(filepath);\n\n  return directory;\n}\n\nexport { getDirectory, getDirectorySync };\n"]},"metadata":{},"sourceType":"script"}