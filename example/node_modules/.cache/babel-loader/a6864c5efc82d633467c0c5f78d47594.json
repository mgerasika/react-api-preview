{"ast":null,"code":"const queryToString = data => {\n  return Object.keys(data).filter(key => data && data[key] !== undefined).map(key => {\n    return `${key}=${encodeURIComponent(data[key])}`;\n  }).join('&');\n};\nexport { queryToString };","map":{"version":3,"sources":["../../../src/utils/query-to-string.util.ts"],"names":["queryToString","data","Object","keys","filter","key","undefined","map","encodeURIComponent","join"],"mappings":"AAEaA,MAAAA,aAAa,GAAIC,IAAiB,IAAa;EACxD,OAAOC,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CACnBG,MAAM,CAAEC,GAAG,IAAKJ,IAAI,IAAIA,IAAI,CAACI,GAAG,CAAC,KAAKC,SAAS,CAAC,CAChDC,GAAG,CAAEF,GAAG,IAAK;IACV,OAAQ,GAAEA,GAAI,IAAGG,kBAAkB,CAACP,IAAI,CAACI,GAAG,CAAC,CAAG,EAAA;EACpD,CAAC,CAAC,CACDI,IAAI,CAAC,GAAG,CAAC;AAClB,CAAA","sourcesContent":["import { IDictionary } from '@common/interfaces/dictionary.interface';\n\nexport const queryToString = (data: IDictionary): string => {\n    return Object.keys(data)\n        .filter((key) => data && data[key] !== undefined)\n        .map((key) => {\n            return `${key}=${encodeURIComponent(data[key])}`;\n        })\n        .join('&');\n};\n"]},"metadata":{},"sourceType":"module"}