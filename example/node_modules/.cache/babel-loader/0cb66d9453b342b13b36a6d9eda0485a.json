{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { GraphQLAuthError } from '@aws-amplify/api';\nimport { Logger } from '@aws-amplify/core';\nimport { isEnumFieldType, isGraphQLScalarType, isPredicateObj, isSchemaModel, isSchemaModelWithAttributes, isTargetNameAssociation, isNonModelFieldType, OpType, ModelOperation } from '../types';\nimport { exhaustiveCheck, extractPrimaryKeyFieldNames, establishRelationAndKeys, IDENTIFIER_KEY_SEPARATOR } from '../util';\nvar logger = new Logger('DataStore');\nvar GraphQLOperationType;\n(function (GraphQLOperationType) {\n  GraphQLOperationType[\"LIST\"] = \"query\";\n  GraphQLOperationType[\"CREATE\"] = \"mutation\";\n  GraphQLOperationType[\"UPDATE\"] = \"mutation\";\n  GraphQLOperationType[\"DELETE\"] = \"mutation\";\n  GraphQLOperationType[\"GET\"] = \"query\";\n})(GraphQLOperationType || (GraphQLOperationType = {}));\nexport var TransformerMutationType;\n(function (TransformerMutationType) {\n  TransformerMutationType[\"CREATE\"] = \"Create\";\n  TransformerMutationType[\"UPDATE\"] = \"Update\";\n  TransformerMutationType[\"DELETE\"] = \"Delete\";\n  TransformerMutationType[\"GET\"] = \"Get\";\n})(TransformerMutationType || (TransformerMutationType = {}));\nvar dummyMetadata = {\n  _version: undefined,\n  _lastChangedAt: undefined,\n  _deleted: undefined\n};\nvar metadataFields = Object.keys(dummyMetadata);\nexport function getMetadataFields() {\n  return metadataFields;\n}\nexport function generateSelectionSet(namespace, modelDefinition) {\n  var scalarFields = getScalarFields(modelDefinition);\n  var nonModelFields = getNonModelFields(namespace, modelDefinition);\n  var implicitOwnerField = getImplicitOwnerField(modelDefinition, scalarFields);\n  var scalarAndMetadataFields = Object.values(scalarFields).map(function (_a) {\n    var name = _a.name;\n    return name;\n  }).concat(implicitOwnerField).concat(nonModelFields);\n  if (isSchemaModel(modelDefinition)) {\n    scalarAndMetadataFields = scalarAndMetadataFields.concat(getMetadataFields()).concat(getConnectionFields(modelDefinition, namespace));\n  }\n  var result = scalarAndMetadataFields.join('\\n');\n  return result;\n}\nfunction getImplicitOwnerField(modelDefinition, scalarFields) {\n  var ownerFields = getOwnerFields(modelDefinition);\n  if (!scalarFields.owner && ownerFields.includes('owner')) {\n    return ['owner'];\n  }\n  return [];\n}\nfunction getOwnerFields(modelDefinition) {\n  var ownerFields = [];\n  if (isSchemaModelWithAttributes(modelDefinition)) {\n    modelDefinition.attributes.forEach(function (attr) {\n      if (attr.properties && attr.properties.rules) {\n        var rule = attr.properties.rules.find(function (rule) {\n          return rule.allow === 'owner';\n        });\n        if (rule && rule.ownerField) {\n          ownerFields.push(rule.ownerField);\n        }\n      }\n    });\n  }\n  return ownerFields;\n}\nfunction getScalarFields(modelDefinition) {\n  var fields = modelDefinition.fields;\n  var result = Object.values(fields).filter(function (field) {\n    if (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n      return true;\n    }\n    return false;\n  }).reduce(function (acc, field) {\n    acc[field.name] = field;\n    return acc;\n  }, {});\n  return result;\n}\n// Used for generating the selection set for queries and mutations\nfunction getConnectionFields(modelDefinition, namespace) {\n  var result = [];\n  Object.values(modelDefinition.fields).filter(function (_a) {\n    var association = _a.association;\n    return association && Object.keys(association).length;\n  }).forEach(function (_a) {\n    var name = _a.name,\n      association = _a.association;\n    var connectionType = association.connectionType;\n    switch (connectionType) {\n      case 'HAS_ONE':\n      case 'HAS_MANY':\n        // Intentionally blank\n        break;\n      case 'BELONGS_TO':\n        if (isTargetNameAssociation(association)) {\n          // New codegen (CPK)\n          if (association.targetNames && association.targetNames.length > 0) {\n            // Need to retrieve relations in order to get connected model keys\n            var _b = __read(establishRelationAndKeys(namespace), 1),\n              relations = _b[0];\n            var connectedModelName = modelDefinition.fields[name].type['model'];\n            var byPkIndex = relations[connectedModelName].indexes.find(function (_a) {\n              var _b = __read(_a, 1),\n                name = _b[0];\n              return name === 'byPk';\n            });\n            var keyFields = byPkIndex && byPkIndex[1];\n            var keyFieldSelectionSet = keyFields === null || keyFields === void 0 ? void 0 : keyFields.join(' ');\n            // We rely on `_deleted` when we process the sync query (e.g. in batchSave in the adapters)\n            result.push(name + \" { \" + keyFieldSelectionSet + \" _deleted }\");\n          } else {\n            // backwards-compatability for schema generated prior to custom primary key support\n            result.push(name + \" { id _deleted }\");\n          }\n        }\n        break;\n      default:\n        exhaustiveCheck(connectionType);\n    }\n  });\n  return result;\n}\nfunction getNonModelFields(namespace, modelDefinition) {\n  var result = [];\n  Object.values(modelDefinition.fields).forEach(function (_a) {\n    var name = _a.name,\n      type = _a.type;\n    if (isNonModelFieldType(type)) {\n      var typeDefinition = namespace.nonModels[type.nonModel];\n      var scalarFields = Object.values(getScalarFields(typeDefinition)).map(function (_a) {\n        var name = _a.name;\n        return name;\n      });\n      var nested_1 = [];\n      Object.values(typeDefinition.fields).forEach(function (field) {\n        var type = field.type,\n          name = field.name;\n        if (isNonModelFieldType(type)) {\n          var typeDefinition_1 = namespace.nonModels[type.nonModel];\n          nested_1.push(name + \" { \" + generateSelectionSet(namespace, typeDefinition_1) + \" }\");\n        }\n      });\n      result.push(name + \" { \" + scalarFields.join(' ') + \" \" + nested_1.join(' ') + \" }\");\n    }\n  });\n  return result;\n}\nexport function getAuthorizationRules(modelDefinition) {\n  // Searching for owner authorization on attributes\n  var authConfig = [].concat(modelDefinition.attributes).find(function (attr) {\n    return attr && attr.type === 'auth';\n  });\n  var _a = (authConfig || {}).properties,\n    _b = (_a === void 0 ? {} : _a).rules,\n    rules = _b === void 0 ? [] : _b;\n  var resultRules = [];\n  // Multiple rules can be declared for allow: owner\n  rules.forEach(function (rule) {\n    // setting defaults for backwards compatibility with old cli\n    var _a = rule.identityClaim,\n      identityClaim = _a === void 0 ? 'cognito:username' : _a,\n      _b = rule.ownerField,\n      ownerField = _b === void 0 ? 'owner' : _b,\n      _c = rule.operations,\n      operations = _c === void 0 ? ['create', 'update', 'delete', 'read'] : _c,\n      _d = rule.provider,\n      provider = _d === void 0 ? 'userPools' : _d,\n      _e = rule.groupClaim,\n      groupClaim = _e === void 0 ? 'cognito:groups' : _e,\n      _f = rule.allow,\n      authStrategy = _f === void 0 ? 'iam' : _f,\n      _g = rule.groups,\n      groups = _g === void 0 ? [] : _g;\n    var isReadAuthorized = operations.includes('read');\n    var isOwnerAuth = authStrategy === 'owner';\n    if (!isReadAuthorized && !isOwnerAuth) {\n      return;\n    }\n    var authRule = {\n      identityClaim: identityClaim,\n      ownerField: ownerField,\n      provider: provider,\n      groupClaim: groupClaim,\n      authStrategy: authStrategy,\n      groups: groups,\n      areSubscriptionsPublic: false\n    };\n    if (isOwnerAuth) {\n      // look for the subscription level override\n      // only pay attention to the public level\n      var modelConfig = [].concat(modelDefinition.attributes).find(function (attr) {\n        return attr && attr.type === 'model';\n      });\n      // find the subscriptions level. ON is default\n      var _h = (modelConfig || {}).properties,\n        _j = (_h === void 0 ? {} : _h).subscriptions,\n        _k = (_j === void 0 ? {} : _j).level,\n        level = _k === void 0 ? 'on' : _k;\n      // treat subscriptions as public for owner auth with unprotected reads\n      // when `read` is omitted from `operations`\n      authRule.areSubscriptionsPublic = !operations.includes('read') || level === 'public';\n    }\n    if (isOwnerAuth) {\n      // owner rules has least priority\n      resultRules.push(authRule);\n      return;\n    }\n    resultRules.unshift(authRule);\n  });\n  return resultRules;\n}\nexport function buildSubscriptionGraphQLOperation(namespace, modelDefinition, transformerMutationType, isOwnerAuthorization, ownerField) {\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name,\n    pluralTypeName = modelDefinition.pluralName;\n  var opName = \"on\" + transformerMutationType + typeName;\n  var docArgs = '';\n  var opArgs = '';\n  if (isOwnerAuthorization) {\n    docArgs = \"($\" + ownerField + \": String!)\";\n    opArgs = \"(\" + ownerField + \": $\" + ownerField + \")\";\n  }\n  return [transformerMutationType, opName, \"subscription operation\" + docArgs + \"{\\n\\t\\t\\t\" + opName + opArgs + \"{\\n\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t}\\n\\t\\t}\"];\n}\nexport function buildGraphQLOperation(namespace, modelDefinition, graphQLOpType) {\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name,\n    pluralTypeName = modelDefinition.pluralName;\n  var operation;\n  var documentArgs = ' ';\n  var operationArgs = ' ';\n  var transformerMutationType;\n  switch (graphQLOpType) {\n    case 'LIST':\n      operation = \"sync\" + pluralTypeName;\n      documentArgs = \"($limit: Int, $nextToken: String, $lastSync: AWSTimestamp, $filter: Model\" + typeName + \"FilterInput)\";\n      operationArgs = '(limit: $limit, nextToken: $nextToken, lastSync: $lastSync, filter: $filter)';\n      selectionSet = \"items {\\n\\t\\t\\t\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tnextToken\\n\\t\\t\\t\\t\\t\\tstartedAt\";\n      break;\n    case 'CREATE':\n      operation = \"create\" + typeName;\n      documentArgs = \"($input: Create\" + typeName + \"Input!)\";\n      operationArgs = '(input: $input)';\n      transformerMutationType = TransformerMutationType.CREATE;\n      break;\n    case 'UPDATE':\n      operation = \"update\" + typeName;\n      documentArgs = \"($input: Update\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.UPDATE;\n      break;\n    case 'DELETE':\n      operation = \"delete\" + typeName;\n      documentArgs = \"($input: Delete\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.DELETE;\n      break;\n    case 'GET':\n      operation = \"get\" + typeName;\n      documentArgs = \"($id: ID!)\";\n      operationArgs = '(id: $id)';\n      transformerMutationType = TransformerMutationType.GET;\n      break;\n    default:\n      exhaustiveCheck(graphQLOpType);\n  }\n  return [[transformerMutationType, operation, GraphQLOperationType[graphQLOpType] + \" operation\" + documentArgs + \"{\\n\\t\\t\" + operation + operationArgs + \"{\\n\\t\\t\\t\" + selectionSet + \"\\n\\t\\t}\\n\\t}\"]];\n}\nexport function createMutationInstanceFromModelOperation(relationships, modelDefinition, opType, model, element, condition, MutationEventConstructor, modelInstanceCreator, id) {\n  var operation;\n  switch (opType) {\n    case OpType.INSERT:\n      operation = TransformerMutationType.CREATE;\n      break;\n    case OpType.UPDATE:\n      operation = TransformerMutationType.UPDATE;\n      break;\n    case OpType.DELETE:\n      operation = TransformerMutationType.DELETE;\n      break;\n    default:\n      exhaustiveCheck(opType);\n  }\n  // stringify nested objects of type AWSJSON\n  // this allows us to return parsed JSON to users (see `castInstanceType()` in datastore.ts),\n  // but still send the object correctly over the wire\n  var replacer = function (k, v) {\n    var isAWSJSON = k && v !== null && typeof v === 'object' && modelDefinition.fields[k] && modelDefinition.fields[k].type === 'AWSJSON';\n    if (isAWSJSON) {\n      return JSON.stringify(v);\n    }\n    return v;\n  };\n  var modelId = getIdentifierValue(modelDefinition, element);\n  var optionalId = OpType.INSERT && id ? {\n    id: id\n  } : {};\n  var mutationEvent = modelInstanceCreator(MutationEventConstructor, __assign(__assign({}, optionalId), {\n    data: JSON.stringify(element, replacer),\n    modelId: modelId,\n    model: model.name,\n    operation: operation,\n    condition: JSON.stringify(condition)\n  }));\n  return mutationEvent;\n}\nexport function predicateToGraphQLCondition(predicate, modelDefinition) {\n  var result = {};\n  if (!predicate || !Array.isArray(predicate.predicates)) {\n    return result;\n  }\n  var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n  predicate.predicates.forEach(function (p) {\n    var _a;\n    if (isPredicateObj(p)) {\n      var field = p.field,\n        operator = p.operator,\n        operand = p.operand;\n      // This is compatible with how the GQL Transform currently generates the Condition Input,\n      // i.e. any PK and SK fields are omitted and can't be used as conditions.\n      // However, I think this limits usability.\n      // What if we want to delete all records where SK > some value\n      // Or all records where PK = some value but SKs are different values\n      // TODO: if the Transform gets updated ^ we'll need to modify this logic to only omit\n      // key fields from the predicate/condition when ALL of the keyFields are present and using `eq` operators\n      if (keyFields.includes(field)) {\n        return;\n      }\n      result[field] = (_a = {}, _a[operator] = operand, _a);\n    } else {\n      result[p.type] = predicateToGraphQLCondition(p, modelDefinition);\n    }\n  });\n  return result;\n}\nexport function predicateToGraphQLFilter(predicatesGroup) {\n  var result = {};\n  if (!predicatesGroup || !Array.isArray(predicatesGroup.predicates)) {\n    return result;\n  }\n  var type = predicatesGroup.type,\n    predicates = predicatesGroup.predicates;\n  var isList = type === 'and' || type === 'or';\n  result[type] = isList ? [] : {};\n  var appendToFilter = function (value) {\n    return isList ? result[type].push(value) : result[type] = value;\n  };\n  predicates.forEach(function (predicate) {\n    var _a, _b;\n    if (isPredicateObj(predicate)) {\n      var field = predicate.field,\n        operator = predicate.operator,\n        operand = predicate.operand;\n      var gqlField = (_a = {}, _a[field] = (_b = {}, _b[operator] = operand, _b), _a);\n      appendToFilter(gqlField);\n      return;\n    }\n    appendToFilter(predicateToGraphQLFilter(predicate));\n  });\n  return result;\n}\nexport function getUserGroupsFromToken(token, rule) {\n  // validate token against groupClaim\n  var userGroups = token[rule.groupClaim] || [];\n  if (typeof userGroups === 'string') {\n    var parsedGroups = void 0;\n    try {\n      parsedGroups = JSON.parse(userGroups);\n    } catch (e) {\n      parsedGroups = userGroups;\n    }\n    userGroups = [].concat(parsedGroups);\n  }\n  return userGroups;\n}\nexport function getModelAuthModes(_a) {\n  var authModeStrategy = _a.authModeStrategy,\n    defaultAuthMode = _a.defaultAuthMode,\n    modelName = _a.modelName,\n    schema = _a.schema;\n  return __awaiter(this, void 0, void 0, function () {\n    var operations, modelAuthModes, error_1;\n    var _this = this;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          operations = Object.values(ModelOperation);\n          modelAuthModes = {\n            CREATE: [],\n            READ: [],\n            UPDATE: [],\n            DELETE: []\n          };\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, Promise.all(operations.map(function (operation) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var authModes;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4 /*yield*/, authModeStrategy({\n                      schema: schema,\n                      modelName: modelName,\n                      operation: operation\n                    })];\n                  case 1:\n                    authModes = _a.sent();\n                    if (typeof authModes === 'string') {\n                      modelAuthModes[operation] = [authModes];\n                    } else if (Array.isArray(authModes) && authModes.length) {\n                      modelAuthModes[operation] = authModes;\n                    } else {\n                      // Use default auth mode if nothing is returned from authModeStrategy\n                      modelAuthModes[operation] = [defaultAuthMode];\n                    }\n                    return [2 /*return*/];\n                }\n              });\n            });\n          }))];\n\n        case 2:\n          _b.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          error_1 = _b.sent();\n          logger.debug(\"Error getting auth modes for model: \" + modelName, error_1);\n          return [3 /*break*/, 4];\n        case 4:\n          return [2 /*return*/, modelAuthModes];\n      }\n    });\n  });\n}\nexport function getForbiddenError(error) {\n  var forbiddenErrorMessages = ['Request failed with status code 401', 'Request failed with status code 403'];\n  var forbiddenError;\n  if (error && error.errors) {\n    forbiddenError = error.errors.find(function (err) {\n      return forbiddenErrorMessages.includes(err.message);\n    });\n  } else if (error && error.message) {\n    forbiddenError = error;\n  }\n  if (forbiddenError) {\n    return forbiddenError.message;\n  }\n  return null;\n}\nexport function getClientSideAuthError(error) {\n  var clientSideAuthErrors = Object.values(GraphQLAuthError);\n  var clientSideError = error && error.message && clientSideAuthErrors.find(function (clientError) {\n    return error.message.includes(clientError);\n  });\n  return clientSideError || null;\n}\nexport function getTokenForCustomAuth(authMode, amplifyConfig) {\n  if (amplifyConfig === void 0) {\n    amplifyConfig = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, functionAuthProvider, token, error_2;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!(authMode === GRAPHQL_AUTH_MODE.AWS_LAMBDA)) return [3 /*break*/, 6];\n          _a = amplifyConfig.authProviders, functionAuthProvider = (_a === void 0 ? {\n            functionAuthProvider: null\n          } : _a).functionAuthProvider;\n          if (!(functionAuthProvider && typeof functionAuthProvider === 'function')) return [3 /*break*/, 5];\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, functionAuthProvider()];\n        case 2:\n          token = _b.sent().token;\n          return [2 /*return*/, token];\n        case 3:\n          error_2 = _b.sent();\n          throw new Error(\"Error retrieving token from `functionAuthProvider`: \" + error_2);\n        case 4:\n          return [3 /*break*/, 6];\n        case 5:\n          // TODO: add docs link once available\n          throw new Error(\"You must provide a `functionAuthProvider` function to `DataStore.configure` when using \" + GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n        case 6:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n// Util that takes a modelDefinition and model and returns either the id value(s) or the custom primary key value(s)\nexport function getIdentifierValue(modelDefinition, model) {\n  var pkFieldNames = extractPrimaryKeyFieldNames(modelDefinition);\n  var idOrPk = pkFieldNames.map(function (f) {\n    return model[f];\n  }).join(IDENTIFIER_KEY_SEPARATOR);\n  return idOrPk;\n}","map":{"version":3,"sources":["../../src/sync/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { GraphQLAuthError } from '@aws-amplify/api';\nimport { Logger } from '@aws-amplify/core';\nimport { isEnumFieldType, isGraphQLScalarType, isPredicateObj, isSchemaModel, isSchemaModelWithAttributes, isTargetNameAssociation, isNonModelFieldType, OpType, ModelOperation, } from '../types';\nimport { exhaustiveCheck, extractPrimaryKeyFieldNames, establishRelationAndKeys, IDENTIFIER_KEY_SEPARATOR, } from '../util';\nvar logger = new Logger('DataStore');\nvar GraphQLOperationType;\n(function (GraphQLOperationType) {\n    GraphQLOperationType[\"LIST\"] = \"query\";\n    GraphQLOperationType[\"CREATE\"] = \"mutation\";\n    GraphQLOperationType[\"UPDATE\"] = \"mutation\";\n    GraphQLOperationType[\"DELETE\"] = \"mutation\";\n    GraphQLOperationType[\"GET\"] = \"query\";\n})(GraphQLOperationType || (GraphQLOperationType = {}));\nexport var TransformerMutationType;\n(function (TransformerMutationType) {\n    TransformerMutationType[\"CREATE\"] = \"Create\";\n    TransformerMutationType[\"UPDATE\"] = \"Update\";\n    TransformerMutationType[\"DELETE\"] = \"Delete\";\n    TransformerMutationType[\"GET\"] = \"Get\";\n})(TransformerMutationType || (TransformerMutationType = {}));\nvar dummyMetadata = {\n    _version: undefined,\n    _lastChangedAt: undefined,\n    _deleted: undefined,\n};\nvar metadataFields = (Object.keys(dummyMetadata));\nexport function getMetadataFields() {\n    return metadataFields;\n}\nexport function generateSelectionSet(namespace, modelDefinition) {\n    var scalarFields = getScalarFields(modelDefinition);\n    var nonModelFields = getNonModelFields(namespace, modelDefinition);\n    var implicitOwnerField = getImplicitOwnerField(modelDefinition, scalarFields);\n    var scalarAndMetadataFields = Object.values(scalarFields)\n        .map(function (_a) {\n        var name = _a.name;\n        return name;\n    })\n        .concat(implicitOwnerField)\n        .concat(nonModelFields);\n    if (isSchemaModel(modelDefinition)) {\n        scalarAndMetadataFields = scalarAndMetadataFields\n            .concat(getMetadataFields())\n            .concat(getConnectionFields(modelDefinition, namespace));\n    }\n    var result = scalarAndMetadataFields.join('\\n');\n    return result;\n}\nfunction getImplicitOwnerField(modelDefinition, scalarFields) {\n    var ownerFields = getOwnerFields(modelDefinition);\n    if (!scalarFields.owner && ownerFields.includes('owner')) {\n        return ['owner'];\n    }\n    return [];\n}\nfunction getOwnerFields(modelDefinition) {\n    var ownerFields = [];\n    if (isSchemaModelWithAttributes(modelDefinition)) {\n        modelDefinition.attributes.forEach(function (attr) {\n            if (attr.properties && attr.properties.rules) {\n                var rule = attr.properties.rules.find(function (rule) { return rule.allow === 'owner'; });\n                if (rule && rule.ownerField) {\n                    ownerFields.push(rule.ownerField);\n                }\n            }\n        });\n    }\n    return ownerFields;\n}\nfunction getScalarFields(modelDefinition) {\n    var fields = modelDefinition.fields;\n    var result = Object.values(fields)\n        .filter(function (field) {\n        if (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n            return true;\n        }\n        return false;\n    })\n        .reduce(function (acc, field) {\n        acc[field.name] = field;\n        return acc;\n    }, {});\n    return result;\n}\n// Used for generating the selection set for queries and mutations\nfunction getConnectionFields(modelDefinition, namespace) {\n    var result = [];\n    Object.values(modelDefinition.fields)\n        .filter(function (_a) {\n        var association = _a.association;\n        return association && Object.keys(association).length;\n    })\n        .forEach(function (_a) {\n        var name = _a.name, association = _a.association;\n        var connectionType = association.connectionType;\n        switch (connectionType) {\n            case 'HAS_ONE':\n            case 'HAS_MANY':\n                // Intentionally blank\n                break;\n            case 'BELONGS_TO':\n                if (isTargetNameAssociation(association)) {\n                    // New codegen (CPK)\n                    if (association.targetNames && association.targetNames.length > 0) {\n                        // Need to retrieve relations in order to get connected model keys\n                        var _b = __read(establishRelationAndKeys(namespace), 1), relations = _b[0];\n                        var connectedModelName = modelDefinition.fields[name].type['model'];\n                        var byPkIndex = relations[connectedModelName].indexes.find(function (_a) {\n                            var _b = __read(_a, 1), name = _b[0];\n                            return name === 'byPk';\n                        });\n                        var keyFields = byPkIndex && byPkIndex[1];\n                        var keyFieldSelectionSet = keyFields === null || keyFields === void 0 ? void 0 : keyFields.join(' ');\n                        // We rely on `_deleted` when we process the sync query (e.g. in batchSave in the adapters)\n                        result.push(name + \" { \" + keyFieldSelectionSet + \" _deleted }\");\n                    }\n                    else {\n                        // backwards-compatability for schema generated prior to custom primary key support\n                        result.push(name + \" { id _deleted }\");\n                    }\n                }\n                break;\n            default:\n                exhaustiveCheck(connectionType);\n        }\n    });\n    return result;\n}\nfunction getNonModelFields(namespace, modelDefinition) {\n    var result = [];\n    Object.values(modelDefinition.fields).forEach(function (_a) {\n        var name = _a.name, type = _a.type;\n        if (isNonModelFieldType(type)) {\n            var typeDefinition = namespace.nonModels[type.nonModel];\n            var scalarFields = Object.values(getScalarFields(typeDefinition)).map(function (_a) {\n                var name = _a.name;\n                return name;\n            });\n            var nested_1 = [];\n            Object.values(typeDefinition.fields).forEach(function (field) {\n                var type = field.type, name = field.name;\n                if (isNonModelFieldType(type)) {\n                    var typeDefinition_1 = namespace.nonModels[type.nonModel];\n                    nested_1.push(name + \" { \" + generateSelectionSet(namespace, typeDefinition_1) + \" }\");\n                }\n            });\n            result.push(name + \" { \" + scalarFields.join(' ') + \" \" + nested_1.join(' ') + \" }\");\n        }\n    });\n    return result;\n}\nexport function getAuthorizationRules(modelDefinition) {\n    // Searching for owner authorization on attributes\n    var authConfig = []\n        .concat(modelDefinition.attributes)\n        .find(function (attr) { return attr && attr.type === 'auth'; });\n    var _a = (authConfig || {}).properties, _b = (_a === void 0 ? {} : _a).rules, rules = _b === void 0 ? [] : _b;\n    var resultRules = [];\n    // Multiple rules can be declared for allow: owner\n    rules.forEach(function (rule) {\n        // setting defaults for backwards compatibility with old cli\n        var _a = rule.identityClaim, identityClaim = _a === void 0 ? 'cognito:username' : _a, _b = rule.ownerField, ownerField = _b === void 0 ? 'owner' : _b, _c = rule.operations, operations = _c === void 0 ? ['create', 'update', 'delete', 'read'] : _c, _d = rule.provider, provider = _d === void 0 ? 'userPools' : _d, _e = rule.groupClaim, groupClaim = _e === void 0 ? 'cognito:groups' : _e, _f = rule.allow, authStrategy = _f === void 0 ? 'iam' : _f, _g = rule.groups, groups = _g === void 0 ? [] : _g;\n        var isReadAuthorized = operations.includes('read');\n        var isOwnerAuth = authStrategy === 'owner';\n        if (!isReadAuthorized && !isOwnerAuth) {\n            return;\n        }\n        var authRule = {\n            identityClaim: identityClaim,\n            ownerField: ownerField,\n            provider: provider,\n            groupClaim: groupClaim,\n            authStrategy: authStrategy,\n            groups: groups,\n            areSubscriptionsPublic: false,\n        };\n        if (isOwnerAuth) {\n            // look for the subscription level override\n            // only pay attention to the public level\n            var modelConfig = []\n                .concat(modelDefinition.attributes)\n                .find(function (attr) { return attr && attr.type === 'model'; });\n            // find the subscriptions level. ON is default\n            var _h = (modelConfig || {}).properties, _j = (_h === void 0 ? {} : _h).subscriptions, _k = (_j === void 0 ? {} : _j).level, level = _k === void 0 ? 'on' : _k;\n            // treat subscriptions as public for owner auth with unprotected reads\n            // when `read` is omitted from `operations`\n            authRule.areSubscriptionsPublic =\n                !operations.includes('read') || level === 'public';\n        }\n        if (isOwnerAuth) {\n            // owner rules has least priority\n            resultRules.push(authRule);\n            return;\n        }\n        resultRules.unshift(authRule);\n    });\n    return resultRules;\n}\nexport function buildSubscriptionGraphQLOperation(namespace, modelDefinition, transformerMutationType, isOwnerAuthorization, ownerField) {\n    var selectionSet = generateSelectionSet(namespace, modelDefinition);\n    var typeName = modelDefinition.name, pluralTypeName = modelDefinition.pluralName;\n    var opName = \"on\" + transformerMutationType + typeName;\n    var docArgs = '';\n    var opArgs = '';\n    if (isOwnerAuthorization) {\n        docArgs = \"($\" + ownerField + \": String!)\";\n        opArgs = \"(\" + ownerField + \": $\" + ownerField + \")\";\n    }\n    return [\n        transformerMutationType,\n        opName,\n        \"subscription operation\" + docArgs + \"{\\n\\t\\t\\t\" + opName + opArgs + \"{\\n\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t}\\n\\t\\t}\",\n    ];\n}\nexport function buildGraphQLOperation(namespace, modelDefinition, graphQLOpType) {\n    var selectionSet = generateSelectionSet(namespace, modelDefinition);\n    var typeName = modelDefinition.name, pluralTypeName = modelDefinition.pluralName;\n    var operation;\n    var documentArgs = ' ';\n    var operationArgs = ' ';\n    var transformerMutationType;\n    switch (graphQLOpType) {\n        case 'LIST':\n            operation = \"sync\" + pluralTypeName;\n            documentArgs = \"($limit: Int, $nextToken: String, $lastSync: AWSTimestamp, $filter: Model\" + typeName + \"FilterInput)\";\n            operationArgs =\n                '(limit: $limit, nextToken: $nextToken, lastSync: $lastSync, filter: $filter)';\n            selectionSet = \"items {\\n\\t\\t\\t\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tnextToken\\n\\t\\t\\t\\t\\t\\tstartedAt\";\n            break;\n        case 'CREATE':\n            operation = \"create\" + typeName;\n            documentArgs = \"($input: Create\" + typeName + \"Input!)\";\n            operationArgs = '(input: $input)';\n            transformerMutationType = TransformerMutationType.CREATE;\n            break;\n        case 'UPDATE':\n            operation = \"update\" + typeName;\n            documentArgs = \"($input: Update\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n            operationArgs = '(input: $input, condition: $condition)';\n            transformerMutationType = TransformerMutationType.UPDATE;\n            break;\n        case 'DELETE':\n            operation = \"delete\" + typeName;\n            documentArgs = \"($input: Delete\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n            operationArgs = '(input: $input, condition: $condition)';\n            transformerMutationType = TransformerMutationType.DELETE;\n            break;\n        case 'GET':\n            operation = \"get\" + typeName;\n            documentArgs = \"($id: ID!)\";\n            operationArgs = '(id: $id)';\n            transformerMutationType = TransformerMutationType.GET;\n            break;\n        default:\n            exhaustiveCheck(graphQLOpType);\n    }\n    return [\n        [\n            transformerMutationType,\n            operation,\n            GraphQLOperationType[graphQLOpType] + \" operation\" + documentArgs + \"{\\n\\t\\t\" + operation + operationArgs + \"{\\n\\t\\t\\t\" + selectionSet + \"\\n\\t\\t}\\n\\t}\",\n        ],\n    ];\n}\nexport function createMutationInstanceFromModelOperation(relationships, modelDefinition, opType, model, element, condition, MutationEventConstructor, modelInstanceCreator, id) {\n    var operation;\n    switch (opType) {\n        case OpType.INSERT:\n            operation = TransformerMutationType.CREATE;\n            break;\n        case OpType.UPDATE:\n            operation = TransformerMutationType.UPDATE;\n            break;\n        case OpType.DELETE:\n            operation = TransformerMutationType.DELETE;\n            break;\n        default:\n            exhaustiveCheck(opType);\n    }\n    // stringify nested objects of type AWSJSON\n    // this allows us to return parsed JSON to users (see `castInstanceType()` in datastore.ts),\n    // but still send the object correctly over the wire\n    var replacer = function (k, v) {\n        var isAWSJSON = k &&\n            v !== null &&\n            typeof v === 'object' &&\n            modelDefinition.fields[k] &&\n            modelDefinition.fields[k].type === 'AWSJSON';\n        if (isAWSJSON) {\n            return JSON.stringify(v);\n        }\n        return v;\n    };\n    var modelId = getIdentifierValue(modelDefinition, element);\n    var optionalId = OpType.INSERT && id ? { id: id } : {};\n    var mutationEvent = modelInstanceCreator(MutationEventConstructor, __assign(__assign({}, optionalId), { data: JSON.stringify(element, replacer), modelId: modelId, model: model.name, operation: operation, condition: JSON.stringify(condition) }));\n    return mutationEvent;\n}\nexport function predicateToGraphQLCondition(predicate, modelDefinition) {\n    var result = {};\n    if (!predicate || !Array.isArray(predicate.predicates)) {\n        return result;\n    }\n    var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n    predicate.predicates.forEach(function (p) {\n        var _a;\n        if (isPredicateObj(p)) {\n            var field = p.field, operator = p.operator, operand = p.operand;\n            // This is compatible with how the GQL Transform currently generates the Condition Input,\n            // i.e. any PK and SK fields are omitted and can't be used as conditions.\n            // However, I think this limits usability.\n            // What if we want to delete all records where SK > some value\n            // Or all records where PK = some value but SKs are different values\n            // TODO: if the Transform gets updated ^ we'll need to modify this logic to only omit\n            // key fields from the predicate/condition when ALL of the keyFields are present and using `eq` operators\n            if (keyFields.includes(field)) {\n                return;\n            }\n            result[field] = (_a = {}, _a[operator] = operand, _a);\n        }\n        else {\n            result[p.type] = predicateToGraphQLCondition(p, modelDefinition);\n        }\n    });\n    return result;\n}\nexport function predicateToGraphQLFilter(predicatesGroup) {\n    var result = {};\n    if (!predicatesGroup || !Array.isArray(predicatesGroup.predicates)) {\n        return result;\n    }\n    var type = predicatesGroup.type, predicates = predicatesGroup.predicates;\n    var isList = type === 'and' || type === 'or';\n    result[type] = isList ? [] : {};\n    var appendToFilter = function (value) {\n        return isList ? result[type].push(value) : (result[type] = value);\n    };\n    predicates.forEach(function (predicate) {\n        var _a, _b;\n        if (isPredicateObj(predicate)) {\n            var field = predicate.field, operator = predicate.operator, operand = predicate.operand;\n            var gqlField = (_a = {},\n                _a[field] = (_b = {}, _b[operator] = operand, _b),\n                _a);\n            appendToFilter(gqlField);\n            return;\n        }\n        appendToFilter(predicateToGraphQLFilter(predicate));\n    });\n    return result;\n}\nexport function getUserGroupsFromToken(token, rule) {\n    // validate token against groupClaim\n    var userGroups = token[rule.groupClaim] || [];\n    if (typeof userGroups === 'string') {\n        var parsedGroups = void 0;\n        try {\n            parsedGroups = JSON.parse(userGroups);\n        }\n        catch (e) {\n            parsedGroups = userGroups;\n        }\n        userGroups = [].concat(parsedGroups);\n    }\n    return userGroups;\n}\nexport function getModelAuthModes(_a) {\n    var authModeStrategy = _a.authModeStrategy, defaultAuthMode = _a.defaultAuthMode, modelName = _a.modelName, schema = _a.schema;\n    return __awaiter(this, void 0, void 0, function () {\n        var operations, modelAuthModes, error_1;\n        var _this = this;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    operations = Object.values(ModelOperation);\n                    modelAuthModes = {\n                        CREATE: [],\n                        READ: [],\n                        UPDATE: [],\n                        DELETE: [],\n                    };\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, Promise.all(operations.map(function (operation) { return __awaiter(_this, void 0, void 0, function () {\n                            var authModes;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0: return [4 /*yield*/, authModeStrategy({\n                                            schema: schema,\n                                            modelName: modelName,\n                                            operation: operation,\n                                        })];\n                                    case 1:\n                                        authModes = _a.sent();\n                                        if (typeof authModes === 'string') {\n                                            modelAuthModes[operation] = [authModes];\n                                        }\n                                        else if (Array.isArray(authModes) && authModes.length) {\n                                            modelAuthModes[operation] = authModes;\n                                        }\n                                        else {\n                                            // Use default auth mode if nothing is returned from authModeStrategy\n                                            modelAuthModes[operation] = [defaultAuthMode];\n                                        }\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); }))];\n                case 2:\n                    _b.sent();\n                    return [3 /*break*/, 4];\n                case 3:\n                    error_1 = _b.sent();\n                    logger.debug(\"Error getting auth modes for model: \" + modelName, error_1);\n                    return [3 /*break*/, 4];\n                case 4: return [2 /*return*/, modelAuthModes];\n            }\n        });\n    });\n}\nexport function getForbiddenError(error) {\n    var forbiddenErrorMessages = [\n        'Request failed with status code 401',\n        'Request failed with status code 403',\n    ];\n    var forbiddenError;\n    if (error && error.errors) {\n        forbiddenError = error.errors.find(function (err) {\n            return forbiddenErrorMessages.includes(err.message);\n        });\n    }\n    else if (error && error.message) {\n        forbiddenError = error;\n    }\n    if (forbiddenError) {\n        return forbiddenError.message;\n    }\n    return null;\n}\nexport function getClientSideAuthError(error) {\n    var clientSideAuthErrors = Object.values(GraphQLAuthError);\n    var clientSideError = error &&\n        error.message &&\n        clientSideAuthErrors.find(function (clientError) {\n            return error.message.includes(clientError);\n        });\n    return clientSideError || null;\n}\nexport function getTokenForCustomAuth(authMode, amplifyConfig) {\n    if (amplifyConfig === void 0) { amplifyConfig = {}; }\n    return __awaiter(this, void 0, void 0, function () {\n        var _a, functionAuthProvider, token, error_2;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    if (!(authMode === GRAPHQL_AUTH_MODE.AWS_LAMBDA)) return [3 /*break*/, 6];\n                    _a = amplifyConfig.authProviders, functionAuthProvider = (_a === void 0 ? { functionAuthProvider: null } : _a).functionAuthProvider;\n                    if (!(functionAuthProvider && typeof functionAuthProvider === 'function')) return [3 /*break*/, 5];\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, functionAuthProvider()];\n                case 2:\n                    token = (_b.sent()).token;\n                    return [2 /*return*/, token];\n                case 3:\n                    error_2 = _b.sent();\n                    throw new Error(\"Error retrieving token from `functionAuthProvider`: \" + error_2);\n                case 4: return [3 /*break*/, 6];\n                case 5: \n                // TODO: add docs link once available\n                throw new Error(\"You must provide a `functionAuthProvider` function to `DataStore.configure` when using \" + GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n                case 6: return [2 /*return*/];\n            }\n        });\n    });\n}\n// Util that takes a modelDefinition and model and returns either the id value(s) or the custom primary key value(s)\nexport function getIdentifierValue(modelDefinition, model) {\n    var pkFieldNames = extractPrimaryKeyFieldNames(modelDefinition);\n    var idOrPk = pkFieldNames.map(function (f) { return model[f]; }).join(IDENTIFIER_KEY_SEPARATOR);\n    return idOrPk;\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}