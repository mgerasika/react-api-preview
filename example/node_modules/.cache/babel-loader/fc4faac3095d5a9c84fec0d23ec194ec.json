{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar statusTag_component = require('../general-ui/tag/status-tag.component.js');\nvar tooltip_component = require('../general-ui/tooltip/tooltip.component.js');\nvar React = require('react');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n  return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\nvar _ref = process.env.NODE_ENV === \"production\" ? {\n  name: \"1w6frfr\",\n  styles: \"padding:0.25rem\"\n} : {\n  name: \"yqdynh-renderValidationErrors\",\n  styles: \"padding:0.25rem;label:renderValidationErrors;\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst renderValidationErrors = errors => {\n  return /*#__PURE__*/React__default[\"default\"].createElement(React__default[\"default\"].Fragment, null, errors.map(error => /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n    key: error.title,\n    css: _ref\n  }, /*#__PURE__*/React__default[\"default\"].createElement(tooltip_component.Tooltip, {\n    title: error.tooltip\n  }, /*#__PURE__*/React__default[\"default\"].createElement(statusTag_component.StatusTag, {\n    status: \"error\"\n  }, error.title)))));\n};\nexports.renderValidationErrors = renderValidationErrors;","map":{"version":3,"sources":["../../../src/utils/render-validation-errors.util.tsx"],"names":["renderValidationErrors","errors","React","map","error","title","Tooltip","tooltip","StatusTag"],"mappings":";;;;;;;;;;;;;;;;;AAE0B,IAAA,IAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA;EAAA,IAAA,EAAA,SAAA;EAAA,MAAA,EAAA;AAAA,CAAA,GAAA;EAAA,IAAA,EAAA,+BAAA;EAAA,MAAA,EAAA,+CAAA;EAAA,QAAA,EAAA;AAAA,CAAA;AAQbA,MAAAA,sBAAsB,GAAIC,MAA0B,IAAkB;EAC/E,OAAA,aACIC,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAAAA,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EACKD,MAAM,CAACE,GAAG,CAAEC,KAAK,IAAA,aACdF,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAAAA,KAAAA,EAAAA;IAAK,GAAG,EAAEE,KAAK,CAACC,KAAM;IAAA,GAAA,EAAA;EAAA,CAAA,EAAA,aAClBH,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAACI,iBAAAA,CAAAA,OAAO,EAAA;IAAC,KAAK,EAAEF,KAAK,CAACG;EAAQ,CAAA,EAAA,aAC1BL,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,aAAAA,CAACM,mBAAAA,CAAAA,SAAS,EAAA;IAAC,MAAM,EAAC;EAAO,CAAA,EAAEJ,KAAK,CAACC,KAAK,CAAa,CAC7C,CAEjB,CAAC,CACH;AAEX,CAAA","sourcesContent":["import { StatusTag } from '@common/general-ui/tag/status-tag.component';\nimport { Tooltip } from '@common/general-ui/tooltip/tooltip.component';\nimport React from 'react';\nimport 'twin.macro';\n\nexport interface IValidationError<T = unknown> {\n    tooltip: string;\n    title: string;\n    value: T;\n}\nexport const renderValidationErrors = (errors: IValidationError[]): JSX.Element => {\n    return (\n        <>\n            {errors.map((error) => (\n                <div key={error.title} tw=\"p-1\">\n                    <Tooltip title={error.tooltip}>\n                        <StatusTag status=\"error\">{error.title}</StatusTag>\n                    </Tooltip>\n                </div>\n            ))}\n        </>\n    );\n};\n"]},"metadata":{},"sourceType":"script"}