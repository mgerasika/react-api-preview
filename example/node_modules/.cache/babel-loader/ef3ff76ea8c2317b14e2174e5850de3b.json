{"ast":null,"code":"import { slicedToArray as _slicedToArray, createForOfIteratorHelper as _createForOfIteratorHelper } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { DownOutlined } from '@ant-design/icons';\nimport { Icon } from '../icon/icon.component.js';\nimport { Dropdown } from 'antd';\nimport { useRef, useState, useEffect } from 'react';\nimport { jsx } from '@emotion/react';\nvar DropDown = function DropDown(_ref) {\n  var popup = _ref.popup,\n    children = _ref.children,\n    _ref$showArrowIcon = _ref.showArrowIcon,\n    showArrowIcon = _ref$showArrowIcon === void 0 ? true : _ref$showArrowIcon,\n    placement = _ref.placement,\n    className = _ref.className;\n  var rootRef = useRef(undefined);\n  var popupRef = useRef(undefined);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    visible = _useState2[0],\n    setIsVisible = _useState2[1];\n  useEffect(function () {\n    if (visible) {\n      window.addEventListener('click', handleDropdownClose);\n    }\n    return function () {\n      return window.removeEventListener('click', handleDropdownClose);\n    };\n  }, [visible]);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var handleDropdownClose = function handleDropdownClose(e) {\n    var path = e.path || e.composedPath();\n    var _iterator = _createForOfIteratorHelper(path),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        if (rootRef.current === item) {\n          return;\n        }\n        if (popupRef.current === item) {\n          return;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    setIsVisible(false);\n  };\n  return jsx(\"div\", {\n    ref: rootRef,\n    className: className\n  }, jsx(Dropdown, {\n    visible: visible,\n    overlay: jsx(\"div\", {\n      tw: \"text-base\",\n      ref: popupRef\n    }, popup),\n    trigger: ['click'],\n    placement: placement\n  }, jsx(\"div\", {\n    tw: \"cursor-pointer\",\n    onClick: function onClick() {\n      return setIsVisible(!visible);\n    }\n  }, children, \" \", showArrowIcon && jsx(Icon, {\n    icon: DownOutlined\n  }))));\n};\nexport { DropDown };","map":{"version":3,"sources":["../../../../src/general-ui/drop-down/drop-down.component.tsx"],"names":["DropDown","popup","children","_ref$showArrowIcon","showArrowIcon","placement","className","rootRef","useRef","undefined","popupRef","visible","setIsVisible","useState","_useState2","useEffect","window","addEventListener","handleDropdownClose","removeEventListener","e","path","composedPath","item","current","___EmotionJSX","ref","AntdDropdown","overlay","tw","trigger","onClick","Icon","icon","DownOutlined"],"mappings":";;;;;;AAaaA,IAAAA,QAAQ,GAAG,SAAXA,QAAQ,CAA6F,IAAA,EAAA;EAAA,IAAvFC,KAAK,GAAA,IAAA,CAALA,KAAK;IAAEC,QAAQC,GAAAA,IAAAA,CAARD,QAAQC;IAAAA,kBAAAA,GAAAA,IAAAA,CAAEC,aAAa;IAAbA,aAAa,GAAA,kBAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAA,kBAAA;IAAEC,SAAS,GAAA,IAAA,CAATA,SAAS;IAAEC,SAAS,GAAA,IAAA,CAATA,SAAS;EAClF,IAAMC,OAAO,GAAGC,MAAM,CAA6BC,SAAS,CAAC;EAC7D,IAAMC,QAAQ,GAAGF,MAAM,CAA6BC,SAAS,CAAC;EAC9D,IAAgCI,SAAAA,GAAAA,QAAQ,CAAC,KAAK,CAACC;IAAAA,UAAAA,GAAAA,cAAAA,CAAAA,SAAAA,EAAAA,CAAAA,CAAAA;IAAxCH,OAAO,GAAA,UAAA,CAAA,CAAA,CAAA;IAAEC,YAAY,GAAA,UAAA,CAAA,CAAA,CAAA;EAE5BG,SAAS,CAAC,YAAM;IACZ,IAAIJ,OAAO,EAAE;MACTK,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEC,mBAAmB,CAAC;IACzD;IACA,OAAO,YAAA;MAAA,OAAYF,MAAM,CAACG,mBAAmB,CAAC,OAAO,EAAED,mBAAmB,CAAC;IAAA,CAAA;EAC/E,CAAC,EAAE,CAACP,OAAO,CAAC,CAAC;;EAEb;EACA,IAAMO,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIE,CAAM,EAAW;IAC1C,IAAMC,IAAI,GAAGD,CAAC,CAACC,IAAI,IAAID,CAAC,CAACE,YAAY,EAAE;IAAC,IAAA,SAAA,GAAA,0BAAA,CACrBD,IAAI,CAAA;MAAA,KAAA;IAAA,IAAA;MAAvB,KAAyB,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;QAAA,IAAdE,IAAI,GAAA,KAAA,CAAA,KAAA;QACX,IAAIhB,OAAO,CAACiB,OAAO,KAAKD,IAAI,EAAE;UAC1B;QACJ;QACA,IAAIb,QAAQ,CAACc,OAAO,KAAKD,IAAI,EAAE;UAC3B;QACJ;MACJ;IAAC,CAAA,CAAA,OAAA,GAAA,EAAA;MAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA;IAAA,CAAA,SAAA;MAAA,SAAA,CAAA,CAAA,EAAA;IAAA;IAEDX,YAAY,CAAC,KAAK,CAAC;GACtB;EACD,OACIa,GAAAA,CAAAA,KAAAA,EAAAA;IAAKC,GAAG,EAAEnB,OAAgD;IAACD,SAAS,EAAEA;EAAU,CAAA,EAC5EmB,GAAAA,CAACE,QAAY,EAAA;IACThB,OAAO,EAAEA,OAAQ;IACjBiB,OAAO,EACHH,GAAAA,CAAAA,KAAAA,EAAAA;MAAKI,EAAE,EAAC,WAAW;MAACH,GAAG,EAAEhB;IAAiD,CAAA,EACrET,KAAK,CAEb;IACD6B,OAAO,EAAE,CAAC,OAAO,CAAE;IACnBzB,SAAS,EAAEA;GAEX,EAAA,GAAA,CAAA,KAAA,EAAA;IAAKwB,EAAE,EAAC,gBAAgB;IAACE,OAAO,EAAE,SAAA,OAAA,GAAA;MAAA,OAAYnB,YAAY,CAAC,CAACD,OAAO,CAAC;IAAA;EAAC,CAAA,EAChET,QAAQ,EAAA,GAAA,EAAGE,aAAa,IAAIqB,GAAAA,CAACO,IAAI,EAAA;IAACC,IAAI,EAAEC;GAAgB,CAAA,CACvD,CACK,CACb;AAEd,CAAA","sourcesContent":["import { DownOutlined } from '@ant-design/icons';\nimport { Icon } from '@common/general-ui/icon/icon.component';\nimport { Dropdown as AntdDropdown, DropDownProps } from 'antd';\nimport React, { LegacyRef, ReactNode, useEffect, useRef, useState } from 'react';\n\ninterface IProps {\n    popup: JSX.Element;\n    children: ReactNode;\n    showArrowIcon?: boolean;\n    placement?: DropDownProps['placement'];\n    className?: string;\n}\n\nexport const DropDown = ({ popup, children, showArrowIcon = true, placement, className }: IProps): JSX.Element => {\n    const rootRef = useRef<HTMLDivElement | undefined>(undefined);\n    const popupRef = useRef<HTMLDivElement | undefined>(undefined);\n    const [visible, setIsVisible] = useState(false);\n\n    useEffect(() => {\n        if (visible) {\n            window.addEventListener('click', handleDropdownClose);\n        }\n        return (): void => window.removeEventListener('click', handleDropdownClose);\n    }, [visible]);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleDropdownClose = (e: any): void => {\n        const path = e.path || e.composedPath();\n        for (const item of path) {\n            if (rootRef.current === item) {\n                return;\n            }\n            if (popupRef.current === item) {\n                return;\n            }\n        }\n\n        setIsVisible(false);\n    };\n    return (\n        <div ref={rootRef as unknown as LegacyRef<HTMLDivElement>} className={className}>\n            <AntdDropdown\n                visible={visible}\n                overlay={\n                    <div tw=\"text-base\" ref={popupRef as unknown as LegacyRef<HTMLDivElement>}>\n                        {popup}\n                    </div>\n                }\n                trigger={['click']}\n                placement={placement}\n            >\n                <div tw=\"cursor-pointer\" onClick={(): void => setIsVisible(!visible)}>\n                    {children} {showArrowIcon && <Icon icon={DownOutlined} />}\n                </div>\n            </AntdDropdown>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}