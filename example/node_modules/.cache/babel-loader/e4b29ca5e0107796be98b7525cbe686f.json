{"ast":null,"code":"import { slicedToArray as _slicedToArray, objectSpread2 as _objectSpread2, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { Input } from '../input/input.component.js';\nimport { useState, useEffect, useCallback } from 'react';\nimport { jsx } from '@emotion/react';\nvar PhoneNumber = function PhoneNumber(props) {\n  var _useState = useState(props.defaultValue || props.value),\n    _useState2 = _slicedToArray(_useState, 2),\n    val = _useState2[0],\n    setVal = _useState2[1];\n  useEffect(function () {\n    if (props.value !== undefined) {\n      setVal(props.value);\n    }\n  }, [props.value]);\n  useEffect(function () {\n    if (props.defaultValue !== undefined) {\n      setVal(props.defaultValue);\n    }\n  }, [props.defaultValue]);\n  var handleChange = useCallback(function (e) {\n    setVal(e.target.value);\n    props.onChange && props.onChange(_objectSpread2(_objectSpread2({}, e), {}, {\n      target: _objectSpread2(_objectSpread2({}, e.target), {}, {\n        value: e.target.value\n      })\n    }));\n  }, [props]);\n  var formatValue = useCallback(function (value) {\n    var first = value !== null && value !== void 0 && value.length ? value[0] : '';\n    var newValue = first === '+' ? first + value.replaceAll(/[^0-9]/g, '') : value.replaceAll(/[^0-9]/g, '');\n    return newValue;\n  }, []);\n  return jsx(Input, _extends({}, props, {\n    type: \"text\",\n    onChange: handleChange,\n    formatValue: formatValue,\n    value: val\n  }));\n};\nexport { PhoneNumber };","map":{"version":3,"sources":["../../../../src/general-ui/phone-number/phone-number.component.tsx"],"names":["PhoneNumber","props","val","setVal","useState","defaultValue","value","_useState2","useEffect","undefined","handleChange","useCallback","e","target","onChange","formatValue","first","length","newValue","replaceAll","___EmotionJSX","Input","type"],"mappings":";;;;IAGaA,WAAW,GAAG,SAAdA,WAAW,CAAIC,KAAgC,EAAkB;EAC1E,IAAsBG,SAAAA,GAAAA,QAAQ,CAACH,KAAK,CAACI,YAAY,IAAIJ,KAAK,CAACK,KAAK,CAACC;IAAAA,UAAAA,GAAAA,cAAAA,CAAAA,SAAAA,EAAAA,CAAAA,CAAAA;IAA1DL,GAAG,GAAA,UAAA,CAAA,CAAA,CAAA;IAAEC,MAAM,GAAA,UAAA,CAAA,CAAA,CAAA;EAClBK,SAAS,CAAC,YAAM;IACZ,IAAIP,KAAK,CAACK,KAAK,KAAKG,SAAS,EAAE;MAC3BN,MAAM,CAACF,KAAK,CAACK,KAAK,CAAC;IACvB;EACJ,CAAC,EAAE,CAACL,KAAK,CAACK,KAAK,CAAC,CAAC;EAEjBE,SAAS,CAAC,YAAM;IACZ,IAAIP,KAAK,CAACI,YAAY,KAAKI,SAAS,EAAE;MAClCN,MAAM,CAACF,KAAK,CAACI,YAAY,CAAC;IAC9B;EACJ,CAAC,EAAE,CAACJ,KAAK,CAACI,YAAY,CAAC,CAAC;EAExB,IAAMK,YAAY,GAAGC,WAAW,CAC5B,UAACC,CAAsC,EAAK;IACxCT,MAAM,CAACS,CAAC,CAACC,MAAM,CAACP,KAAK,CAAC;IACtBL,KAAK,CAACa,QAAQ,IAAIb,KAAK,CAACa,QAAQ,CAAA,cAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EAAMF,CAAC,CAAA,EAAA,CAAA,CAAA,EAAA;MAAEC,MAAM,EAAA,cAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EAAOD,CAAC,CAACC,MAAM,CAAA,EAAA,CAAA,CAAA,EAAA;QAAEP,KAAK,EAAEM,CAAC,CAACC,MAAM,CAACP;MAAK,CAAA;IAAK,CAAA,CAAA,CAAA;EAC9F,CAAC,EACD,CAACL,KAAK,CAAC,CACV;EAED,IAAMc,WAAW,GAAGJ,WAAW,CAAC,UAACL,KAAa,EAAK;IAC/C,IAAMU,KAAK,GAAGV,KAAK,KAAA,IAAA,IAALA,KAAK,KAALA,KAAAA,CAAAA,IAAAA,KAAK,CAAEW,MAAM,GAAGX,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;IAC3C,IAAMY,QAAQ,GAAGF,KAAK,KAAK,GAAG,GAAGA,KAAK,GAAGV,KAAK,CAACa,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,GAAGb,KAAK,CAACa,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC;IAC1G,OAAOD,QAAQ;EAClB,CAAA,EAAE,EAAE,CAAC;EAEN,OAAOE,GAAAA,CAACC,KAAK,EAAA,QAAA,CAAA,CAAA,CAAA,EAAKpB,KAAK,EAAA;IAAEqB,IAAI,EAAC,MAAM;IAACR,QAAQ,EAAEJ,YAAa;IAACK,WAAW,EAAEA,WAAY;IAACT,KAAK,EAAEJ;EAAO,CAAA,CAAA,CAAA;AACzG,CAAA","sourcesContent":["import { IInputProps, Input } from '@common/general-ui/input/input.component';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nexport const PhoneNumber = (props: Omit<IInputProps, 'type'>): JSX.Element => {\n    const [val, setVal] = useState(props.defaultValue || props.value);\n    useEffect(() => {\n        if (props.value !== undefined) {\n            setVal(props.value);\n        }\n    }, [props.value]);\n\n    useEffect(() => {\n        if (props.defaultValue !== undefined) {\n            setVal(props.defaultValue);\n        }\n    }, [props.defaultValue]);\n\n    const handleChange = useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            setVal(e.target.value);\n            props.onChange && props.onChange({ ...e, target: { ...e.target, value: e.target.value } });\n        },\n        [props],\n    );\n\n    const formatValue = useCallback((value: string) => {\n        const first = value?.length ? value[0] : '';\n        const newValue = first === '+' ? first + value.replaceAll(/[^0-9]/g, '') : value.replaceAll(/[^0-9]/g, '');\n        return newValue;\n    }, []);\n\n    return <Input {...props} type=\"text\" onChange={handleChange} formatValue={formatValue} value={val} />;\n};\n"]},"metadata":{},"sourceType":"module"}