{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = generateVariantFunction;\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\nvar _useMemo = require(\"./useMemo\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst classNameParser = (0, _postcssSelectorParser.default)(selectors => {\n  return selectors.first.filter(_ref => {\n    let {\n      type\n    } = _ref;\n    return type === 'class';\n  }).pop().value;\n});\nconst getClassNameFromSelector = (0, _useMemo.useMemo)(selector => classNameParser.transformSync(selector), selector => selector);\nfunction generateVariantFunction(generator) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    options,\n    handler: (container, config) => {\n      const cloned = _postcss.default.root({\n        nodes: container.clone().nodes\n      });\n      container.before(_lodash.default.defaultTo(generator({\n        container: cloned,\n        separator: config.separator,\n        modifySelectors: modifierFunction => {\n          cloned.each(rule => {\n            if (rule.type !== 'rule') {\n              return;\n            }\n            rule.selectors = rule.selectors.map(selector => {\n              return modifierFunction({\n                get className() {\n                  return getClassNameFromSelector(selector);\n                },\n                selector\n              });\n            });\n          });\n          return cloned;\n        }\n      }), cloned).nodes);\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","generateVariantFunction","_lodash","_interopRequireDefault","require","_postcss","_postcssSelectorParser","_useMemo","obj","__esModule","classNameParser","selectors","first","filter","type","pop","getClassNameFromSelector","useMemo","selector","transformSync","generator","options","handler","container","config","cloned","root","nodes","clone","before","defaultTo","separator","modifySelectors","modifierFunction","each","rule","map","className"],"sources":["/home/mgerasika/Documents/git/oddbox/oddbox-frontend-npm-usage-example/node_modules/tailwindcss/lib/util/generateVariantFunction.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = generateVariantFunction;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nvar _useMemo = require(\"./useMemo\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst classNameParser = (0, _postcssSelectorParser.default)(selectors => {\n  return selectors.first.filter(({\n    type\n  }) => type === 'class').pop().value;\n});\nconst getClassNameFromSelector = (0, _useMemo.useMemo)(selector => classNameParser.transformSync(selector), selector => selector);\n\nfunction generateVariantFunction(generator, options = {}) {\n  return {\n    options,\n    handler: (container, config) => {\n      const cloned = _postcss.default.root({\n        nodes: container.clone().nodes\n      });\n\n      container.before(_lodash.default.defaultTo(generator({\n        container: cloned,\n        separator: config.separator,\n        modifySelectors: modifierFunction => {\n          cloned.each(rule => {\n            if (rule.type !== 'rule') {\n              return;\n            }\n\n            rule.selectors = rule.selectors.map(selector => {\n              return modifierFunction({\n                get className() {\n                  return getClassNameFromSelector(selector);\n                },\n\n                selector\n              });\n            });\n          });\n          return cloned;\n        }\n      }), cloned).nodes);\n    }\n  };\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,uBAAuB;AAEzC,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEvD,IAAIC,QAAQ,GAAGF,sBAAsB,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;AAEzD,IAAIE,sBAAsB,GAAGH,sBAAsB,CAACC,OAAO,CAAC,yBAAyB,CAAC,CAAC;AAEvF,IAAIG,QAAQ,GAAGH,OAAO,CAAC,WAAW,CAAC;AAEnC,SAASD,sBAAsB,CAACK,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAER,OAAO,EAAEQ;EAAI,CAAC;AAAE;AAE9F,MAAME,eAAe,GAAG,CAAC,CAAC,EAAEJ,sBAAsB,CAACN,OAAO,EAAEW,SAAS,IAAI;EACvE,OAAOA,SAAS,CAACC,KAAK,CAACC,MAAM,CAAC;IAAA,IAAC;MAC7BC;IACF,CAAC;IAAA,OAAKA,IAAI,KAAK,OAAO;EAAA,EAAC,CAACC,GAAG,EAAE,CAAChB,KAAK;AACrC,CAAC,CAAC;AACF,MAAMiB,wBAAwB,GAAG,CAAC,CAAC,EAAET,QAAQ,CAACU,OAAO,EAAEC,QAAQ,IAAIR,eAAe,CAACS,aAAa,CAACD,QAAQ,CAAC,EAAEA,QAAQ,IAAIA,QAAQ,CAAC;AAEjI,SAASjB,uBAAuB,CAACmB,SAAS,EAAgB;EAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;EACtD,OAAO;IACLA,OAAO;IACPC,OAAO,EAAE,CAACC,SAAS,EAAEC,MAAM,KAAK;MAC9B,MAAMC,MAAM,GAAGpB,QAAQ,CAACL,OAAO,CAAC0B,IAAI,CAAC;QACnCC,KAAK,EAAEJ,SAAS,CAACK,KAAK,EAAE,CAACD;MAC3B,CAAC,CAAC;MAEFJ,SAAS,CAACM,MAAM,CAAC3B,OAAO,CAACF,OAAO,CAAC8B,SAAS,CAACV,SAAS,CAAC;QACnDG,SAAS,EAAEE,MAAM;QACjBM,SAAS,EAAEP,MAAM,CAACO,SAAS;QAC3BC,eAAe,EAAEC,gBAAgB,IAAI;UACnCR,MAAM,CAACS,IAAI,CAACC,IAAI,IAAI;YAClB,IAAIA,IAAI,CAACrB,IAAI,KAAK,MAAM,EAAE;cACxB;YACF;YAEAqB,IAAI,CAACxB,SAAS,GAAGwB,IAAI,CAACxB,SAAS,CAACyB,GAAG,CAAClB,QAAQ,IAAI;cAC9C,OAAOe,gBAAgB,CAAC;gBACtB,IAAII,SAAS,GAAG;kBACd,OAAOrB,wBAAwB,CAACE,QAAQ,CAAC;gBAC3C,CAAC;gBAEDA;cACF,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ,CAAC,CAAC;UACF,OAAOO,MAAM;QACf;MACF,CAAC,CAAC,EAAEA,MAAM,CAAC,CAACE,KAAK,CAAC;IACpB;EACF,CAAC;AACH"},"metadata":{},"sourceType":"script"}