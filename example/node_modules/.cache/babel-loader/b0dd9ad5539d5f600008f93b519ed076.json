{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AddTagsToStreamInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1AddTagsToStreamCommand, serializeAws_json1_1AddTagsToStreamCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Adds or updates tags for the specified Kinesis data stream. Each time you invoke\n *             this operation, you can specify up to 10 tags. If you want to add more than 10 tags to\n *             your stream, you can invoke this operation multiple times. In total, each stream can\n *             have up to 50 tags.</p>\n *         <p>If tags have already been assigned to the stream, <code>AddTagsToStream</code>\n *             overwrites any existing tags that correspond to the specified tag keys.</p>\n *         <p>\n *             <a>AddTagsToStream</a> has a limit of five transactions per second per\n *             account.</p>\n */\nvar AddTagsToStreamCommand = /** @class */function (_super) {\n  __extends(AddTagsToStreamCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function AddTagsToStreamCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  AddTagsToStreamCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"AddTagsToStreamCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: AddTagsToStreamInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  AddTagsToStreamCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1AddTagsToStreamCommand(input, context);\n  };\n  AddTagsToStreamCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1AddTagsToStreamCommand(output, context);\n  };\n  return AddTagsToStreamCommand;\n}($Command);\nexport { AddTagsToStreamCommand };","map":{"version":3,"sources":["../../../commands/AddTagsToStreamCommand.ts"],"names":[],"mappings":";AACA,SAAS,oBAAoB,QAAQ,oBAAoB;AACzD,SACE,4CAA4C,EAC5C,0CAA0C,QACrC,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;AAUG;AACH,IAAA,sBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA4C,SAAA,CAAA,sBAAA,EAAA,MAAA,CAAA;EAK1C;EACA;EAEA,SAAA,sBAAA,CAAqB,KAAkC,EAAA;IAAvD,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,sBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA0C,EAC1C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,eAAe;IAClC,IAAM,WAAW,GAAG,wBAAwB;IAC5C,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,oBAAoB,CAAC,kBAAkB;MAChE,wBAAwB,EAAE,kCAAC,MAAW,EAAA;QAAK,OAAA,MAAM;MAAN;KAC5C;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,sBAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAAkC,EAAE,OAAuB,EAAA;IAC3E,OAAO,0CAA0C,CAAC,KAAK,EAAE,OAAO,CAAC;EACnE,CAAC;EAEO,sBAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,4CAA4C,CAAC,MAAM,EAAE,OAAO,CAAC;EACtE,CAAC;EAIH,OAAA,sBAAC;AAAD,CAAC,CAtD2C,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { AddTagsToStreamInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1AddTagsToStreamCommand, serializeAws_json1_1AddTagsToStreamCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Adds or updates tags for the specified Kinesis data stream. Each time you invoke\n *             this operation, you can specify up to 10 tags. If you want to add more than 10 tags to\n *             your stream, you can invoke this operation multiple times. In total, each stream can\n *             have up to 50 tags.</p>\n *         <p>If tags have already been assigned to the stream, <code>AddTagsToStream</code>\n *             overwrites any existing tags that correspond to the specified tag keys.</p>\n *         <p>\n *             <a>AddTagsToStream</a> has a limit of five transactions per second per\n *             account.</p>\n */\nvar AddTagsToStreamCommand = /** @class */ (function (_super) {\n    __extends(AddTagsToStreamCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function AddTagsToStreamCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    AddTagsToStreamCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"KinesisClient\";\n        var commandName = \"AddTagsToStreamCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: AddTagsToStreamInput.filterSensitiveLog,\n            outputFilterSensitiveLog: function (output) { return output; },\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    AddTagsToStreamCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1AddTagsToStreamCommand(input, context);\n    };\n    AddTagsToStreamCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1AddTagsToStreamCommand(output, context);\n    };\n    return AddTagsToStreamCommand;\n}($Command));\nexport { AddTagsToStreamCommand };\n//# sourceMappingURL=AddTagsToStreamCommand.js.map"]},"metadata":{},"sourceType":"module"}