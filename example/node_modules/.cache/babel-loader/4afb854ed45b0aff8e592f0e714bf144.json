{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartSegmentDetectionRequest, StartSegmentDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartSegmentDetectionCommand, serializeAws_json1_1StartSegmentDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts asynchronous detection of segment detection in a stored video.</p>\n *          <p>Amazon Rekognition Video can detect segments in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name and\n *       the filename of the video. <code>StartSegmentDetection</code> returns a job identifier (<code>JobId</code>) which you use to get\n *       the results of the operation. When segment detection is finished, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic\n *       that you specify in <code>NotificationChannel</code>.</p>\n *          <p>You can use the <code>Filters</code> (<a>StartSegmentDetectionFilters</a>)\n *       input parameter to specify the minimum detection confidence returned in the response.\n *       Within <code>Filters</code>, use <code>ShotFilter</code> (<a>StartShotDetectionFilter</a>)\n *       to filter detected shots. Use  <code>TechnicalCueFilter</code> (<a>StartTechnicalCueDetectionFilter</a>)\n *       to filter technical cues. </p>\n *          <p>To get the results of the segment detection operation, first check that the status value published to the Amazon SNS\n *       topic is <code>SUCCEEDED</code>. if so, call <a>GetSegmentDetection</a> and pass the job identifier (<code>JobId</code>)\n *       from the initial call to <code>StartSegmentDetection</code>. </p>\n *\n *\n *          <p>For more information, see Detecting Video Segments in Stored Video in the Amazon Rekognition Developer Guide.</p>\n */\nvar StartSegmentDetectionCommand = /** @class */function (_super) {\n  __extends(StartSegmentDetectionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function StartSegmentDetectionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  StartSegmentDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"StartSegmentDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartSegmentDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartSegmentDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  StartSegmentDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartSegmentDetectionCommand(input, context);\n  };\n  StartSegmentDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartSegmentDetectionCommand(output, context);\n  };\n  return StartSegmentDetectionCommand;\n}($Command);\nexport { StartSegmentDetectionCommand };","map":{"version":3,"sources":["../../../commands/StartSegmentDetectionCommand.ts"],"names":[],"mappings":";AACA,SAAS,4BAA4B,EAAE,6BAA6B,QAAQ,oBAAoB;AAChG,SACE,kDAAkD,EAClD,gDAAgD,QAC3C,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;AAiBG;AACH,IAAA,4BAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAkD,SAAA,CAAA,4BAAA,EAAA,MAAA,CAAA;EAKhD;EACA;EAEA,SAAA,4BAAA,CAAqB,KAAwC,EAAA;IAA7D,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,4BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA8C,EAC9C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,mBAAmB;IACtC,IAAM,WAAW,GAAG,8BAA8B;IAClD,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,4BAA4B,CAAC,kBAAkB;MACxE,wBAAwB,EAAE,6BAA6B,CAAC;KACzD;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,4BAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAAwC,EAAE,OAAuB,EAAA;IACjF,OAAO,gDAAgD,CAAC,KAAK,EAAE,OAAO,CAAC;EACzE,CAAC;EAEO,4BAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,kDAAkD,CAAC,MAAM,EAAE,OAAO,CAAC;EAC5E,CAAC;EAIH,OAAA,4BAAC;AAAD,CAAC,CAtDiD,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { StartSegmentDetectionRequest, StartSegmentDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartSegmentDetectionCommand, serializeAws_json1_1StartSegmentDetectionCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts asynchronous detection of segment detection in a stored video.</p>\n *          <p>Amazon Rekognition Video can detect segments in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name and\n *       the filename of the video. <code>StartSegmentDetection</code> returns a job identifier (<code>JobId</code>) which you use to get\n *       the results of the operation. When segment detection is finished, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic\n *       that you specify in <code>NotificationChannel</code>.</p>\n *          <p>You can use the <code>Filters</code> (<a>StartSegmentDetectionFilters</a>)\n *       input parameter to specify the minimum detection confidence returned in the response.\n *       Within <code>Filters</code>, use <code>ShotFilter</code> (<a>StartShotDetectionFilter</a>)\n *       to filter detected shots. Use  <code>TechnicalCueFilter</code> (<a>StartTechnicalCueDetectionFilter</a>)\n *       to filter technical cues. </p>\n *          <p>To get the results of the segment detection operation, first check that the status value published to the Amazon SNS\n *       topic is <code>SUCCEEDED</code>. if so, call <a>GetSegmentDetection</a> and pass the job identifier (<code>JobId</code>)\n *       from the initial call to <code>StartSegmentDetection</code>. </p>\n *\n *\n *          <p>For more information, see Detecting Video Segments in Stored Video in the Amazon Rekognition Developer Guide.</p>\n */\nvar StartSegmentDetectionCommand = /** @class */ (function (_super) {\n    __extends(StartSegmentDetectionCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function StartSegmentDetectionCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    StartSegmentDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"StartSegmentDetectionCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: StartSegmentDetectionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: StartSegmentDetectionResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    StartSegmentDetectionCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1StartSegmentDetectionCommand(input, context);\n    };\n    StartSegmentDetectionCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1StartSegmentDetectionCommand(output, context);\n    };\n    return StartSegmentDetectionCommand;\n}($Command));\nexport { StartSegmentDetectionCommand };\n//# sourceMappingURL=StartSegmentDetectionCommand.js.map"]},"metadata":{},"sourceType":"module"}