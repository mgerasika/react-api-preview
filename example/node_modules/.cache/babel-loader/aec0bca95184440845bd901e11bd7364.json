{"ast":null,"code":"var _excluded = [\"status\"];\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { css } from '@emotion/react';\nimport { CheckCircleOutlined, InfoCircleOutlined, CloseCircleOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\nimport { MQ } from '../../constants/mq.constant.js';\nimport { Icon } from '../icon/icon.component.js';\nimport { Tag } from 'antd';\nimport React from 'react';\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n  return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\nvar ICONS_MAP = {\n  empty: /*#__PURE__*/React.createElement(React.Fragment, null),\n  success: /*#__PURE__*/React.createElement(Icon, {\n    icon: CheckCircleOutlined\n  }),\n  info: /*#__PURE__*/React.createElement(Icon, {\n    icon: InfoCircleOutlined\n  }),\n  error: /*#__PURE__*/React.createElement(Icon, {\n    icon: CloseCircleOutlined\n  }),\n  default: /*#__PURE__*/React.createElement(Icon, {\n    icon: InfoCircleOutlined\n  }),\n  warning: /*#__PURE__*/React.createElement(Icon, {\n    icon: ExclamationCircleOutlined\n  })\n};\n// const TITLE_MAP: Record<TStatuses, ReactNode> = {\n//     empty: '',\n//     success: t('Success'),\n//     info: t('Info'),\n//     error: t('Error'),\n//     default: t('Default'),\n//     warning: t('Warning'),\n// };\nvar COLOR_MAP = {\n  empty: 'black',\n  success: 'green',\n  info: 'blue',\n  error: 'red',\n  default: 'black',\n  warning: '#cc8500'\n};\n\n// const TEXT_COLOR: Record<TStatuses, TagProps['color']> = {\n//     empty: 'black',\n//     success: 'white',\n//     info: 'white',\n//     error: 'white',\n//     default: 'black',\n//     warning: 'white',\n// };\n\nvar LIGHT_COLOR_MAP = {\n  empty: 'default',\n  success: '#c4dcc8',\n  info: '#bebcdc',\n  error: '#ff8080',\n  default: '#d9d9d9',\n  warning: '#f8dba0'\n};\nvar _ref = process.env.NODE_ENV === \"production\" ? {\n  name: \"1hizjpa\",\n  styles: \"white-space:normal\"\n} : {\n  name: \"1rbm8gy-StatusTag\",\n  styles: \"white-space:normal;label:StatusTag;\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar StatusTag = function StatusTag(_ref2) {\n  var _ref2$status = _ref2.status,\n    status = _ref2$status === void 0 ? 'default' : _ref2$status,\n    rest = _objectWithoutProperties(_ref2, _excluded);\n  var icon = status && ICONS_MAP[status] ? ICONS_MAP[status] : undefined;\n  return /*#__PURE__*/React.createElement(Tag\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  , _extends({\n    css: [styles.root(status, LIGHT_COLOR_MAP[status]), \"white-space:normal;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:StatusTag;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"],\n    icon: icon\n  }, rest, {\n    color: COLOR_MAP[status],\n    className: rest.className\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    css: _ref\n  }, \" \", rest.children));\n};\nvar styles = {\n  root: function root(status, color) {\n    return [/*#__PURE__*/\n    /*#__PURE__*/\n    /*#__PURE__*/\n    css(\"margin:0;display:flex;border-width:1px;font-size:12px;padding:0.3rem;letter-spacing:1px;font-weight:200;background-color:\", color, \"!important;color:black;width:fit-content;height:min-content;border:0px;border-radius:4px;svg{font-size:18px;}\", MQ.sm, \"{padding:0.5rem 0.75rem;}\", MQ.md, \"{font-size:14px;padding:0.5rem 1rem;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), status === 'default' && /*#__PURE__*/\n    /*#__PURE__*/\n    /*#__PURE__*/\n    css(process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), status === 'error' && /*#__PURE__*/\n    /*#__PURE__*/\n    /*#__PURE__*/\n    css(process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), status === 'info' && /*#__PURE__*/\n    /*#__PURE__*/\n    /*#__PURE__*/\n    css(process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), status === 'success' && /*#__PURE__*/\n    /*#__PURE__*/\n    /*#__PURE__*/\n    css(process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), status === 'warning' && /*#__PURE__*/\n    /*#__PURE__*/\n    /*#__PURE__*/\n    css(process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\", process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\")];\n  }\n};\nexport { StatusTag };","map":{"version":3,"sources":["../../../../src/general-ui/tag/status-tag.component.tsx"],"names":["ICONS_MAP","empty","success","Icon","icon","CheckCircleOutlined","info","InfoCircleOutlined","error","CloseCircleOutlined","default","warning","ExclamationCircleOutlined","COLOR_MAP","LIGHT_COLOR_MAP","StatusTag","status","rest","undefined","css","styles","root","color","className","children","MQ","sm","md","process"],"mappings":"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","sourcesContent":["// import { CheckCircleOutlined, CloseCircleOutlined, ExclamationCircleOutlined, InfoCircleOutlined } from '@ant-design/icons';\n// import { Icon } from '@common/general-ui/icon/icon.component';\n// import { SerializedStyles } from '@emotion/react';\n// import { Tag as AntdTag, TagProps } from 'antd';\n// import { PresetStatusColorType } from 'antd/lib/_util/colors';\n// import React, { ReactNode } from 'react';\n// import { css } from 'twin.macro';\n\n// export type TStatuses = 'empty' | 'default' | 'error' | 'warning' | 'info' | 'success';\n\n// interface IProps extends Omit<TagProps, 'color'> {\n//     status: TStatuses | undefined;\n//     children: ReactNode;\n// }\n\n// const ICONS_MAP: Record<TStatuses, ReactNode> = {\n//     empty: <></>,\n//     success: <Icon icon={CheckCircleOutlined} />,\n//     info: <Icon icon={InfoCircleOutlined} />,\n//     error: <Icon icon={CloseCircleOutlined} />,\n//     default: <Icon icon={InfoCircleOutlined} />,\n//     warning: <Icon icon={ExclamationCircleOutlined} />,\n// };\n// // const TITLE_MAP: Record<TStatuses, ReactNode> = {\n// //     empty: '',\n// //     success: t('Success'),\n// //     info: t('Info'),\n// //     error: t('Error'),\n// //     default: t('Default'),\n// //     warning: t('Warning'),\n// // };\n// const COLOR_MAP: Record<TStatuses, TagProps['color']> = {\n//     empty: 'default',\n//     success: 'green',\n//     info: 'blue',\n//     error: 'red',\n//     default: 'default',\n//     warning: 'orange',\n// };\n// export const StatusTag = ({ status = 'default', ...rest }: IProps): JSX.Element => {\n//     const icon =\n//         status && ICONS_MAP[status as PresetStatusColorType] ? ICONS_MAP[status as PresetStatusColorType] : undefined;\n//     return (\n//         <AntdTag\n//             css={styles.root(status, COLOR_MAP[status] as string)}\n//             icon={icon}\n//             {...rest}\n//             color={COLOR_MAP[status]}\n//             tw=\"whitespace-normal \"\n//         >\n//             <div tw=\"whitespace-normal\"> {rest.children}</div>\n//         </AntdTag>\n//     );\n// };\n\n// const styles = {\n//     root: (status: TStatuses, color: string): (SerializedStyles | boolean)[] => [\n//         css`\n//             margin: 0;\n//             display: flex;\n//             border-width: 2px;\n//             background-color: white;\n//             font-size: 12px;\n//             padding: 2px 4px 0px 4px;\n//             letter-spacing: 1px;\n//             font-weight: 200;\n//             width: fit-content;\n//             height: min-content;\n//             border: 1px solid ${color};\n//             border-radius: 4px;\n//             svg {\n//                 font-size: 18px;\n//             }\n//         `,\n//         status === 'default' && css``,\n//         status === 'error' && css``,\n//         status === 'info' && css``,\n//         status === 'success' && css``,\n//         status === 'warning' && css``,\n//     ],\n// };\n\nimport { CheckCircleOutlined, CloseCircleOutlined, ExclamationCircleOutlined, InfoCircleOutlined } from '@ant-design/icons';\nimport { MQ } from '@common/constants/mq.constant';\nimport { Icon } from '@common/general-ui/icon/icon.component';\nimport { SerializedStyles } from '@emotion/react';\nimport { Tag as AntdTag, TagProps } from 'antd';\nimport { PresetStatusColorType } from 'antd/lib/_util/colors';\nimport React, { ReactNode } from 'react';\nimport { css } from 'twin.macro';\n\nexport type TStatuses = 'empty' | 'default' | 'error' | 'warning' | 'info' | 'success';\n\ninterface IProps extends Omit<TagProps, 'color'> {\n    status: TStatuses | undefined;\n    children: ReactNode;\n    className?: string;\n}\n\nconst ICONS_MAP: Record<TStatuses, ReactNode> = {\n    empty: <></>,\n    success: <Icon icon={CheckCircleOutlined} />,\n    info: <Icon icon={InfoCircleOutlined} />,\n    error: <Icon icon={CloseCircleOutlined} />,\n    default: <Icon icon={InfoCircleOutlined} />,\n    warning: <Icon icon={ExclamationCircleOutlined} />,\n};\n// const TITLE_MAP: Record<TStatuses, ReactNode> = {\n//     empty: '',\n//     success: t('Success'),\n//     info: t('Info'),\n//     error: t('Error'),\n//     default: t('Default'),\n//     warning: t('Warning'),\n// };\nconst COLOR_MAP: Record<TStatuses, TagProps['color']> = {\n    empty: 'black',\n    success: 'green',\n    info: 'blue',\n    error: 'red',\n    default: 'black',\n    warning: '#cc8500',\n};\n\n// const TEXT_COLOR: Record<TStatuses, TagProps['color']> = {\n//     empty: 'black',\n//     success: 'white',\n//     info: 'white',\n//     error: 'white',\n//     default: 'black',\n//     warning: 'white',\n// };\n\nconst LIGHT_COLOR_MAP: Record<TStatuses, TagProps['color']> = {\n    empty: 'default',\n    success: '#c4dcc8',\n    info: '#bebcdc',\n    error: '#ff8080',\n    default: '#d9d9d9',\n    warning: '#f8dba0',\n};\n\nexport const StatusTag = ({ status = 'default', ...rest }: IProps): JSX.Element => {\n    const icon =\n        status && ICONS_MAP[status as PresetStatusColorType] ? ICONS_MAP[status as PresetStatusColorType] : undefined;\n    return (\n        <AntdTag\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            css={styles.root(status, LIGHT_COLOR_MAP[status] as string) as any}\n            icon={icon}\n            {...rest}\n            color={COLOR_MAP[status]}\n            tw=\"whitespace-normal \"\n            className={rest.className}\n        >\n            <div tw=\"whitespace-normal\"> {rest.children}</div>\n        </AntdTag>\n    );\n};\n\nconst styles = {\n    root: (status: TStatuses, color: string): (SerializedStyles | boolean)[] => [\n        css`\n            margin: 0;\n            display: flex;\n            border-width: 1px;\n            font-size: 12px;\n            padding: 0.3rem;\n            letter-spacing: 1px;\n            font-weight: 200;\n            background-color: ${color}!important;\n            color: black;\n            width: fit-content;\n            height: min-content;\n            border: 0px;\n            border-radius: 4px;\n            svg {\n                font-size: 18px;\n            }\n\n            ${MQ.sm} {\n                padding: 0.5rem 0.75rem;\n            }\n\n            ${MQ.md} {\n                font-size: 14px;\n                padding: 0.5rem 1rem;\n            }\n        `,\n        status === 'default' && css``,\n        status === 'error' && css``,\n        status === 'info' && css``,\n        status === 'success' && css``,\n        status === 'warning' && css``,\n    ],\n};\n"]},"metadata":{},"sourceType":"module"}