{"ast":null,"code":"import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { EFormControl } from '@common/enums/form-control.enum';\nimport { FormCheckboxGroup } from '@common/general-ui/checkbox-group/form-checkbox-group.component';\nimport { FormCheckbox } from '@common/general-ui/checkbox/form-checkbox.component';\nimport { FormDatePicker } from '@common/general-ui/date-picker/form-date-picker.component';\nimport { FormInputLoqate } from '@common/general-ui/input-loqate/form-input-loqate.component';\nimport { FormInput } from '@common/general-ui/input/form-input.component';\nimport { FormMultiSelect } from '@common/general-ui/multi-select/form-multi-select.component';\nimport { FormORSwitch } from '@common/general-ui/or-switch/form-or-switch.component';\nimport { FormPassword } from '@common/general-ui/password/form-password.component';\nimport { FormPhoneNumber } from '@common/general-ui/phone-number/form-phone-number.component';\nimport { FormRadioGroup } from '@common/general-ui/radio-group/form-radio-group.component';\nimport { FormRangePicker } from '@common/general-ui/range-picker/form-range-picker.component';\nimport { FormSelect } from '@common/general-ui/select/form-select.component';\nimport { FormSwitch } from '@common/general-ui/switch/form-switch.component';\nimport { FormTextArea } from '@common/general-ui/textarea/form-textarea.component';\nimport { FormTimePicker } from '@common/general-ui/time-picker/form-time-picker.component';\nimport { FormTreeSelect } from '@common/general-ui/tree-select/form-tree-select.component';\nimport { FormUploadImage } from '@common/general-ui/upload-image/form-upload-image.component';\nimport React, { useCallback } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { jsx } from '@emotion/react';\nfunction FormField(props) {\n  const {\n    onFieldChange,\n    onFieldBlur,\n    control,\n    name,\n    className,\n    maxLength,\n    readOnly,\n    ...rest\n  } = props;\n  const {\n    watch\n  } = useFormContext();\n  const value = watch(name);\n  const handleOnBlur = useCallback(() => {\n    onFieldBlur && onFieldBlur(name);\n  }, [name, onFieldBlur]);\n  const handleOnChange = useCallback(() => {\n    onFieldChange && onFieldChange(name, value);\n  }, [name, onFieldChange, value]);\n  const renderContent = () => {\n    switch (control) {\n      case EFormControl.text:\n        return jsx(FormInput, _extends({\n          type: \"text\",\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur,\n          maxLength: maxLength\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.phoneNumber:\n        return jsx(FormPhoneNumber, _extends({\n          type: \"text\",\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.password:\n        return jsx(FormPassword, _extends({\n          type: \"password\",\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.textArea:\n        return jsx(FormTextArea, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur,\n          maxLength: maxLength\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.checkbox:\n        return jsx(FormCheckbox, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.checkboxGroup:\n        return jsx(FormCheckboxGroup, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.switch:\n        return jsx(FormSwitch, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.orSwitch:\n        return jsx(FormORSwitch, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur,\n          childrenRight: \"\",\n          childrenLeft: \"\"\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.numeric:\n        return jsx(FormInput, _extends({\n          className: className,\n          type: \"number\",\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.email:\n        return jsx(FormInput, _extends({\n          className: className,\n          type: \"email\",\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.select:\n        return jsx(FormSelect, _extends({\n          className: className,\n          name: name\n        }, rest, {\n          onChange: handleOnChange,\n          onBlur: handleOnBlur,\n          readOnly: readOnly\n        }));\n      case EFormControl.treeSelect:\n        return jsx(FormTreeSelect, _extends({\n          className: className,\n          name: name\n        }, rest, {\n          onChange: handleOnChange,\n          onBlur: handleOnBlur,\n          readOnly: readOnly\n        }));\n      case EFormControl.multiSelect:\n        return jsx(FormMultiSelect, _extends({\n          className: className,\n          name: name\n        }, rest, {\n          onChange: handleOnChange,\n          onBlur: handleOnBlur,\n          readOnly: readOnly\n        }));\n      case EFormControl.radioGroup:\n        return jsx(FormRadioGroup, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.uploadImage:\n        return jsx(FormUploadImage, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.datePicker:\n        return jsx(FormDatePicker, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.rangePicker:\n        return jsx(FormRangePicker, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.inputLoqate:\n        return jsx(FormInputLoqate, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      case EFormControl.timePicker:\n        return jsx(FormTimePicker, _extends({\n          className: className,\n          name: name,\n          onChange: handleOnChange,\n          onBlur: handleOnBlur\n        }, rest, {\n          readOnly: readOnly\n        }));\n      default:\n        return jsx(\"div\", null, \"not implemented control=\", control);\n    }\n  };\n  return jsx(React.Fragment, null, renderContent());\n}\nexport { FormField };","map":{"version":3,"sources":["../../../../src/general-ui/form-field/form-field.component.tsx"],"names":["FormField","props","onFieldChange","onFieldBlur","control","name","className","maxLength","readOnly","rest","watch","useFormContext","value","handleOnBlur","useCallback","handleOnChange","renderContent","EFormControl","text","___EmotionJSX","phoneNumber","password","textArea","checkbox","checkboxGroup","switch","orSwitch","numeric","email","select","treeSelect","multiSelect","radioGroup","uploadImage","datePicker","rangePicker","inputLoqate","timePicker"],"mappings":"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","sourcesContent":["import { EFormControl } from '@common/enums/form-control.enum';\nimport { FormCheckboxGroup } from '@common/general-ui/checkbox-group/form-checkbox-group.component';\nimport { FormCheckbox } from '@common/general-ui/checkbox/form-checkbox.component';\nimport { FormDatePicker } from '@common/general-ui/date-picker/form-date-picker.component';\nimport { FormInputLoqate } from '@common/general-ui/input-loqate/form-input-loqate.component';\nimport { FormInput as FormInput } from '@common/general-ui/input/form-input.component';\nimport { FormMultiSelect } from '@common/general-ui/multi-select/form-multi-select.component';\nimport { FormORSwitch } from '@common/general-ui/or-switch/form-or-switch.component';\nimport { FormPassword } from '@common/general-ui/password/form-password.component';\nimport { FormPhoneNumber } from '@common/general-ui/phone-number/form-phone-number.component';\nimport { FormRadioGroup } from '@common/general-ui/radio-group/form-radio-group.component';\nimport { IRadioGroupProps } from '@common/general-ui/radio-group/radio-group.component';\nimport { FormRangePicker } from '@common/general-ui/range-picker/form-range-picker.component';\nimport { FormSelect } from '@common/general-ui/select/form-select.component';\nimport { FormSwitch } from '@common/general-ui/switch/form-switch.component';\nimport { FormTextArea } from '@common/general-ui/textarea/form-textarea.component';\nimport { FormTimePicker } from '@common/general-ui/time-picker/form-time-picker.component';\nimport { FormTreeSelect } from '@common/general-ui/tree-select/form-tree-select.component';\nimport { FormUploadImage } from '@common/general-ui/upload-image/form-upload-image.component';\nimport { IFormFieldProps } from '@common/interfaces/form-field-props.interface';\nimport React, { useCallback } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\ntype IProps<TFormValues> = {\n    className?: string;\n    name: keyof TFormValues;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onFieldChange?: (name: keyof TFormValues, value: any) => void;\n    onFieldBlur?: (name: keyof TFormValues) => void;\n    maxLength?: number;\n} & IFormFieldProps<keyof TFormValues>;\n\nexport function FormField<TFormValues>(props: IProps<TFormValues>): JSX.Element {\n    const { onFieldChange, onFieldBlur, control, name, className, maxLength, readOnly, ...rest } = props;\n    const { watch } = useFormContext();\n\n    const value = watch(name as string);\n\n    const handleOnBlur = useCallback(() => {\n        onFieldBlur && onFieldBlur(name);\n    }, [name, onFieldBlur]);\n\n    const handleOnChange = useCallback(() => {\n        onFieldChange && onFieldChange(name, value);\n    }, [name, onFieldChange, value]);\n\n    const renderContent = (): JSX.Element => {\n        switch (control) {\n            case EFormControl.text:\n                return (\n                    <FormInput<TFormValues>\n                        type=\"text\"\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        maxLength={maxLength}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.phoneNumber:\n                return (\n                    <FormPhoneNumber<TFormValues>\n                        type=\"text\"\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.password:\n                return (\n                    <FormPassword<TFormValues>\n                        type=\"password\"\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.textArea:\n                return (\n                    <FormTextArea<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        maxLength={maxLength}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.checkbox:\n                return (\n                    <FormCheckbox<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.checkboxGroup:\n                return (\n                    <FormCheckboxGroup<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.switch:\n                return (\n                    <FormSwitch<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.orSwitch:\n                return (\n                    <FormORSwitch<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        childrenRight=\"\"\n                        childrenLeft=\"\"\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.numeric:\n                return (\n                    <FormInput<TFormValues>\n                        className={className}\n                        type=\"number\"\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.email:\n                return (\n                    <FormInput<TFormValues>\n                        className={className}\n                        type=\"email\"\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.select:\n                return (\n                    <FormSelect<TFormValues>\n                        className={className}\n                        name={name}\n                        {...rest}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.treeSelect:\n                return (\n                    <FormTreeSelect<TFormValues>\n                        className={className}\n                        name={name}\n                        {...rest}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.multiSelect:\n                return (\n                    <FormMultiSelect<TFormValues>\n                        className={className}\n                        name={name}\n                        {...rest}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.radioGroup:\n                return (\n                    <FormRadioGroup<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...(rest as unknown as Omit<IRadioGroupProps<TFormValues>, 'name'>)}\n                        readOnly={readOnly}\n                    />\n                );\n\n            case EFormControl.uploadImage:\n                return (\n                    <FormUploadImage<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n\n            case EFormControl.datePicker:\n                return (\n                    <FormDatePicker<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n\n            case EFormControl.rangePicker:\n                return (\n                    <FormRangePicker<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n\n            case EFormControl.inputLoqate:\n                return (\n                    <FormInputLoqate<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n            case EFormControl.timePicker:\n                return (\n                    <FormTimePicker<TFormValues>\n                        className={className}\n                        name={name}\n                        onChange={handleOnChange}\n                        onBlur={handleOnBlur}\n                        {...rest}\n                        readOnly={readOnly}\n                    />\n                );\n\n            default:\n                return <div>not implemented control={control}</div>;\n        }\n    };\n\n    return <>{renderContent()}</>;\n}\n"]},"metadata":{},"sourceType":"module"}