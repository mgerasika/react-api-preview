{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { ConsoleLogger as Logger, ClientDevice, Credentials, Signer, JS, Hub, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { PinpointClient, PutEventsCommand, UpdateEndpointCommand } from '@aws-sdk/client-pinpoint';\nimport Cache from '@aws-amplify/cache';\nimport { v1 as uuid } from 'uuid';\nimport EventsBuffer from './EventBuffer';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchAnalyticsEvent = function dispatchAnalyticsEvent(event, data) {\n  Hub.dispatch('analytics', {\n    event: event,\n    data: data\n  }, 'Analytics', AMPLIFY_SYMBOL);\n};\nvar logger = new Logger('AWSPinpointProvider');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar FORBIDDEN_CODE = 403;\nvar MOBILE_SERVICE_NAME = 'mobiletargeting';\nvar EXPIRED_TOKEN_CODE = 'ExpiredTokenException';\nvar UPDATE_ENDPOINT = '_update_endpoint';\nvar SESSION_START = '_session.start';\nvar SESSION_STOP = '_session.stop';\nvar BEACON_SUPPORTED = typeof navigator !== 'undefined' && navigator && typeof navigator.sendBeacon === 'function';\n// events buffer\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar RESEND_LIMIT = 5;\n// params: { event: {name: , .... }, timeStamp, config, resendLimits }\nvar AWSPinpointProvider = /** @class */function () {\n  function AWSPinpointProvider(config) {\n    this._endpointGenerating = true;\n    this._endpointUpdateInProgress = false;\n    this._buffer = null;\n    this._endpointBuffer = [];\n    this._config = config ? config : {};\n    this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n    this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n    this._clientInfo = ClientDevice.clientInfo();\n  }\n  /**\n   * get the category of the plugin\n   */\n  AWSPinpointProvider.prototype.getCategory = function () {\n    return AWSPinpointProvider.category;\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSPinpointProvider.prototype.getProviderName = function () {\n    return AWSPinpointProvider.providerName;\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n  AWSPinpointProvider.prototype.configure = function (config) {\n    var _this = this;\n    logger.debug('configure Analytics', config);\n    var conf = config || {};\n    this._config = Object.assign({}, this._config, conf);\n    // If autoSessionRecord is enabled, we need to wait for the endpoint to be\n    // updated before sending any events. See `sendEvents` in `Analytics.ts`\n    this._endpointGenerating = !!config['autoSessionRecord'];\n    if (this._config.appId && !this._config.disabled) {\n      if (!this._config.endpointId) {\n        var cacheKey = this.getProviderName() + '_' + this._config.appId;\n        this._getEndpointId(cacheKey).then(function (endpointId) {\n          logger.debug('setting endpoint id from the cache', endpointId);\n          _this._config.endpointId = endpointId;\n          dispatchAnalyticsEvent('pinpointProvider_configured', null);\n        }).catch(function (err) {\n          logger.debug('Failed to generate endpointId', err);\n        });\n      } else {\n        dispatchAnalyticsEvent('pinpointProvider_configured', null);\n      }\n    } else {\n      this._flushBuffer();\n    }\n    return this._config;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n  AWSPinpointProvider.prototype.record = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, timestamp;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('_public record', params);\n            return [4 /*yield*/, this._getCredentials()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials || !this._config.appId || !this._config.region) {\n              logger.debug('cannot send events without credentials, applicationId or region');\n              return [2 /*return*/, handlers.reject(new Error('No credentials, applicationId or region'))];\n            }\n            this._initClients(credentials);\n            timestamp = new Date().getTime();\n            // attach the session and eventId\n            this._generateSession(params);\n            params.event.eventId = uuid();\n            Object.assign(params, {\n              timestamp: timestamp,\n              config: this._config\n            });\n            if (params.event.immediate) {\n              return [2 /*return*/, this._send(params, handlers)];\n            } else {\n              this._putToBuffer(params, handlers);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._sendEndpointUpdate = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var next;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._endpointUpdateInProgress) {\n              this._endpointBuffer.push(endpointObject);\n              return [2 /*return*/];\n            }\n\n            this._endpointUpdateInProgress = true;\n            return [4 /*yield*/, this._updateEndpoint(endpointObject)];\n          case 1:\n            _a.sent();\n            next = this._endpointBuffer.shift();\n            this._endpointUpdateInProgress = false;\n            next && this._sendEndpointUpdate(next);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   * @param params - params for event recording\n   * Put events into buffer\n   */\n  AWSPinpointProvider.prototype._putToBuffer = function (params, handlers) {\n    if (params.event.name === UPDATE_ENDPOINT) {\n      this._sendEndpointUpdate({\n        params: params,\n        handlers: handlers\n      });\n      return;\n    }\n    this._buffer && this._buffer.push({\n      params: params,\n      handlers: handlers\n    });\n  };\n  AWSPinpointProvider.prototype._generateSession = function (params) {\n    this._sessionId = this._sessionId || uuid();\n    var event = params.event;\n    switch (event.name) {\n      case SESSION_START:\n        // refresh the session id and session start time\n        this._sessionStartTimestamp = new Date().getTime();\n        this._sessionId = uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n        break;\n      case SESSION_STOP:\n        var stopTimestamp = new Date().getTime();\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          Duration: stopTimestamp - this._sessionStartTimestamp,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n          StopTimestamp: new Date(stopTimestamp).toISOString()\n        };\n        this._sessionId = undefined;\n        this._sessionStartTimestamp = undefined;\n        break;\n      default:\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n    }\n  };\n  AWSPinpointProvider.prototype._send = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event;\n      return __generator(this, function (_a) {\n        event = params.event;\n        switch (event.name) {\n          case UPDATE_ENDPOINT:\n            return [2 /*return*/, this._updateEndpoint({\n              params: params,\n              handlers: handlers\n            })];\n          case SESSION_STOP:\n            return [2 /*return*/, this._pinpointSendStopSession(params, handlers)];\n          default:\n            return [2 /*return*/, this._pinpointPutEvents(params, handlers)];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._generateBatchItemContext = function (params) {\n    var _a;\n    var event = params.event,\n      timestamp = params.timestamp,\n      config = params.config;\n    var name = event.name,\n      attributes = event.attributes,\n      metrics = event.metrics,\n      eventId = event.eventId,\n      session = event.session;\n    var appId = config.appId,\n      endpointId = config.endpointId;\n    var endpointContext = {};\n    var eventParams = {\n      ApplicationId: appId,\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    var endpointObj = {};\n    endpointObj.Endpoint = endpointContext;\n    endpointObj.Events = (_a = {}, _a[eventId] = {\n      EventType: name,\n      Timestamp: new Date(timestamp).toISOString(),\n      Attributes: attributes,\n      Metrics: metrics,\n      Session: session\n    }, _a);\n    eventParams.EventsRequest.BatchItem[endpointId] = endpointObj;\n    return eventParams;\n  };\n  AWSPinpointProvider.prototype._pinpointPutEvents = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventId, endpointId, eventParams, command, data, _a, _b, _c, _d, StatusCode, Message, err_1;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            eventId = params.event.eventId, endpointId = params.config.endpointId;\n            eventParams = this._generateBatchItemContext(params);\n            command = new PutEventsCommand(eventParams);\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.pinpointClient.send(command)];\n          case 2:\n            data = _e.sent();\n            _a = data, _b = endpointId, _c = eventId, _d = _a.EventsResponse.Results[_b].EventsItemResponse[_c], StatusCode = _d.StatusCode, Message = _d.Message;\n            if (ACCEPTED_CODES.includes(StatusCode)) {\n              logger.debug('record event success. ', data);\n              return [2 /*return*/, handlers.resolve(data)];\n            } else {\n              if (RETRYABLE_CODES.includes(StatusCode)) {\n                this._retry(params, handlers);\n              } else {\n                logger.error(\"Event \" + eventId + \" is not accepted, the error is \" + Message);\n                return [2 /*return*/, handlers.reject(data)];\n              }\n            }\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _e.sent();\n            this._eventError(err_1);\n            return [2 /*return*/, handlers.reject(err_1)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._pinpointSendStopSession = function (params, handlers) {\n    if (!BEACON_SUPPORTED) {\n      this._pinpointPutEvents(params, handlers);\n      return;\n    }\n    var eventParams = this._generateBatchItemContext(params);\n    var region = this._config.region;\n    var ApplicationId = eventParams.ApplicationId,\n      EventsRequest = eventParams.EventsRequest;\n    var accessInfo = {\n      secret_key: this._config.credentials.secretAccessKey,\n      access_key: this._config.credentials.accessKeyId,\n      session_token: this._config.credentials.sessionToken\n    };\n    var url = \"https://pinpoint.\" + region + \".amazonaws.com/v1/apps/\" + ApplicationId + \"/events/legacy\";\n    var body = JSON.stringify(EventsRequest);\n    var method = 'POST';\n    var request = {\n      url: url,\n      body: body,\n      method: method\n    };\n    var serviceInfo = {\n      region: region,\n      service: MOBILE_SERVICE_NAME\n    };\n    var requestUrl = Signer.signUrl(request, accessInfo, serviceInfo, null);\n    var success = navigator.sendBeacon(requestUrl, body);\n    if (success) {\n      return handlers.resolve('sendBeacon success');\n    }\n    return handlers.reject('sendBeacon failure');\n  };\n  AWSPinpointProvider.prototype._retry = function (params, handlers) {\n    var resendLimit = params.config.resendLimit;\n    // For backward compatibility\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending event \" + params.eventName + \" with \" + params.resendLimit + \" retry times left\");\n      this._pinpointPutEvents(params, handlers);\n    } else {\n      logger.debug(\"retry times used up for event \" + params.eventName);\n    }\n  };\n  AWSPinpointProvider.prototype._updateEndpoint = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, handlers, config, event, appId, endpointId, request, update_params, command, data, err_2, failureData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = endpointObject.params, handlers = endpointObject.handlers;\n            config = params.config, event = params.event;\n            appId = config.appId, endpointId = config.endpointId;\n            request = this._endpointRequest(config, JS.transferKeyToLowerCase(event, [], ['attributes', 'userAttributes', 'Attributes', 'UserAttributes']));\n            update_params = {\n              ApplicationId: appId,\n              EndpointId: endpointId,\n              EndpointRequest: request\n            };\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            command = new UpdateEndpointCommand(update_params);\n            return [4 /*yield*/, this.pinpointClient.send(command)];\n          case 2:\n            data = _a.sent();\n            logger.debug('updateEndpoint success', data);\n            this._endpointGenerating = false;\n            this._resumeBuffer();\n            handlers.resolve(data);\n            return [2 /*return*/];\n          case 3:\n            err_2 = _a.sent();\n            failureData = {\n              err: err_2,\n              update_params: update_params,\n              endpointObject: endpointObject\n            };\n            return [2 /*return*/, this._handleEndpointUpdateFailure(failureData)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._handleEndpointUpdateFailure = function (failureData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err, endpointObject, statusCode, exponential;\n      return __generator(this, function (_a) {\n        err = failureData.err, endpointObject = failureData.endpointObject;\n        statusCode = err.$metadata && err.$metadata.httpStatusCode;\n        logger.debug('updateEndpoint error', err);\n        switch (statusCode) {\n          case FORBIDDEN_CODE:\n            return [2 /*return*/, this._handleEndpointUpdateForbidden(failureData)];\n          default:\n            if (RETRYABLE_CODES.includes(statusCode)) {\n              exponential = true;\n              return [2 /*return*/, this._retryEndpointUpdate(endpointObject, exponential)];\n            }\n            logger.error('updateEndpoint failed', err);\n            endpointObject.handlers.reject(err);\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._handleEndpointUpdateForbidden = function (failureData) {\n    var err = failureData.err,\n      endpointObject = failureData.endpointObject;\n    var code = err.code,\n      retryable = err.retryable;\n    if (code !== EXPIRED_TOKEN_CODE && !retryable) {\n      return endpointObject.handlers.reject(err);\n    }\n    this._retryEndpointUpdate(endpointObject);\n  };\n  AWSPinpointProvider.prototype._retryEndpointUpdate = function (endpointObject, exponential) {\n    if (exponential === void 0) {\n      exponential = false;\n    }\n    logger.debug('_retryEndpointUpdate', endpointObject);\n    var params = endpointObject.params;\n    // TODO: implement retry with exp back off once exp function is available\n    var resendLimit = params.config.resendLimit;\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending endpoint update \" + params.event.eventId + \" with \" + params.resendLimit + \" retry attempts remaining\");\n      // insert at the front of endpointBuffer\n      this._endpointBuffer.length ? this._endpointBuffer.unshift(endpointObject) : this._updateEndpoint(endpointObject);\n      return;\n    }\n    logger.warn(\"resending endpoint update \" + params.event.eventId + \" failed after \" + params.config.resendLimit + \" attempts\");\n    if (this._endpointGenerating) {\n      logger.error('Initial endpoint update failed. ');\n    }\n  };\n  /**\n   * @private\n   * @param config\n   * Init the clients\n   */\n  AWSPinpointProvider.prototype._initClients = function (credentials) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityId, region;\n      return __generator(this, function (_a) {\n        logger.debug('init clients');\n        if (this.pinpointClient && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n          logger.debug('no change for aws credentials, directly return from init');\n          return [2 /*return*/];\n        }\n\n        identityId = this._config.credentials ? this._config.credentials.identityId : null;\n        this._config.credentials = credentials;\n        region = this._config.region;\n        logger.debug('init clients with credentials', credentials);\n        this.pinpointClient = new PinpointClient({\n          region: region,\n          credentials: credentials,\n          customUserAgent: getAmplifyUserAgent()\n        });\n        // TODO: remove this middleware once a long term fix is implemented by aws-sdk-js team.\n        this.pinpointClient.middlewareStack.addRelativeTo(function (next) {\n          return function (args) {\n            delete args.request.headers['amz-sdk-invocation-id'];\n            delete args.request.headers['amz-sdk-request'];\n            return next(args);\n          };\n        }, {\n          step: 'finalizeRequest',\n          relation: 'after',\n          toMiddleware: 'retryMiddleware'\n        });\n        if (this._bufferExists() && identityId === credentials.identityId) {\n          // if the identity has remained the same, pass the updated client to the buffer\n          this._updateBufferClient();\n        } else {\n          // otherwise flush the buffer and instantiate a new one\n          // this will cause the old buffer to send any remaining events\n          // with the old credentials and then stop looping and shortly thereafter get picked up by GC\n          this._initBuffer();\n        }\n        this._customizePinpointClientReq();\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._bufferExists = function () {\n    return this._buffer && this._buffer instanceof EventsBuffer;\n  };\n  AWSPinpointProvider.prototype._initBuffer = function () {\n    if (this._bufferExists()) {\n      this._flushBuffer();\n    }\n    this._buffer = new EventsBuffer(this.pinpointClient, this._config);\n    // if the first endpoint update hasn't yet resolved pause the buffer to\n    // prevent race conditions. It will be resumed as soon as that request succeeds\n    if (this._endpointGenerating) {\n      this._buffer.pause();\n    }\n  };\n  AWSPinpointProvider.prototype._updateBufferClient = function () {\n    if (this._bufferExists()) {\n      this._buffer.updateClient(this.pinpointClient);\n    }\n  };\n  AWSPinpointProvider.prototype._flushBuffer = function () {\n    if (this._bufferExists()) {\n      this._buffer.flush();\n      this._buffer = null;\n    }\n  };\n  AWSPinpointProvider.prototype._resumeBuffer = function () {\n    if (this._bufferExists()) {\n      this._buffer.resume();\n    }\n  };\n  AWSPinpointProvider.prototype._customizePinpointClientReq = function () {\n    // TODO FIXME: Find a middleware to do this with AWS V3 SDK\n    // if (Platform.isReactNative) {\n    // \tthis.pinpointClient.customizeRequests(request => {\n    // \t\trequest.on('build', req => {\n    // \t\t\treq.httpRequest.headers['user-agent'] = Platform.userAgent;\n    // \t\t});\n    // \t});\n    // }\n  };\n  AWSPinpointProvider.prototype._getEndpointId = function (cacheKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointId, ttl, expiration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Cache.getItem(cacheKey)];\n          case 1:\n            endpointId = _a.sent();\n            logger.debug('endpointId from cache', endpointId, 'type', typeof endpointId);\n            if (!endpointId) {\n              endpointId = uuid();\n              ttl = 1000 * 60 * 60 * 24 * 365 * 100;\n              expiration = new Date().getTime() + ttl;\n              Cache.setItem(cacheKey, endpointId, {\n                expires: expiration,\n                priority: 1\n              });\n            }\n            return [2 /*return*/, endpointId];\n        }\n      });\n    });\n  };\n  /**\n   * EndPoint request\n   * @return {Object} - The request of updating endpoint\n   */\n  AWSPinpointProvider.prototype._endpointRequest = function (config, event) {\n    var credentials = config.credentials;\n    var clientInfo = this._clientInfo || {};\n    var clientContext = config.clientContext || {};\n    // for now we have three different ways for default endpoint configurations\n    // clientInfo\n    // clientContext (deprecated)\n    // config.endpoint\n    var defaultEndpointConfig = config.endpoint || {};\n    var demographicByClientInfo = {\n      appVersion: clientInfo.appVersion,\n      make: clientInfo.make,\n      model: clientInfo.model,\n      modelVersion: clientInfo.version,\n      platform: clientInfo.platform\n    };\n    // for backward compatibility\n    var clientId = clientContext.clientId,\n      appTitle = clientContext.appTitle,\n      appVersionName = clientContext.appVersionName,\n      appVersionCode = clientContext.appVersionCode,\n      appPackageName = clientContext.appPackageName,\n      demographicByClientContext = __rest(clientContext, [\"clientId\", \"appTitle\", \"appVersionName\", \"appVersionCode\", \"appPackageName\"]);\n    var channelType = event.address ? clientInfo.platform === 'android' ? 'GCM' : 'APNS' : undefined;\n    var tmp = __assign(__assign(__assign({\n      channelType: channelType,\n      requestId: uuid(),\n      effectiveDate: new Date().toISOString()\n    }, defaultEndpointConfig), event), {\n      attributes: __assign(__assign({}, defaultEndpointConfig.attributes), event.attributes),\n      demographic: __assign(__assign(__assign(__assign({}, demographicByClientInfo), demographicByClientContext), defaultEndpointConfig.demographic), event.demographic),\n      location: __assign(__assign({}, defaultEndpointConfig.location), event.location),\n      metrics: __assign(__assign({}, defaultEndpointConfig.metrics), event.metrics),\n      user: {\n        userId: event.userId || defaultEndpointConfig.userId || credentials.identityId,\n        userAttributes: __assign(__assign({}, defaultEndpointConfig.userAttributes), event.userAttributes)\n      }\n    });\n    // eliminate unnecessary params\n    var userId = tmp.userId,\n      userAttributes = tmp.userAttributes,\n      name = tmp.name,\n      session = tmp.session,\n      eventId = tmp.eventId,\n      immediate = tmp.immediate,\n      ret = __rest(tmp, [\"userId\", \"userAttributes\", \"name\", \"session\", \"eventId\", \"immediate\"]);\n    return JS.transferKeyToUpperCase(ret, [], ['metrics', 'userAttributes', 'attributes']);\n  };\n  AWSPinpointProvider.prototype._eventError = function (err) {\n    logger.error('record event failed.', err);\n    logger.warn(\"Please ensure you have updated your Pinpoint IAM Policy \" + \"with the Action: \\\"mobiletargeting:PutEvents\\\" \" + \"in order to record events\");\n  };\n  AWSPinpointProvider.prototype._getCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, err_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2 /*return*/, null];\n            logger.debug('set credentials for analytics', credentials);\n            return [2 /*return*/, Credentials.shear(credentials)];\n          case 2:\n            err_3 = _a.sent();\n            logger.debug('ensure credentials error', err_3);\n            return [2 /*return*/, null];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.category = 'Analytics';\n  AWSPinpointProvider.providerName = 'AWSPinpoint';\n  return AWSPinpointProvider;\n}();\nexport { AWSPinpointProvider };\n/**\n * @deprecated use named import\n */\nexport default AWSPinpointProvider;","map":{"version":3,"sources":["../../src/Providers/AWSPinpointProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ConsoleLogger as Logger, ClientDevice, Credentials, Signer, JS, Hub, getAmplifyUserAgent, } from '@aws-amplify/core';\nimport { PinpointClient, PutEventsCommand, UpdateEndpointCommand, } from '@aws-sdk/client-pinpoint';\nimport Cache from '@aws-amplify/cache';\nimport { v1 as uuid } from 'uuid';\nimport EventsBuffer from './EventBuffer';\nvar AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\n    typeof Symbol.for === 'function'\n    ? Symbol.for('amplify_default')\n    : '@@amplify_default');\nvar dispatchAnalyticsEvent = function (event, data) {\n    Hub.dispatch('analytics', { event: event, data: data }, 'Analytics', AMPLIFY_SYMBOL);\n};\nvar logger = new Logger('AWSPinpointProvider');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar FORBIDDEN_CODE = 403;\nvar MOBILE_SERVICE_NAME = 'mobiletargeting';\nvar EXPIRED_TOKEN_CODE = 'ExpiredTokenException';\nvar UPDATE_ENDPOINT = '_update_endpoint';\nvar SESSION_START = '_session.start';\nvar SESSION_STOP = '_session.stop';\nvar BEACON_SUPPORTED = typeof navigator !== 'undefined' &&\n    navigator &&\n    typeof navigator.sendBeacon === 'function';\n// events buffer\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar RESEND_LIMIT = 5;\n// params: { event: {name: , .... }, timeStamp, config, resendLimits }\nvar AWSPinpointProvider = /** @class */ (function () {\n    function AWSPinpointProvider(config) {\n        this._endpointGenerating = true;\n        this._endpointUpdateInProgress = false;\n        this._buffer = null;\n        this._endpointBuffer = [];\n        this._config = config ? config : {};\n        this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n        this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n        this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n        this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n        this._clientInfo = ClientDevice.clientInfo();\n    }\n    /**\n     * get the category of the plugin\n     */\n    AWSPinpointProvider.prototype.getCategory = function () {\n        return AWSPinpointProvider.category;\n    };\n    /**\n     * get provider name of the plugin\n     */\n    AWSPinpointProvider.prototype.getProviderName = function () {\n        return AWSPinpointProvider.providerName;\n    };\n    /**\n     * configure the plugin\n     * @param {Object} config - configuration\n     */\n    AWSPinpointProvider.prototype.configure = function (config) {\n        var _this = this;\n        logger.debug('configure Analytics', config);\n        var conf = config || {};\n        this._config = Object.assign({}, this._config, conf);\n        // If autoSessionRecord is enabled, we need to wait for the endpoint to be\n        // updated before sending any events. See `sendEvents` in `Analytics.ts`\n        this._endpointGenerating = !!config['autoSessionRecord'];\n        if (this._config.appId && !this._config.disabled) {\n            if (!this._config.endpointId) {\n                var cacheKey = this.getProviderName() + '_' + this._config.appId;\n                this._getEndpointId(cacheKey)\n                    .then(function (endpointId) {\n                    logger.debug('setting endpoint id from the cache', endpointId);\n                    _this._config.endpointId = endpointId;\n                    dispatchAnalyticsEvent('pinpointProvider_configured', null);\n                })\n                    .catch(function (err) {\n                    logger.debug('Failed to generate endpointId', err);\n                });\n            }\n            else {\n                dispatchAnalyticsEvent('pinpointProvider_configured', null);\n            }\n        }\n        else {\n            this._flushBuffer();\n        }\n        return this._config;\n    };\n    /**\n     * record an event\n     * @param {Object} params - the params of an event\n     */\n    AWSPinpointProvider.prototype.record = function (params, handlers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, timestamp;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('_public record', params);\n                        return [4 /*yield*/, this._getCredentials()];\n                    case 1:\n                        credentials = _a.sent();\n                        if (!credentials || !this._config.appId || !this._config.region) {\n                            logger.debug('cannot send events without credentials, applicationId or region');\n                            return [2 /*return*/, handlers.reject(new Error('No credentials, applicationId or region'))];\n                        }\n                        this._initClients(credentials);\n                        timestamp = new Date().getTime();\n                        // attach the session and eventId\n                        this._generateSession(params);\n                        params.event.eventId = uuid();\n                        Object.assign(params, { timestamp: timestamp, config: this._config });\n                        if (params.event.immediate) {\n                            return [2 /*return*/, this._send(params, handlers)];\n                        }\n                        else {\n                            this._putToBuffer(params, handlers);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._sendEndpointUpdate = function (endpointObject) {\n        return __awaiter(this, void 0, void 0, function () {\n            var next;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this._endpointUpdateInProgress) {\n                            this._endpointBuffer.push(endpointObject);\n                            return [2 /*return*/];\n                        }\n                        this._endpointUpdateInProgress = true;\n                        return [4 /*yield*/, this._updateEndpoint(endpointObject)];\n                    case 1:\n                        _a.sent();\n                        next = this._endpointBuffer.shift();\n                        this._endpointUpdateInProgress = false;\n                        next && this._sendEndpointUpdate(next);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @private\n     * @param params - params for event recording\n     * Put events into buffer\n     */\n    AWSPinpointProvider.prototype._putToBuffer = function (params, handlers) {\n        if (params.event.name === UPDATE_ENDPOINT) {\n            this._sendEndpointUpdate({ params: params, handlers: handlers });\n            return;\n        }\n        this._buffer && this._buffer.push({ params: params, handlers: handlers });\n    };\n    AWSPinpointProvider.prototype._generateSession = function (params) {\n        this._sessionId = this._sessionId || uuid();\n        var event = params.event;\n        switch (event.name) {\n            case SESSION_START:\n                // refresh the session id and session start time\n                this._sessionStartTimestamp = new Date().getTime();\n                this._sessionId = uuid();\n                event.session = {\n                    Id: this._sessionId,\n                    StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n                };\n                break;\n            case SESSION_STOP:\n                var stopTimestamp = new Date().getTime();\n                this._sessionStartTimestamp =\n                    this._sessionStartTimestamp || new Date().getTime();\n                this._sessionId = this._sessionId || uuid();\n                event.session = {\n                    Id: this._sessionId,\n                    Duration: stopTimestamp - this._sessionStartTimestamp,\n                    StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n                    StopTimestamp: new Date(stopTimestamp).toISOString(),\n                };\n                this._sessionId = undefined;\n                this._sessionStartTimestamp = undefined;\n                break;\n            default:\n                this._sessionStartTimestamp =\n                    this._sessionStartTimestamp || new Date().getTime();\n                this._sessionId = this._sessionId || uuid();\n                event.session = {\n                    Id: this._sessionId,\n                    StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n                };\n        }\n    };\n    AWSPinpointProvider.prototype._send = function (params, handlers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var event;\n            return __generator(this, function (_a) {\n                event = params.event;\n                switch (event.name) {\n                    case UPDATE_ENDPOINT:\n                        return [2 /*return*/, this._updateEndpoint({ params: params, handlers: handlers })];\n                    case SESSION_STOP:\n                        return [2 /*return*/, this._pinpointSendStopSession(params, handlers)];\n                    default:\n                        return [2 /*return*/, this._pinpointPutEvents(params, handlers)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._generateBatchItemContext = function (params) {\n        var _a;\n        var event = params.event, timestamp = params.timestamp, config = params.config;\n        var name = event.name, attributes = event.attributes, metrics = event.metrics, eventId = event.eventId, session = event.session;\n        var appId = config.appId, endpointId = config.endpointId;\n        var endpointContext = {};\n        var eventParams = {\n            ApplicationId: appId,\n            EventsRequest: {\n                BatchItem: {},\n            },\n        };\n        var endpointObj = {};\n        endpointObj.Endpoint = endpointContext;\n        endpointObj.Events = (_a = {},\n            _a[eventId] = {\n                EventType: name,\n                Timestamp: new Date(timestamp).toISOString(),\n                Attributes: attributes,\n                Metrics: metrics,\n                Session: session,\n            },\n            _a);\n        eventParams.EventsRequest.BatchItem[endpointId] = endpointObj;\n        return eventParams;\n    };\n    AWSPinpointProvider.prototype._pinpointPutEvents = function (params, handlers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var eventId, endpointId, eventParams, command, data, _a, _b, _c, _d, StatusCode, Message, err_1;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        eventId = params.event.eventId, endpointId = params.config.endpointId;\n                        eventParams = this._generateBatchItemContext(params);\n                        command = new PutEventsCommand(eventParams);\n                        _e.label = 1;\n                    case 1:\n                        _e.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.pinpointClient.send(command)];\n                    case 2:\n                        data = _e.sent();\n                        _a = data, _b = endpointId, _c = eventId, _d = _a.EventsResponse.Results[_b].EventsItemResponse[_c], StatusCode = _d.StatusCode, Message = _d.Message;\n                        if (ACCEPTED_CODES.includes(StatusCode)) {\n                            logger.debug('record event success. ', data);\n                            return [2 /*return*/, handlers.resolve(data)];\n                        }\n                        else {\n                            if (RETRYABLE_CODES.includes(StatusCode)) {\n                                this._retry(params, handlers);\n                            }\n                            else {\n                                logger.error(\"Event \" + eventId + \" is not accepted, the error is \" + Message);\n                                return [2 /*return*/, handlers.reject(data)];\n                            }\n                        }\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_1 = _e.sent();\n                        this._eventError(err_1);\n                        return [2 /*return*/, handlers.reject(err_1)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._pinpointSendStopSession = function (params, handlers) {\n        if (!BEACON_SUPPORTED) {\n            this._pinpointPutEvents(params, handlers);\n            return;\n        }\n        var eventParams = this._generateBatchItemContext(params);\n        var region = this._config.region;\n        var ApplicationId = eventParams.ApplicationId, EventsRequest = eventParams.EventsRequest;\n        var accessInfo = {\n            secret_key: this._config.credentials.secretAccessKey,\n            access_key: this._config.credentials.accessKeyId,\n            session_token: this._config.credentials.sessionToken,\n        };\n        var url = \"https://pinpoint.\" + region + \".amazonaws.com/v1/apps/\" + ApplicationId + \"/events/legacy\";\n        var body = JSON.stringify(EventsRequest);\n        var method = 'POST';\n        var request = {\n            url: url,\n            body: body,\n            method: method,\n        };\n        var serviceInfo = { region: region, service: MOBILE_SERVICE_NAME };\n        var requestUrl = Signer.signUrl(request, accessInfo, serviceInfo, null);\n        var success = navigator.sendBeacon(requestUrl, body);\n        if (success) {\n            return handlers.resolve('sendBeacon success');\n        }\n        return handlers.reject('sendBeacon failure');\n    };\n    AWSPinpointProvider.prototype._retry = function (params, handlers) {\n        var resendLimit = params.config.resendLimit;\n        // For backward compatibility\n        params.resendLimit =\n            typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n        if (params.resendLimit-- > 0) {\n            logger.debug(\"resending event \" + params.eventName + \" with \" + params.resendLimit + \" retry times left\");\n            this._pinpointPutEvents(params, handlers);\n        }\n        else {\n            logger.debug(\"retry times used up for event \" + params.eventName);\n        }\n    };\n    AWSPinpointProvider.prototype._updateEndpoint = function (endpointObject) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params, handlers, config, event, appId, endpointId, request, update_params, command, data, err_2, failureData;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = endpointObject.params, handlers = endpointObject.handlers;\n                        config = params.config, event = params.event;\n                        appId = config.appId, endpointId = config.endpointId;\n                        request = this._endpointRequest(config, JS.transferKeyToLowerCase(event, [], ['attributes', 'userAttributes', 'Attributes', 'UserAttributes']));\n                        update_params = {\n                            ApplicationId: appId,\n                            EndpointId: endpointId,\n                            EndpointRequest: request,\n                        };\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        command = new UpdateEndpointCommand(update_params);\n                        return [4 /*yield*/, this.pinpointClient.send(command)];\n                    case 2:\n                        data = _a.sent();\n                        logger.debug('updateEndpoint success', data);\n                        this._endpointGenerating = false;\n                        this._resumeBuffer();\n                        handlers.resolve(data);\n                        return [2 /*return*/];\n                    case 3:\n                        err_2 = _a.sent();\n                        failureData = {\n                            err: err_2,\n                            update_params: update_params,\n                            endpointObject: endpointObject,\n                        };\n                        return [2 /*return*/, this._handleEndpointUpdateFailure(failureData)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._handleEndpointUpdateFailure = function (failureData) {\n        return __awaiter(this, void 0, void 0, function () {\n            var err, endpointObject, statusCode, exponential;\n            return __generator(this, function (_a) {\n                err = failureData.err, endpointObject = failureData.endpointObject;\n                statusCode = err.$metadata && err.$metadata.httpStatusCode;\n                logger.debug('updateEndpoint error', err);\n                switch (statusCode) {\n                    case FORBIDDEN_CODE:\n                        return [2 /*return*/, this._handleEndpointUpdateForbidden(failureData)];\n                    default:\n                        if (RETRYABLE_CODES.includes(statusCode)) {\n                            exponential = true;\n                            return [2 /*return*/, this._retryEndpointUpdate(endpointObject, exponential)];\n                        }\n                        logger.error('updateEndpoint failed', err);\n                        endpointObject.handlers.reject(err);\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._handleEndpointUpdateForbidden = function (failureData) {\n        var err = failureData.err, endpointObject = failureData.endpointObject;\n        var code = err.code, retryable = err.retryable;\n        if (code !== EXPIRED_TOKEN_CODE && !retryable) {\n            return endpointObject.handlers.reject(err);\n        }\n        this._retryEndpointUpdate(endpointObject);\n    };\n    AWSPinpointProvider.prototype._retryEndpointUpdate = function (endpointObject, exponential) {\n        if (exponential === void 0) { exponential = false; }\n        logger.debug('_retryEndpointUpdate', endpointObject);\n        var params = endpointObject.params;\n        // TODO: implement retry with exp back off once exp function is available\n        var resendLimit = params.config.resendLimit;\n        params.resendLimit =\n            typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n        if (params.resendLimit-- > 0) {\n            logger.debug(\"resending endpoint update \" + params.event.eventId + \" with \" + params.resendLimit + \" retry attempts remaining\");\n            // insert at the front of endpointBuffer\n            this._endpointBuffer.length\n                ? this._endpointBuffer.unshift(endpointObject)\n                : this._updateEndpoint(endpointObject);\n            return;\n        }\n        logger.warn(\"resending endpoint update \" + params.event.eventId + \" failed after \" + params.config.resendLimit + \" attempts\");\n        if (this._endpointGenerating) {\n            logger.error('Initial endpoint update failed. ');\n        }\n    };\n    /**\n     * @private\n     * @param config\n     * Init the clients\n     */\n    AWSPinpointProvider.prototype._initClients = function (credentials) {\n        return __awaiter(this, void 0, void 0, function () {\n            var identityId, region;\n            return __generator(this, function (_a) {\n                logger.debug('init clients');\n                if (this.pinpointClient &&\n                    this._config.credentials &&\n                    this._config.credentials.sessionToken === credentials.sessionToken &&\n                    this._config.credentials.identityId === credentials.identityId) {\n                    logger.debug('no change for aws credentials, directly return from init');\n                    return [2 /*return*/];\n                }\n                identityId = this._config.credentials\n                    ? this._config.credentials.identityId\n                    : null;\n                this._config.credentials = credentials;\n                region = this._config.region;\n                logger.debug('init clients with credentials', credentials);\n                this.pinpointClient = new PinpointClient({\n                    region: region,\n                    credentials: credentials,\n                    customUserAgent: getAmplifyUserAgent(),\n                });\n                // TODO: remove this middleware once a long term fix is implemented by aws-sdk-js team.\n                this.pinpointClient.middlewareStack.addRelativeTo(function (next) { return function (args) {\n                    delete args.request.headers['amz-sdk-invocation-id'];\n                    delete args.request.headers['amz-sdk-request'];\n                    return next(args);\n                }; }, {\n                    step: 'finalizeRequest',\n                    relation: 'after',\n                    toMiddleware: 'retryMiddleware',\n                });\n                if (this._bufferExists() && identityId === credentials.identityId) {\n                    // if the identity has remained the same, pass the updated client to the buffer\n                    this._updateBufferClient();\n                }\n                else {\n                    // otherwise flush the buffer and instantiate a new one\n                    // this will cause the old buffer to send any remaining events\n                    // with the old credentials and then stop looping and shortly thereafter get picked up by GC\n                    this._initBuffer();\n                }\n                this._customizePinpointClientReq();\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._bufferExists = function () {\n        return this._buffer && this._buffer instanceof EventsBuffer;\n    };\n    AWSPinpointProvider.prototype._initBuffer = function () {\n        if (this._bufferExists()) {\n            this._flushBuffer();\n        }\n        this._buffer = new EventsBuffer(this.pinpointClient, this._config);\n        // if the first endpoint update hasn't yet resolved pause the buffer to\n        // prevent race conditions. It will be resumed as soon as that request succeeds\n        if (this._endpointGenerating) {\n            this._buffer.pause();\n        }\n    };\n    AWSPinpointProvider.prototype._updateBufferClient = function () {\n        if (this._bufferExists()) {\n            this._buffer.updateClient(this.pinpointClient);\n        }\n    };\n    AWSPinpointProvider.prototype._flushBuffer = function () {\n        if (this._bufferExists()) {\n            this._buffer.flush();\n            this._buffer = null;\n        }\n    };\n    AWSPinpointProvider.prototype._resumeBuffer = function () {\n        if (this._bufferExists()) {\n            this._buffer.resume();\n        }\n    };\n    AWSPinpointProvider.prototype._customizePinpointClientReq = function () {\n        // TODO FIXME: Find a middleware to do this with AWS V3 SDK\n        // if (Platform.isReactNative) {\n        // \tthis.pinpointClient.customizeRequests(request => {\n        // \t\trequest.on('build', req => {\n        // \t\t\treq.httpRequest.headers['user-agent'] = Platform.userAgent;\n        // \t\t});\n        // \t});\n        // }\n    };\n    AWSPinpointProvider.prototype._getEndpointId = function (cacheKey) {\n        return __awaiter(this, void 0, void 0, function () {\n            var endpointId, ttl, expiration;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Cache.getItem(cacheKey)];\n                    case 1:\n                        endpointId = _a.sent();\n                        logger.debug('endpointId from cache', endpointId, 'type', typeof endpointId);\n                        if (!endpointId) {\n                            endpointId = uuid();\n                            ttl = 1000 * 60 * 60 * 24 * 365 * 100;\n                            expiration = new Date().getTime() + ttl;\n                            Cache.setItem(cacheKey, endpointId, {\n                                expires: expiration,\n                                priority: 1,\n                            });\n                        }\n                        return [2 /*return*/, endpointId];\n                }\n            });\n        });\n    };\n    /**\n     * EndPoint request\n     * @return {Object} - The request of updating endpoint\n     */\n    AWSPinpointProvider.prototype._endpointRequest = function (config, event) {\n        var credentials = config.credentials;\n        var clientInfo = this._clientInfo || {};\n        var clientContext = config.clientContext || {};\n        // for now we have three different ways for default endpoint configurations\n        // clientInfo\n        // clientContext (deprecated)\n        // config.endpoint\n        var defaultEndpointConfig = config.endpoint || {};\n        var demographicByClientInfo = {\n            appVersion: clientInfo.appVersion,\n            make: clientInfo.make,\n            model: clientInfo.model,\n            modelVersion: clientInfo.version,\n            platform: clientInfo.platform,\n        };\n        // for backward compatibility\n        var clientId = clientContext.clientId, appTitle = clientContext.appTitle, appVersionName = clientContext.appVersionName, appVersionCode = clientContext.appVersionCode, appPackageName = clientContext.appPackageName, demographicByClientContext = __rest(clientContext, [\"clientId\", \"appTitle\", \"appVersionName\", \"appVersionCode\", \"appPackageName\"]);\n        var channelType = event.address\n            ? clientInfo.platform === 'android'\n                ? 'GCM'\n                : 'APNS'\n            : undefined;\n        var tmp = __assign(__assign(__assign({ channelType: channelType, requestId: uuid(), effectiveDate: new Date().toISOString() }, defaultEndpointConfig), event), { attributes: __assign(__assign({}, defaultEndpointConfig.attributes), event.attributes), demographic: __assign(__assign(__assign(__assign({}, demographicByClientInfo), demographicByClientContext), defaultEndpointConfig.demographic), event.demographic), location: __assign(__assign({}, defaultEndpointConfig.location), event.location), metrics: __assign(__assign({}, defaultEndpointConfig.metrics), event.metrics), user: {\n                userId: event.userId ||\n                    defaultEndpointConfig.userId ||\n                    credentials.identityId,\n                userAttributes: __assign(__assign({}, defaultEndpointConfig.userAttributes), event.userAttributes),\n            } });\n        // eliminate unnecessary params\n        var userId = tmp.userId, userAttributes = tmp.userAttributes, name = tmp.name, session = tmp.session, eventId = tmp.eventId, immediate = tmp.immediate, ret = __rest(tmp, [\"userId\", \"userAttributes\", \"name\", \"session\", \"eventId\", \"immediate\"]);\n        return JS.transferKeyToUpperCase(ret, [], ['metrics', 'userAttributes', 'attributes']);\n    };\n    AWSPinpointProvider.prototype._eventError = function (err) {\n        logger.error('record event failed.', err);\n        logger.warn(\"Please ensure you have updated your Pinpoint IAM Policy \" +\n            \"with the Action: \\\"mobiletargeting:PutEvents\\\" \" +\n            \"in order to record events\");\n    };\n    AWSPinpointProvider.prototype._getCredentials = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, err_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _a.sent();\n                        if (!credentials)\n                            return [2 /*return*/, null];\n                        logger.debug('set credentials for analytics', credentials);\n                        return [2 /*return*/, Credentials.shear(credentials)];\n                    case 2:\n                        err_3 = _a.sent();\n                        logger.debug('ensure credentials error', err_3);\n                        return [2 /*return*/, null];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSPinpointProvider.category = 'Analytics';\n    AWSPinpointProvider.providerName = 'AWSPinpoint';\n    return AWSPinpointProvider;\n}());\nexport { AWSPinpointProvider };\n/**\n * @deprecated use named import\n */\nexport default AWSPinpointProvider;\n//# sourceMappingURL=AWSPinpointProvider.js.map"]},"metadata":{},"sourceType":"module"}