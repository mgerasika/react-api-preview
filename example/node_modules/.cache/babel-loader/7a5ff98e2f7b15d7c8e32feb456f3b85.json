{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { createDefaultChooserColumns } from '../general-ui/table/table.component.js';\nimport { useState, useMemo, useCallback } from 'react';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction useTable(_ref) {\n  var tableUISettings = _ref.tableUISettings,\n    allTableColumns = _ref.allTableColumns,\n    _onTableUISettingsChange = _ref.onTableUISettingsChange;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedRows = _useState2[0],\n    setSelectedRows = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isAllSelected = _useState4[0],\n    setIsAllSelected = _useState4[1];\n  var defaultChooserColumns = useMemo(function () {\n    return createDefaultChooserColumns(allTableColumns);\n  }, [allTableColumns]);\n  var chooserColumns = useMemo(function () {\n    var _tableUISettings$choo;\n    return tableUISettings !== null && tableUISettings !== void 0 && (_tableUISettings$choo = tableUISettings.chooserColumns) !== null && _tableUISettings$choo !== void 0 && _tableUISettings$choo.length ? filterDeprecatedChooserColumns(tableUISettings.chooserColumns, allTableColumns) : defaultChooserColumns;\n  }, [allTableColumns, defaultChooserColumns, tableUISettings === null || tableUISettings === void 0 ? void 0 : tableUISettings.chooserColumns]);\n  var tableColumns = useMemo(function () {\n    return filterTableColumns(allTableColumns, chooserColumns);\n  }, [allTableColumns, chooserColumns]);\n  var handleSelectedRowsChange = useCallback(function (rows, allSelected) {\n    setSelectedRows(rows);\n    setIsAllSelected(allSelected);\n  }, []);\n  var handleClearTableSelection = useCallback(function () {\n    setSelectedRows([]);\n    setIsAllSelected(false);\n  }, []);\n  return {\n    tableConfig: useMemo(function () {\n      return {\n        tableUISettings: tableUISettings,\n        onTableUISettingsChange: function onTableUISettingsChange(props) {\n          _onTableUISettingsChange && tableUISettings && _onTableUISettingsChange(_objectSpread(_objectSpread({}, tableUISettings), props));\n        },\n        chooser: {\n          chooserColumns: chooserColumns,\n          defaultChooserColumns: defaultChooserColumns\n        },\n        selection: {\n          isAllSelected: isAllSelected,\n          onSelectedRowsChange: handleSelectedRowsChange,\n          onClearTableSelection: handleClearTableSelection,\n          selectedRows: selectedRows,\n          updateSelectedRows: function updateSelectedRows(items) {\n            setSelectedRows(items);\n          }\n        },\n        table: {\n          tableColumns: tableColumns\n        }\n      };\n    }, [chooserColumns, defaultChooserColumns, handleClearTableSelection, handleSelectedRowsChange, isAllSelected, _onTableUISettingsChange, selectedRows, tableColumns, tableUISettings])\n  };\n}\nvar filterDeprecatedChooserColumns = function filterDeprecatedChooserColumns(chooserColumns, tableColumns) {\n  return chooserColumns.filter(function (f) {\n    return tableColumns.find(function (f2) {\n      return f2.id === f.id;\n    });\n  });\n};\nvar filterTableColumns = function filterTableColumns(tableColumns, chooserColumns) {\n  var visibleTableColumns = tableColumns.map(function (t) {\n    var column = chooserColumns.find(function (f) {\n      return f.id === t.id;\n    });\n    return _objectSpread(_objectSpread({}, t), {}, {\n      isVisible: column ? !column.isHidden : true\n    });\n  });\n  var res = [];\n  chooserColumns.forEach(function (column) {\n    var tableColumn = visibleTableColumns.find(function (f) {\n      return f.id === column.id;\n    });\n    if (tableColumn) {\n      visibleTableColumns = visibleTableColumns.filter(function (f) {\n        return f.id !== tableColumn.id;\n      });\n      res.push(tableColumn);\n    }\n  });\n  return [].concat(res, _toConsumableArray(visibleTableColumns));\n};\nexport { filterDeprecatedChooserColumns, filterTableColumns, useTable };","map":{"version":3,"sources":["../../../src/hooks/use-table.hook.ts"],"names":["useTable","tableUISettings","allTableColumns","onTableUISettingsChange","selectedRows","setSelectedRows","useState","isAllSelected","setIsAllSelected","defaultChooserColumns","useMemo","createDefaultChooserColumns","chooserColumns","length","filterDeprecatedChooserColumns","tableColumns","filterTableColumns","handleSelectedRowsChange","useCallback","rows","allSelected","handleClearTableSelection","tableConfig","props","chooser","selection","onSelectedRowsChange","onClearTableSelection","updateSelectedRows","items","table","filter","f","find","f2","id","visibleTableColumns","map","t","column","isVisible","isHidden","res","forEach","tableColumn","push"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { IColumnChooser } from '@common/general-ui/column-chooser/column-chooser.component';\nimport { createDefaultChooserColumns, ITableColumn } from '@common/general-ui/table/table.component';\nimport { IIdObject } from '@common/interfaces/id-object.interface';\nimport { ITableUISettings } from '@common/interfaces/ui-settings.interface';\nimport { useCallback, useMemo, useState } from 'react';\n\nexport interface ITableConfigProps<T extends IIdObject, TKey> {\n    tableUISettings: ITableUISettings | undefined;\n    onTableUISettingsChange: (settings: Partial<ITableUISettings>) => void | undefined;\n    chooser: { chooserColumns: IColumnChooser[]; defaultChooserColumns: IColumnChooser[] };\n    selection: {\n        isAllSelected: boolean;\n        updateSelectedRows: (items: T[]) => void;\n        selectedRows: T[];\n        onSelectedRowsChange: (data: T[], isAllSelected: boolean) => void;\n        onClearTableSelection: () => void;\n    };\n    table: {\n        tableColumns: ITableColumn<T, TKey>[];\n    };\n}\n\ninterface IReturn<T extends IIdObject, TKey> {\n    tableConfig: ITableConfigProps<T, TKey>;\n}\n\ninterface IProps<T extends IIdObject, T_UI extends ITableUISettings, TKey> {\n    tableUISettings: T_UI | undefined;\n    allTableColumns: ITableColumn<T, TKey>[];\n    onTableUISettingsChange: ((settings: T_UI) => void) | undefined;\n}\n\nexport function useTable<T extends IIdObject, T_UI extends ITableUISettings, TKey>({\n    tableUISettings,\n    allTableColumns,\n    onTableUISettingsChange,\n}: IProps<T, T_UI, TKey>): IReturn<T, TKey> {\n    const [selectedRows, setSelectedRows] = useState<T[]>([]);\n    const [isAllSelected, setIsAllSelected] = useState(false);\n\n    const defaultChooserColumns = useMemo(() => createDefaultChooserColumns(allTableColumns), [allTableColumns]);\n    const chooserColumns = useMemo<IColumnChooser[]>(() => {\n        return tableUISettings?.chooserColumns?.length\n            ? filterDeprecatedChooserColumns(tableUISettings.chooserColumns, allTableColumns)\n            : defaultChooserColumns;\n    }, [allTableColumns, defaultChooserColumns, tableUISettings?.chooserColumns]);\n\n    const tableColumns = useMemo(\n        () => filterTableColumns(allTableColumns, chooserColumns),\n        [allTableColumns, chooserColumns],\n    );\n\n    const handleSelectedRowsChange = useCallback((rows: T[], allSelected: boolean) => {\n        setSelectedRows(rows);\n        setIsAllSelected(allSelected);\n    }, []);\n\n    const handleClearTableSelection = useCallback(() => {\n        setSelectedRows([]);\n        setIsAllSelected(false);\n    }, []);\n    return {\n        tableConfig: useMemo(() => {\n            return {\n                tableUISettings,\n                onTableUISettingsChange: (props): void => {\n                    onTableUISettingsChange && tableUISettings && onTableUISettingsChange({ ...tableUISettings, ...props });\n                },\n                chooser: {\n                    chooserColumns,\n                    defaultChooserColumns,\n                },\n\n                selection: {\n                    isAllSelected,\n                    onSelectedRowsChange: handleSelectedRowsChange,\n                    onClearTableSelection: handleClearTableSelection,\n                    selectedRows,\n                    updateSelectedRows: (items: T[]): void => {\n                        setSelectedRows(items);\n                    },\n                },\n                table: {\n                    tableColumns,\n                },\n            };\n        }, [\n            chooserColumns,\n            defaultChooserColumns,\n            handleClearTableSelection,\n            handleSelectedRowsChange,\n            isAllSelected,\n            onTableUISettingsChange,\n            selectedRows,\n            tableColumns,\n            tableUISettings,\n        ]),\n    };\n}\n\nexport const filterDeprecatedChooserColumns = (\n    chooserColumns: IColumnChooser[],\n    tableColumns: ITableColumn<any, any>[],\n): IColumnChooser[] => {\n    return chooserColumns.filter((f) => tableColumns.find((f2) => f2.id === f.id));\n};\n\nexport const filterTableColumns = (\n    tableColumns: ITableColumn<any, any>[],\n    chooserColumns: IColumnChooser[],\n): ITableColumn<any, any>[] => {\n    let visibleTableColumns = tableColumns.map((t): ITableColumn<any, any> => {\n        const column = chooserColumns.find((f) => f.id === t.id);\n        return {\n            ...t,\n            isVisible: column ? !column.isHidden : true,\n        };\n    });\n    const res: ITableColumn<any, any>[] = [];\n    chooserColumns.forEach((column) => {\n        const tableColumn = visibleTableColumns.find((f) => f.id === column.id);\n        if (tableColumn) {\n            visibleTableColumns = visibleTableColumns.filter((f) => f.id !== tableColumn.id);\n            res.push(tableColumn);\n        }\n    });\n    return [...res, ...visibleTableColumns];\n};\n"]},"metadata":{},"sourceType":"module"}