{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');\nvar react = require('@emotion/react');\nvar theme_constant = require('../../constants/theme.constant.js');\nvar field_component = require('../field/field.component.js');\nvar readonly_component = require('../readonly.component.js');\nvar css = require('@emotion/css');\nvar antd = require('antd');\nvar React = require('react');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n  return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\nconst {\n  Option\n} = antd.Select;\nconst MultiSelectOption = Option;\nvar _ref2 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bjn8wh\",\n  styles: \"position:relative\"\n} : {\n  name: \"1xnzfn2-MultiSelect\",\n  styles: \"position:relative;label:MultiSelect;\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst MultiSelect = /*#__PURE__*/React__default[\"default\"].forwardRef((props, ref) => {\n  const {\n    onChange,\n    onBlur,\n    name,\n    value,\n    defaultValue,\n    errorMessage,\n    placeholder,\n    maxCount,\n    options = []\n  } = props;\n  const renderOptions = () => {\n    return options.map(option => {\n      const disabled = !!maxCount && (value?.length || 0) >= maxCount && !value?.includes(option.value);\n      return /*#__PURE__*/React__default[\"default\"].createElement(React__default[\"default\"].Fragment, {\n        key: option.value\n      }, props.renderMultiSelectOption ? props.renderMultiSelectOption({\n        ...option,\n        'data-parent-testid': 'field-' + props.name,\n        disabled\n      }) : /*#__PURE__*/React__default[\"default\"].createElement(MultiSelectOption, {\n        \"data-parent-testid\": 'field-' + props.name,\n        value: option.value,\n        disabled: disabled\n      }, option.label));\n    });\n  };\n  const handleChange = value => {\n    onChange && onChange({\n      value,\n      name\n    });\n  };\n  return /*#__PURE__*/React__default[\"default\"].createElement(field_component.Field, _rollupPluginBabelHelpers[\"extends\"]({}, props, {\n    errorMessage: errorMessage\n  }), /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n    css: _ref2\n  }, props.readOnly && /*#__PURE__*/React__default[\"default\"].createElement(readonly_component.Readonly, null), /*#__PURE__*/React__default[\"default\"].createElement(antd.Select, {\n    showArrow: true,\n    ref: ref,\n    css: styles.root(!!props.readOnly),\n    dropdownClassName: styles.dropDown,\n    mode: \"multiple\",\n    allowClear: true,\n    tabIndex: props.readOnly ? -1 : 0,\n    showSearch: !props.readOnly,\n    placeholder: placeholder,\n    defaultValue: defaultValue,\n    value: value,\n    onChange: handleChange,\n    onBlur: onBlur,\n    dropdownRender: prev => props.readOnly ? /*#__PURE__*/React__default[\"default\"].createElement(React__default[\"default\"].Fragment, null) : prev\n  }, renderOptions())));\n});\nvar _ref = process.env.NODE_ENV === \"production\" ? {\n  name: \"t13u0p\",\n  styles: \"&& .ant-select-selector{}\"\n} : {\n  name: \"18n9o5u-styles\",\n  styles: \"&& .ant-select-selector{};label:styles;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst styles = {\n  root: readOnly => [/*#__PURE__*/react.css(\"display:block;&& .ant-select-selector{display:flex;height:auto;min-height:34px;border:1px solid \", theme_constant.THEME.GRAY, \";border-radius:4px;font-weight:400;color:\", theme_constant.THEME.BLACK, \";width:100%;transition:border-color ease-in-out 0.15s,box-shadow ease-in-out 0.15s;}&& .ant-select-selection-item{background-color:white;color:\", theme_constant.THEME.BLACK, \";border:1px solid \", theme_constant.THEME.LIGHT_GRAY, \";}&&.ant-select-disabled{&& .ant-select-selection-item{background-color:\", theme_constant.THEME.DISABLED_BACKGROUND, \";color:\", theme_constant.THEME.GRAY, \";}}&& .ant-select-selection-item-content{padding-top:2px;}&& .ant-select-selection-item-remove{padding-top:2px;font-weight:bold;color:\", theme_constant.THEME.BLACK, \";}&.ant-select-focused{&& .ant-select-selector{border:1px solid \", theme_constant.THEME.GREEN, \";outline-color:transparent;outline-style:none;\", theme_constant.THEME.BOX_SHADOW_GREEN, \";}}&& .anticon-close{position:relative;top:-2px;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:styles;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm11bHRpLXNlbGVjdC5jb21wb25lbnQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRGVyIsImZpbGUiOiJtdWx0aS1zZWxlY3QuY29tcG9uZW50LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRIRU1FIH0gZnJvbSAnQGNvbW1vbi9jb25zdGFudHMvdGhlbWUuY29uc3RhbnQnO1xuaW1wb3J0IHsgRmllbGQsIElGaWVsZFByb3BzIH0gZnJvbSAnQGNvbW1vbi9nZW5lcmFsLXVpL2ZpZWxkL2ZpZWxkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBSZWFkb25seSB9IGZyb20gJ0Bjb21tb24vZ2VuZXJhbC11aS9yZWFkb25seS5jb21wb25lbnQnO1xuaW1wb3J0IHsgSVNlbGVjdE9wdGlvbiB9IGZyb20gJ0Bjb21tb24vZ2VuZXJhbC11aS9zZWxlY3Qvc2VsZWN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBjc3MgYXMgZW1vdGlvbkNzcyB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgeyBTZXJpYWxpemVkU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgU2VsZWN0IGFzIEFudGRTZWxlY3QsIFNlbGVjdFByb3BzIH0gZnJvbSAnYW50ZCc7XG5pbXBvcnQgeyBSZWZTZWxlY3RQcm9wcyB9IGZyb20gJ2FudGQvbGliL3NlbGVjdCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAndHdpbi5tYWNybyc7XG5cbmNvbnN0IHsgT3B0aW9uIH0gPSBBbnRkU2VsZWN0O1xuXG5leHBvcnQgdHlwZSBJTXVsdGlTZWxlY3RDaGFuZ2VIYW5kbGVyID0gKGU6IHsgdmFsdWU6IHN0cmluZ1tdOyBuYW1lOiBzdHJpbmcgfSkgPT4gdm9pZDtcbmV4cG9ydCBjb25zdCBNdWx0aVNlbGVjdE9wdGlvbiA9IE9wdGlvbjtcbmV4cG9ydCBpbnRlcmZhY2UgSVJlbmRlck9wdGlvbkV2ZW50c0FyZ3MgZXh0ZW5kcyBJU2VsZWN0T3B0aW9uIHtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBbJ2RhdGEtcGFyZW50LXRlc3RpZCddOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIElNdWx0aVNlbGVjdFByb3BzPFROYW1lID0gc3RyaW5nPiBleHRlbmRzIElGaWVsZFByb3BzPHN0cmluZ1tdLCBUTmFtZT4ge1xuICAgIG1heENvdW50PzogbnVtYmVyO1xuICAgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICBvbkNoYW5nZT86IElNdWx0aVNlbGVjdENoYW5nZUhhbmRsZXI7XG4gICAgb25CbHVyPzogKGU6IFJlYWN0LkZvY3VzRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG4gICAgb3B0aW9ucz86IElTZWxlY3RPcHRpb25bXTtcbiAgICByZW5kZXJNdWx0aVNlbGVjdE9wdGlvbj86IChlOiBJUmVuZGVyT3B0aW9uRXZlbnRzQXJncykgPT4gSlNYLkVsZW1lbnQ7XG59XG5cbmV4cG9ydCBjb25zdCBNdWx0aVNlbGVjdCA9IFJlYWN0LmZvcndhcmRSZWY8U2VsZWN0UHJvcHM8c3RyaW5nPiwgSU11bHRpU2VsZWN0UHJvcHM+KFxuICAgIChwcm9wczogSU11bHRpU2VsZWN0UHJvcHMsIHJlZik6IEpTWC5FbGVtZW50ID0+IHtcbiAgICAgICAgY29uc3QgeyBvbkNoYW5nZSwgb25CbHVyLCBuYW1lLCB2YWx1ZSwgZGVmYXVsdFZhbHVlLCBlcnJvck1lc3NhZ2UsIHBsYWNlaG9sZGVyLCBtYXhDb3VudCwgb3B0aW9ucyA9IFtdIH0gPSBwcm9wcztcblxuICAgICAgICBjb25zdCByZW5kZXJPcHRpb25zID0gKCk6IEpTWC5FbGVtZW50W10gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMubWFwKChvcHRpb24pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNhYmxlZCA9ICEhbWF4Q291bnQgJiYgKHZhbHVlPy5sZW5ndGggfHwgMCkgPj0gbWF4Q291bnQgJiYgIXZhbHVlPy5pbmNsdWRlcyhvcHRpb24udmFsdWUgYXMgc3RyaW5nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PXtvcHRpb24udmFsdWV9PlxuICAgICAgICAgICAgICAgICAgICAgICAge3Byb3BzLnJlbmRlck11bHRpU2VsZWN0T3B0aW9uID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnJlbmRlck11bHRpU2VsZWN0T3B0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ub3B0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YS1wYXJlbnQtdGVzdGlkJzogJ2ZpZWxkLScgKyBwcm9wcy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TXVsdGlTZWxlY3RPcHRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJlbnQtdGVzdGlkPXsnZmllbGQtJyArIHByb3BzLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtvcHRpb24udmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtvcHRpb24ubGFiZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9NdWx0aVNlbGVjdE9wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZUNoYW5nZSA9ICh2YWx1ZTogc3RyaW5nW10pOiB2b2lkID0+IHtcbiAgICAgICAgICAgIG9uQ2hhbmdlICYmIG9uQ2hhbmdlKHsgdmFsdWUsIG5hbWUgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxGaWVsZCB7Li4ucHJvcHN9IGVycm9yTWVzc2FnZT17ZXJyb3JNZXNzYWdlfT5cbiAgICAgICAgICAgICAgICA8ZGl2IHR3PVwicmVsYXRpdmVcIj5cbiAgICAgICAgICAgICAgICAgICAge3Byb3BzLnJlYWRPbmx5ICYmIDxSZWFkb25seSAvPn1cblxuICAgICAgICAgICAgICAgICAgICA8QW50ZFNlbGVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0Fycm93PXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXtyZWYgYXMgdW5rbm93biBhcyBSZWFjdC5SZWY8UmVmU2VsZWN0UHJvcHM+fVxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXtzdHlsZXMucm9vdCghIXByb3BzLnJlYWRPbmx5KX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duQ2xhc3NOYW1lPXtzdHlsZXMuZHJvcERvd259XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlPVwibXVsdGlwbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dDbGVhclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXg9e3Byb3BzLnJlYWRPbmx5ID8gLTEgOiAwfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1NlYXJjaD17IXByb3BzLnJlYWRPbmx5fVxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtkZWZhdWx0VmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25CbHVyPXtvbkJsdXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93blJlbmRlcj17KHByZXYpOiBKU1guRWxlbWVudCA9PiAocHJvcHMucmVhZE9ubHkgPyA8PjwvPiA6IHByZXYpfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7cmVuZGVyT3B0aW9ucygpfVxuICAgICAgICAgICAgICAgICAgICA8L0FudGRTZWxlY3Q+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L0ZpZWxkPlxuICAgICAgICApO1xuICAgIH0sXG4pO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gICAgcm9vdDogKHJlYWRPbmx5OiBib29sZWFuKTogKFNlcmlhbGl6ZWRTdHlsZXMgfCBib29sZWFuKVtdID0+IFtcbiAgICAgICAgY3NzYFxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAmJiAuYW50LXNlbGVjdC1zZWxlY3RvciB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICAgICAgICAgICAgbWluLWhlaWdodDogMzRweDtcbiAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke1RIRU1FLkdSQVl9O1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke1RIRU1FLkJMQUNLfTtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgZWFzZS1pbi1vdXQgMC4xNXMsIGJveC1zaGFkb3cgZWFzZS1pbi1vdXQgMC4xNXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmJiAuYW50LXNlbGVjdC1zZWxlY3Rpb24taXRlbSB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7VEhFTUUuQkxBQ0t9O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7VEhFTUUuTElHSFRfR1JBWX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmJi5hbnQtc2VsZWN0LWRpc2FibGVkIHtcbiAgICAgICAgICAgICAgICAmJiAuYW50LXNlbGVjdC1zZWxlY3Rpb24taXRlbSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7VEhFTUUuRElTQUJMRURfQkFDS0dST1VORH07XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke1RIRU1FLkdSQVl9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICYmIC5hbnQtc2VsZWN0LXNlbGVjdGlvbi1pdGVtLWNvbnRlbnQge1xuICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiAycHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmJiAuYW50LXNlbGVjdC1zZWxlY3Rpb24taXRlbS1yZW1vdmUge1xuICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiAycHg7XG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7VEhFTUUuQkxBQ0t9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAmLmFudC1zZWxlY3QtZm9jdXNlZCB7XG4gICAgICAgICAgICAgICAgJiYgLmFudC1zZWxlY3Qtc2VsZWN0b3Ige1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke1RIRU1FLkdSRUVOfTtcbiAgICAgICAgICAgICAgICAgICAgb3V0bGluZS1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIG91dGxpbmUtc3R5bGU6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICR7VEhFTUUuQk9YX1NIQURPV19HUkVFTn1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmJiAuYW50aWNvbi1jbG9zZSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgIHRvcDogLTJweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYCxcbiAgICAgICAgcmVhZE9ubHkgJiZcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAmJiAuYW50LXNlbGVjdC1zZWxlY3RvciB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAke1RIRU1FLlJFQURPTkxZX0NPTE9SfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgLFxuICAgIF0sXG5cbiAgICBkcm9wRG93bjogZW1vdGlvbkNzc2Bcblx0XHQmJiAuYW50LXNlbGVjdC1pdGVtLW9wdGlvbi1zZWxlY3RlZCB7XG5cdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmIDtcblx0XHR9ICBcblx0XHQmJiAuYW50LXNlbGVjdC1pdGVtLW9wdGlvbi1hY3RpdmUge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtUSEVNRS5HUkVFTn07XG4gICAgICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgIH1cblx0XHQuZGl2aWRlciB7XG5cdFx0XHRwYWRkaW5nOjhweCAxMnB4O1xuXHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRoZWlnaHQ6IGF1dG87XG5cdFx0XHRsaW5lLWhlaWdodDogMXB4O1xuXHRcdFx0bWluLWhlaWdodDogMXB4O1xuXHRcdH1cblxuXHRcdC5kaXZpZGVyIGRpdntcblx0XHRcdGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAke1RIRU1FLkdSQVl9O1xuXHRcdH1cblx0XHRcdFxuICAgIGAsXG59O1xuXG4vLyBEb24ndCB1c2UgY29tcG9uZW50IC0gcHJvYmxlbSB3aXRoIGNoaWxkIGxvb3AgKGFudGQpXG5leHBvcnQgY29uc3QgcmVuZGVyTXVsdGlTZWxlY3REaXZpZGVyT3B0aW9uID0gKCk6IEpTWC5FbGVtZW50ID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8T3B0aW9uIHZhbHVlPVwiXCIgZGlzYWJsZWQ9e3RydWV9IGNsYXNzTmFtZT1cImRpdmlkZXJcIj5cbiAgICAgICAgICAgIHsvKiBEb24ndCByZW1vdmUgdGhpcyBkaXYgKi99XG4gICAgICAgICAgICA8ZGl2PiZuYnNwOzwvZGl2PlxuICAgICAgICA8L09wdGlvbj5cbiAgICApO1xufTtcbiJdfQ== */\"), readOnly && _ref],\n  dropDown: /*#__PURE__*/css.css(\"&& .ant-select-item-option-selected{background-color:#fff;}&& .ant-select-item-option-active{background-color:\", theme_constant.THEME.GREEN, \";color:white;}.divider{padding:8px 12px;width:100%;height:auto;line-height:1px;min-height:1px;}.divider div{border-bottom:1px solid \", theme_constant.THEME.GRAY, \";}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:dropDown;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm11bHRpLXNlbGVjdC5jb21wb25lbnQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtKd0IiLCJmaWxlIjoibXVsdGktc2VsZWN0LmNvbXBvbmVudC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUSEVNRSB9IGZyb20gJ0Bjb21tb24vY29uc3RhbnRzL3RoZW1lLmNvbnN0YW50JztcbmltcG9ydCB7IEZpZWxkLCBJRmllbGRQcm9wcyB9IGZyb20gJ0Bjb21tb24vZ2VuZXJhbC11aS9maWVsZC9maWVsZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmVhZG9ubHkgfSBmcm9tICdAY29tbW9uL2dlbmVyYWwtdWkvcmVhZG9ubHkuY29tcG9uZW50JztcbmltcG9ydCB7IElTZWxlY3RPcHRpb24gfSBmcm9tICdAY29tbW9uL2dlbmVyYWwtdWkvc2VsZWN0L3NlbGVjdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgY3NzIGFzIGVtb3Rpb25Dc3MgfSBmcm9tICdAZW1vdGlvbi9jc3MnO1xuaW1wb3J0IHsgU2VyaWFsaXplZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IFNlbGVjdCBhcyBBbnRkU2VsZWN0LCBTZWxlY3RQcm9wcyB9IGZyb20gJ2FudGQnO1xuaW1wb3J0IHsgUmVmU2VsZWN0UHJvcHMgfSBmcm9tICdhbnRkL2xpYi9zZWxlY3QnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ3R3aW4ubWFjcm8nO1xuXG5jb25zdCB7IE9wdGlvbiB9ID0gQW50ZFNlbGVjdDtcblxuZXhwb3J0IHR5cGUgSU11bHRpU2VsZWN0Q2hhbmdlSGFuZGxlciA9IChlOiB7IHZhbHVlOiBzdHJpbmdbXTsgbmFtZTogc3RyaW5nIH0pID0+IHZvaWQ7XG5leHBvcnQgY29uc3QgTXVsdGlTZWxlY3RPcHRpb24gPSBPcHRpb247XG5leHBvcnQgaW50ZXJmYWNlIElSZW5kZXJPcHRpb25FdmVudHNBcmdzIGV4dGVuZHMgSVNlbGVjdE9wdGlvbiB7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgWydkYXRhLXBhcmVudC10ZXN0aWQnXTogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBJTXVsdGlTZWxlY3RQcm9wczxUTmFtZSA9IHN0cmluZz4gZXh0ZW5kcyBJRmllbGRQcm9wczxzdHJpbmdbXSwgVE5hbWU+IHtcbiAgICBtYXhDb3VudD86IG51bWJlcjtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgb25DaGFuZ2U/OiBJTXVsdGlTZWxlY3RDaGFuZ2VIYW5kbGVyO1xuICAgIG9uQmx1cj86IChlOiBSZWFjdC5Gb2N1c0V2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xuICAgIG9wdGlvbnM/OiBJU2VsZWN0T3B0aW9uW107XG4gICAgcmVuZGVyTXVsdGlTZWxlY3RPcHRpb24/OiAoZTogSVJlbmRlck9wdGlvbkV2ZW50c0FyZ3MpID0+IEpTWC5FbGVtZW50O1xufVxuXG5leHBvcnQgY29uc3QgTXVsdGlTZWxlY3QgPSBSZWFjdC5mb3J3YXJkUmVmPFNlbGVjdFByb3BzPHN0cmluZz4sIElNdWx0aVNlbGVjdFByb3BzPihcbiAgICAocHJvcHM6IElNdWx0aVNlbGVjdFByb3BzLCByZWYpOiBKU1guRWxlbWVudCA9PiB7XG4gICAgICAgIGNvbnN0IHsgb25DaGFuZ2UsIG9uQmx1ciwgbmFtZSwgdmFsdWUsIGRlZmF1bHRWYWx1ZSwgZXJyb3JNZXNzYWdlLCBwbGFjZWhvbGRlciwgbWF4Q291bnQsIG9wdGlvbnMgPSBbXSB9ID0gcHJvcHM7XG5cbiAgICAgICAgY29uc3QgcmVuZGVyT3B0aW9ucyA9ICgpOiBKU1guRWxlbWVudFtdID0+IHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLm1hcCgob3B0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlzYWJsZWQgPSAhIW1heENvdW50ICYmICh2YWx1ZT8ubGVuZ3RoIHx8IDApID49IG1heENvdW50ICYmICF2YWx1ZT8uaW5jbHVkZXMob3B0aW9uLnZhbHVlIGFzIHN0cmluZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50IGtleT17b3B0aW9uLnZhbHVlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtwcm9wcy5yZW5kZXJNdWx0aVNlbGVjdE9wdGlvbiA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5yZW5kZXJNdWx0aVNlbGVjdE9wdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEtcGFyZW50LXRlc3RpZCc6ICdmaWVsZC0nICsgcHJvcHMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE11bHRpU2VsZWN0T3B0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyZW50LXRlc3RpZD17J2ZpZWxkLScgKyBwcm9wcy5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17b3B0aW9uLnZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b3B0aW9uLmxhYmVsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTXVsdGlTZWxlY3RPcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAodmFsdWU6IHN0cmluZ1tdKTogdm9pZCA9PiB7XG4gICAgICAgICAgICBvbkNoYW5nZSAmJiBvbkNoYW5nZSh7IHZhbHVlLCBuYW1lIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8RmllbGQgey4uLnByb3BzfSBlcnJvck1lc3NhZ2U9e2Vycm9yTWVzc2FnZX0+XG4gICAgICAgICAgICAgICAgPGRpdiB0dz1cInJlbGF0aXZlXCI+XG4gICAgICAgICAgICAgICAgICAgIHtwcm9wcy5yZWFkT25seSAmJiA8UmVhZG9ubHkgLz59XG5cbiAgICAgICAgICAgICAgICAgICAgPEFudGRTZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dBcnJvdz17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17cmVmIGFzIHVua25vd24gYXMgUmVhY3QuUmVmPFJlZlNlbGVjdFByb3BzPn1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17c3R5bGVzLnJvb3QoISFwcm9wcy5yZWFkT25seSl9XG4gICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bkNsYXNzTmFtZT17c3R5bGVzLmRyb3BEb3dufVxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZT1cIm11bHRpcGxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93Q2xlYXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYkluZGV4PXtwcm9wcy5yZWFkT25seSA/IC0xIDogMH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dTZWFyY2g9eyFwcm9wcy5yZWFkT25seX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17ZGVmYXVsdFZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQmx1cj17b25CbHVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd25SZW5kZXI9eyhwcmV2KTogSlNYLkVsZW1lbnQgPT4gKHByb3BzLnJlYWRPbmx5ID8gPD48Lz4gOiBwcmV2KX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAge3JlbmRlck9wdGlvbnMoKX1cbiAgICAgICAgICAgICAgICAgICAgPC9BbnRkU2VsZWN0PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9GaWVsZD5cbiAgICAgICAgKTtcbiAgICB9LFxuKTtcblxuY29uc3Qgc3R5bGVzID0ge1xuICAgIHJvb3Q6IChyZWFkT25seTogYm9vbGVhbik6IChTZXJpYWxpemVkU3R5bGVzIHwgYm9vbGVhbilbXSA9PiBbXG4gICAgICAgIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgJiYgLmFudC1zZWxlY3Qtc2VsZWN0b3Ige1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDM0cHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtUSEVNRS5HUkFZfTtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtUSEVNRS5CTEFDS307XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIGVhc2UtaW4tb3V0IDAuMTVzLCBib3gtc2hhZG93IGVhc2UtaW4tb3V0IDAuMTVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJiYgLmFudC1zZWxlY3Qtc2VsZWN0aW9uLWl0ZW0ge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke1RIRU1FLkJMQUNLfTtcbiAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke1RIRU1FLkxJR0hUX0dSQVl9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJiYuYW50LXNlbGVjdC1kaXNhYmxlZCB7XG4gICAgICAgICAgICAgICAgJiYgLmFudC1zZWxlY3Qtc2VsZWN0aW9uLWl0ZW0ge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke1RIRU1FLkRJU0FCTEVEX0JBQ0tHUk9VTkR9O1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtUSEVNRS5HUkFZfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmJiAuYW50LXNlbGVjdC1zZWxlY3Rpb24taXRlbS1jb250ZW50IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogMnB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJiYgLmFudC1zZWxlY3Qtc2VsZWN0aW9uLWl0ZW0tcmVtb3ZlIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogMnB4O1xuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke1RIRU1FLkJMQUNLfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJi5hbnQtc2VsZWN0LWZvY3VzZWQge1xuICAgICAgICAgICAgICAgICYmIC5hbnQtc2VsZWN0LXNlbGVjdG9yIHtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtUSEVNRS5HUkVFTn07XG4gICAgICAgICAgICAgICAgICAgIG91dGxpbmUtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgICAgICAgICBvdXRsaW5lLXN0eWxlOiBub25lO1xuICAgICAgICAgICAgICAgICAgICAke1RIRU1FLkJPWF9TSEFET1dfR1JFRU59XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJiYgLmFudGljb24tY2xvc2Uge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICB0b3A6IC0ycHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIGAsXG4gICAgICAgIHJlYWRPbmx5ICYmXG4gICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgJiYgLmFudC1zZWxlY3Qtc2VsZWN0b3Ige1xuICAgICAgICAgICAgICAgICAgICAvLyBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtUSEVNRS5SRUFET05MWV9DT0xPUn07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYCxcbiAgICBdLFxuXG4gICAgZHJvcERvd246IGVtb3Rpb25Dc3NgXG5cdFx0JiYgLmFudC1zZWxlY3QtaXRlbS1vcHRpb24tc2VsZWN0ZWQge1xuXHRcdFx0YmFja2dyb3VuZC1jb2xvcjogI2ZmZiA7XG5cdFx0fSAgXG5cdFx0JiYgLmFudC1zZWxlY3QtaXRlbS1vcHRpb24tYWN0aXZlIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7VEhFTUUuR1JFRU59O1xuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICB9XG5cdFx0LmRpdmlkZXIge1xuXHRcdFx0cGFkZGluZzo4cHggMTJweDtcblx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0aGVpZ2h0OiBhdXRvO1xuXHRcdFx0bGluZS1oZWlnaHQ6IDFweDtcblx0XHRcdG1pbi1oZWlnaHQ6IDFweDtcblx0XHR9XG5cblx0XHQuZGl2aWRlciBkaXZ7XG5cdFx0XHRib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtUSEVNRS5HUkFZfTtcblx0XHR9XG5cdFx0XHRcbiAgICBgLFxufTtcblxuLy8gRG9uJ3QgdXNlIGNvbXBvbmVudCAtIHByb2JsZW0gd2l0aCBjaGlsZCBsb29wIChhbnRkKVxuZXhwb3J0IGNvbnN0IHJlbmRlck11bHRpU2VsZWN0RGl2aWRlck9wdGlvbiA9ICgpOiBKU1guRWxlbWVudCA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPE9wdGlvbiB2YWx1ZT1cIlwiIGRpc2FibGVkPXt0cnVlfSBjbGFzc05hbWU9XCJkaXZpZGVyXCI+XG4gICAgICAgICAgICB7LyogRG9uJ3QgcmVtb3ZlIHRoaXMgZGl2ICovfVxuICAgICAgICAgICAgPGRpdj4mbmJzcDs8L2Rpdj5cbiAgICAgICAgPC9PcHRpb24+XG4gICAgKTtcbn07XG4iXX0= */\")\n};\n\n// Don't use component - problem with child loop (antd)\nconst renderMultiSelectDividerOption = () => {\n  return /*#__PURE__*/React__default[\"default\"].createElement(Option, {\n    value: \"\",\n    disabled: true,\n    className: \"divider\"\n  }, /*#__PURE__*/React__default[\"default\"].createElement(\"div\", null, \"\\xA0\"));\n};\nexports.MultiSelect = MultiSelect;\nexports.MultiSelectOption = MultiSelectOption;\nexports.renderMultiSelectDividerOption = renderMultiSelectDividerOption;","map":{"version":3,"sources":["../../../../src/general-ui/multi-select/multi-select.component.tsx"],"names":["Option","AntdSelect","MultiSelectOption","MultiSelect","React","forwardRef","props","ref","onChange","onBlur","name","value","defaultValue","errorMessage","placeholder","maxCount","options","renderOptions","map","option","disabled","length","includes","renderMultiSelectOption","label","handleChange","Field","readOnly","Readonly","styles","root","dropDown","prev","css","THEME","GRAY","BLACK","LIGHT_GRAY","DISABLED_BACKGROUND","GREEN","BOX_SHADOW_GREEN","emotionCss","renderMultiSelectDividerOption"],"mappings":"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","sourcesContent":["import { THEME } from '@common/constants/theme.constant';\nimport { Field, IFieldProps } from '@common/general-ui/field/field.component';\nimport { Readonly } from '@common/general-ui/readonly.component';\nimport { ISelectOption } from '@common/general-ui/select/select.component';\nimport { css as emotionCss } from '@emotion/css';\nimport { SerializedStyles } from '@emotion/react';\nimport { Select as AntdSelect, SelectProps } from 'antd';\nimport { RefSelectProps } from 'antd/lib/select';\nimport React from 'react';\nimport { css } from 'twin.macro';\n\nconst { Option } = AntdSelect;\n\nexport type IMultiSelectChangeHandler = (e: { value: string[]; name: string }) => void;\nexport const MultiSelectOption = Option;\nexport interface IRenderOptionEventsArgs extends ISelectOption {\n    disabled: boolean;\n    ['data-parent-testid']: string;\n}\nexport interface IMultiSelectProps<TName = string> extends IFieldProps<string[], TName> {\n    maxCount?: number;\n    className?: string;\n    onChange?: IMultiSelectChangeHandler;\n    onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n    options?: ISelectOption[];\n    renderMultiSelectOption?: (e: IRenderOptionEventsArgs) => JSX.Element;\n}\n\nexport const MultiSelect = React.forwardRef<SelectProps<string>, IMultiSelectProps>(\n    (props: IMultiSelectProps, ref): JSX.Element => {\n        const { onChange, onBlur, name, value, defaultValue, errorMessage, placeholder, maxCount, options = [] } = props;\n\n        const renderOptions = (): JSX.Element[] => {\n            return options.map((option) => {\n                const disabled = !!maxCount && (value?.length || 0) >= maxCount && !value?.includes(option.value as string);\n                return (\n                    <React.Fragment key={option.value}>\n                        {props.renderMultiSelectOption ? (\n                            props.renderMultiSelectOption({\n                                ...option,\n                                'data-parent-testid': 'field-' + props.name,\n                                disabled,\n                            })\n                        ) : (\n                            <MultiSelectOption\n                                data-parent-testid={'field-' + props.name}\n                                value={option.value}\n                                disabled={disabled}\n                            >\n                                {option.label}\n                            </MultiSelectOption>\n                        )}\n                    </React.Fragment>\n                );\n            });\n        };\n\n        const handleChange = (value: string[]): void => {\n            onChange && onChange({ value, name });\n        };\n\n        return (\n            <Field {...props} errorMessage={errorMessage}>\n                <div tw=\"relative\">\n                    {props.readOnly && <Readonly />}\n\n                    <AntdSelect\n                        showArrow={true}\n                        ref={ref as unknown as React.Ref<RefSelectProps>}\n                        css={styles.root(!!props.readOnly)}\n                        dropdownClassName={styles.dropDown}\n                        mode=\"multiple\"\n                        allowClear\n                        tabIndex={props.readOnly ? -1 : 0}\n                        showSearch={!props.readOnly}\n                        placeholder={placeholder}\n                        defaultValue={defaultValue}\n                        value={value}\n                        onChange={handleChange}\n                        onBlur={onBlur}\n                        dropdownRender={(prev): JSX.Element => (props.readOnly ? <></> : prev)}\n                    >\n                        {renderOptions()}\n                    </AntdSelect>\n                </div>\n            </Field>\n        );\n    },\n);\n\nconst styles = {\n    root: (readOnly: boolean): (SerializedStyles | boolean)[] => [\n        css`\n            display: block;\n            && .ant-select-selector {\n                display: flex;\n                height: auto;\n                min-height: 34px;\n                border: 1px solid ${THEME.GRAY};\n                border-radius: 4px;\n                font-weight: 400;\n                color: ${THEME.BLACK};\n                width: 100%;\n                transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\n            }\n            && .ant-select-selection-item {\n                background-color: white;\n                color: ${THEME.BLACK};\n                border: 1px solid ${THEME.LIGHT_GRAY};\n            }\n            &&.ant-select-disabled {\n                && .ant-select-selection-item {\n                    background-color: ${THEME.DISABLED_BACKGROUND};\n                    color: ${THEME.GRAY};\n                }\n            }\n            && .ant-select-selection-item-content {\n                padding-top: 2px;\n            }\n            && .ant-select-selection-item-remove {\n                padding-top: 2px;\n                font-weight: bold;\n                color: ${THEME.BLACK};\n            }\n\n            &.ant-select-focused {\n                && .ant-select-selector {\n                    border: 1px solid ${THEME.GREEN};\n                    outline-color: transparent;\n                    outline-style: none;\n                    ${THEME.BOX_SHADOW_GREEN}\n                }\n            }\n            && .anticon-close {\n                position: relative;\n                top: -2px;\n            }\n        `,\n        readOnly &&\n            css`\n                && .ant-select-selector {\n                    // border-bottom: 1px solid ${THEME.READONLY_COLOR};\n                }\n            `,\n    ],\n\n    dropDown: emotionCss`\n\t\t&& .ant-select-item-option-selected {\n\t\t\tbackground-color: #fff ;\n\t\t}  \n\t\t&& .ant-select-item-option-active {\n            background-color: ${THEME.GREEN};\n            color: white;\n        }\n\t\t.divider {\n\t\t\tpadding:8px 12px;\n\t\t\twidth: 100%;\n\t\t\theight: auto;\n\t\t\tline-height: 1px;\n\t\t\tmin-height: 1px;\n\t\t}\n\n\t\t.divider div{\n\t\t\tborder-bottom: 1px solid ${THEME.GRAY};\n\t\t}\n\t\t\t\n    `,\n};\n\n// Don't use component - problem with child loop (antd)\nexport const renderMultiSelectDividerOption = (): JSX.Element => {\n    return (\n        <Option value=\"\" disabled={true} className=\"divider\">\n            {/* Don't remove this div */}\n            <div>&nbsp;</div>\n        </Option>\n    );\n};\n"]},"metadata":{},"sourceType":"script"}