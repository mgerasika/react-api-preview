{"ast":null,"code":"import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { useField } from '../../hooks/use-field.hook.js';\nimport React, { useCallback } from 'react';\nimport { UploadImage } from './upload-image.component.js';\nimport { jsx } from '@emotion/react';\nfunction FormUploadImage(props) {\n  const {\n    onChange,\n    onBlur,\n    getCustomErrorMessage\n  } = props;\n  const {\n    setFieldValue,\n    setFieldTouched,\n    value,\n    errorMessage\n  } = useField({\n    ...props,\n    getCustomErrorMessage\n  });\n  const handleChange = useCallback(e => {\n    onChange && onChange(e);\n    setFieldValue(e.target.value);\n  }, [setFieldValue, onChange]);\n  const handleBlur = useCallback(e => {\n    onBlur && onBlur(e);\n    setFieldTouched();\n  }, [onBlur, setFieldTouched]);\n  return jsx(React.Fragment, null, jsx(UploadImage, _extends({\n    errorMessage: errorMessage\n  }, props, {\n    onChange: handleChange,\n    onBlur: handleBlur,\n    name: props.name,\n    value: value\n  })));\n}\nexport { FormUploadImage };","map":{"version":3,"sources":["../../../../src/general-ui/upload-image/form-upload-image.component.tsx"],"names":["FormUploadImage","props","onChange","onBlur","getCustomErrorMessage","setFieldValue","setFieldTouched","value","errorMessage","useField","handleChange","useCallback","e","target","handleBlur","___EmotionJSX","name"],"mappings":";;;;;AAKO,SAASA,eAAe,CAC3BC,KAA2E,EAChE;EACX,MAAM;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAsB,CAAC,GAAGH,KAAK;EACzD,MAAM;IAAEI,aAAa;IAAEC,eAAe;IAAEC,KAAK;IAAEC;GAAc,GAAGC,QAAQ,CAAS;IAC7E,GAAGR,KAAK;IACRG;EACJ,CAAC,CAAC;EAEF,MAAMM,YAAY,GAAGC,WAAW,CAC3BC,CAAC,IAAK;IACHV,QAAQ,IAAIA,QAAQ,CAACU,CAAC,CAAC;IACvBP,aAAa,CAACO,CAAC,CAACC,MAAM,CAACN,KAAK,CAAW;EAC3C,CAAC,EACD,CAACF,aAAa,EAAEH,QAAQ,CAAC,CAC5B;EAED,MAAMY,UAAU,GAAGH,WAAW,CACzBC,CAA4B,IAAK;IAC9BT,MAAM,IAAIA,MAAM,CAACS,CAAC,CAAC;IACnBN,eAAe,EAAE;EACrB,CAAC,EACD,CAACH,MAAM,EAAEG,eAAe,CAAC,CAC5B;EAED,OACIS,GAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EACIA,GAAAA,CAAC,WAAW,EAAA,QAAA,CAAA;IACR,YAAY,EAAEP;EAAa,CAAA,EACvBP,KAAK,EAAA;IACT,QAAQ,EAAES,YAAa;IACvB,MAAM,EAAEI,UAAW;IACnB,IAAI,EAAEb,KAAK,CAACe,IAAe;IAC3B,KAAK,EAAET;EAAM,CAAA,CAAA,CACf,CACH;AAEX","sourcesContent":["import { useField } from '@common/hooks/use-field.hook';\nimport { RcFile } from 'antd/lib/upload';\nimport React, { useCallback } from 'react';\nimport { IUploadImageChangeHandler, IUploadImageProps, UploadImage } from './upload-image.component';\n\nexport function FormUploadImage<TFormValues>(\n    props: Omit<IUploadImageProps<keyof TFormValues>, 'value' | 'defaultValue'>,\n): JSX.Element {\n    const { onChange, onBlur, getCustomErrorMessage } = props;\n    const { setFieldValue, setFieldTouched, value, errorMessage } = useField<RcFile>({\n        ...props,\n        getCustomErrorMessage,\n    });\n\n    const handleChange = useCallback<IUploadImageChangeHandler>(\n        (e) => {\n            onChange && onChange(e);\n            setFieldValue(e.target.value as RcFile);\n        },\n        [setFieldValue, onChange],\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<unknown>) => {\n            onBlur && onBlur(e);\n            setFieldTouched();\n        },\n        [onBlur, setFieldTouched],\n    );\n\n    return (\n        <>\n            <UploadImage\n                errorMessage={errorMessage}\n                {...props}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                name={props.name as string}\n                value={value}\n            />\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}