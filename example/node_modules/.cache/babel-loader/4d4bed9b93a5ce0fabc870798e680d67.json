{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { useState, useEffect } from 'react';\nvar useTimer = function useTimer(duration) {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    timer = _useState2[0],\n    setTimer = _useState2[1];\n  useEffect(function () {\n    var interval = null;\n    if (duration) {\n      setTimer(duration);\n      interval = setInterval(function () {\n        setTimer(function (prevVal) {\n          var result = prevVal - 1;\n          if (result <= 0) {\n            clearInterval(interval);\n          }\n          return result;\n        });\n      }, 1000);\n    }\n    return function () {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [duration]);\n  return {\n    timer: timer\n  };\n};\nexport { useTimer };","map":{"version":3,"sources":["../../../src/hooks/use-timer.hook.ts"],"names":["useTimer","duration","timer","setTimer","useState","useEffect","interval","setInterval","prevVal","result","clearInterval"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMaA,IAAAA,QAAQ,GAAIC,SAAZD,QAAQ,CAAIC,QAA4B,EAAc;EAC/D,IAAA,SAAA,GAA0BG,QAAQ,CAAS,CAAC,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;IAAtCF,KAAK,GAAA,UAAA,CAAA,CAAA,CAAA;IAAEC,QAAQ,GAAA,UAAA,CAAA,CAAA,CAAA;EAEtBE,SAAS,CAAC,YAAM;IACZ,IAAIC,QAA6B,GAAG,IAAI;IAExC,IAAIL,QAAQ,EAAE;MACVE,QAAQ,CAACF,QAAQ,CAAC;MAClBK,QAAQ,GAAGC,WAAW,CAAC,YAAM;QACzBJ,QAAQ,CAAEK,UAAAA,OAAO,EAAK;UAClB,IAAMC,MAAM,GAAGD,OAAO,GAAG,CAAC;UAC1B,IAAIC,MAAM,IAAI,CAAC,EAAE;YACbC,aAAa,CAACJ,QAAQ,CAAiB;UAC3C;UACA,OAAOG,MAAM;QACjB,CAAC,CAAC;MACL,CAAA,EAAE,IAAI,CAAC;IACZ;IAEA,OAAO,YAAY;MACf,IAAIH,QAAQ,EAAE;QACVI,aAAa,CAACJ,QAAQ,CAAC;MAC3B;KACH;EACL,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC;EAEd,OAAO;IAAEC,KAAAA,EAAAA;GAAO;AACpB,CAAA","sourcesContent":["import { useEffect, useState } from 'react';\n\ninterface IReturn {\n    timer: number;\n}\n\nexport const useTimer = (duration: number | undefined): IReturn => {\n    const [timer, setTimer] = useState<number>(0);\n\n    useEffect(() => {\n        let interval: NodeJS.Timer | null = null;\n\n        if (duration) {\n            setTimer(duration);\n            interval = setInterval(() => {\n                setTimer((prevVal) => {\n                    const result = prevVal - 1;\n                    if (result <= 0) {\n                        clearInterval(interval as NodeJS.Timer);\n                    }\n                    return result;\n                });\n            }, 1000);\n        }\n\n        return (): void => {\n            if (interval) {\n                clearInterval(interval);\n            }\n        };\n    }, [duration]);\n\n    return { timer };\n};\n"]},"metadata":{},"sourceType":"module"}