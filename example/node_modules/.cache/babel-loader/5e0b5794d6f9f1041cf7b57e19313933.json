{"ast":null,"code":"import { slicedToArray as _slicedToArray, objectSpread2 as _objectSpread2, defineProperty as _defineProperty } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { localStorageService } from '../services/local-storage.service.js';\nimport { useState, useMemo } from 'react';\nvar KEY = \"ui-settings\";\nfunction useTableUISettings(_ref) {\n  var name = _ref.name,\n    _ref$initial = _ref.initial,\n    initial = _ref$initial === void 0 ? {\n      chooserColumns: []\n    } : _ref$initial;\n  var fromStorage = localStorageService.load(KEY, {\n    chooserColumns: []\n  });\n  var _useState = useState(fromStorage && fromStorage[name] ? fromStorage[name] : initial),\n    _useState2 = _slicedToArray(_useState, 2),\n    ui = _useState2[0],\n    setUI = _useState2[1];\n  return useMemo(function () {\n    return {\n      tableUISettings: ui,\n      saveTableUISettings: function saveTableUISettings(data) {\n        var prev = localStorageService.load(KEY, {});\n        setUI(data);\n        localStorageService.save(KEY, _objectSpread2(_objectSpread2({}, prev), {}, _defineProperty({}, name, data)));\n      }\n    };\n  }, [name, ui]);\n}\nexport { useTableUISettings };","map":{"version":3,"sources":["../../../src/hooks/use-ui-settings.hook.ts"],"names":["KEY","useTableUISettings","name","_ref$initial","initial","chooserColumns","fromStorage","localStorageService","load","ui","setUI","useState","_useState2","useMemo","tableUISettings","saveTableUISettings","data","prev","save"],"mappings":";;;AAcA,IAAMA,GAAG,GAAgB,aAAA;AAElB,SAASC,kBAAkB,CAA8D,IAAA,EAAA;EAAA,IAA3DC,IAAIC,GAAAA,IAAAA,CAAJD,IAAIC;IAAAA,YAAAA,GAAAA,IAAAA,CAAEC,OAAO;IAAPA,OAAO,GAAGD,YAAAA,KAAAA,KAAAA,CAAAA,GAAAA;MAAEE,cAAc,EAAE;IAAI,CAAA,GAAA,YAAA;EACvE,IAAMC,WAAW,GAAGC,mBAAmB,CAACC,IAAI,CAAmBR,GAAG,EAAE;IAAEK,cAAc,EAAE;EAAG,CAAC,CAAC;EAC3F,IAAA,SAAA,GAAoBM,QAAQ,CAAmBL,WAAW,IAAIA,WAAW,CAACJ,IAAI,CAAC,GAAGI,WAAW,CAACJ,IAAI,CAAC,GAAGE,OAAO,CAACQ;IAAAA,UAAAA,GAAAA,cAAAA,CAAAA,SAAAA,EAAAA,CAAAA,CAAAA;IAAvGH,EAAE,GAAA,UAAA,CAAA,CAAA,CAAA;IAAEC,KAAK,GAAA,UAAA,CAAA,CAAA,CAAA;EAEhB,OAAOG,OAAO,CAAC,YAAe;IAC1B,OAAO;MACHC,eAAe,EAAEL,EAAE;MACnBM,mBAAmB,EAAE,SAACC,mBAAAA,CAAAA,IAAsB,EAAW;QACnD,IAAMC,IAAI,GAAGV,mBAAmB,CAACC,IAAI,CAACR,GAAG,EAAE,CAAE,CAAA,CAAC;QAE9CU,KAAK,CAACM,IAAI,CAAC;QACXT,mBAAmB,CAACW,IAAI,CAAClB,GAAG,EAAA,cAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EACrBiB,IAAI,CACNf,EAAAA,CAAAA,CAAAA,EAAAA,eAAAA,CAAAA,CAAAA,CAAAA,EAAAA,IAAI,EAAGc,IAAI,CACd,CAAA,CAAA;MACN;KACH;EACL,CAAC,EAAE,CAACd,IAAI,EAAEO,EAAE,CAAC,CAAC;AAClB","sourcesContent":["import { ITableUISettings } from '@common/interfaces/ui-settings.interface';\nimport { localStorageService } from '@common/services/local-storage.service';\nimport { useMemo, useState } from 'react';\n\ninterface IProps {\n    initial?: ITableUISettings;\n    name: string;\n}\n\ninterface IResult {\n    tableUISettings: ITableUISettings;\n    saveTableUISettings: (data: ITableUISettings) => void;\n}\n\nconst KEY = `ui-settings`;\n\nexport function useTableUISettings({ name, initial = { chooserColumns: [] } }: IProps): IResult {\n    const fromStorage = localStorageService.load<ITableUISettings>(KEY, { chooserColumns: [] });\n    const [ui, setUI] = useState<ITableUISettings>(fromStorage && fromStorage[name] ? fromStorage[name] : initial);\n\n    return useMemo((): IResult => {\n        return {\n            tableUISettings: ui,\n            saveTableUISettings: (data: ITableUISettings): void => {\n                const prev = localStorageService.load(KEY, {});\n\n                setUI(data);\n                localStorageService.save(KEY, {\n                    ...prev,\n                    [name]: data,\n                });\n            },\n        };\n    }, [name, ui]);\n}\n"]},"metadata":{},"sourceType":"module"}