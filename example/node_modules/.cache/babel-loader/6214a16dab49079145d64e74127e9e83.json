{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { UploadPartCopyOutput, UploadPartCopyRequest } from \"../models/models_1\";\nimport { deserializeAws_restXmlUploadPartCopyCommand, serializeAws_restXmlUploadPartCopyCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getThrow200ExceptionsPlugin } from \"@aws-sdk/middleware-sdk-s3\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getSsecPlugin } from \"@aws-sdk/middleware-ssec\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Uploads a part by copying data from an existing object as data source. You specify the\n *          data source by adding the request header <code>x-amz-copy-source</code> in your request and\n *          a byte range by adding the request header <code>x-amz-copy-source-range</code> in your\n *          request. </p>\n *          <p>The minimum allowable part size for a multipart upload is 5 MB. For more information\n *          about multipart upload limits, go to <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/qfacts.html\">Quick\n *             Facts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>. </p>\n *          <note>\n *             <p>Instead of using an existing object as part data, you might use the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *             operation and provide data in your request.</p>\n *          </note>\n *\n *          <p>You must initiate a multipart upload before you can upload any part. In response to your\n *          initiate request. Amazon S3 returns a unique identifier, the upload ID, that you must include in\n *          your upload part request.</p>\n *          <p>For more information about using the <code>UploadPartCopy</code> operation, see the\n *          following:</p>\n *\n *          <ul>\n *             <li>\n *                <p>For conceptual information about multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html\">Uploading Objects Using Multipart\n *                   Upload</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *             </li>\n *             <li>\n *                <p>For information about permissions required to use the multipart upload API, see\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *                   Permissions</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *             </li>\n *             <li>\n *                <p>For information about copying objects using a single atomic operation vs. the\n *                multipart upload, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectOperations.html\">Operations on\n *                   Objects</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *             </li>\n *             <li>\n *                <p>For information about using server-side encryption with customer-provided\n *                encryption keys with the UploadPartCopy operation, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html\">CopyObject</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>.</p>\n *             </li>\n *          </ul>\n *          <p>Note the following additional considerations about the request headers\n *             <code>x-amz-copy-source-if-match</code>, <code>x-amz-copy-source-if-none-match</code>,\n *             <code>x-amz-copy-source-if-unmodified-since</code>, and\n *             <code>x-amz-copy-source-if-modified-since</code>:</p>\n *          <p> </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <b>Consideration 1</b> - If both of the\n *                   <code>x-amz-copy-source-if-match</code> and\n *                   <code>x-amz-copy-source-if-unmodified-since</code> headers are present in the\n *                request as follows:</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-match</code> condition evaluates to <code>true</code>,\n *                and;</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-unmodified-since</code> condition evaluates to\n *                   <code>false</code>;</p>\n *                <p>Amazon S3 returns <code>200 OK</code> and copies the data.\n *                </p>\n *\n *             </li>\n *             <li>\n *                <p>\n *                   <b>Consideration 2</b> - If both of the\n *                   <code>x-amz-copy-source-if-none-match</code> and\n *                   <code>x-amz-copy-source-if-modified-since</code> headers are present in the\n *                request as follows:</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-none-match</code> condition evaluates to\n *                   <code>false</code>, and;</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-modified-since</code> condition evaluates to\n *                   <code>true</code>;</p>\n *                <p>Amazon S3 returns <code>412 Precondition Failed</code> response code.\n *                </p>\n *             </li>\n *          </ul>\n *          <p>\n *             <b>Versioning</b>\n *          </p>\n *          <p>If your bucket has versioning enabled, you could have multiple versions of the same\n *          object. By default, <code>x-amz-copy-source</code> identifies the current version of the\n *          object to copy. If the current version is a delete marker and you don't specify a versionId\n *          in the <code>x-amz-copy-source</code>, Amazon S3 returns a 404 error, because the object does\n *          not exist. If you specify versionId in the <code>x-amz-copy-source</code> and the versionId\n *          is a delete marker, Amazon S3 returns an HTTP 400 error, because you are not allowed to specify\n *          a delete marker as a version for the <code>x-amz-copy-source</code>. </p>\n *          <p>You can optionally specify a specific version of the source object to copy by adding the\n *             <code>versionId</code> subresource as shown in the following example:</p>\n *          <p>\n *             <code>x-amz-copy-source: /bucket/object?versionId=version id</code>\n *          </p>\n *\n *          <p class=\"title\">\n *             <b>Special Errors</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: NoSuchUpload</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The specified multipart upload does not exist. The upload\n *                         ID might be invalid, or the multipart upload might have been aborted or\n *                         completed.</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>HTTP Status Code: 404 Not Found</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: InvalidRequest</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The specified copy source is not supported as a byte-range\n *                         copy source.</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>HTTP Status Code: 400 Bad Request</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *          </ul>\n *\n *\n *\n *\n *\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html\">ListMultipartUploads</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nvar UploadPartCopyCommand = /** @class */function (_super) {\n  __extends(UploadPartCopyCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function UploadPartCopyCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  UploadPartCopyCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));\n    this.middlewareStack.use(getSsecPlugin(configuration));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"UploadPartCopyCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: UploadPartCopyRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: UploadPartCopyOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  UploadPartCopyCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlUploadPartCopyCommand(input, context);\n  };\n  UploadPartCopyCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlUploadPartCopyCommand(output, context);\n  };\n  return UploadPartCopyCommand;\n}($Command);\nexport { UploadPartCopyCommand };","map":{"version":3,"sources":["../../../commands/UploadPartCopyCommand.ts"],"names":[],"mappings":";AACA,SAAS,oBAAoB,EAAE,qBAAqB,QAAQ,oBAAoB;AAChF,SACE,2CAA2C,EAC3C,yCAAyC,QACpC,0BAA0B;AACjC,SAAS,uBAAuB,QAAQ,qCAAqC;AAC7E,SAAS,2BAA2B,QAAQ,4BAA4B;AACxE,SAAS,cAAc,QAAQ,2BAA2B;AAC1D,SAAS,aAAa,QAAQ,0BAA0B;AAExD,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoLG;AACH,IAAA,qBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA2C,SAAA,CAAA,qBAAA,EAAA,MAAA,CAAA;EAKzC;EACA;EAEA,SAAA,qBAAA,CAAqB,KAAiC,EAAA;IAAtD,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,qBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAAqC,EACrC,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACzF,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,2BAA2B,CAAC,aAAa,CAAC,CAAC;IACpE,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IACtD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;IAEhE,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,UAAU;IAC7B,IAAM,WAAW,GAAG,uBAAuB;IAC3C,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,qBAAqB,CAAC,kBAAkB;MACjE,wBAAwB,EAAE,oBAAoB,CAAC;KAChD;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,qBAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAAiC,EAAE,OAAuB,EAAA;IAC1E,OAAO,yCAAyC,CAAC,KAAK,EAAE,OAAO,CAAC;EAClE,CAAC;EAEO,qBAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,2CAA2C,CAAC,MAAM,EAAE,OAAO,CAAC;EACrE,CAAC;EAIH,OAAA,qBAAC;AAAD,CAAC,CAzD0C,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { UploadPartCopyOutput, UploadPartCopyRequest } from \"../models/models_1\";\nimport { deserializeAws_restXmlUploadPartCopyCommand, serializeAws_restXmlUploadPartCopyCommand, } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getThrow200ExceptionsPlugin } from \"@aws-sdk/middleware-sdk-s3\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getSsecPlugin } from \"@aws-sdk/middleware-ssec\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Uploads a part by copying data from an existing object as data source. You specify the\n *          data source by adding the request header <code>x-amz-copy-source</code> in your request and\n *          a byte range by adding the request header <code>x-amz-copy-source-range</code> in your\n *          request. </p>\n *          <p>The minimum allowable part size for a multipart upload is 5 MB. For more information\n *          about multipart upload limits, go to <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/qfacts.html\">Quick\n *             Facts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>. </p>\n *          <note>\n *             <p>Instead of using an existing object as part data, you might use the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *             operation and provide data in your request.</p>\n *          </note>\n *\n *          <p>You must initiate a multipart upload before you can upload any part. In response to your\n *          initiate request. Amazon S3 returns a unique identifier, the upload ID, that you must include in\n *          your upload part request.</p>\n *          <p>For more information about using the <code>UploadPartCopy</code> operation, see the\n *          following:</p>\n *\n *          <ul>\n *             <li>\n *                <p>For conceptual information about multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html\">Uploading Objects Using Multipart\n *                   Upload</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *             </li>\n *             <li>\n *                <p>For information about permissions required to use the multipart upload API, see\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *                   Permissions</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *             </li>\n *             <li>\n *                <p>For information about copying objects using a single atomic operation vs. the\n *                multipart upload, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectOperations.html\">Operations on\n *                   Objects</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *             </li>\n *             <li>\n *                <p>For information about using server-side encryption with customer-provided\n *                encryption keys with the UploadPartCopy operation, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html\">CopyObject</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>.</p>\n *             </li>\n *          </ul>\n *          <p>Note the following additional considerations about the request headers\n *             <code>x-amz-copy-source-if-match</code>, <code>x-amz-copy-source-if-none-match</code>,\n *             <code>x-amz-copy-source-if-unmodified-since</code>, and\n *             <code>x-amz-copy-source-if-modified-since</code>:</p>\n *          <p> </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <b>Consideration 1</b> - If both of the\n *                   <code>x-amz-copy-source-if-match</code> and\n *                   <code>x-amz-copy-source-if-unmodified-since</code> headers are present in the\n *                request as follows:</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-match</code> condition evaluates to <code>true</code>,\n *                and;</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-unmodified-since</code> condition evaluates to\n *                   <code>false</code>;</p>\n *                <p>Amazon S3 returns <code>200 OK</code> and copies the data.\n *                </p>\n *\n *             </li>\n *             <li>\n *                <p>\n *                   <b>Consideration 2</b> - If both of the\n *                   <code>x-amz-copy-source-if-none-match</code> and\n *                   <code>x-amz-copy-source-if-modified-since</code> headers are present in the\n *                request as follows:</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-none-match</code> condition evaluates to\n *                   <code>false</code>, and;</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-modified-since</code> condition evaluates to\n *                   <code>true</code>;</p>\n *                <p>Amazon S3 returns <code>412 Precondition Failed</code> response code.\n *                </p>\n *             </li>\n *          </ul>\n *          <p>\n *             <b>Versioning</b>\n *          </p>\n *          <p>If your bucket has versioning enabled, you could have multiple versions of the same\n *          object. By default, <code>x-amz-copy-source</code> identifies the current version of the\n *          object to copy. If the current version is a delete marker and you don't specify a versionId\n *          in the <code>x-amz-copy-source</code>, Amazon S3 returns a 404 error, because the object does\n *          not exist. If you specify versionId in the <code>x-amz-copy-source</code> and the versionId\n *          is a delete marker, Amazon S3 returns an HTTP 400 error, because you are not allowed to specify\n *          a delete marker as a version for the <code>x-amz-copy-source</code>. </p>\n *          <p>You can optionally specify a specific version of the source object to copy by adding the\n *             <code>versionId</code> subresource as shown in the following example:</p>\n *          <p>\n *             <code>x-amz-copy-source: /bucket/object?versionId=version id</code>\n *          </p>\n *\n *          <p class=\"title\">\n *             <b>Special Errors</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: NoSuchUpload</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The specified multipart upload does not exist. The upload\n *                         ID might be invalid, or the multipart upload might have been aborted or\n *                         completed.</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>HTTP Status Code: 404 Not Found</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: InvalidRequest</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The specified copy source is not supported as a byte-range\n *                         copy source.</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>HTTP Status Code: 400 Bad Request</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *          </ul>\n *\n *\n *\n *\n *\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html\">ListMultipartUploads</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nvar UploadPartCopyCommand = /** @class */ (function (_super) {\n    __extends(UploadPartCopyCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function UploadPartCopyCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    UploadPartCopyCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));\n        this.middlewareStack.use(getSsecPlugin(configuration));\n        this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"S3Client\";\n        var commandName = \"UploadPartCopyCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: UploadPartCopyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: UploadPartCopyOutput.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    UploadPartCopyCommand.prototype.serialize = function (input, context) {\n        return serializeAws_restXmlUploadPartCopyCommand(input, context);\n    };\n    UploadPartCopyCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_restXmlUploadPartCopyCommand(output, context);\n    };\n    return UploadPartCopyCommand;\n}($Command));\nexport { UploadPartCopyCommand };\n//# sourceMappingURL=UploadPartCopyCommand.js.map"]},"metadata":{},"sourceType":"module"}