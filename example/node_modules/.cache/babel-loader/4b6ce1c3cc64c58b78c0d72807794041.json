{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar connectionTimeout = function (error) {\n  return /^Connection failed: Connection Timeout/.test(error.message);\n};\nvar serverError = function (error) {\n  return /^Error: Request failed with status code 5\\d\\d/.test(error.message);\n};\nexport var mutationErrorMap = {\n  BadModel: function () {\n    return false;\n  },\n  BadRecord: function (error) {\n    var message = error.message;\n    return /^Cannot return \\w+ for [\\w-_]+ type/.test(message) || /^Variable '.+' has coerced Null value for NonNull type/.test(message); // newly required field, out of date client\n  },\n\n  ConfigError: function () {\n    return false;\n  },\n  Transient: function (error) {\n    return connectionTimeout(error) || serverError(error);\n  },\n  Unauthorized: function (error) {\n    return /^Request failed with status code 401/.test(error.message);\n  }\n};\nexport var subscriptionErrorMap = {\n  BadModel: function () {\n    return false;\n  },\n  BadRecord: function () {\n    return false;\n  },\n  ConfigError: function () {\n    return false;\n  },\n  Transient: function (observableError) {\n    var error = unwrapObservableError(observableError);\n    return connectionTimeout(error) || serverError(error);\n  },\n  Unauthorized: function (observableError) {\n    var error = unwrapObservableError(observableError);\n    return /Connection failed.+Unauthorized/.test(error.message);\n  }\n};\nexport var syncErrorMap = {\n  BadModel: function () {\n    return false;\n  },\n  BadRecord: function (error) {\n    return /^Cannot return \\w+ for [\\w-_]+ type/.test(error.message);\n  },\n  ConfigError: function () {\n    return false;\n  },\n  Transient: function (error) {\n    return connectionTimeout(error) || serverError(error);\n  },\n  Unauthorized: function () {\n    return false;\n  }\n};\n/**\n * Get the first error reason of an observable.\n * Allows for error maps to be easily applied to observable errors\n *\n * @param observableError an error from ZenObservable subscribe error callback\n */\nfunction unwrapObservableError(observableError) {\n  var _a = observableError.error,\n    _b = __read((_a === void 0 ? {\n      errors: []\n    } : _a).errors, 1),\n    error = _b[0];\n  return error;\n}\nexport function getMutationErrorType(error) {\n  return mapErrorToType(mutationErrorMap, error);\n}\nexport function getSubscriptionErrorType(error) {\n  return mapErrorToType(subscriptionErrorMap, error);\n}\nexport function getSyncErrorType(error) {\n  return mapErrorToType(syncErrorMap, error);\n}\n/**\n * Categorizes an error with a broad error type, intended to make\n * customer error handling code simpler.\n * @param errorMap Error names and a list of patterns that indicate them (each pattern as a regex or function)\n * @param error The underying error to categorize.\n */\nexport function mapErrorToType(errorMap, error) {\n  var e_1, _a;\n  var errorTypes = __spread(Object.keys(errorMap));\n  try {\n    for (var errorTypes_1 = __values(errorTypes), errorTypes_1_1 = errorTypes_1.next(); !errorTypes_1_1.done; errorTypes_1_1 = errorTypes_1.next()) {\n      var errorType = errorTypes_1_1.value;\n      var matcher = errorMap[errorType];\n      if (matcher(error)) {\n        return errorType;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (errorTypes_1_1 && !errorTypes_1_1.done && (_a = errorTypes_1.return)) _a.call(errorTypes_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return 'Unknown';\n}","map":{"version":3,"sources":["../../../src/sync/processors/errorMaps.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar connectionTimeout = function (error) {\n    return /^Connection failed: Connection Timeout/.test(error.message);\n};\nvar serverError = function (error) {\n    return /^Error: Request failed with status code 5\\d\\d/.test(error.message);\n};\nexport var mutationErrorMap = {\n    BadModel: function () { return false; },\n    BadRecord: function (error) {\n        var message = error.message;\n        return (/^Cannot return \\w+ for [\\w-_]+ type/.test(message) ||\n            /^Variable '.+' has coerced Null value for NonNull type/.test(message)); // newly required field, out of date client\n    },\n    ConfigError: function () { return false; },\n    Transient: function (error) { return connectionTimeout(error) || serverError(error); },\n    Unauthorized: function (error) {\n        return /^Request failed with status code 401/.test(error.message);\n    },\n};\nexport var subscriptionErrorMap = {\n    BadModel: function () { return false; },\n    BadRecord: function () { return false; },\n    ConfigError: function () { return false; },\n    Transient: function (observableError) {\n        var error = unwrapObservableError(observableError);\n        return connectionTimeout(error) || serverError(error);\n    },\n    Unauthorized: function (observableError) {\n        var error = unwrapObservableError(observableError);\n        return /Connection failed.+Unauthorized/.test(error.message);\n    },\n};\nexport var syncErrorMap = {\n    BadModel: function () { return false; },\n    BadRecord: function (error) { return /^Cannot return \\w+ for [\\w-_]+ type/.test(error.message); },\n    ConfigError: function () { return false; },\n    Transient: function (error) { return connectionTimeout(error) || serverError(error); },\n    Unauthorized: function () { return false; },\n};\n/**\n * Get the first error reason of an observable.\n * Allows for error maps to be easily applied to observable errors\n *\n * @param observableError an error from ZenObservable subscribe error callback\n */\nfunction unwrapObservableError(observableError) {\n    var _a = observableError.error, _b = __read((_a === void 0 ? {\n        errors: [],\n    } : _a).errors, 1), error = _b[0];\n    return error;\n}\nexport function getMutationErrorType(error) {\n    return mapErrorToType(mutationErrorMap, error);\n}\nexport function getSubscriptionErrorType(error) {\n    return mapErrorToType(subscriptionErrorMap, error);\n}\nexport function getSyncErrorType(error) {\n    return mapErrorToType(syncErrorMap, error);\n}\n/**\n * Categorizes an error with a broad error type, intended to make\n * customer error handling code simpler.\n * @param errorMap Error names and a list of patterns that indicate them (each pattern as a regex or function)\n * @param error The underying error to categorize.\n */\nexport function mapErrorToType(errorMap, error) {\n    var e_1, _a;\n    var errorTypes = __spread(Object.keys(errorMap));\n    try {\n        for (var errorTypes_1 = __values(errorTypes), errorTypes_1_1 = errorTypes_1.next(); !errorTypes_1_1.done; errorTypes_1_1 = errorTypes_1.next()) {\n            var errorType = errorTypes_1_1.value;\n            var matcher = errorMap[errorType];\n            if (matcher(error)) {\n                return errorType;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (errorTypes_1_1 && !errorTypes_1_1.done && (_a = errorTypes_1.return)) _a.call(errorTypes_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return 'Unknown';\n}\n//# sourceMappingURL=errorMaps.js.map"]},"metadata":{},"sourceType":"module"}