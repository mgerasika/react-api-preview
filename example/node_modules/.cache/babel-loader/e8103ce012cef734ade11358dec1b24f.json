{"ast":null,"code":"/**\n * Validates that waiter options are passed correctly\n * @param options a waiter configuration object\n */\nexport var validateWaiterOptions = function validateWaiterOptions(options) {\n  if (options.maxWaitTime < 1) {\n    throw new Error(\"WaiterConfiguration.maxWaitTime must be greater than 0\");\n  } else if (options.minDelay < 1) {\n    throw new Error(\"WaiterConfiguration.minDelay must be greater than 0\");\n  } else if (options.maxDelay < 1) {\n    throw new Error(\"WaiterConfiguration.maxDelay must be greater than 0\");\n  } else if (options.maxWaitTime <= options.minDelay) {\n    throw new Error(\"WaiterConfiguration.maxWaitTime [\" + options.maxWaitTime + \"] must be greater than WaiterConfiguration.minDelay [\" + options.minDelay + \"] for this waiter\");\n  } else if (options.maxDelay < options.minDelay) {\n    throw new Error(\"WaiterConfiguration.maxDelay [\" + options.maxDelay + \"] must be greater than WaiterConfiguration.minDelay [\" + options.minDelay + \"] for this waiter\");\n  }\n};","map":{"version":3,"sources":["../../../src/utils/validate.ts"],"names":[],"mappings":"AAEA;;;AAGG;AACH,OAAO,IAAM,qBAAqB,GAAG,SAAxB,qBAAqB,CAAY,OAA8B,EAAA;EAC1E,IAAI,OAAO,CAAC,WAAW,GAAG,CAAC,EAAE;IAC3B,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC;GAC1E,MAAM,IAAI,OAAO,CAAC,QAAQ,GAAG,CAAC,EAAE;IAC/B,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC;GACvE,MAAM,IAAI,OAAO,CAAC,QAAQ,GAAG,CAAC,EAAE;IAC/B,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC;GACvE,MAAM,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,QAAQ,EAAE;IAClD,MAAM,IAAI,KAAK,CACb,mCAAA,GAAoC,OAAO,CAAC,WAAW,GAAA,uDAAA,GAAwD,OAAO,CAAC,QAAQ,GAAA,mBAAmB,CACnJ;GACF,MAAM,IAAI,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,EAAE;IAC9C,MAAM,IAAI,KAAK,CACb,gCAAA,GAAiC,OAAO,CAAC,QAAQ,GAAA,uDAAA,GAAwD,OAAO,CAAC,QAAQ,GAAA,mBAAmB,CAC7I;EACF;AACH,CAAC","sourcesContent":["import { WaiterOptions } from \"../waiter\";\n\n/**\n * Validates that waiter options are passed correctly\n * @param options a waiter configuration object\n */\nexport const validateWaiterOptions = <Client>(options: WaiterOptions<Client>): void => {\n  if (options.maxWaitTime < 1) {\n    throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);\n  } else if (options.minDelay < 1) {\n    throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);\n  } else if (options.maxDelay < 1) {\n    throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);\n  } else if (options.maxWaitTime <= options.minDelay) {\n    throw new Error(\n      `WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`\n    );\n  } else if (options.maxDelay < options.minDelay) {\n    throw new Error(\n      `WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`\n    );\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}