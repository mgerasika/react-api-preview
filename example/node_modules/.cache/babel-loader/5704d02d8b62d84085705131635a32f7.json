{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetCelebrityRecognitionRequest, GetCelebrityRecognitionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetCelebrityRecognitionCommand, serializeAws_json1_1GetCelebrityRecognitionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the celebrity recognition results for a Amazon Rekognition Video analysis started by\n *      <a>StartCelebrityRecognition</a>.</p>\n *          <p>Celebrity recognition in a video is an asynchronous operation. Analysis is started by a call\n *       to <a>StartCelebrityRecognition</a>  which returns a job identifier (<code>JobId</code>).\n *       When the celebrity recognition operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartCelebrityRecognition</code>.\n *       To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS\n *       topic is <code>SUCCEEDED</code>. If so, call  <code>GetCelebrityDetection</code> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>. </p>\n *\n *          <p>For more information, see Working With Stored Videos in the Amazon Rekognition Developer Guide.</p>\n *          <p>\n *             <code>GetCelebrityRecognition</code> returns detected celebrities and the time(s) they are detected in an array\n *       (<code>Celebrities</code>) of <a>CelebrityRecognition</a>\n *\n *       objects. Each <code>CelebrityRecognition</code> contains information about the celebrity in a <a>CelebrityDetail</a>\n *       object and the time, <code>Timestamp</code>, the celebrity was detected.\n *       </p>\n *          <note>\n *\n *             <p>\n *                <code>GetCelebrityRecognition</code> only returns the default\n *         facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n *         <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n *         in the <code>Face</code> object of the following response syntax are not returned. For more information,\n *         see FaceDetail in the Amazon Rekognition Developer Guide. </p>\n *          </note>\n *          <p>By default, the <code>Celebrities</code> array is sorted by time (milliseconds from the start of the video).\n *       You can also sort the array by celebrity by specifying the value <code>ID</code> in the <code>SortBy</code> input parameter.</p>\n *          <p>The <code>CelebrityDetail</code> object includes the celebrity identifer and additional information urls. If you don't store\n *       the additional information urls, you can get them later by calling <a>GetCelebrityInfo</a> with the celebrity identifer.</p>\n *          <p>No information is returned for faces not recognized as celebrities.</p>\n *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n *       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n *       pagination token for getting the next set of results. To get the next page of results, call <code>GetCelebrityDetection</code>\n *       and populate the <code>NextToken</code> request parameter with the token\n *       value returned from the previous call to <code>GetCelebrityRecognition</code>.</p>\n */\nvar GetCelebrityRecognitionCommand = /** @class */function (_super) {\n  __extends(GetCelebrityRecognitionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetCelebrityRecognitionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetCelebrityRecognitionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetCelebrityRecognitionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetCelebrityRecognitionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetCelebrityRecognitionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetCelebrityRecognitionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetCelebrityRecognitionCommand(input, context);\n  };\n  GetCelebrityRecognitionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetCelebrityRecognitionCommand(output, context);\n  };\n  return GetCelebrityRecognitionCommand;\n}($Command);\nexport { GetCelebrityRecognitionCommand };","map":{"version":3,"sources":["../../../commands/GetCelebrityRecognitionCommand.ts"],"names":[],"mappings":";AACA,SAAS,8BAA8B,EAAE,+BAA+B,QAAQ,oBAAoB;AACpG,SACE,oDAAoD,EACpD,kDAAkD,QAC7C,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCG;AACH,IAAA,8BAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAoD,SAAA,CAAA,8BAAA,EAAA,MAAA,CAAA;EAKlD;EACA;EAEA,SAAA,8BAAA,CAAqB,KAA0C,EAAA;IAA/D,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,8BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA8C,EAC9C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,mBAAmB;IACtC,IAAM,WAAW,GAAG,gCAAgC;IACpD,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,8BAA8B,CAAC,kBAAkB;MAC1E,wBAAwB,EAAE,+BAA+B,CAAC;KAC3D;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,8BAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAA0C,EAAE,OAAuB,EAAA;IACnF,OAAO,kDAAkD,CAAC,KAAK,EAAE,OAAO,CAAC;EAC3E,CAAC;EAEO,8BAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,oDAAoD,CAAC,MAAM,EAAE,OAAO,CAAC;EAC9E,CAAC;EAIH,OAAA,8BAAC;AAAD,CAAC,CAtDmD,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetCelebrityRecognitionRequest, GetCelebrityRecognitionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetCelebrityRecognitionCommand, serializeAws_json1_1GetCelebrityRecognitionCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the celebrity recognition results for a Amazon Rekognition Video analysis started by\n *      <a>StartCelebrityRecognition</a>.</p>\n *          <p>Celebrity recognition in a video is an asynchronous operation. Analysis is started by a call\n *       to <a>StartCelebrityRecognition</a>  which returns a job identifier (<code>JobId</code>).\n *       When the celebrity recognition operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartCelebrityRecognition</code>.\n *       To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS\n *       topic is <code>SUCCEEDED</code>. If so, call  <code>GetCelebrityDetection</code> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>. </p>\n *\n *          <p>For more information, see Working With Stored Videos in the Amazon Rekognition Developer Guide.</p>\n *          <p>\n *             <code>GetCelebrityRecognition</code> returns detected celebrities and the time(s) they are detected in an array\n *       (<code>Celebrities</code>) of <a>CelebrityRecognition</a>\n *\n *       objects. Each <code>CelebrityRecognition</code> contains information about the celebrity in a <a>CelebrityDetail</a>\n *       object and the time, <code>Timestamp</code>, the celebrity was detected.\n *       </p>\n *          <note>\n *\n *             <p>\n *                <code>GetCelebrityRecognition</code> only returns the default\n *         facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n *         <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n *         in the <code>Face</code> object of the following response syntax are not returned. For more information,\n *         see FaceDetail in the Amazon Rekognition Developer Guide. </p>\n *          </note>\n *          <p>By default, the <code>Celebrities</code> array is sorted by time (milliseconds from the start of the video).\n *       You can also sort the array by celebrity by specifying the value <code>ID</code> in the <code>SortBy</code> input parameter.</p>\n *          <p>The <code>CelebrityDetail</code> object includes the celebrity identifer and additional information urls. If you don't store\n *       the additional information urls, you can get them later by calling <a>GetCelebrityInfo</a> with the celebrity identifer.</p>\n *          <p>No information is returned for faces not recognized as celebrities.</p>\n *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n *       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n *       pagination token for getting the next set of results. To get the next page of results, call <code>GetCelebrityDetection</code>\n *       and populate the <code>NextToken</code> request parameter with the token\n *       value returned from the previous call to <code>GetCelebrityRecognition</code>.</p>\n */\nvar GetCelebrityRecognitionCommand = /** @class */ (function (_super) {\n    __extends(GetCelebrityRecognitionCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetCelebrityRecognitionCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetCelebrityRecognitionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"GetCelebrityRecognitionCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetCelebrityRecognitionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: GetCelebrityRecognitionResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetCelebrityRecognitionCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1GetCelebrityRecognitionCommand(input, context);\n    };\n    GetCelebrityRecognitionCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1GetCelebrityRecognitionCommand(output, context);\n    };\n    return GetCelebrityRecognitionCommand;\n}($Command));\nexport { GetCelebrityRecognitionCommand };\n//# sourceMappingURL=GetCelebrityRecognitionCommand.js.map"]},"metadata":{},"sourceType":"module"}