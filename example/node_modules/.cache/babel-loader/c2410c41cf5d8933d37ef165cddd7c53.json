{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createTSUnionType;\nvar _generated = require(\"../generated\");\nvar _removeTypeDuplicates = require(\"../../modifications/typescript/removeTypeDuplicates\");\nvar _index = require(\"../../validators/generated/index\");\nfunction createTSUnionType(typeAnnotations) {\n  const types = typeAnnotations.map(type => {\n    return (0, _index.isTSTypeAnnotation)(type) ? type.typeAnnotation : type;\n  });\n  const flattened = (0, _removeTypeDuplicates.default)(types);\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return (0, _generated.tsUnionType)(flattened);\n  }\n}","map":{"version":3,"sources":["../../../src/builders/typescript/createTSUnionType.ts"],"names":["createTSUnionType","typeAnnotations","types","map","type","typeAnnotation","flattened","length"],"mappings":";;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AACA,IAAA,qBAAA,GAAA,OAAA,CAAA,qDAAA,CAAA;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;AAOe,SAASA,iBAAT,CACbC,eADa,EAEH;EACV,MAAMC,KAAK,GAAG,eAAe,CAACC,GAAhB,CAAoBC,IAAI,IAAI;IACxC,OAAO,CAAA,CAAA,EAAA,MAAA,CAAA,kBAAA,EAAmBA,IAAnB,CAAA,GAA2BA,IAAI,CAACC,cAAhC,GAAiDD,IAAxD;EACD,CAFa,CAAd;EAGA,MAAME,SAAS,GAAG,CAAA,CAAA,EAAA,qBAAA,CAAA,OAAA,EAAqBJ,KAArB,CAAlB;EAEA,IAAII,SAAS,CAACC,MAAVD,KAAqB,CAAzB,EAA4B;IAC1B,OAAOA,SAAS,CAAC,CAAD,CAAhB;EACD,CAFD,MAEO;IACL,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,WAAA,EAAYA,SAAZ,CAAP;EACD;AACF","sourcesContent":["import { tsUnionType } from \"../generated\";\nimport removeTypeDuplicates from \"../../modifications/typescript/removeTypeDuplicates\";\nimport { isTSTypeAnnotation } from \"../../validators/generated/index\";\nimport type * as t from \"../..\";\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containing them.\n */\nexport default function createTSUnionType(\n  typeAnnotations: Array<t.TSTypeAnnotation | t.TSType>,\n): t.TSType {\n  const types = typeAnnotations.map(type => {\n    return isTSTypeAnnotation(type) ? type.typeAnnotation : type;\n  });\n  const flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return tsUnionType(flattened);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}