{"ast":null,"code":"import { __assign, __read } from \"tslib\";\nimport { DOT_PATTERN, getArnResources, getSuffix, getSuffixForArnEndpoint, isBucketNameOptions, isDnsCompatibleBucketName, validateAccountId, validateArnEndpointOptions, validateDNSHostLabel, validateNoDualstack, validateNoFIPS, validateOutpostService, validatePartition, validateRegion, validateS3Service, validateService } from \"./bucketHostnameUtils\";\nexport var bucketHostname = function (options) {\n  var isCustomEndpoint = options.isCustomEndpoint,\n    baseHostname = options.baseHostname,\n    dualstackEndpoint = options.dualstackEndpoint,\n    accelerateEndpoint = options.accelerateEndpoint;\n  if (isCustomEndpoint) {\n    if (dualstackEndpoint) throw new Error(\"Dualstack endpoint is not supported with custom endpoint\");\n    if (accelerateEndpoint) throw new Error(\"Accelerate endpoint is not supported with custom endpoint\");\n  }\n  return isBucketNameOptions(options) ?\n  // Construct endpoint when bucketName is a string referring to a bucket name\n  getEndpointFromBucketName(__assign(__assign({}, options), {\n    isCustomEndpoint: isCustomEndpoint\n  })) :\n  // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point\n  getEndpointFromArn(__assign(__assign({}, options), {\n    isCustomEndpoint: isCustomEndpoint\n  }));\n};\nvar getEndpointFromArn = function (options) {\n  var isCustomEndpoint = options.isCustomEndpoint,\n    baseHostname = options.baseHostname;\n  var _a = __read(isCustomEndpoint ? [options.clientRegion, baseHostname] :\n    // Infer client region and hostname suffix from hostname from endpoints.json, like `s3.us-west-2.amazonaws.com`\n    getSuffixForArnEndpoint(baseHostname), 2),\n    clientRegion = _a[0],\n    hostnameSuffix = _a[1];\n  var pathStyleEndpoint = options.pathStyleEndpoint,\n    _b = options.dualstackEndpoint,\n    dualstackEndpoint = _b === void 0 ? false : _b,\n    _c = options.accelerateEndpoint,\n    accelerateEndpoint = _c === void 0 ? false : _c,\n    _d = options.tlsCompatible,\n    tlsCompatible = _d === void 0 ? true : _d,\n    useArnRegion = options.useArnRegion,\n    bucketName = options.bucketName,\n    _e = options.clientPartition,\n    clientPartition = _e === void 0 ? \"aws\" : _e,\n    _f = options.clientSigningRegion,\n    clientSigningRegion = _f === void 0 ? clientRegion : _f;\n  validateArnEndpointOptions({\n    pathStyleEndpoint: pathStyleEndpoint,\n    accelerateEndpoint: accelerateEndpoint,\n    tlsCompatible: tlsCompatible\n  });\n  // Validate and parse the ARN supplied as a bucket name\n  var service = bucketName.service,\n    partition = bucketName.partition,\n    accountId = bucketName.accountId,\n    region = bucketName.region,\n    resource = bucketName.resource;\n  validateService(service);\n  validatePartition(partition, {\n    clientPartition: clientPartition\n  });\n  validateAccountId(accountId);\n  validateRegion(region, {\n    useArnRegion: useArnRegion,\n    clientRegion: clientRegion,\n    clientSigningRegion: clientSigningRegion\n  });\n  var _g = getArnResources(resource),\n    accesspointName = _g.accesspointName,\n    outpostId = _g.outpostId;\n  validateDNSHostLabel(accesspointName + \"-\" + accountId, {\n    tlsCompatible: tlsCompatible\n  });\n  var endpointRegion = useArnRegion ? region : clientRegion;\n  var signingRegion = useArnRegion ? region : clientSigningRegion;\n  if (outpostId) {\n    // if this is an Outpost ARN\n    validateOutpostService(service);\n    validateDNSHostLabel(outpostId, {\n      tlsCompatible: tlsCompatible\n    });\n    validateNoDualstack(dualstackEndpoint);\n    validateNoFIPS(endpointRegion);\n    var hostnamePrefix_1 = accesspointName + \"-\" + accountId + \".\" + outpostId;\n    return {\n      bucketEndpoint: true,\n      hostname: \"\" + hostnamePrefix_1 + (isCustomEndpoint ? \"\" : \".s3-outposts.\" + endpointRegion) + \".\" + hostnameSuffix,\n      signingRegion: signingRegion,\n      signingService: \"s3-outposts\"\n    };\n  }\n  // construct endpoint from Accesspoint ARN\n  validateS3Service(service);\n  var hostnamePrefix = accesspointName + \"-\" + accountId;\n  return {\n    bucketEndpoint: true,\n    hostname: \"\" + hostnamePrefix + (isCustomEndpoint ? \"\" : \".s3-accesspoint\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + endpointRegion) + \".\" + hostnameSuffix,\n    signingRegion: signingRegion\n  };\n};\nvar getEndpointFromBucketName = function (_a) {\n  var _b = _a.accelerateEndpoint,\n    accelerateEndpoint = _b === void 0 ? false : _b,\n    region = _a.clientRegion,\n    baseHostname = _a.baseHostname,\n    bucketName = _a.bucketName,\n    _c = _a.dualstackEndpoint,\n    dualstackEndpoint = _c === void 0 ? false : _c,\n    _d = _a.pathStyleEndpoint,\n    pathStyleEndpoint = _d === void 0 ? false : _d,\n    _e = _a.tlsCompatible,\n    tlsCompatible = _e === void 0 ? true : _e,\n    _f = _a.isCustomEndpoint,\n    isCustomEndpoint = _f === void 0 ? false : _f;\n  var _g = __read(isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname), 2),\n    clientRegion = _g[0],\n    hostnameSuffix = _g[1];\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || tlsCompatible && DOT_PATTERN.test(bucketName)) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix : baseHostname\n    };\n  }\n  if (accelerateEndpoint) {\n    baseHostname = \"s3-accelerate\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + hostnameSuffix;\n  } else if (dualstackEndpoint) {\n    baseHostname = \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix;\n  }\n  return {\n    bucketEndpoint: true,\n    hostname: bucketName + \".\" + baseHostname\n  };\n};","map":{"version":3,"sources":["../../src/bucketHostname.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ArnHostnameParams,\n  BucketHostnameParams,\n  DOT_PATTERN,\n  getArnResources,\n  getSuffix,\n  getSuffixForArnEndpoint,\n  isBucketNameOptions,\n  isDnsCompatibleBucketName,\n  validateAccountId,\n  validateArnEndpointOptions,\n  validateDNSHostLabel,\n  validateNoDualstack,\n  validateNoFIPS,\n  validateOutpostService,\n  validatePartition,\n  validateRegion,\n  validateS3Service,\n  validateService,\n} from \"./bucketHostnameUtils\";\n\nexport interface BucketHostname {\n  hostname: string;\n  bucketEndpoint: boolean;\n  signingRegion?: string;\n  signingService?: string;\n}\n\nexport const bucketHostname = (options: BucketHostnameParams | ArnHostnameParams): BucketHostname => {\n  const { isCustomEndpoint, baseHostname, dualstackEndpoint, accelerateEndpoint } = options;\n\n  if (isCustomEndpoint) {\n    if (dualstackEndpoint) throw new Error(\"Dualstack endpoint is not supported with custom endpoint\");\n    if (accelerateEndpoint) throw new Error(\"Accelerate endpoint is not supported with custom endpoint\");\n  }\n\n  return isBucketNameOptions(options)\n    ? // Construct endpoint when bucketName is a string referring to a bucket name\n      getEndpointFromBucketName({ ...options, isCustomEndpoint })\n    : // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point\n      getEndpointFromArn({ ...options, isCustomEndpoint });\n};\n\nconst getEndpointFromArn = (options: ArnHostnameParams & { isCustomEndpoint: boolean }): BucketHostname => {\n  const { isCustomEndpoint, baseHostname } = options;\n  const [clientRegion, hostnameSuffix] = isCustomEndpoint\n    ? [options.clientRegion, baseHostname]\n    : // Infer client region and hostname suffix from hostname from endpoints.json, like `s3.us-west-2.amazonaws.com`\n      getSuffixForArnEndpoint(baseHostname);\n\n  const {\n    pathStyleEndpoint,\n    dualstackEndpoint = false,\n    accelerateEndpoint = false,\n    tlsCompatible = true,\n    useArnRegion,\n    bucketName,\n    clientPartition = \"aws\",\n    clientSigningRegion = clientRegion,\n  } = options;\n\n  validateArnEndpointOptions({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });\n\n  // Validate and parse the ARN supplied as a bucket name\n  const { service, partition, accountId, region, resource } = bucketName;\n  validateService(service);\n  validatePartition(partition, { clientPartition });\n  validateAccountId(accountId);\n  validateRegion(region, { useArnRegion, clientRegion, clientSigningRegion });\n  const { accesspointName, outpostId } = getArnResources(resource);\n  validateDNSHostLabel(`${accesspointName}-${accountId}`, { tlsCompatible });\n\n  const endpointRegion = useArnRegion ? region : clientRegion;\n  const signingRegion = useArnRegion ? region : clientSigningRegion;\n  if (outpostId) {\n    // if this is an Outpost ARN\n    validateOutpostService(service);\n    validateDNSHostLabel(outpostId, { tlsCompatible });\n    validateNoDualstack(dualstackEndpoint);\n    validateNoFIPS(endpointRegion);\n    const hostnamePrefix = `${accesspointName}-${accountId}.${outpostId}`;\n    return {\n      bucketEndpoint: true,\n      hostname: `${hostnamePrefix}${isCustomEndpoint ? \"\" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,\n      signingRegion,\n      signingService: \"s3-outposts\",\n    };\n  }\n  // construct endpoint from Accesspoint ARN\n  validateS3Service(service);\n  const hostnamePrefix = `${accesspointName}-${accountId}`;\n  return {\n    bucketEndpoint: true,\n    hostname: `${hostnamePrefix}${\n      isCustomEndpoint ? \"\" : `.s3-accesspoint${dualstackEndpoint ? \".dualstack\" : \"\"}.${endpointRegion}`\n    }.${hostnameSuffix}`,\n    signingRegion,\n  };\n};\n\nconst getEndpointFromBucketName = ({\n  accelerateEndpoint = false,\n  clientRegion: region,\n  baseHostname,\n  bucketName,\n  dualstackEndpoint = false,\n  pathStyleEndpoint = false,\n  tlsCompatible = true,\n  isCustomEndpoint = false,\n}: BucketHostnameParams & { isCustomEndpoint: boolean }): BucketHostname => {\n  const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname);\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || (tlsCompatible && DOT_PATTERN.test(bucketName))) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname,\n    };\n  }\n\n  if (accelerateEndpoint) {\n    baseHostname = `s3-accelerate${dualstackEndpoint ? \".dualstack\" : \"\"}.${hostnameSuffix}`;\n  } else if (dualstackEndpoint) {\n    baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;\n  }\n\n  return {\n    bucketEndpoint: true,\n    hostname: `${bucketName}.${baseHostname}`,\n  };\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}