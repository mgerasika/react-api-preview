{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n  return ar;\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutEventsCommand } from '@aws-sdk/client-pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\nvar logger = new Logger('EventsBuffer');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar EventsBuffer = /** @class */function () {\n  function EventsBuffer(client, config) {\n    this._pause = false;\n    this._flush = false;\n    logger.debug('Instantiating buffer with config:', config);\n    this._buffer = [];\n    this._client = client;\n    this._config = config;\n    this._sendBatch = this._sendBatch.bind(this);\n    this._startLoop();\n  }\n  EventsBuffer.prototype.push = function (event) {\n    var _a;\n    // if the buffer is currently at the configured limit, pushing would exceed it\n    if (this._buffer.length >= this._config.bufferSize) {\n      logger.debug('Exceeded analytics events buffer size');\n      return event.handlers.reject(new Error('Exceeded the size of analytics events buffer'));\n    }\n    var eventId = event.params.event.eventId;\n    var bufferElement = (_a = {}, _a[eventId] = event, _a);\n    this._buffer.push(bufferElement);\n  };\n  EventsBuffer.prototype.pause = function () {\n    this._pause = true;\n  };\n  EventsBuffer.prototype.resume = function () {\n    this._pause = false;\n  };\n  EventsBuffer.prototype.updateClient = function (client) {\n    this._client = client;\n  };\n  EventsBuffer.prototype.flush = function () {\n    this._flush = true;\n  };\n  EventsBuffer.prototype._startLoop = function () {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n    var flushInterval = this._config.flushInterval;\n    this._interval = setInterval(this._sendBatch, flushInterval);\n  };\n  EventsBuffer.prototype._sendBatch = function () {\n    var bufferLength = this._buffer.length;\n    if (this._flush && !bufferLength) {\n      clearInterval(this._interval);\n    }\n    // Do not send the batch of events if\n    // the Buffer is paused or is empty or the App is not in the foreground\n    // Apps should be in the foreground since\n    // the OS may restrict access to the network in the background\n    if (this._pause || !bufferLength || !isAppInForeground()) {\n      return;\n    }\n    var flushSize = this._config.flushSize;\n    var batchSize = Math.min(flushSize, bufferLength);\n    var bufferSubset = this._buffer.splice(0, batchSize);\n    this._putEvents(bufferSubset);\n  };\n  EventsBuffer.prototype._putEvents = function (buffer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventMap, batchEventParams, command, data, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            eventMap = this._bufferToMap(buffer);\n            batchEventParams = this._generateBatchEventParams(eventMap);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            command = new PutEventsCommand(batchEventParams);\n            return [4 /*yield*/, this._client.send(command)];\n          case 2:\n            data = _a.sent();\n            this._processPutEventsSuccessResponse(data, eventMap);\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _a.sent();\n            return [2 /*return*/, this._handlePutEventsFailure(err_1, eventMap)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  EventsBuffer.prototype._generateBatchEventParams = function (eventMap) {\n    var batchEventParams = {\n      ApplicationId: '',\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    Object.values(eventMap).forEach(function (item) {\n      var params = item.params;\n      var event = params.event,\n        timestamp = params.timestamp,\n        config = params.config;\n      var name = event.name,\n        attributes = event.attributes,\n        metrics = event.metrics,\n        eventId = event.eventId,\n        session = event.session;\n      var appId = config.appId,\n        endpointId = config.endpointId;\n      var batchItem = batchEventParams.EventsRequest.BatchItem;\n      batchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n      if (!batchItem[endpointId]) {\n        batchItem[endpointId] = {\n          Endpoint: {},\n          Events: {}\n        };\n      }\n      batchItem[endpointId].Events[eventId] = {\n        EventType: name,\n        Timestamp: new Date(timestamp).toISOString(),\n        Attributes: attributes,\n        Metrics: metrics,\n        Session: session\n      };\n    });\n    return batchEventParams;\n  };\n  EventsBuffer.prototype._handlePutEventsFailure = function (err, eventMap) {\n    logger.debug('_putEvents Failed: ', err);\n    var statusCode = err.$metadata && err.$metadata.httpStatusCode;\n    if (RETRYABLE_CODES.includes(statusCode)) {\n      var retryableEvents = Object.values(eventMap);\n      this._retry(retryableEvents);\n      return;\n    }\n  };\n  EventsBuffer.prototype._processPutEventsSuccessResponse = function (data, eventMap) {\n    var Results = data.EventsResponse.Results;\n    var retryableEvents = [];\n    Object.entries(Results).forEach(function (_a) {\n      var _b = __read(_a, 2),\n        endpointId = _b[0],\n        endpointValues = _b[1];\n      var responses = endpointValues.EventsItemResponse;\n      Object.entries(responses).forEach(function (_a) {\n        var _b, _c;\n        var _d = __read(_a, 2),\n          eventId = _d[0],\n          _e = _d[1],\n          StatusCode = _e.StatusCode,\n          Message = _e.Message;\n        var eventObject = eventMap[eventId];\n        // manually crafting handlers response to keep API consistant\n        var response = {\n          EventsResponse: {\n            Results: (_b = {}, _b[endpointId] = {\n              EventsItemResponse: (_c = {}, _c[eventId] = {\n                StatusCode: StatusCode,\n                Message: Message\n              }, _c)\n            }, _b)\n          }\n        };\n        if (ACCEPTED_CODES.includes(StatusCode)) {\n          eventObject.handlers.resolve(response);\n          return;\n        }\n        if (RETRYABLE_CODES.includes(StatusCode)) {\n          retryableEvents.push(eventObject);\n          return;\n        }\n        var name = eventObject.params.event.name;\n        logger.error(\"event \" + eventId + \" : \" + name + \" failed with error: \" + Message);\n        return eventObject.handlers.reject(response);\n      });\n    });\n    if (retryableEvents.length) {\n      this._retry(retryableEvents);\n    }\n  };\n  EventsBuffer.prototype._retry = function (retryableEvents) {\n    var _a;\n    // retryable events that haven't reached the resendLimit\n    var eligibleEvents = [];\n    retryableEvents.forEach(function (event) {\n      var _a;\n      var params = event.params;\n      var _b = params.event,\n        eventId = _b.eventId,\n        name = _b.name;\n      if (params.resendLimit-- > 0) {\n        logger.debug(\"resending event \" + eventId + \" : \" + name + \" with \" + params.resendLimit + \" retry attempts remaining\");\n        eligibleEvents.push((_a = {}, _a[eventId] = event, _a));\n        return;\n      }\n      logger.debug(\"no retry attempts remaining for event \" + eventId + \" : \" + name);\n    });\n    // add the events to the front of the buffer\n    (_a = this._buffer).unshift.apply(_a, __spread(eligibleEvents));\n  };\n  // convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n  // this allows us to easily access the handlers after receiving a batch response\n  EventsBuffer.prototype._bufferToMap = function (buffer) {\n    return buffer.reduce(function (acc, curVal) {\n      var _a = __read(Object.entries(curVal), 1),\n        _b = __read(_a[0], 2),\n        key = _b[0],\n        value = _b[1];\n      acc[key] = value;\n      return acc;\n    }, {});\n  };\n  return EventsBuffer;\n}();\nexport default EventsBuffer;","map":{"version":3,"sources":["../../src/Providers/EventBuffer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,aAAa,IAAI,MAAM,QAAQ,mBAAmB;AAQ3D,SACC,gBAAgB,QAEV,0BAA0B;AACjC,SAAS,iBAAiB,QAAQ,mBAAmB;AAErD,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,cAAc,CAAC;AACzC,IAAM,eAAe,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;AAClC,IAAM,cAAc,GAAG,CAAC,GAAG,CAAC;AAS5B,IAAA,YAAA,GAAA,aAAA,YAAA;EAQC,SAAA,YAAA,CAAY,MAAM,EAAE,MAA0B,EAAA;IAHtC,IAAA,CAAA,MAAM,GAAG,KAAK;IACd,IAAA,CAAA,MAAM,GAAG,KAAK;IAGrB,MAAM,CAAC,KAAK,CAAC,mCAAmC,EAAE,MAAM,CAAC;IACzD,IAAI,CAAC,OAAO,GAAG,EAAE;IACjB,IAAI,CAAC,OAAO,GAAG,MAAM;IACrB,IAAI,CAAC,OAAO,GAAG,MAAM;IAErB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;IAE5C,IAAI,CAAC,UAAU,EAAE;EAClB;EAEO,YAAA,CAAA,SAAA,CAAA,IAAI,GAAX,UAAY,KAAkB,EAAA;;IAC7B;IACA,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;MACnD,MAAM,CAAC,KAAK,CAAC,uCAAuC,CAAC;MACrD,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAC3B,IAAI,KAAK,CAAC,8CAA8C,CAAC,CACzD;IACD;IAEO,IAAA,OAAA,GAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,OAAO;IACf,IAAM,aAAa,IAAA,EAAA,GAAA,CAAA,CAAA,EAAK,EAAA,CAAC,OAAO,CAAA,GAAG,KAAK,EAAA,EAAA,CAAE;IAC1C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC;EACjC,CAAC;EAEM,YAAA,CAAA,SAAA,CAAA,KAAK,GAAZ,YAAA;IACC,IAAI,CAAC,MAAM,GAAG,IAAI;EACnB,CAAC;EAEM,YAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACC,IAAI,CAAC,MAAM,GAAG,KAAK;EACpB,CAAC;EAEM,YAAA,CAAA,SAAA,CAAA,YAAY,GAAnB,UAAoB,MAAM,EAAA;IACzB,IAAI,CAAC,OAAO,GAAG,MAAM;EACtB,CAAC;EAEM,YAAA,CAAA,SAAA,CAAA,KAAK,GAAZ,YAAA;IACC,IAAI,CAAC,MAAM,GAAG,IAAI;EACnB,CAAC;EAEO,YAAA,CAAA,SAAA,CAAA,UAAU,GAAlB,YAAA;IACC,IAAI,IAAI,CAAC,SAAS,EAAE;MACnB,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC;IAC7B;IAEO,IAAA,aAAA,GAAA,IAAA,CAAA,OAAA,CAAA,aAAa;IAErB,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC;EAC7D,CAAC;EAEO,YAAA,CAAA,SAAA,CAAA,UAAU,GAAlB,YAAA;IACC,IAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM;IAExC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,YAAY,EAAE;MACjC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC;IAC7B;IAED;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,YAAY,IAAI,CAAC,iBAAiB,EAAE,EAAE;MACzD;IACA;IAEO,IAAA,SAAA,GAAA,IAAA,CAAA,OAAA,CAAA,SAAS;IAEjB,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,YAAY,CAAC;IACnD,IAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC;IAEtD,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC;EAC9B,CAAC;EAEa,YAAA,CAAA,SAAA,CAAA,UAAU,GAAxB,UAAyB,MAAmB,EAAA;;;;;;YACrC,QAAQ,GAAa,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;YAC9C,gBAAgB,GAAG,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC;;;;YAG1D,OAAO,GAAqB,IAAI,gBAAgB,CAAC,gBAAgB,CAAC;YACnC,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;;YAA/D,IAAI,GAA2B,EAAA,CAAA,IAAA,EAAgC;YACrE,IAAI,CAAC,gCAAgC,CAAC,IAAI,EAAE,QAAQ,CAAC;;;;YAErD,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,uBAAuB,CAAC,KAAG,EAAE,QAAQ,CAAC,CAAA;;;;;;GAEnD;;EAEO,YAAA,CAAA,SAAA,CAAA,yBAAyB,GAAjC,UAAkC,QAAkB,EAAA;IACnD,IAAM,gBAAgB,GAAG;MACxB,aAAa,EAAE,EAAE;MACjB,aAAa,EAAE;QACd,SAAS,EAAE,CAAA;MACX;KACD;IAED,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI,EAAA;MAC3B,IAAA,MAAA,GAAA,IAAA,CAAA,MAAM;MACN,IAAA,KAAA,GAAA,MAAA,CAAA,KAAK;QAAE,SAAA,GAAA,MAAA,CAAA,SAAS;QAAE,MAAA,GAAA,MAAA,CAAA,MAAM;MACxB,IAAA,IAAA,GAAA,KAAA,CAAA,IAAI;QAAE,UAAA,GAAA,KAAA,CAAA,UAAU;QAAE,OAAA,GAAA,KAAA,CAAA,OAAO;QAAE,OAAA,GAAA,KAAA,CAAA,OAAO;QAAE,OAAA,GAAA,KAAA,CAAA,OAAO;MAC3C,IAAA,KAAA,GAAA,MAAA,CAAA,KAAK;QAAE,UAAA,GAAA,MAAA,CAAA,UAAU;MAEzB,IAAM,SAAS,GAAG,gBAAgB,CAAC,aAAa,CAAC,SAAS;MAE1D,gBAAgB,CAAC,aAAa,GAAG,gBAAgB,CAAC,aAAa,IAAI,KAAK;MAExE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;QAC3B,SAAS,CAAC,UAAU,CAAC,GAAG;UACvB,QAAQ,EAAE,CAAA,CAAE;UACZ,MAAM,EAAE,CAAA;SACR;MACD;MAED,SAAS,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG;QACvC,SAAS,EAAE,IAAI;QACf,SAAS,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE;QAC5C,UAAU,EAAE,UAAU;QACtB,OAAO,EAAE,OAAO;QAChB,OAAO,EAAE;OACT;IACF,CAAC,CAAC;IAEF,OAAO,gBAAgB;EACxB,CAAC;EAEO,YAAA,CAAA,SAAA,CAAA,uBAAuB,GAA/B,UAAgC,GAAG,EAAE,QAAkB,EAAA;IACtD,MAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,GAAG,CAAC;IACxC,IAAM,UAAU,GAAG,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,SAAS,CAAC,cAAc;IAEhE,IAAI,eAAe,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;MACzC,IAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;MAC/C,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;MAC5B;IACA;EACF,CAAC;EAEO,YAAA,CAAA,SAAA,CAAA,gCAAgC,GAAxC,UACC,IAAuB,EACvB,QAAkB,EAAA;IAEV,IAAA,OAAA,GAAA,IAAA,CAAA,cAAA,CAAA,OAAO;IACf,IAAM,eAAe,GAAkB,EAAE;IAEzC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,EAA4B,EAAA;UAA5B,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAA4B;QAA3B,UAAA,GAAA,EAAA,CAAA,CAAA,CAAU;QAAE,cAAA,GAAA,EAAA,CAAA,CAAA,CAAc;MAC3D,IAAM,SAAS,GAAG,cAAc,CAAC,kBAAkB;MAEnD,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAChC,UAAC,EAAkC,EAAA;;YAAlC,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAAkC;UAAjC,OAAA,GAAA,EAAA,CAAA,CAAA,CAAO;UAAE,EAAA,GAAA,EAAA,CAAA,CAAA,CAAuB;UAArB,UAAA,GAAA,EAAA,CAAA,UAAU;UAAE,OAAA,GAAA,EAAA,CAAA,OAAO;QAC/B,IAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC;QAErC;QACA,IAAM,QAAQ,GAAG;UAChB,cAAc,EAAE;YACf,OAAO,GAAA,EAAA,GAAA,CAAA,CAAA,EACN,EAAA,CAAC,UAAU,CAAA,GAAG;cACb,kBAAkB,GAAA,EAAA,GAAA,CAAA,CAAA,EACjB,EAAA,CAAC,OAAO,CAAA,GAAG;gBAAE,UAAU,EAAA,UAAA;gBAAE,OAAO,EAAA;cAAA,CAAE,E,EAClC;aACD,E,EACD;UACD;SACD;QAED,IAAI,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;UACxC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC;UACtC;QACA;QAED,IAAI,eAAe,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;UACzC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC;UACjC;QACA;QAEO,IAAA,IAAA,GAAA,WAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAAI;QAEZ,MAAM,CAAC,KAAK,CACX,QAAA,GAAS,OAAO,GAAA,KAAA,GAAM,IAAI,GAAA,sBAAA,GAAuB,OAAS,CAC1D;QACD,OAAO,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC;MAC7C,CAAC,CACD;IACF,CAAC,CAAC;IAEF,IAAI,eAAe,CAAC,MAAM,EAAE;MAC3B,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;IAC5B;EACF,CAAC;EAEO,YAAA,CAAA,SAAA,CAAA,MAAM,GAAd,UAAe,eAA8B,EAAA;;IAC5C;IACA,IAAM,cAAc,GAAgB,EAAE;IAEtC,eAAe,CAAC,OAAO,CAAC,UAAC,KAAkB,EAAA;;MAClC,IAAA,MAAA,GAAA,KAAA,CAAA,MAAM;MACR,IAAA,EAAA,GAAA,MAAA,CAAA,KAAgC;QAA9B,OAAA,GAAA,EAAA,CAAA,OAAO;QAAE,IAAA,GAAA,EAAA,CAAA,IAAqB;MAEtC,IAAI,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,EAAE;QAC7B,MAAM,CAAC,KAAK,CACX,kBAAA,GAAmB,OAAO,GAAA,KAAA,GAAM,IAAI,GAAA,QAAA,GAAS,MAAM,CAAC,WAAW,GAAA,2BAA2B,CAC1F;QACD,cAAc,CAAC,IAAI,EAAA,EAAA,GAAA,CAAA,CAAA,EAAG,EAAA,CAAC,OAAO,CAAA,GAAG,KAAK,EAAA,EAAA,EAAG;QACzC;MACA;MAED,MAAM,CAAC,KAAK,CACX,wCAAA,GAAyC,OAAO,GAAA,KAAA,GAAM,IAAM,CAC5D;IACF,CAAC,CAAC;IAEF;IACA,CAAA,EAAA,GAAA,IAAI,CAAC,OAAO,EAAC,OAAO,CAAA,KAAA,CAAA,EAAA,EAAA,QAAA,CAAI,cAAc,CAAA,CAAA;EACvC,CAAC;EAED;EACA;EACQ,YAAA,CAAA,SAAA,CAAA,YAAY,GAApB,UAAqB,MAAmB,EAAA;IACvC,OAAO,MAAM,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,MAAM,EAAA;MAC1B,IAAA,EAAA,GAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAuC;QAAtC,EAAA,GAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAY;QAAX,GAAA,GAAA,EAAA,CAAA,CAAA,CAAG;QAAE,KAAA,GAAA,EAAA,CAAA,CAAA,CAAgC;MAC7C,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK;MAChB,OAAO,GAAG;IACX,CAAC,EAAE,CAAA,CAAE,CAAC;EACP,CAAC;EACF,OAAA,YAAC;AAAD,CAAC,EAAA","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutEventsCommand, } from '@aws-sdk/client-pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\nvar logger = new Logger('EventsBuffer');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar EventsBuffer = /** @class */ (function () {\n    function EventsBuffer(client, config) {\n        this._pause = false;\n        this._flush = false;\n        logger.debug('Instantiating buffer with config:', config);\n        this._buffer = [];\n        this._client = client;\n        this._config = config;\n        this._sendBatch = this._sendBatch.bind(this);\n        this._startLoop();\n    }\n    EventsBuffer.prototype.push = function (event) {\n        var _a;\n        // if the buffer is currently at the configured limit, pushing would exceed it\n        if (this._buffer.length >= this._config.bufferSize) {\n            logger.debug('Exceeded analytics events buffer size');\n            return event.handlers.reject(new Error('Exceeded the size of analytics events buffer'));\n        }\n        var eventId = event.params.event.eventId;\n        var bufferElement = (_a = {}, _a[eventId] = event, _a);\n        this._buffer.push(bufferElement);\n    };\n    EventsBuffer.prototype.pause = function () {\n        this._pause = true;\n    };\n    EventsBuffer.prototype.resume = function () {\n        this._pause = false;\n    };\n    EventsBuffer.prototype.updateClient = function (client) {\n        this._client = client;\n    };\n    EventsBuffer.prototype.flush = function () {\n        this._flush = true;\n    };\n    EventsBuffer.prototype._startLoop = function () {\n        if (this._interval) {\n            clearInterval(this._interval);\n        }\n        var flushInterval = this._config.flushInterval;\n        this._interval = setInterval(this._sendBatch, flushInterval);\n    };\n    EventsBuffer.prototype._sendBatch = function () {\n        var bufferLength = this._buffer.length;\n        if (this._flush && !bufferLength) {\n            clearInterval(this._interval);\n        }\n        // Do not send the batch of events if\n        // the Buffer is paused or is empty or the App is not in the foreground\n        // Apps should be in the foreground since\n        // the OS may restrict access to the network in the background\n        if (this._pause || !bufferLength || !isAppInForeground()) {\n            return;\n        }\n        var flushSize = this._config.flushSize;\n        var batchSize = Math.min(flushSize, bufferLength);\n        var bufferSubset = this._buffer.splice(0, batchSize);\n        this._putEvents(bufferSubset);\n    };\n    EventsBuffer.prototype._putEvents = function (buffer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var eventMap, batchEventParams, command, data, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        eventMap = this._bufferToMap(buffer);\n                        batchEventParams = this._generateBatchEventParams(eventMap);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        command = new PutEventsCommand(batchEventParams);\n                        return [4 /*yield*/, this._client.send(command)];\n                    case 2:\n                        data = _a.sent();\n                        this._processPutEventsSuccessResponse(data, eventMap);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_1 = _a.sent();\n                        return [2 /*return*/, this._handlePutEventsFailure(err_1, eventMap)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    EventsBuffer.prototype._generateBatchEventParams = function (eventMap) {\n        var batchEventParams = {\n            ApplicationId: '',\n            EventsRequest: {\n                BatchItem: {},\n            },\n        };\n        Object.values(eventMap).forEach(function (item) {\n            var params = item.params;\n            var event = params.event, timestamp = params.timestamp, config = params.config;\n            var name = event.name, attributes = event.attributes, metrics = event.metrics, eventId = event.eventId, session = event.session;\n            var appId = config.appId, endpointId = config.endpointId;\n            var batchItem = batchEventParams.EventsRequest.BatchItem;\n            batchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n            if (!batchItem[endpointId]) {\n                batchItem[endpointId] = {\n                    Endpoint: {},\n                    Events: {},\n                };\n            }\n            batchItem[endpointId].Events[eventId] = {\n                EventType: name,\n                Timestamp: new Date(timestamp).toISOString(),\n                Attributes: attributes,\n                Metrics: metrics,\n                Session: session,\n            };\n        });\n        return batchEventParams;\n    };\n    EventsBuffer.prototype._handlePutEventsFailure = function (err, eventMap) {\n        logger.debug('_putEvents Failed: ', err);\n        var statusCode = err.$metadata && err.$metadata.httpStatusCode;\n        if (RETRYABLE_CODES.includes(statusCode)) {\n            var retryableEvents = Object.values(eventMap);\n            this._retry(retryableEvents);\n            return;\n        }\n    };\n    EventsBuffer.prototype._processPutEventsSuccessResponse = function (data, eventMap) {\n        var Results = data.EventsResponse.Results;\n        var retryableEvents = [];\n        Object.entries(Results).forEach(function (_a) {\n            var _b = __read(_a, 2), endpointId = _b[0], endpointValues = _b[1];\n            var responses = endpointValues.EventsItemResponse;\n            Object.entries(responses).forEach(function (_a) {\n                var _b, _c;\n                var _d = __read(_a, 2), eventId = _d[0], _e = _d[1], StatusCode = _e.StatusCode, Message = _e.Message;\n                var eventObject = eventMap[eventId];\n                // manually crafting handlers response to keep API consistant\n                var response = {\n                    EventsResponse: {\n                        Results: (_b = {},\n                            _b[endpointId] = {\n                                EventsItemResponse: (_c = {},\n                                    _c[eventId] = { StatusCode: StatusCode, Message: Message },\n                                    _c),\n                            },\n                            _b),\n                    },\n                };\n                if (ACCEPTED_CODES.includes(StatusCode)) {\n                    eventObject.handlers.resolve(response);\n                    return;\n                }\n                if (RETRYABLE_CODES.includes(StatusCode)) {\n                    retryableEvents.push(eventObject);\n                    return;\n                }\n                var name = eventObject.params.event.name;\n                logger.error(\"event \" + eventId + \" : \" + name + \" failed with error: \" + Message);\n                return eventObject.handlers.reject(response);\n            });\n        });\n        if (retryableEvents.length) {\n            this._retry(retryableEvents);\n        }\n    };\n    EventsBuffer.prototype._retry = function (retryableEvents) {\n        var _a;\n        // retryable events that haven't reached the resendLimit\n        var eligibleEvents = [];\n        retryableEvents.forEach(function (event) {\n            var _a;\n            var params = event.params;\n            var _b = params.event, eventId = _b.eventId, name = _b.name;\n            if (params.resendLimit-- > 0) {\n                logger.debug(\"resending event \" + eventId + \" : \" + name + \" with \" + params.resendLimit + \" retry attempts remaining\");\n                eligibleEvents.push((_a = {}, _a[eventId] = event, _a));\n                return;\n            }\n            logger.debug(\"no retry attempts remaining for event \" + eventId + \" : \" + name);\n        });\n        // add the events to the front of the buffer\n        (_a = this._buffer).unshift.apply(_a, __spread(eligibleEvents));\n    };\n    // convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n    // this allows us to easily access the handlers after receiving a batch response\n    EventsBuffer.prototype._bufferToMap = function (buffer) {\n        return buffer.reduce(function (acc, curVal) {\n            var _a = __read(Object.entries(curVal), 1), _b = __read(_a[0], 2), key = _b[0], value = _b[1];\n            acc[key] = value;\n            return acc;\n        }, {});\n    };\n    return EventsBuffer;\n}());\nexport default EventsBuffer;\n//# sourceMappingURL=EventBuffer.js.map"]},"metadata":{},"sourceType":"module"}