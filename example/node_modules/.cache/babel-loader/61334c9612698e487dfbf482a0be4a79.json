{"ast":null,"code":"import { exhaustiveCheck, extractPrimaryKeyFieldNames, extractPrimaryKeyValues } from '../util';\nexport { ModelSortPredicateCreator } from './sort';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n  return predicatesAllSet.has(predicate);\n}\n// This symbol is not used at runtime, only its type (unique symbol)\nexport var PredicateAll = Symbol('A predicate that matches all records');\nvar Predicates = /** @class */function () {\n  function Predicates() {}\n  Object.defineProperty(Predicates, \"ALL\", {\n    get: function () {\n      var predicate = function (c) {\n        return c;\n      };\n      predicatesAllSet.add(predicate);\n      return predicate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Predicates;\n}();\nexport { Predicates };\nvar ModelPredicateCreator = /** @class */function () {\n  function ModelPredicateCreator() {}\n  ModelPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function (_target, propertyKey, receiver) {\n        var groupType = propertyKey;\n        switch (groupType) {\n          case 'and':\n          case 'or':\n          case 'not':\n            var result_1 = function (newPredicate) {\n              var group = {\n                type: groupType,\n                predicates: []\n              };\n              // Create a new recorder\n              var tmpPredicateRecorder = new Proxy({}, handler);\n              // Set the recorder group\n              ModelPredicateCreator.predicateGroupsMap.set(tmpPredicateRecorder, group);\n              // Apply the predicates to the recorder (this is the step that records the changes)\n              newPredicate(tmpPredicateRecorder);\n              // Push the group to the top-level recorder\n              ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push(group);\n              return receiver;\n            };\n            return result_1;\n          default:\n            exhaustiveCheck(groupType, false);\n        }\n        var field = propertyKey;\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n        var result = function (operator, operand) {\n          ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push({\n            field: field,\n            operator: operator,\n            operand: operand\n          });\n          return receiver;\n        };\n        return result;\n      }\n    });\n    var group = {\n      type: 'and',\n      predicates: []\n    };\n    ModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n    return predicate;\n  };\n  ModelPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n  };\n  ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n    if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n    return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n  };\n  // transforms cb-style predicate into Proxy\n  ModelPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n    return existing(ModelPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n  ModelPredicateCreator.createForSingleField = function (modelDefinition, fieldName, value) {\n    return ModelPredicateCreator.createPredicateBuilder(modelDefinition)[fieldName]('eq', value);\n  };\n  ModelPredicateCreator.createForPk = function (modelDefinition, model) {\n    var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n    var keyValues = extractPrimaryKeyValues(model, keyFields);\n    var modelPredicate = ModelPredicateCreator.createPredicateBuilder(modelDefinition);\n    keyFields.forEach(function (field, idx) {\n      var operand = keyValues[idx];\n      modelPredicate = modelPredicate[field]('eq', operand);\n    });\n    return modelPredicate;\n  };\n  ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n  return ModelPredicateCreator;\n}();\nexport { ModelPredicateCreator };","map":{"version":3,"sources":["../../src/predicates/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { exhaustiveCheck, extractPrimaryKeyFieldNames, extractPrimaryKeyValues, } from '../util';\nexport { ModelSortPredicateCreator } from './sort';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n    return predicatesAllSet.has(predicate);\n}\n// This symbol is not used at runtime, only its type (unique symbol)\nexport var PredicateAll = Symbol('A predicate that matches all records');\nvar Predicates = /** @class */ (function () {\n    function Predicates() {\n    }\n    Object.defineProperty(Predicates, \"ALL\", {\n        get: function () {\n            var predicate = (function (c) { return c; });\n            predicatesAllSet.add(predicate);\n            return predicate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Predicates;\n}());\nexport { Predicates };\nvar ModelPredicateCreator = /** @class */ (function () {\n    function ModelPredicateCreator() {\n    }\n    ModelPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n        var modelName = modelDefinition.name;\n        var fieldNames = new Set(Object.keys(modelDefinition.fields));\n        var handler;\n        var predicate = new Proxy({}, (handler = {\n            get: function (_target, propertyKey, receiver) {\n                var groupType = propertyKey;\n                switch (groupType) {\n                    case 'and':\n                    case 'or':\n                    case 'not':\n                        var result_1 = function (newPredicate) {\n                            var group = {\n                                type: groupType,\n                                predicates: [],\n                            };\n                            // Create a new recorder\n                            var tmpPredicateRecorder = new Proxy({}, handler);\n                            // Set the recorder group\n                            ModelPredicateCreator.predicateGroupsMap.set(tmpPredicateRecorder, group);\n                            // Apply the predicates to the recorder (this is the step that records the changes)\n                            newPredicate(tmpPredicateRecorder);\n                            // Push the group to the top-level recorder\n                            ModelPredicateCreator.predicateGroupsMap\n                                .get(receiver)\n                                .predicates.push(group);\n                            return receiver;\n                        };\n                        return result_1;\n                    default:\n                        exhaustiveCheck(groupType, false);\n                }\n                var field = propertyKey;\n                if (!fieldNames.has(field)) {\n                    throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n                }\n                var result = function (operator, operand) {\n                    ModelPredicateCreator.predicateGroupsMap\n                        .get(receiver)\n                        .predicates.push({ field: field, operator: operator, operand: operand });\n                    return receiver;\n                };\n                return result;\n            },\n        }));\n        var group = {\n            type: 'and',\n            predicates: [],\n        };\n        ModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n        return predicate;\n    };\n    ModelPredicateCreator.isValidPredicate = function (predicate) {\n        return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n    };\n    ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n        if (throwOnInvalid === void 0) { throwOnInvalid = true; }\n        if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n            throw new Error('The predicate is not valid');\n        }\n        return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n    };\n    // transforms cb-style predicate into Proxy\n    ModelPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n        if (!existing || !modelDefinition) {\n            return undefined;\n        }\n        return existing(ModelPredicateCreator.createPredicateBuilder(modelDefinition));\n    };\n    ModelPredicateCreator.createForSingleField = function (modelDefinition, fieldName, value) {\n        return ModelPredicateCreator.createPredicateBuilder(modelDefinition)[fieldName]('eq', value);\n    };\n    ModelPredicateCreator.createForPk = function (modelDefinition, model) {\n        var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n        var keyValues = extractPrimaryKeyValues(model, keyFields);\n        var modelPredicate = ModelPredicateCreator.createPredicateBuilder(modelDefinition);\n        keyFields.forEach(function (field, idx) {\n            var operand = keyValues[idx];\n            modelPredicate = modelPredicate[field]('eq', operand);\n        });\n        return modelPredicate;\n    };\n    ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n    return ModelPredicateCreator;\n}());\nexport { ModelPredicateCreator };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}