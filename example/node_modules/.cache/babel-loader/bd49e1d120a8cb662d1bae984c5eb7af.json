{"ast":null,"code":"import { objectSpread2 as _objectSpread2, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { useField } from '../../hooks/use-field.hook.js';\nimport { useCallback } from 'react';\nimport { MultiSelect } from './multi-select.component.js';\nimport { jsx } from '@emotion/react';\nfunction FormMultiSelect(props) {\n  var onChange = props.onChange,\n    onBlur = props.onBlur,\n    getCustomErrorMessage = props.getCustomErrorMessage;\n  var _useField = useField(_objectSpread2(_objectSpread2({}, props), {}, {\n      getCustomErrorMessage: getCustomErrorMessage\n    })),\n    setFieldValue = _useField.setFieldValue,\n    setFieldTouched = _useField.setFieldTouched,\n    value = _useField.value,\n    errorMessage = _useField.errorMessage;\n  var handleChange = useCallback(function (e) {\n    onChange && onChange(e);\n    setFieldValue(e.value);\n  }, [setFieldValue, onChange]);\n  var handleBlur = useCallback(function (e) {\n    var newEvent = _objectSpread2(_objectSpread2({}, e), {}, {\n      target: _objectSpread2(_objectSpread2({}, e.target), {}, {\n        value: value || []\n      })\n    });\n    onBlur && onBlur(newEvent);\n    setFieldValue(value);\n    setFieldTouched();\n  }, [onBlur, setFieldTouched, setFieldValue, value]);\n  return jsx(MultiSelect, _extends({\n    errorMessage: errorMessage\n  }, props, {\n    onChange: handleChange,\n    onBlur: handleBlur,\n    name: props.name,\n    value: value\n  }));\n}\nexport { FormMultiSelect };","map":{"version":3,"sources":["../../../../src/general-ui/multi-select/form-multi-select.component.tsx"],"names":["FormMultiSelect","props","onChange","onBlur","getCustomErrorMessage","setFieldValue","setFieldTouched","value","errorMessage","useField","handleChange","useCallback","e","handleBlur","newEvent","target","___EmotionJSX","MultiSelect","name"],"mappings":";;;;;AAIO,SAASA,eAAe,CAC3BC,KAA2E,EAChE;EACX,IAAQC,QAAQ,GAAoCD,KAAK,CAAjDC,QAAQ;IAAEC,MAAM,GAA4BF,KAAK,CAAvCE,MAAM;IAAEC,qBAAqB,GAAKH,KAAK,CAA/BG,qBAAqB;EAC/C,IAAgEK,SAAAA,GAAAA,QAAQ,CAAA,cAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EACjER,KAAK,CAAA,EAAA,CAAA,CAAA,EAAA;MACRG,qBAAqB,EAArBA;KACF,CAAA,CAAA;IAHMC,aAAa,GAAA,SAAA,CAAbA,aAAa;IAAEC,eAAe,GAAA,SAAA,CAAfA,eAAe;IAAEC,KAAK,GAAA,SAAA,CAALA,KAAK;IAAEC,YAAY,GAAA,SAAA,CAAZA,YAAY;EAK3D,IAAME,YAAY,GAAGC,WAAW,CAC5B,UAACC,CAAC,EAAK;IACHV,QAAQ,IAAIA,QAAQ,CAACU,CAAC,CAAC;IACvBP,aAAa,CAACO,CAAC,CAACL,KAAK,CAAC;EAC1B,CAAC,EACD,CAACF,aAAa,EAAEH,QAAQ,CAAC,CAC5B;EAED,IAAMW,UAAU,GAAGF,WAAW,CAC1B,UAACC,CAAqC,EAAK;IACvC,IAAME,QAAQ,GAAA,cAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EACPF,CAAC,CAAA,EAAA,CAAA,CAAA,EAAA;MACJG,MAAM,EAAA,cAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EAAOH,CAAC,CAACG,MAAM,CAAA,EAAA,CAAA,CAAA,EAAA;QAAER,KAAK,EAAEA,KAAK,IAAI;MAAE,CAAA;KACK,CAAA;IAClDJ,MAAM,IAAIA,MAAM,CAACW,QAAQ,CAAC;IAC1BT,aAAa,CAACE,KAAK,CAAC;IACpBD,eAAe,EAAE;EACpB,CAAA,EACD,CAACH,MAAM,EAAEG,eAAe,EAAED,aAAa,EAAEE,KAAK,CAAC,CAClD;EAED,OACIS,GAAAA,CAACC,WAAW,EAAA,QAAA,CAAA;IACRT,YAAY,EAAEA;EAAa,CAAA,EACvBP,KAAK,EAAA;IACTC,QAAQ,EAAEQ,YAAa;IACvBP,MAAM,EAAEU,UAAW;IACnBK,IAAI,EAAEjB,KAAK,CAACiB,IAAe;IAC3BX,KAAK,EAAEA;EACT,CAAA,CAAA,CAAA;AAEV","sourcesContent":["import { useField } from '@common/hooks/use-field.hook';\nimport React, { useCallback } from 'react';\nimport { IMultiSelectChangeHandler, IMultiSelectProps, MultiSelect } from './multi-select.component';\n\nexport function FormMultiSelect<TFormValues>(\n    props: Omit<IMultiSelectProps<keyof TFormValues>, 'value' | 'defaultValue'>,\n): JSX.Element {\n    const { onChange, onBlur, getCustomErrorMessage } = props;\n    const { setFieldValue, setFieldTouched, value, errorMessage } = useField<string[]>({\n        ...props,\n        getCustomErrorMessage,\n    });\n\n    const handleChange = useCallback<IMultiSelectChangeHandler>(\n        (e) => {\n            onChange && onChange(e);\n            setFieldValue(e.value);\n        },\n        [setFieldValue, onChange],\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            const newEvent = {\n                ...e,\n                target: { ...e.target, value: value || [] },\n            } as unknown as React.FocusEvent<HTMLInputElement>;\n            onBlur && onBlur(newEvent);\n            setFieldValue(value);\n            setFieldTouched();\n        },\n        [onBlur, setFieldTouched, setFieldValue, value],\n    );\n\n    return (\n        <MultiSelect\n            errorMessage={errorMessage}\n            {...props}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            name={props.name as string}\n            value={value}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"module"}