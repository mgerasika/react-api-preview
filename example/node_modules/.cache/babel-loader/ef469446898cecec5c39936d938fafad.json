{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar DoubleLinkedNode = /** @class */function () {\n  function DoubleLinkedNode(keyVal) {\n    this.key = keyVal ? keyVal : '';\n    this.prevNode = null;\n    this.nextNode = null;\n  }\n  return DoubleLinkedNode;\n}();\n/**\n * double linked list plus a hash table inside\n * each key in the cache stored as a node in the list\n * recently visited node will be rotated to the head\n * so the Last Recently Visited node will be at the tail\n *\n * @member head - dummy head of the linked list\n * @member tail - dummy tail of the linked list\n * @member hashtable - the hashtable which maps cache key to list node\n * @member length - length of the list\n */\nvar CacheList = /** @class */function () {\n  /**\n   * initialization\n   */\n  function CacheList() {\n    this.head = new DoubleLinkedNode();\n    this.tail = new DoubleLinkedNode();\n    this.hashtable = {};\n    this.length = 0;\n    this.head.nextNode = this.tail;\n    this.tail.prevNode = this.head;\n  }\n  /**\n   * insert node to the head of the list\n   *\n   * @param node\n   */\n  CacheList.prototype.insertNodeToHead = function (node) {\n    var tmp = this.head.nextNode;\n    this.head.nextNode = node;\n    node.nextNode = tmp;\n    node.prevNode = this.head;\n    tmp.prevNode = node;\n    this.length = this.length + 1;\n  };\n  /**\n   * remove node\n   *\n   * @param node\n   */\n  CacheList.prototype.removeNode = function (node) {\n    node.prevNode.nextNode = node.nextNode;\n    node.nextNode.prevNode = node.prevNode;\n    node.prevNode = null;\n    node.nextNode = null;\n    this.length = this.length - 1;\n  };\n  /**\n   * @return true if list is empty\n   */\n  CacheList.prototype.isEmpty = function () {\n    return this.length === 0;\n  };\n  /**\n   * refresh node so it is rotated to the head\n   *\n   * @param key - key of the node\n   */\n  CacheList.prototype.refresh = function (key) {\n    var node = this.hashtable[key];\n    this.removeNode(node);\n    this.insertNodeToHead(node);\n  };\n  /**\n   * insert new node to the head and add it in the hashtable\n   *\n   * @param key - the key of the node\n   */\n  CacheList.prototype.insertItem = function (key) {\n    var node = new DoubleLinkedNode(key);\n    this.hashtable[key] = node;\n    this.insertNodeToHead(node);\n  };\n  /**\n   * @return the LAST Recently Visited key\n   */\n  CacheList.prototype.getLastItem = function () {\n    return this.tail.prevNode.key;\n  };\n  /**\n   * remove the cache key from the list and hashtable\n   * @param key - the key of the node\n   */\n  CacheList.prototype.removeItem = function (key) {\n    var removedItem = this.hashtable[key];\n    this.removeNode(removedItem);\n    delete this.hashtable[key];\n  };\n  /**\n   * @return length of the list\n   */\n  CacheList.prototype.getSize = function () {\n    return this.length;\n  };\n  /**\n   * @return true if the key is in the hashtable\n   * @param key\n   */\n  CacheList.prototype.containsKey = function (key) {\n    return key in this.hashtable;\n  };\n  /**\n   * clean up the list and hashtable\n   */\n  CacheList.prototype.clearList = function () {\n    var e_1, _a;\n    try {\n      for (var _b = __values(Object.keys(this.hashtable)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n        if (this.hashtable.hasOwnProperty(key)) {\n          delete this.hashtable[key];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    this.head.nextNode = this.tail;\n    this.tail.prevNode = this.head;\n    this.length = 0;\n  };\n  /**\n   * @return all keys in the hashtable\n   */\n  CacheList.prototype.getKeys = function () {\n    return Object.keys(this.hashtable);\n  };\n  /**\n   * mainly for test\n   *\n   * @param key\n   * @return true if key is the head node\n   */\n  CacheList.prototype.isHeadNode = function (key) {\n    var node = this.hashtable[key];\n    return node.prevNode === this.head;\n  };\n  /**\n   * mainly for test\n   *\n   * @param key\n   * @return true if key is the tail node\n   */\n  CacheList.prototype.isTailNode = function (key) {\n    var node = this.hashtable[key];\n    return node.nextNode === this.tail;\n  };\n  return CacheList;\n}();\nexport default CacheList;","map":{"version":3,"sources":["../../src/Utils/CacheList.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar DoubleLinkedNode = /** @class */ (function () {\n    function DoubleLinkedNode(keyVal) {\n        this.key = keyVal ? keyVal : '';\n        this.prevNode = null;\n        this.nextNode = null;\n    }\n    return DoubleLinkedNode;\n}());\n/**\n * double linked list plus a hash table inside\n * each key in the cache stored as a node in the list\n * recently visited node will be rotated to the head\n * so the Last Recently Visited node will be at the tail\n *\n * @member head - dummy head of the linked list\n * @member tail - dummy tail of the linked list\n * @member hashtable - the hashtable which maps cache key to list node\n * @member length - length of the list\n */\nvar CacheList = /** @class */ (function () {\n    /**\n     * initialization\n     */\n    function CacheList() {\n        this.head = new DoubleLinkedNode();\n        this.tail = new DoubleLinkedNode();\n        this.hashtable = {};\n        this.length = 0;\n        this.head.nextNode = this.tail;\n        this.tail.prevNode = this.head;\n    }\n    /**\n     * insert node to the head of the list\n     *\n     * @param node\n     */\n    CacheList.prototype.insertNodeToHead = function (node) {\n        var tmp = this.head.nextNode;\n        this.head.nextNode = node;\n        node.nextNode = tmp;\n        node.prevNode = this.head;\n        tmp.prevNode = node;\n        this.length = this.length + 1;\n    };\n    /**\n     * remove node\n     *\n     * @param node\n     */\n    CacheList.prototype.removeNode = function (node) {\n        node.prevNode.nextNode = node.nextNode;\n        node.nextNode.prevNode = node.prevNode;\n        node.prevNode = null;\n        node.nextNode = null;\n        this.length = this.length - 1;\n    };\n    /**\n     * @return true if list is empty\n     */\n    CacheList.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    /**\n     * refresh node so it is rotated to the head\n     *\n     * @param key - key of the node\n     */\n    CacheList.prototype.refresh = function (key) {\n        var node = this.hashtable[key];\n        this.removeNode(node);\n        this.insertNodeToHead(node);\n    };\n    /**\n     * insert new node to the head and add it in the hashtable\n     *\n     * @param key - the key of the node\n     */\n    CacheList.prototype.insertItem = function (key) {\n        var node = new DoubleLinkedNode(key);\n        this.hashtable[key] = node;\n        this.insertNodeToHead(node);\n    };\n    /**\n     * @return the LAST Recently Visited key\n     */\n    CacheList.prototype.getLastItem = function () {\n        return this.tail.prevNode.key;\n    };\n    /**\n     * remove the cache key from the list and hashtable\n     * @param key - the key of the node\n     */\n    CacheList.prototype.removeItem = function (key) {\n        var removedItem = this.hashtable[key];\n        this.removeNode(removedItem);\n        delete this.hashtable[key];\n    };\n    /**\n     * @return length of the list\n     */\n    CacheList.prototype.getSize = function () {\n        return this.length;\n    };\n    /**\n     * @return true if the key is in the hashtable\n     * @param key\n     */\n    CacheList.prototype.containsKey = function (key) {\n        return key in this.hashtable;\n    };\n    /**\n     * clean up the list and hashtable\n     */\n    CacheList.prototype.clearList = function () {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.keys(this.hashtable)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var key = _c.value;\n                if (this.hashtable.hasOwnProperty(key)) {\n                    delete this.hashtable[key];\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        this.head.nextNode = this.tail;\n        this.tail.prevNode = this.head;\n        this.length = 0;\n    };\n    /**\n     * @return all keys in the hashtable\n     */\n    CacheList.prototype.getKeys = function () {\n        return Object.keys(this.hashtable);\n    };\n    /**\n     * mainly for test\n     *\n     * @param key\n     * @return true if key is the head node\n     */\n    CacheList.prototype.isHeadNode = function (key) {\n        var node = this.hashtable[key];\n        return node.prevNode === this.head;\n    };\n    /**\n     * mainly for test\n     *\n     * @param key\n     * @return true if key is the tail node\n     */\n    CacheList.prototype.isTailNode = function (key) {\n        var node = this.hashtable[key];\n        return node.nextNode === this.tail;\n    };\n    return CacheList;\n}());\nexport default CacheList;\n//# sourceMappingURL=CacheList.js.map"]},"metadata":{},"sourceType":"module"}