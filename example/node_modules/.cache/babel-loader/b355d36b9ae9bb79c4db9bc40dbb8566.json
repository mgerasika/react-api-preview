{"ast":null,"code":"import { Field } from '../field/field.component.js';\nimport { useField } from '../../hooks/use-field.hook.js';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useMemo, useCallback, useEffect } from 'react';\nimport { StripeInternal } from './stripe-internal.component.js';\nimport { jsx } from '@emotion/react';\nconst FormStripe = props => {\n  const {\n    name,\n    required,\n    paymentMethodOptions,\n    onStripeInit,\n    cardError,\n    stripePublicKey,\n    clientSecret,\n    setupIntentId,\n    onPaymentTabChange,\n    defaultOptionName\n  } = props;\n  const {\n    setFieldTouched,\n    setFieldValue,\n    triggerValidate,\n    errorMessage,\n    value\n  } = useField({\n    ...props,\n    required: true,\n    getCustomErrorMessage: undefined\n  });\n  const stripePromise = useMemo(() => {\n    return stripePublicKey ? loadStripe(stripePublicKey) : undefined;\n  }, [stripePublicKey]);\n  const handleCardChange = useCallback(e => {\n    if (e.isValid) {\n      setFieldValue({\n        ...value,\n        card: e.cardNumberElement\n      });\n    } else {\n      setFieldValue({\n        ...value,\n        card: undefined\n      });\n    }\n    triggerValidate();\n  }, [setFieldValue, triggerValidate, value]);\n  const handleTokenInit = useCallback(e => {\n    setFieldValue({\n      ...value,\n      stripe_permanent_token_id: e.setupIntent?.payment_method || '',\n      stripe_setup_indent_id: e?.setupIntent?.id || ''\n    });\n    setFieldTouched();\n  }, [setFieldTouched, setFieldValue, value]);\n  useEffect(() => {\n    if (clientSecret !== value.client_secret) {\n      setFieldValue({\n        ...value,\n        client_secret: clientSecret,\n        stripe_setup_indent_id: setupIntentId\n      });\n    }\n  }, [clientSecret, setupIntentId, setFieldValue, value]);\n  const handleBlur = useCallback(() => {\n    setFieldTouched();\n  }, [setFieldTouched]);\n  const handleTabChange = useCallback(tab => {\n    setFieldValue({\n      ...value,\n      paymentMethod: tab\n    });\n    onPaymentTabChange && onPaymentTabChange();\n  }, [onPaymentTabChange, setFieldValue, value]);\n  return stripePromise ? jsx(Field, {\n    name: name,\n    required: required\n    // label={' ' || t('Payment method (Credit / Debit Card)')}\n    ,\n\n    errorMessage: cardError || errorMessage\n  }, jsx(Elements, {\n    stripe: stripePromise,\n    options: {\n      fonts: [{\n        cssSrc: `${document.location.origin}/stripeStyles.css`\n      }, {\n        cssSrc: 'https://fonts.googleapis.com/css2?family=Overpass:wght@600&display=swap'\n      }],\n      appearance: {\n        variables: {}\n      }\n    }\n  }, jsx(StripeInternal, {\n    defaultOptionName: defaultOptionName,\n    paymentMethodOptions: paymentMethodOptions,\n    onTabChange: handleTabChange,\n    paymentButtonClientSecret: props.clientSecret,\n    onPaymentButtonChange: handleTokenInit,\n    onStripeInit: onStripeInit,\n    onCardChange: handleCardChange,\n    onBlur: handleBlur\n  }))) : null;\n};\nexport { FormStripe };","map":{"version":3,"sources":["../../../../src/general-ui/stripe/form-stripe.component.tsx"],"names":["FormStripe","props","name","required","paymentMethodOptions","onStripeInit","cardError","stripePublicKey","clientSecret","setupIntentId","onPaymentTabChange","defaultOptionName","setFieldTouched","setFieldValue","triggerValidate","errorMessage","value","useField","getCustomErrorMessage","undefined","stripePromise","useMemo","loadStripe","handleCardChange","useCallback","e","isValid","card","cardNumberElement","handleTokenInit","stripe_permanent_token_id","setupIntent","payment_method","stripe_setup_indent_id","id","useEffect","client_secret","handleBlur","handleTabChange","tab","paymentMethod","___EmotionJSX","fonts","cssSrc","document","location","origin","appearance","variables"],"mappings":"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","sourcesContent":["import { EPaymentMethod } from '@common/enums/payment-method.enum';\nimport { Field } from '@common/general-ui/field/field.component';\nimport { IRadioOption } from '@common/general-ui/radio-group/radio.component';\nimport { useField } from '@common/hooks/use-field.hook';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe, PaymentMethodResult, SetupIntentResult, Stripe, StripeCardNumberElement } from '@stripe/stripe-js';\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { IStripeCard, StripeInternal } from './stripe-internal.component';\nexport type StripeEx = Stripe;\nexport type PaymentMethodResultEx = PaymentMethodResult;\n\nexport interface IStripeValue {\n    card: StripeCardNumberElement | null | undefined;\n    stripe_permanent_token_id: string | undefined;\n    stripe_setup_indent_id: string | undefined;\n    client_secret: string | undefined;\n    paymentMethod: EPaymentMethod;\n}\ninterface IProps {\n    required?: boolean;\n    name: string;\n    onStripeInit?: (stripe: Stripe) => void;\n    stripePublicKey: string;\n    clientSecret?: string;\n    setupIntentId?: string;\n    onPaymentTabChange?: () => void;\n    cardError?: string;\n    paymentMethodOptions: IRadioOption[];\n    defaultOptionName?: EPaymentMethod;\n}\n\nexport const FormStripe = (props: IProps): JSX.Element | null => {\n    const {\n        name,\n        required,\n        paymentMethodOptions,\n        onStripeInit,\n        cardError,\n        stripePublicKey,\n        clientSecret,\n        setupIntentId,\n        onPaymentTabChange,\n        defaultOptionName,\n    } = props;\n\n    const { setFieldTouched, setFieldValue, triggerValidate, errorMessage, value } = useField<IStripeValue>({\n        ...props,\n        required: true,\n        getCustomErrorMessage: undefined,\n    });\n    const stripePromise = useMemo(() => {\n        return stripePublicKey ? loadStripe(stripePublicKey) : undefined;\n    }, [stripePublicKey]);\n\n    const handleCardChange = useCallback(\n        (e: IStripeCard) => {\n            if (e.isValid) {\n                setFieldValue({ ...value, card: e.cardNumberElement });\n            } else {\n                setFieldValue({ ...value, card: undefined });\n            }\n\n            triggerValidate();\n        },\n        [setFieldValue, triggerValidate, value],\n    );\n\n    const handleTokenInit = useCallback(\n        (e: SetupIntentResult) => {\n            setFieldValue({\n                ...value,\n                stripe_permanent_token_id: (e.setupIntent?.payment_method as string) || '',\n                stripe_setup_indent_id: e?.setupIntent?.id || '',\n            });\n            setFieldTouched();\n        },\n        [setFieldTouched, setFieldValue, value],\n    );\n\n    useEffect(() => {\n        if (clientSecret !== value.client_secret) {\n            setFieldValue({ ...value, client_secret: clientSecret, stripe_setup_indent_id: setupIntentId });\n        }\n    }, [clientSecret, setupIntentId, setFieldValue, value]);\n\n    const handleBlur = useCallback(() => {\n        setFieldTouched();\n    }, [setFieldTouched]);\n\n    const handleTabChange = useCallback(\n        (tab: EPaymentMethod) => {\n            setFieldValue({ ...value, paymentMethod: tab });\n\n            onPaymentTabChange && onPaymentTabChange();\n        },\n        [onPaymentTabChange, setFieldValue, value],\n    );\n\n    return stripePromise ? (\n        <Field\n            name={name}\n            required={required}\n            // label={' ' || t('Payment method (Credit / Debit Card)')}\n            errorMessage={cardError || errorMessage}\n        >\n            <Elements\n                stripe={stripePromise}\n                options={{\n                    fonts: [\n                        {\n                            cssSrc: `${document.location.origin}/stripeStyles.css`,\n                        },\n                        {\n                            cssSrc: 'https://fonts.googleapis.com/css2?family=Overpass:wght@600&display=swap',\n                        },\n                    ],\n                    appearance: {\n                        variables: {},\n                    },\n                }}\n            >\n                <StripeInternal\n                    defaultOptionName={defaultOptionName}\n                    paymentMethodOptions={paymentMethodOptions}\n                    onTabChange={handleTabChange}\n                    paymentButtonClientSecret={props.clientSecret}\n                    onPaymentButtonChange={handleTokenInit}\n                    onStripeInit={onStripeInit}\n                    onCardChange={handleCardChange}\n                    onBlur={handleBlur}\n                />\n            </Elements>\n        </Field>\n    ) : null;\n};\n"]},"metadata":{},"sourceType":"module"}