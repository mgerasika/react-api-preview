{"ast":null,"code":"import { createDefaultChooserColumns } from '../general-ui/table/table.component.js';\nimport { useState, useMemo, useCallback } from 'react';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction useTable(_ref) {\n  let {\n    tableUISettings,\n    allTableColumns,\n    onTableUISettingsChange\n  } = _ref;\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [isAllSelected, setIsAllSelected] = useState(false);\n  const defaultChooserColumns = useMemo(() => createDefaultChooserColumns(allTableColumns), [allTableColumns]);\n  const chooserColumns = useMemo(() => {\n    return tableUISettings?.chooserColumns?.length ? filterDeprecatedChooserColumns(tableUISettings.chooserColumns, allTableColumns) : defaultChooserColumns;\n  }, [allTableColumns, defaultChooserColumns, tableUISettings?.chooserColumns]);\n  const tableColumns = useMemo(() => filterTableColumns(allTableColumns, chooserColumns), [allTableColumns, chooserColumns]);\n  const handleSelectedRowsChange = useCallback((rows, allSelected) => {\n    setSelectedRows(rows);\n    setIsAllSelected(allSelected);\n  }, []);\n  const handleClearTableSelection = useCallback(() => {\n    setSelectedRows([]);\n    setIsAllSelected(false);\n  }, []);\n  return {\n    tableConfig: useMemo(() => {\n      return {\n        tableUISettings,\n        onTableUISettingsChange: props => {\n          onTableUISettingsChange && tableUISettings && onTableUISettingsChange({\n            ...tableUISettings,\n            ...props\n          });\n        },\n        chooser: {\n          chooserColumns,\n          defaultChooserColumns\n        },\n        selection: {\n          isAllSelected,\n          onSelectedRowsChange: handleSelectedRowsChange,\n          onClearTableSelection: handleClearTableSelection,\n          selectedRows,\n          updateSelectedRows: items => {\n            setSelectedRows(items);\n          }\n        },\n        table: {\n          tableColumns\n        }\n      };\n    }, [chooserColumns, defaultChooserColumns, handleClearTableSelection, handleSelectedRowsChange, isAllSelected, onTableUISettingsChange, selectedRows, tableColumns, tableUISettings])\n  };\n}\nconst filterDeprecatedChooserColumns = (chooserColumns, tableColumns) => {\n  return chooserColumns.filter(f => tableColumns.find(f2 => f2.id === f.id));\n};\nconst filterTableColumns = (tableColumns, chooserColumns) => {\n  let visibleTableColumns = tableColumns.map(t => {\n    const column = chooserColumns.find(f => f.id === t.id);\n    return {\n      ...t,\n      isVisible: column ? !column.isHidden : true\n    };\n  });\n  const res = [];\n  chooserColumns.forEach(column => {\n    const tableColumn = visibleTableColumns.find(f => f.id === column.id);\n    if (tableColumn) {\n      visibleTableColumns = visibleTableColumns.filter(f => f.id !== tableColumn.id);\n      res.push(tableColumn);\n    }\n  });\n  return [...res, ...visibleTableColumns];\n};\nexport { filterDeprecatedChooserColumns, filterTableColumns, useTable };","map":{"version":3,"sources":["../../../src/hooks/use-table.hook.ts"],"names":["useTable","tableUISettings","allTableColumns","onTableUISettingsChange","selectedRows","setSelectedRows","useState","isAllSelected","setIsAllSelected","defaultChooserColumns","useMemo","createDefaultChooserColumns","chooserColumns","length","filterDeprecatedChooserColumns","tableColumns","filterTableColumns","handleSelectedRowsChange","useCallback","rows","allSelected","handleClearTableSelection","tableConfig","props","chooser","selection","onSelectedRowsChange","onClearTableSelection","updateSelectedRows","items","table","filter","f","find","f2","id","visibleTableColumns","map","t","column","isVisible","isHidden","res","forEach","tableColumn","push"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { IColumnChooser } from '@common/general-ui/column-chooser/column-chooser.component';\nimport { createDefaultChooserColumns, ITableColumn } from '@common/general-ui/table/table.component';\nimport { IIdObject } from '@common/interfaces/id-object.interface';\nimport { ITableUISettings } from '@common/interfaces/ui-settings.interface';\nimport { useCallback, useMemo, useState } from 'react';\n\nexport interface ITableConfigProps<T extends IIdObject, TKey> {\n    tableUISettings: ITableUISettings | undefined;\n    onTableUISettingsChange: (settings: Partial<ITableUISettings>) => void | undefined;\n    chooser: { chooserColumns: IColumnChooser[]; defaultChooserColumns: IColumnChooser[] };\n    selection: {\n        isAllSelected: boolean;\n        updateSelectedRows: (items: T[]) => void;\n        selectedRows: T[];\n        onSelectedRowsChange: (data: T[], isAllSelected: boolean) => void;\n        onClearTableSelection: () => void;\n    };\n    table: {\n        tableColumns: ITableColumn<T, TKey>[];\n    };\n}\n\ninterface IReturn<T extends IIdObject, TKey> {\n    tableConfig: ITableConfigProps<T, TKey>;\n}\n\ninterface IProps<T extends IIdObject, T_UI extends ITableUISettings, TKey> {\n    tableUISettings: T_UI | undefined;\n    allTableColumns: ITableColumn<T, TKey>[];\n    onTableUISettingsChange: ((settings: T_UI) => void) | undefined;\n}\n\nexport function useTable<T extends IIdObject, T_UI extends ITableUISettings, TKey>({\n    tableUISettings,\n    allTableColumns,\n    onTableUISettingsChange,\n}: IProps<T, T_UI, TKey>): IReturn<T, TKey> {\n    const [selectedRows, setSelectedRows] = useState<T[]>([]);\n    const [isAllSelected, setIsAllSelected] = useState(false);\n\n    const defaultChooserColumns = useMemo(() => createDefaultChooserColumns(allTableColumns), [allTableColumns]);\n    const chooserColumns = useMemo<IColumnChooser[]>(() => {\n        return tableUISettings?.chooserColumns?.length\n            ? filterDeprecatedChooserColumns(tableUISettings.chooserColumns, allTableColumns)\n            : defaultChooserColumns;\n    }, [allTableColumns, defaultChooserColumns, tableUISettings?.chooserColumns]);\n\n    const tableColumns = useMemo(\n        () => filterTableColumns(allTableColumns, chooserColumns),\n        [allTableColumns, chooserColumns],\n    );\n\n    const handleSelectedRowsChange = useCallback((rows: T[], allSelected: boolean) => {\n        setSelectedRows(rows);\n        setIsAllSelected(allSelected);\n    }, []);\n\n    const handleClearTableSelection = useCallback(() => {\n        setSelectedRows([]);\n        setIsAllSelected(false);\n    }, []);\n    return {\n        tableConfig: useMemo(() => {\n            return {\n                tableUISettings,\n                onTableUISettingsChange: (props): void => {\n                    onTableUISettingsChange && tableUISettings && onTableUISettingsChange({ ...tableUISettings, ...props });\n                },\n                chooser: {\n                    chooserColumns,\n                    defaultChooserColumns,\n                },\n\n                selection: {\n                    isAllSelected,\n                    onSelectedRowsChange: handleSelectedRowsChange,\n                    onClearTableSelection: handleClearTableSelection,\n                    selectedRows,\n                    updateSelectedRows: (items: T[]): void => {\n                        setSelectedRows(items);\n                    },\n                },\n                table: {\n                    tableColumns,\n                },\n            };\n        }, [\n            chooserColumns,\n            defaultChooserColumns,\n            handleClearTableSelection,\n            handleSelectedRowsChange,\n            isAllSelected,\n            onTableUISettingsChange,\n            selectedRows,\n            tableColumns,\n            tableUISettings,\n        ]),\n    };\n}\n\nexport const filterDeprecatedChooserColumns = (\n    chooserColumns: IColumnChooser[],\n    tableColumns: ITableColumn<any, any>[],\n): IColumnChooser[] => {\n    return chooserColumns.filter((f) => tableColumns.find((f2) => f2.id === f.id));\n};\n\nexport const filterTableColumns = (\n    tableColumns: ITableColumn<any, any>[],\n    chooserColumns: IColumnChooser[],\n): ITableColumn<any, any>[] => {\n    let visibleTableColumns = tableColumns.map((t): ITableColumn<any, any> => {\n        const column = chooserColumns.find((f) => f.id === t.id);\n        return {\n            ...t,\n            isVisible: column ? !column.isHidden : true,\n        };\n    });\n    const res: ITableColumn<any, any>[] = [];\n    chooserColumns.forEach((column) => {\n        const tableColumn = visibleTableColumns.find((f) => f.id === column.id);\n        if (tableColumn) {\n            visibleTableColumns = visibleTableColumns.filter((f) => f.id !== tableColumn.id);\n            res.push(tableColumn);\n        }\n    });\n    return [...res, ...visibleTableColumns];\n};\n"]},"metadata":{},"sourceType":"module"}