{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nvar combineRoutes = function combineRoutes(configs) {\n  return configs.reduce(function (acc, it) {\n    return {\n      redirects: [].concat(_toConsumableArray(acc.redirects), _toConsumableArray(it.redirects)),\n      routes: [].concat(_toConsumableArray(acc.routes), _toConsumableArray(it.routes))\n    };\n  }, {\n    redirects: [],\n    routes: []\n  });\n};\nexport { combineRoutes };","map":{"version":3,"sources":["../../../src/utils/combine-routes.util.ts"],"names":["combineRoutes","configs","reduce","acc","it","redirects","routes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAEaA,IAAAA,aAAa,GAAIC,SAAjBD,aAAa,CAAIC,OAAuB,EAAmB;EACpE,OAAOA,OAAO,CAACC,MAAM,CACjB,UAACC,GAAG,EAAEC,EAAE,EAAK;IACT,OAAO;MACHC,SAAS,EAAA,EAAA,CAAA,MAAA,CAAA,kBAAA,CAAMF,GAAG,CAACE,SAAS,CAAA,EAAA,kBAAA,CAAKD,EAAE,CAACC,SAAS,CAAA,CAAC;MAC9CC,MAAM,EAAA,EAAA,CAAA,MAAA,CAAA,kBAAA,CAAMH,GAAG,CAACG,MAAM,CAAA,EAAA,kBAAA,CAAKF,EAAE,CAACE,MAAM,CAAA;KACvC;EACL,CAAC,EACD;IAAED,SAAS,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAG,CAAC,CAChC;AACL,CAAA","sourcesContent":["import { IRouteConfig } from '@common/interfaces/route.interface';\n\nexport const combineRoutes = (configs: IRouteConfig[]): IRouteConfig => {\n    return configs.reduce<IRouteConfig>(\n        (acc, it) => {\n            return {\n                redirects: [...acc.redirects, ...it.redirects],\n                routes: [...acc.routes, ...it.routes],\n            };\n        },\n        { redirects: [], routes: [] },\n    );\n};\n"]},"metadata":{},"sourceType":"module"}