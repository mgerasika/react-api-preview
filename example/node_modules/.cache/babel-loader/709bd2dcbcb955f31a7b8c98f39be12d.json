{"ast":null,"code":"import { CONST } from '../../constants/const.constant.js';\nimport 'react';\nimport { useHistory, Switch, Route, Redirect } from 'react-router';\nimport { jsx } from '@emotion/react';\nvar RenderRoutes = function RenderRoutes(_ref) {\n  var config = _ref.config,\n    getToken = _ref.getToken,\n    loginUrl = _ref.loginUrl,\n    dontHavePermissionUrl = _ref.dontHavePermissionUrl;\n  var history = useHistory();\n  return jsx(Switch, null, config.routes.map(function (route) {\n    var Component = route.component;\n    return jsx(Route, {\n      key: route.path.toString(),\n      exact: route.exact,\n      path: route.path.toString(),\n      render: function render(props) {\n        if (route.isPrivate && !getToken()) {\n          sessionStorage.setItem(CONST.sessionStorageKey_redirectUrl, history.location.pathname);\n          return jsx(Redirect, {\n            to: loginUrl.toString(),\n            from: history.location.pathname\n          });\n        }\n        if (!route.hasAccess()) {\n          return jsx(Redirect, {\n            to: dontHavePermissionUrl.toString(),\n            from: history.location.pathname\n          });\n        }\n        return jsx(Component, props);\n      }\n    });\n  }), config.redirects.map(function (r) {\n    var _r$from;\n    return jsx(Redirect, {\n      key: r.to.toString(),\n      to: {\n        pathname: r.to.toString(),\n        state: r.state\n      },\n      from: (_r$from = r.from) === null || _r$from === void 0 ? void 0 : _r$from.toString()\n    });\n  }));\n};\nexport { RenderRoutes };","map":{"version":3,"sources":["../../../../src/general-ui/render-routes/render-routes.component.tsx"],"names":["RenderRoutes","config","getToken","loginUrl","dontHavePermissionUrl","history","useHistory","___EmotionJSX","Switch","routes","map","route","Component","component","Route","key","path","toString","exact","render","props","isPrivate","sessionStorage","setItem","CONST","sessionStorageKey_redirectUrl","location","pathname","Redirect","to","from","hasAccess","redirects","r","state"],"mappings":";;;;AAaO,IAAMA,YAAY,GAAG,SAAfA,YAAY,CAAA,IAAA,EAAmF;EAAA,IAA7EC,MAAM,GAAA,IAAA,CAANA,MAAM;IAAEC,QAAQ,GAAA,IAAA,CAARA,QAAQ;IAAEC,QAAQ,GAAA,IAAA,CAARA,QAAQ;IAAEC,qBAAAA,GAAAA,IAAAA,CAAAA,qBAAAA;EACvD,IAAMC,OAAO,GAAGC,UAAU,EAAE;EAC5B,OACIC,GAAAA,CAACC,MAAM,EAAA,IAAA,EACFP,MAAM,CAACQ,MAAM,CAACC,GAAG,CAAEC,UAAAA,KAAK,EAAK;IAC1B,IAAMC,SAAS,GAAGD,KAAK,CAACE,SAAS;IACjC,OACIN,GAAAA,CAACO,KAAK,EAAA;MACFC,GAAG,EAAEJ,KAAK,CAACK,IAAI,CAACC,QAAQ,EAAG;MAC3BC,KAAK,EAAEP,KAAK,CAACO,KAAM;MACnBF,IAAI,EAAEL,KAAK,CAACK,IAAI,CAACC,QAAQ,EAAG;MAC5BE,MAAM,EAAGC,SAAAA,MAAAA,CAAAA,KAAK,EAAkB;QAC5B,IAAIT,KAAK,CAACU,SAAS,IAAI,CAACnB,QAAQ,EAAE,EAAE;UAChCoB,cAAc,CAACC,OAAO,CAACC,KAAK,CAACC,6BAA6B,EAAEpB,OAAO,CAACqB,QAAQ,CAACC,QAAQ,CAAC;UACtF,OAAOpB,GAAAA,CAACqB,QAAQ,EAAA;YAACC,EAAE,EAAE1B,QAAQ,CAACc,QAAQ,EAAG;YAACa,IAAI,EAAEzB,OAAO,CAACqB,QAAQ,CAACC;WAAY,CAAA;QACjF;QACA,IAAI,CAAChB,KAAK,CAACoB,SAAS,EAAE,EAAE;UACpB,OAAOxB,GAAAA,CAACqB,QAAQ,EAAA;YAACC,EAAE,EAAEzB,qBAAqB,CAACa,QAAQ,EAAG;YAACa,IAAI,EAAEzB,OAAO,CAACqB,QAAQ,CAACC;WAAY,CAAA;QAC9F;QACA,OAAOpB,GAAC,CAAA,SAAS,EAAKa,KAAK,CAAI;MACnC;KACF,CAAA;EAET,CAAA,CAAC,EAEDnB,MAAM,CAAC+B,SAAS,CAACtB,GAAG,CAAEuB,UAAAA,CAAC,EAAK;IAAA,IAAA,OAAA;IACzB,OACI1B,GAAAA,CAACqB,QAAQ,EAAA;MACLb,GAAG,EAAEkB,CAAC,CAACJ,EAAE,CAACZ,QAAQ,EAAG;MACrBY,EAAE,EAAE;QAAEF,QAAQ,EAAEM,CAAC,CAACJ,EAAE,CAACZ,QAAQ,EAAE;QAAEiB,KAAK,EAAED,CAAC,CAACC;MAAQ,CAAA;MAClDJ,IAAI,EAAA,CAAA,OAAA,GAAEG,CAAC,CAACH,IAAI,MAAA,IAAA,IAAA,OAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAANG,OAAAA,CAAQhB,QAAQ;KACxB,CAAA;EAET,CAAA,CAAC,CACG;AAEjB,CAAA","sourcesContent":["import { CONST } from '@common/constants/const.constant';\nimport { IRouteConfig } from '@common/interfaces/route.interface';\nimport { ILinkItem } from '@common/utils/make-links.util';\nimport React from 'react';\nimport { Redirect, Route, Switch, useHistory } from 'react-router';\n\ninterface IProps {\n    loginUrl: ILinkItem;\n    dontHavePermissionUrl: ILinkItem;\n    config: IRouteConfig;\n    getToken: () => string | undefined;\n}\n\nexport const RenderRoutes = ({ config, getToken, loginUrl, dontHavePermissionUrl }: IProps): JSX.Element => {\n    const history = useHistory();\n    return (\n        <Switch>\n            {config.routes.map((route) => {\n                const Component = route.component;\n                return (\n                    <Route\n                        key={route.path.toString()}\n                        exact={route.exact}\n                        path={route.path.toString()}\n                        render={(props): JSX.Element => {\n                            if (route.isPrivate && !getToken()) {\n                                sessionStorage.setItem(CONST.sessionStorageKey_redirectUrl, history.location.pathname);\n                                return <Redirect to={loginUrl.toString()} from={history.location.pathname} />;\n                            }\n                            if (!route.hasAccess()) {\n                                return <Redirect to={dontHavePermissionUrl.toString()} from={history.location.pathname} />;\n                            }\n                            return <Component {...props} />;\n                        }}\n                    />\n                );\n            })}\n\n            {config.redirects.map((r) => {\n                return (\n                    <Redirect\n                        key={r.to.toString()}\n                        to={{ pathname: r.to.toString(), state: r.state }}\n                        from={r.from?.toString()}\n                    />\n                );\n            })}\n        </Switch>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}