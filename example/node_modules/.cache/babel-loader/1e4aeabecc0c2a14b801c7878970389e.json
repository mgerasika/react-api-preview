{"ast":null,"code":"import { queryToString } from './query-to-string.util.js';\nfunction formatUrl(urlStr, query) {\n  if (query && Object.keys(query).length) {\n    return \"\".concat(urlStr, \"?\").concat(queryToString(query));\n  }\n  return urlStr;\n}\nexport { formatUrl };","map":{"version":3,"sources":["../../../src/utils/format-url.util.ts"],"names":["formatUrl","urlStr","query","Object","keys","length","queryToString"],"mappings":";AAGO,SAASA,SAAS,CAAkBC,MAAc,EAAEC,KAAS,EAAU;EAC1E,IAAIA,KAAK,IAAIC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,EAAE;IACpC,OAAA,EAAA,CAAA,MAAA,CAAUJ,MAAO,EAAA,GAAA,CAAA,CAAA,MAAA,CAAGK,aAAa,CAACJ,KAAK,CAAE,CAAA;EAC7C;EACA,OAAOD,MAAM;AACjB","sourcesContent":["import { IDictionary } from '@common/interfaces/dictionary.interface';\nimport { queryToString } from './query-to-string.util';\n\nexport function formatUrl<T = IDictionary>(urlStr: string, query?: T): string {\n    if (query && Object.keys(query).length) {\n        return `${urlStr}?${queryToString(query)}`;\n    }\n    return urlStr;\n}\n"]},"metadata":{},"sourceType":"module"}