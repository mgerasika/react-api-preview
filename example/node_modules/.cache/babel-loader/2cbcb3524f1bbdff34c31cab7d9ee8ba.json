{"ast":null,"code":"import { CONST } from '../constants/const.constant.js';\nimport { useRef, useCallback } from 'react';\nfunction useCollectionOptions(_ref) {\n  var _ref$limit = _ref.limit,\n    limit = _ref$limit === void 0 ? CONST.LIST_LIMIT : _ref$limit,\n    queryStorage = _ref.queryStorage,\n    _ref$filter = _ref.filter,\n    filter = _ref$filter === void 0 ? {} : _ref$filter;\n  var ref = useRef(queryStorage ? queryStorage.queryClient.getQueryData(\"settings-\".concat(queryStorage.storageKey)) || {\n    limit: limit,\n    filter: filter\n  } : {\n    limit: limit,\n    filter: filter\n  });\n  return {\n    getCollectionOptions: useCallback(function () {\n      return ref.current;\n    }, []),\n    setCollectionOptions: useCallback(function (data) {\n      ref.current = data;\n      if (queryStorage !== null && queryStorage !== void 0 && queryStorage.queryClient && queryStorage.storageKey) {\n        var _queryStorage$queryCl;\n        (_queryStorage$queryCl = queryStorage.queryClient) === null || _queryStorage$queryCl === void 0 ? void 0 : _queryStorage$queryCl.setQueryData(\"settings-\".concat(queryStorage.storageKey), function () {\n          return data;\n        });\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [queryStorage === null || queryStorage === void 0 ? void 0 : queryStorage.storageKey])\n  };\n}\nexport { useCollectionOptions };","map":{"version":3,"sources":["../../../src/hooks/use-collection-options.hook.ts"],"names":["useCollectionOptions","limit","CONST","LIST_LIMIT","queryStorage","filter","ref","useRef","queryClient","getQueryData","storageKey","getCollectionOptions","useCallback","current","setCollectionOptions","data","setQueryData"],"mappings":";;AAgBO,SAASA,oBAAoB,CAAA,IAAA,EAIE;EAAA,IAAA,UAAA,GAAA,IAAA,CAHlCC,KAAK;IAALA,KAAK,GAAA,UAAA,KAAA,KAAA,CAAA,GAAGC,KAAK,CAACC,UAAU,GAAA,UAAA;IACxBC,YAAY,GAAA,IAAA,CAAZA,YAAY;IAAA,WAAA,GAAA,IAAA,CACZC,MAAM;IAANA,MAAM,GAAA,WAAA,KAAA,KAAA,CAAA,GAAG,CAAC,CAAA,GAAA,WAAA;EAEV,IAAMC,GAAG,GAAGC,MAAM,CACdH,YAAY,GACNA,YAAY,CAACI,WAAW,CAACC,YAAY,CAAA,WAAA,CAAA,MAAA,CAAaL,YAAY,CAACM,UAAW,CAAA,CAAE,IAAI;IAAET,KAAK,EAALA,KAAK;IAAEI,MAAAA,EAAAA;EAAO,CAAC,GACjG;IAAEJ,KAAK,EAALA,KAAK;IAAEI,MAAAA,EAAAA;EAAO,CAAC,CAC1B;EAED,OAAO;IACHM,oBAAoB,EAAEC,WAAW,CAAC,YAAA;MAAA,OAA0CN,GAAG,CAACO,OAAO;IAAA,CAAA,EAAE,EAAE,CAAC;IAC5FC,oBAAoB,EAAEF,WAAW,CAC5BG,UAAAA,IAAwC,EAAW;MAChDT,GAAG,CAACO,OAAO,GAAGE,IAAI;MAClB,IAAIX,YAAY,KAAA,IAAA,IAAZA,YAAY,KAAA,KAAA,CAAA,IAAZA,YAAY,CAAEI,WAAW,IAAIJ,YAAY,CAACM,UAAU,EAAE;QAAA,IAAA,qBAAA;QACtDN,CAAAA,qBAAAA,GAAAA,YAAY,CAACI,WAAW,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAxBJ,qBAAAA,CAA0BY,YAAY,CAAA,WAAA,CAAA,MAAA,CAAaZ,YAAY,CAACM,UAAW,CAAA,EAAG,YAAA;UAAA,OAAMK,IAAI;QAAA,CAAA,CAAC;MAC7F;IACH,CAAA;IACD;IACA,CAACX,YAAY,KAAA,IAAA,IAAZA,YAAY,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZA,YAAY,CAAEM,UAAU,CAAC;GAEjC;AACL","sourcesContent":["import { CONST } from '@common/constants/const.constant';\nimport { ICollectionRequestOptions } from '@common/interfaces/collection-request-options.interface';\nimport { useCallback, useRef } from 'react';\nimport { QueryClient } from 'react-query';\n\ninterface IReturn<T = unknown> {\n    getCollectionOptions: () => ICollectionRequestOptions<T>;\n    setCollectionOptions: (pagination: ICollectionRequestOptions<T>) => void;\n}\n\ninterface IProps<TFilter> {\n    queryStorage?: { queryClient: QueryClient; storageKey: string };\n    limit?: number;\n\n    filter?: TFilter;\n}\nexport function useCollectionOptions<TFilter = unknown>({\n    limit = CONST.LIST_LIMIT,\n    queryStorage,\n    filter = {} as TFilter,\n}: IProps<TFilter>): IReturn<TFilter> {\n    const ref = useRef<ICollectionRequestOptions<TFilter>>(\n        queryStorage\n            ? queryStorage.queryClient.getQueryData(`settings-${queryStorage.storageKey}`) || { limit, filter }\n            : { limit, filter },\n    );\n\n    return {\n        getCollectionOptions: useCallback((): ICollectionRequestOptions<TFilter> => ref.current, []),\n        setCollectionOptions: useCallback(\n            (data: ICollectionRequestOptions<TFilter>): void => {\n                ref.current = data;\n                if (queryStorage?.queryClient && queryStorage.storageKey) {\n                    queryStorage.queryClient?.setQueryData(`settings-${queryStorage.storageKey}`, () => data);\n                }\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [queryStorage?.storageKey],\n        ),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}