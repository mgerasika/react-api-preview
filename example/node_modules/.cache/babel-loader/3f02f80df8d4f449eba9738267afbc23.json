{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CreateStreamInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1CreateStreamCommand, serializeAws_json1_1CreateStreamCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates a Kinesis data stream. A stream captures and transports data records that\n *             are continuously emitted from different data sources or <i>producers</i>.\n *             Scale-out within a stream is explicitly supported by means of shards, which are uniquely\n *             identified groups of data records in a stream.</p>\n *         <p>You specify and control the number of shards that a stream is composed of. Each\n *             shard can support reads up to five transactions per second, up to a maximum data read\n *             total of 2 MiB per second. Each shard can support writes up to 1,000 records per second,\n *             up to a maximum data write total of 1 MiB per second. If the amount of data input\n *             increases or decreases, you can add or remove shards.</p>\n *         <p>The stream name identifies the stream. The name is scoped to the AWS account used\n *             by the application. It is also scoped by AWS Region. That is, two streams in two\n *             different accounts can have the same name, and two streams in the same account, but in\n *             two different Regions, can have the same name.</p>\n *         <p>\n *             <code>CreateStream</code> is an asynchronous operation. Upon receiving a\n *                 <code>CreateStream</code> request, Kinesis Data Streams immediately returns and sets\n *             the stream status to <code>CREATING</code>. After the stream is created, Kinesis Data\n *             Streams sets the stream status to <code>ACTIVE</code>. You should perform read and write\n *             operations only on an <code>ACTIVE</code> stream. </p>\n *         <p>You receive a <code>LimitExceededException</code> when making a\n *                 <code>CreateStream</code> request when you try to do one of the following:</p>\n *         <ul>\n *             <li>\n *\n *                 <p>Have more than five streams in the <code>CREATING</code> state at any point\n *                     in time.</p>\n *             </li>\n *             <li>\n *\n *                 <p>Create more shards than are authorized for your account.</p>\n *             </li>\n *          </ul>\n *         <p>For the default shard limit for an AWS account, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Amazon Kinesis Data Streams\n *                 Limits</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>. To increase this limit, <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\">contact AWS\n *             Support</a>.</p>\n *         <p>You can use <code>DescribeStream</code> to check the stream status, which is\n *             returned in <code>StreamStatus</code>.</p>\n *         <p>\n *             <a>CreateStream</a> has a limit of five transactions per second per\n *             account.</p>\n */\nvar CreateStreamCommand = /** @class */function (_super) {\n  __extends(CreateStreamCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function CreateStreamCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  CreateStreamCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"CreateStreamCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CreateStreamInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  CreateStreamCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1CreateStreamCommand(input, context);\n  };\n  CreateStreamCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1CreateStreamCommand(output, context);\n  };\n  return CreateStreamCommand;\n}($Command);\nexport { CreateStreamCommand };","map":{"version":3,"sources":["../../../commands/CreateStreamCommand.ts"],"names":[],"mappings":";AACA,SAAS,iBAAiB,QAAQ,oBAAoB;AACtD,SACE,yCAAyC,EACzC,uCAAuC,QAClC,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CG;AACH,IAAA,mBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAyC,SAAA,CAAA,mBAAA,EAAA,MAAA,CAAA;EAKvC;EACA;EAEA,SAAA,mBAAA,CAAqB,KAA+B,EAAA;IAApD,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,mBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA0C,EAC1C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,eAAe;IAClC,IAAM,WAAW,GAAG,qBAAqB;IACzC,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,iBAAiB,CAAC,kBAAkB;MAC7D,wBAAwB,EAAE,kCAAC,MAAW,EAAA;QAAK,OAAA,MAAM;MAAN;KAC5C;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,mBAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAA+B,EAAE,OAAuB,EAAA;IACxE,OAAO,uCAAuC,CAAC,KAAK,EAAE,OAAO,CAAC;EAChE,CAAC;EAEO,mBAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,yCAAyC,CAAC,MAAM,EAAE,OAAO,CAAC;EACnE,CAAC;EAIH,OAAA,mBAAC;AAAD,CAAC,CAtDwC,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { CreateStreamInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1CreateStreamCommand, serializeAws_json1_1CreateStreamCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates a Kinesis data stream. A stream captures and transports data records that\n *             are continuously emitted from different data sources or <i>producers</i>.\n *             Scale-out within a stream is explicitly supported by means of shards, which are uniquely\n *             identified groups of data records in a stream.</p>\n *         <p>You specify and control the number of shards that a stream is composed of. Each\n *             shard can support reads up to five transactions per second, up to a maximum data read\n *             total of 2 MiB per second. Each shard can support writes up to 1,000 records per second,\n *             up to a maximum data write total of 1 MiB per second. If the amount of data input\n *             increases or decreases, you can add or remove shards.</p>\n *         <p>The stream name identifies the stream. The name is scoped to the AWS account used\n *             by the application. It is also scoped by AWS Region. That is, two streams in two\n *             different accounts can have the same name, and two streams in the same account, but in\n *             two different Regions, can have the same name.</p>\n *         <p>\n *             <code>CreateStream</code> is an asynchronous operation. Upon receiving a\n *                 <code>CreateStream</code> request, Kinesis Data Streams immediately returns and sets\n *             the stream status to <code>CREATING</code>. After the stream is created, Kinesis Data\n *             Streams sets the stream status to <code>ACTIVE</code>. You should perform read and write\n *             operations only on an <code>ACTIVE</code> stream. </p>\n *         <p>You receive a <code>LimitExceededException</code> when making a\n *                 <code>CreateStream</code> request when you try to do one of the following:</p>\n *         <ul>\n *             <li>\n *\n *                 <p>Have more than five streams in the <code>CREATING</code> state at any point\n *                     in time.</p>\n *             </li>\n *             <li>\n *\n *                 <p>Create more shards than are authorized for your account.</p>\n *             </li>\n *          </ul>\n *         <p>For the default shard limit for an AWS account, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Amazon Kinesis Data Streams\n *                 Limits</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>. To increase this limit, <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\">contact AWS\n *             Support</a>.</p>\n *         <p>You can use <code>DescribeStream</code> to check the stream status, which is\n *             returned in <code>StreamStatus</code>.</p>\n *         <p>\n *             <a>CreateStream</a> has a limit of five transactions per second per\n *             account.</p>\n */\nvar CreateStreamCommand = /** @class */ (function (_super) {\n    __extends(CreateStreamCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function CreateStreamCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    CreateStreamCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"KinesisClient\";\n        var commandName = \"CreateStreamCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: CreateStreamInput.filterSensitiveLog,\n            outputFilterSensitiveLog: function (output) { return output; },\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    CreateStreamCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1CreateStreamCommand(input, context);\n    };\n    CreateStreamCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1CreateStreamCommand(output, context);\n    };\n    return CreateStreamCommand;\n}($Command));\nexport { CreateStreamCommand };\n//# sourceMappingURL=CreateStreamCommand.js.map"]},"metadata":{},"sourceType":"module"}