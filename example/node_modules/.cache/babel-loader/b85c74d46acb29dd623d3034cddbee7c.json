{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetSegmentDetectionRequest, GetSegmentDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetSegmentDetectionCommand, serializeAws_json1_1GetSegmentDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the segment detection results of a Amazon Rekognition Video analysis started by <a>StartSegmentDetection</a>.</p>\n *          <p>Segment detection with Amazon Rekognition Video is an asynchronous operation. You start segment detection by\n *       calling <a>StartSegmentDetection</a> which returns a job identifier (<code>JobId</code>).\n *       When the segment detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartSegmentDetection</code>. To get the results\n *       of the segment detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *       if so, call <code>GetSegmentDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call\n *       of <code>StartSegmentDetection</code>.</p>\n *          <p>\n *             <code>GetSegmentDetection</code> returns detected segments in an array (<code>Segments</code>)\n *       of <a>SegmentDetection</a> objects. <code>Segments</code> is sorted by the segment types\n *       specified in the <code>SegmentTypes</code> input parameter of <code>StartSegmentDetection</code>.\n *     Each element of the array includes the detected segment, the precentage confidence in the acuracy\n *       of the detected segment, the type of the segment, and the frame in which the segment was detected.</p>\n *          <p>Use <code>SelectedSegmentTypes</code> to find out the type of segment detection requested in the\n *     call to <code>StartSegmentDetection</code>.</p>\n *          <p>Use the <code>MaxResults</code> parameter to limit the number of segment detections returned. If there are more results than\n *       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains\n *       a pagination token for getting the next set of results. To get the next page of results, call <code>GetSegmentDetection</code>\n *       and populate the <code>NextToken</code> request parameter with the token value returned from the previous\n *       call to <code>GetSegmentDetection</code>.</p>\n *\n *          <p>For more information, see Detecting Video Segments in Stored Video in the Amazon Rekognition Developer Guide.</p>\n */\nvar GetSegmentDetectionCommand = /** @class */function (_super) {\n  __extends(GetSegmentDetectionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetSegmentDetectionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetSegmentDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetSegmentDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetSegmentDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetSegmentDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetSegmentDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetSegmentDetectionCommand(input, context);\n  };\n  GetSegmentDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetSegmentDetectionCommand(output, context);\n  };\n  return GetSegmentDetectionCommand;\n}($Command);\nexport { GetSegmentDetectionCommand };","map":{"version":3,"sources":["../../../commands/GetSegmentDetectionCommand.ts"],"names":[],"mappings":";AACA,SAAS,0BAA0B,EAAE,2BAA2B,QAAQ,oBAAoB;AAC5F,SACE,gDAAgD,EAChD,8CAA8C,QACzC,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;AAwBG;AACH,IAAA,0BAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAgD,SAAA,CAAA,0BAAA,EAAA,MAAA,CAAA;EAK9C;EACA;EAEA,SAAA,0BAAA,CAAqB,KAAsC,EAAA;IAA3D,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,0BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA8C,EAC9C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,mBAAmB;IACtC,IAAM,WAAW,GAAG,4BAA4B;IAChD,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,0BAA0B,CAAC,kBAAkB;MACtE,wBAAwB,EAAE,2BAA2B,CAAC;KACvD;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,0BAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAAsC,EAAE,OAAuB,EAAA;IAC/E,OAAO,8CAA8C,CAAC,KAAK,EAAE,OAAO,CAAC;EACvE,CAAC;EAEO,0BAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,gDAAgD,CAAC,MAAM,EAAE,OAAO,CAAC;EAC1E,CAAC;EAIH,OAAA,0BAAC;AAAD,CAAC,CAtD+C,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetSegmentDetectionRequest, GetSegmentDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetSegmentDetectionCommand, serializeAws_json1_1GetSegmentDetectionCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the segment detection results of a Amazon Rekognition Video analysis started by <a>StartSegmentDetection</a>.</p>\n *          <p>Segment detection with Amazon Rekognition Video is an asynchronous operation. You start segment detection by\n *       calling <a>StartSegmentDetection</a> which returns a job identifier (<code>JobId</code>).\n *       When the segment detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartSegmentDetection</code>. To get the results\n *       of the segment detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *       if so, call <code>GetSegmentDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call\n *       of <code>StartSegmentDetection</code>.</p>\n *          <p>\n *             <code>GetSegmentDetection</code> returns detected segments in an array (<code>Segments</code>)\n *       of <a>SegmentDetection</a> objects. <code>Segments</code> is sorted by the segment types\n *       specified in the <code>SegmentTypes</code> input parameter of <code>StartSegmentDetection</code>.\n *     Each element of the array includes the detected segment, the precentage confidence in the acuracy\n *       of the detected segment, the type of the segment, and the frame in which the segment was detected.</p>\n *          <p>Use <code>SelectedSegmentTypes</code> to find out the type of segment detection requested in the\n *     call to <code>StartSegmentDetection</code>.</p>\n *          <p>Use the <code>MaxResults</code> parameter to limit the number of segment detections returned. If there are more results than\n *       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains\n *       a pagination token for getting the next set of results. To get the next page of results, call <code>GetSegmentDetection</code>\n *       and populate the <code>NextToken</code> request parameter with the token value returned from the previous\n *       call to <code>GetSegmentDetection</code>.</p>\n *\n *          <p>For more information, see Detecting Video Segments in Stored Video in the Amazon Rekognition Developer Guide.</p>\n */\nvar GetSegmentDetectionCommand = /** @class */ (function (_super) {\n    __extends(GetSegmentDetectionCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetSegmentDetectionCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetSegmentDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"GetSegmentDetectionCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetSegmentDetectionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: GetSegmentDetectionResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetSegmentDetectionCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1GetSegmentDetectionCommand(input, context);\n    };\n    GetSegmentDetectionCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1GetSegmentDetectionCommand(output, context);\n    };\n    return GetSegmentDetectionCommand;\n}($Command));\nexport { GetSegmentDetectionCommand };\n//# sourceMappingURL=GetSegmentDetectionCommand.js.map"]},"metadata":{},"sourceType":"module"}