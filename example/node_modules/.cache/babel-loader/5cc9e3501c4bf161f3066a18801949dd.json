{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e2) {\n          throw _e2;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e3) {\n      didErr = true;\n      err = _e3;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { DownOutlined } from '@ant-design/icons';\nimport { Icon } from '../icon/icon.component.js';\nimport { Dropdown } from 'antd';\nimport React, { useRef, useState, useEffect } from 'react';\nvar DropDown = function DropDown(_ref) {\n  var popup = _ref.popup,\n    children = _ref.children,\n    _ref$showArrowIcon = _ref.showArrowIcon,\n    showArrowIcon = _ref$showArrowIcon === void 0 ? true : _ref$showArrowIcon,\n    placement = _ref.placement,\n    className = _ref.className;\n  var rootRef = useRef(undefined);\n  var popupRef = useRef(undefined);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    visible = _useState2[0],\n    setIsVisible = _useState2[1];\n  useEffect(function () {\n    if (visible) {\n      window.addEventListener('click', handleDropdownClose);\n    }\n    return function () {\n      return window.removeEventListener('click', handleDropdownClose);\n    };\n  }, [visible]);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var handleDropdownClose = function handleDropdownClose(e) {\n    var path = e.path || e.composedPath();\n    var _iterator = _createForOfIteratorHelper(path),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        if (rootRef.current === item) {\n          return;\n        }\n        if (popupRef.current === item) {\n          return;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    setIsVisible(false);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: rootRef,\n    className: className\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    visible: visible,\n    overlay: /*#__PURE__*/React.createElement(\"div\", {\n      tw: \"text-base\",\n      ref: popupRef\n    }, popup),\n    trigger: ['click'],\n    placement: placement\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    tw: \"cursor-pointer\",\n    onClick: function onClick() {\n      return setIsVisible(!visible);\n    }\n  }, children, \" \", showArrowIcon && /*#__PURE__*/React.createElement(Icon, {\n    icon: DownOutlined\n  }))));\n};\nexport { DropDown };","map":{"version":3,"sources":["../../../../src/general-ui/drop-down/drop-down.component.tsx"],"names":["DropDown","popup","children","showArrowIcon","placement","className","rootRef","useRef","undefined","popupRef","visible","setIsVisible","useState","useEffect","window","addEventListener","handleDropdownClose","removeEventListener","e","path","composedPath","item","current","React","ref","AntdDropdown","overlay","tw","trigger","onClick","Icon","icon","DownOutlined"],"mappings":"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","sourcesContent":["import { DownOutlined } from '@ant-design/icons';\nimport { Icon } from '@common/general-ui/icon/icon.component';\nimport { Dropdown as AntdDropdown, DropDownProps } from 'antd';\nimport React, { LegacyRef, ReactNode, useEffect, useRef, useState } from 'react';\n\ninterface IProps {\n    popup: JSX.Element;\n    children: ReactNode;\n    showArrowIcon?: boolean;\n    placement?: DropDownProps['placement'];\n    className?: string;\n}\n\nexport const DropDown = ({ popup, children, showArrowIcon = true, placement, className }: IProps): JSX.Element => {\n    const rootRef = useRef<HTMLDivElement | undefined>(undefined);\n    const popupRef = useRef<HTMLDivElement | undefined>(undefined);\n    const [visible, setIsVisible] = useState(false);\n\n    useEffect(() => {\n        if (visible) {\n            window.addEventListener('click', handleDropdownClose);\n        }\n        return (): void => window.removeEventListener('click', handleDropdownClose);\n    }, [visible]);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleDropdownClose = (e: any): void => {\n        const path = e.path || e.composedPath();\n        for (const item of path) {\n            if (rootRef.current === item) {\n                return;\n            }\n            if (popupRef.current === item) {\n                return;\n            }\n        }\n\n        setIsVisible(false);\n    };\n    return (\n        <div ref={rootRef as unknown as LegacyRef<HTMLDivElement>} className={className}>\n            <AntdDropdown\n                visible={visible}\n                overlay={\n                    <div tw=\"text-base\" ref={popupRef as unknown as LegacyRef<HTMLDivElement>}>\n                        {popup}\n                    </div>\n                }\n                trigger={['click']}\n                placement={placement}\n            >\n                <div tw=\"cursor-pointer\" onClick={(): void => setIsVisible(!visible)}>\n                    {children} {showArrowIcon && <Icon icon={DownOutlined} />}\n                </div>\n            </AntdDropdown>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}