"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorHandler = exports.GatewayTimeoutError = exports.ServiceUnavailableError = exports.BadGatewayError = exports.InternalServerError = exports.NotFoundError = exports.ForbiddenError = exports.UnauthorizedError = exports.BadRequestError = exports.TransportError = void 0;
var TransportError = /** @class */ (function (_super) {
    __extends(TransportError, _super);
    function TransportError(message, status) {
        var _this = _super.call(this, message) || this;
        _this.status = status;
        return _this;
    }
    return TransportError;
}(Error));
exports.TransportError = TransportError;
var BadRequestError = /** @class */ (function (_super) {
    __extends(BadRequestError, _super);
    function BadRequestError(message) {
        return _super.call(this, message || 'Bad Request', 400) || this;
    }
    return BadRequestError;
}(TransportError));
exports.BadRequestError = BadRequestError;
var UnauthorizedError = /** @class */ (function (_super) {
    __extends(UnauthorizedError, _super);
    function UnauthorizedError(message) {
        return _super.call(this, message || 'Unauthorized', 401) || this;
    }
    return UnauthorizedError;
}(TransportError));
exports.UnauthorizedError = UnauthorizedError;
var ForbiddenError = /** @class */ (function (_super) {
    __extends(ForbiddenError, _super);
    function ForbiddenError(message) {
        return _super.call(this, message || 'Forbidden', 403) || this;
    }
    return ForbiddenError;
}(TransportError));
exports.ForbiddenError = ForbiddenError;
var NotFoundError = /** @class */ (function (_super) {
    __extends(NotFoundError, _super);
    function NotFoundError(message) {
        return _super.call(this, message || 'Not Found', 404) || this;
    }
    return NotFoundError;
}(TransportError));
exports.NotFoundError = NotFoundError;
var InternalServerError = /** @class */ (function (_super) {
    __extends(InternalServerError, _super);
    function InternalServerError(message) {
        return _super.call(this, message || 'Internal Server Error', 500) || this;
    }
    return InternalServerError;
}(TransportError));
exports.InternalServerError = InternalServerError;
var BadGatewayError = /** @class */ (function (_super) {
    __extends(BadGatewayError, _super);
    function BadGatewayError(message) {
        return _super.call(this, message || 'Bad Gateway', 502) || this;
    }
    return BadGatewayError;
}(TransportError));
exports.BadGatewayError = BadGatewayError;
var ServiceUnavailableError = /** @class */ (function (_super) {
    __extends(ServiceUnavailableError, _super);
    function ServiceUnavailableError(message) {
        return _super.call(this, message || 'Service Unavailable', 503) || this;
    }
    return ServiceUnavailableError;
}(TransportError));
exports.ServiceUnavailableError = ServiceUnavailableError;
var GatewayTimeoutError = /** @class */ (function (_super) {
    __extends(GatewayTimeoutError, _super);
    function GatewayTimeoutError(message) {
        return _super.call(this, message || 'Gateway Timeout', 504) || this;
    }
    return GatewayTimeoutError;
}(TransportError));
exports.GatewayTimeoutError = GatewayTimeoutError;
function errorHandler(response) {
    if (!response)
        return { status: 204, statusText: 'No Content' };
    var status = response.status, message = response.statusText;
    if (status >= 400)
        switch (status) {
            case 400:
                throw new BadRequestError(message);
            case 401:
                throw new UnauthorizedError(message);
            case 403:
                throw new ForbiddenError(message);
            case 404:
                throw new NotFoundError(message);
            case 500:
                throw new InternalServerError(message);
            case 502:
                throw new BadGatewayError(message);
            case 503:
                throw new ServiceUnavailableError(message);
            case 504:
                throw new GatewayTimeoutError(message);
            default:
                throw new TransportError(message || 'Transport Error', status);
        }
    return response;
}
exports.errorHandler = errorHandler;
//# sourceMappingURL=error.js.map