import type { TransportResponse } from './model';
export declare class TransportError extends Error {
    readonly status: number;
    constructor(message: string, status: number);
}
export declare class BadRequestError extends TransportError {
    constructor(message?: string);
}
export declare class UnauthorizedError extends TransportError {
    constructor(message?: string);
}
export declare class ForbiddenError extends TransportError {
    constructor(message?: string);
}
export declare class NotFoundError extends TransportError {
    constructor(message?: string);
}
export declare class InternalServerError extends TransportError {
    constructor(message?: string);
}
export declare class BadGatewayError extends TransportError {
    constructor(message?: string);
}
export declare class ServiceUnavailableError extends TransportError {
    constructor(message?: string);
}
export declare class GatewayTimeoutError extends TransportError {
    constructor(message?: string);
}
export declare function errorHandler<T>(response: TransportResponse<T>): TransportResponse<T>;
