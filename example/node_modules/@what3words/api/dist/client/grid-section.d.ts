import { ApiClient } from '../lib';
import type { ApiClientConfiguration, Transport } from '../lib';
import type { Coordinates, FeatureCollectionResponse } from './response.model';
export interface GridSectionJsonResponse {
    lines: {
        start: Coordinates;
        end: Coordinates;
    }[];
}
export interface GridSectionGeoJsonResponse {
    geometry: {
        coordinates: [number, number][][];
        type: 'MultiLineString';
    };
    type: 'Feature';
    properties: {};
}
export declare type GridSectionOptions = {
    boundingBox: {
        southwest: Coordinates;
        northeast: Coordinates;
    };
    format?: 'json' | 'geojson';
};
export declare class GridSectionClient extends ApiClient<GridSectionJsonResponse, GridSectionOptions, FeatureCollectionResponse<GridSectionGeoJsonResponse>> {
    protected readonly method = "get";
    protected readonly url = "/grid-section";
    static init(apiKey?: string, config?: ApiClientConfiguration, transport?: Transport): GridSectionClient;
    protected query(options: GridSectionOptions): {
        'bounding-box': string;
        format: "json" | "geojson";
    };
    protected validate(options: GridSectionOptions): Promise<{
        valid: boolean;
        message: string;
    } | {
        valid: boolean;
        message?: undefined;
    }>;
}
