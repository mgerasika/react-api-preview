"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutosuggestClient = exports.AutosuggestInputType = void 0;
var lib_1 = require("../lib");
var AutosuggestInputType;
(function (AutosuggestInputType) {
    AutosuggestInputType["Text"] = "text";
    AutosuggestInputType["VoconHybrid"] = "vocon-hybrid";
    AutosuggestInputType["NMDP_ASR"] = "nmdp-asr";
    AutosuggestInputType["GenericVoice"] = "generic-voice";
})(AutosuggestInputType = exports.AutosuggestInputType || (exports.AutosuggestInputType = {}));
var AutosuggestClient = /** @class */ (function (_super) {
    __extends(AutosuggestClient, _super);
    function AutosuggestClient() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lastReqOpts = { input: '' };
        _this.url = '/autosuggest';
        _this.method = 'get';
        return _this;
    }
    AutosuggestClient.init = function (apiKey, config, transport) {
        return new AutosuggestClient(apiKey, config, transport);
    };
    AutosuggestClient.prototype.query = function (options) {
        this.lastReqOpts = options;
        return __assign(__assign({}, this.autosuggestOptionsToQuery(options)), { input: options.input });
    };
    AutosuggestClient.prototype.validate = function (options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var textOptions, speechOptions, valid, message, lastIndex;
            return __generator(this, function (_c) {
                textOptions = [AutosuggestInputType.Text];
                speechOptions = [
                    AutosuggestInputType.GenericVoice,
                    AutosuggestInputType.NMDP_ASR,
                    AutosuggestInputType.VoconHybrid,
                ];
                valid = !!options;
                message = undefined;
                if (!valid) {
                    message = 'You must provide at least options.input';
                    return [2 /*return*/, { valid: valid, message: message }];
                }
                if (options.input.length < 1) {
                    valid = false;
                    message = 'You must specify an input value';
                }
                if ((_b = (_a = options.clipToCountry) === null || _a === void 0 ? void 0 : _a.filter(function (country) { return country.length > 2; })) === null || _b === void 0 ? void 0 : _b.length) {
                    valid = false;
                    message =
                        'Invalid clip to country. All values must be an ISO 3166-1 alpha-2 country code';
                }
                if (options.clipToBoundingBox &&
                    (options.clipToBoundingBox.southwest.lat >
                        options.clipToBoundingBox.northeast.lat ||
                        options.clipToBoundingBox.southwest.lng >
                            options.clipToBoundingBox.northeast.lng)) {
                    valid = false;
                    message =
                        'Southwest lat must be less than or equal to northeast lat and southwest lng must be less than or equal to northeast lng';
                }
                if (options.clipToPolygon) {
                    if (!Array.isArray(options.clipToPolygon) ||
                        options.clipToPolygon.length < 4 ||
                        options.clipToPolygon.length > 25) {
                        valid = false;
                        message =
                            'Invalid clip to polygon value. Array must contain at least 4 coordinates and no more than 25';
                    }
                    lastIndex = options.clipToPolygon.length - 1;
                    if (options.clipToPolygon[0].lat !== options.clipToPolygon[lastIndex].lat ||
                        options.clipToPolygon[0].lng !== options.clipToPolygon[lastIndex].lng) {
                        valid = false;
                        message =
                            'Invalid clip to polygon value. The polygon bounds must be closed.';
                    }
                }
                if (options.inputType) {
                    if (!__spreadArrays(textOptions, speechOptions).includes(options.inputType)) {
                        valid = false;
                        message =
                            'Invalid input type provided. Must provide a valid input type.';
                    }
                    if (options.language === undefined &&
                        speechOptions.includes(options.inputType)) {
                        valid = false;
                        message = 'You must provide language when using a speech input type';
                    }
                }
                if (options.language && options.language.length !== 2) {
                    valid = false;
                    message = 'Invalid language code. It must be an ISO-639-1 2 letter code.';
                }
                return [2 /*return*/, { valid: valid, message: message }];
            });
        });
    };
    AutosuggestClient.prototype.onSelected = function (selected, initialRequestOptions) {
        if (initialRequestOptions === void 0) { initialRequestOptions = this.lastReqOpts; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.makeClientRequest('post', '/autosuggest-selection', {
                            body: __assign(__assign(__assign({}, this.autosuggestOptionsToQuery(initialRequestOptions)), { 'raw-input': initialRequestOptions.input, selection: selected.words, rank: selected.rank }), (!initialRequestOptions.inputType
                                ? { 'source-api': 'text' }
                                : {
                                    'source-api': initialRequestOptions.inputType === AutosuggestInputType.Text
                                        ? 'text'
                                        : 'voice',
                                })),
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    AutosuggestClient.prototype.autosuggestOptionsToQuery = function (options) {
        var requestOptions = {};
        if (options.nResults !== undefined) {
            requestOptions['n-results'] = options.nResults.toString();
        }
        if (options.focus !== undefined) {
            requestOptions['focus'] = lib_1.coordinatesToString(options.focus);
        }
        if (options.nFocusResults !== undefined) {
            requestOptions['n-focus-results'] = options.nFocusResults.toString();
        }
        if (options.clipToCountry !== undefined &&
            Array.isArray(options.clipToCountry) &&
            options.clipToCountry.length > 0) {
            requestOptions['clip-to-country'] = lib_1.arrayToString(options.clipToCountry);
        }
        if (options.clipToBoundingBox !== undefined) {
            requestOptions['clip-to-bounding-box'] = lib_1.boundsToString(options.clipToBoundingBox);
        }
        if (options.clipToCircle !== undefined) {
            requestOptions['clip-to-circle'] = lib_1.coordinatesToString(options.clipToCircle.center) + "," + options.clipToCircle.radius;
        }
        if (options.clipToPolygon !== undefined) {
            requestOptions['clip-to-polygon'] = options.clipToPolygon
                .map(function (coord) { return lib_1.coordinatesToString(coord); })
                .join(',');
        }
        if (options.inputType !== undefined) {
            requestOptions['input-type'] = options.inputType;
        }
        if (options.language !== undefined) {
            requestOptions['language'] = options.language;
        }
        if (options.preferLand !== undefined) {
            requestOptions['prefer-land'] = options.preferLand.toString();
        }
        return requestOptions;
    };
    return AutosuggestClient;
}(lib_1.ApiClient));
exports.AutosuggestClient = AutosuggestClient;
//# sourceMappingURL=autosuggest.js.map